 AS V1.42 Beta [Bld 102] - source file exprtest.asm - page 1 - 12/9/2015 9:54:42


       1/       0 :                     ; ****************************************************************************************************************
       2/       0 :                     ; ****************************************************************************************************************
       3/       0 :                     ;
       4/       0 :                     ;												Expression Test
       5/       0 :                     ;
       6/       0 :                     ; ****************************************************************************************************************
       7/       0 :                     ; ****************************************************************************************************************
       8/       0 :                     
       9/       0 :                     
      10/       0 :                     	cpu 	sc/mp
      11/       0 :                     
      12/       0 : =0xCA0              Variables = 0xCA0
      13/       0 :                     
      14/       0 :                     ; ****************************************************************************************************************
      15/       0 :                     ;														Macros
      16/       0 :                     ; ****************************************************************************************************************
      17/       0 :                     
      18/       0 :                     lpi	macro	ptr,addr
      19/       0 :                     	ldi 	(addr) / 256
      20/       0 :                     	xpah 	ptr
      21/       0 :                     	ldi 	(addr) & 255
      22/       0 :                     	xpal 	ptr
      23/       0 :                     	endm
      24/       0 :                     
      25/       0 :                     ; ****************************************************************************************************************
      26/       0 :                     ;													Main Program
      27/       0 :                     ; ****************************************************************************************************************
      28/       0 :                     
      29/    9000 :                     	org 	0x9000 												; the ROM starts here
      30/    9000 :                     
      31/    9000 : 68                  	db 		0x68												; this makes it boot straight into this ROM.
      32/    9001 : (MACRO)             	lpi 	p1,Variables
      32/    9001 : C4 0C                       ldi     (VARIABLES) / 256
      32/    9003 : 35                          xpah    P1
      32/    9004 : C4 A0                       ldi     (VARIABLES) & 255
      32/    9006 : 31                          xpal    P1
      33/    9007 : C4 0A               	ldi 	10 													
      34/    9009 : C9 00               	st 		0(p1)												; A = 10
      35/    900B : C4 14               	ldi 	20
      36/    900D : C9 01               	st 		1(p1)												; B = 20
      37/    900F : C4 21               	ldi 	33
      38/    9011 : C9 19               	st 		25(p1) 												; Z = 33
      39/    9013 :                     
      40/    9013 : (MACRO)             	lpi 	p1,0xCB0 											; $CB0 is the pointer
      40/    9013 : C4 0C                       ldi     (0XCB0) / 256
      40/    9015 : 35                          xpah    P1
      40/    9016 : C4 B0                       ldi     (0XCB0) & 255
      40/    9018 : 31                          xpal    P1
      41/    9019 : C4 23               	ldi 	TestData&255 										; reset it.
      42/    901B : C9 00               	st 		0(p1)
      43/    901D : C4 92               	ldi 	TestData/256
      44/    901F : C9 01               	st 		1(p1)
      45/    9021 :                     
      46/    9021 :                     TestLoop:
      47/    9021 : (MACRO)             	lpi 	p3,0xCB0 											; read the pointer into P1.
      47/    9021 : C4 0C                       ldi     (0XCB0) / 256
      47/    9023 : 37                          xpah    P3
      47/    9024 : C4 B0                       ldi     (0XCB0) & 255
      47/    9026 : 33                          xpal    P3
      48/    9027 : C3 00               	ld 		0(p3)
 AS V1.42 Beta [Bld 102] - source file exprtest.asm - page 2 - 12/9/2015 9:54:42


      49/    9029 : 31                  	xpal 	p1
      50/    902A : C3 01               	ld 		1(p3)
      51/    902C : 35                  	xpah 	p1
      52/    902D : C1 00               	ld 		0(p1) 												; reached end of list.
      53/    902F : 98 36               	jz 		Complete
      54/    9031 :                     
      55/    9031 : (MACRO)             	lpi 	p2,0xFFF											; set up stack
      55/    9031 : C4 0F                       ldi     (0XFFF) / 256
      55/    9033 : 36                          xpah    P2
      55/    9034 : C4 FF                       ldi     (0XFFF) & 255
      55/    9036 : 32                          xpal    P2
      56/    9037 : (MACRO)             	lpi 	p3,EvaluateExpression-1
      56/    9037 : C4 90                       ldi     (EVALUATEEXPRESSION-1) / 256
      56/    9039 : 37                          xpah    P3
      56/    903A : C4 6B                       ldi     (EVALUATEEXPRESSION-1) & 255
      56/    903C : 33                          xpal    P3
      57/    903D : 3F                  	xppc 	p3
      58/    903E : 01                  	xae 														; result in E
      59/    903F : 06                  	csa 														; check error
      60/    9040 :                     
      61/    9040 : 94 22               	jp 		FailError
      62/    9042 : (MACRO)             	lpi 	p3,0xCB0 											; read the pointer into P1.
      62/    9042 : C4 0C                       ldi     (0XCB0) / 256
      62/    9044 : 37                          xpah    P3
      62/    9045 : C4 B0                       ldi     (0XCB0) & 255
      62/    9047 : 33                          xpal    P3
      63/    9048 : C3 00               	ld 		0(p3)
      64/    904A : 31                  	xpal 	p1
      65/    904B : C3 01               	ld 		1(p3)
      66/    904D : 35                  	xpah 	p1
      67/    904E :                     FindEOS: 														; find end of string
      68/    904E : C5 01               	ld 		@1(p1)
      69/    9050 : 9C FC               	jnz 	FindEOS
      70/    9052 : C5 01               	ld 		@1(p1) 												; get expected result
      71/    9054 : 60                  	xre
      72/    9055 : 9C 08               	jnz 	FailWrong 											; result doesn't match.
      73/    9057 : 31                  	xpal 	p1 													; write pointer back.
      74/    9058 : CB 00               	st 		0(p3) 												
      75/    905A : 35                  	xpah 	p1
      76/    905B : CB 01               	st 		1(p3)
      77/    905D : 90 C2               	jmp 	TestLoop
      78/    905F :                     
      79/    905F :                     FailWrong:
      80/    905F : C4 FF               	ldi 	0xFF
      81/    9061 : 01                  	xae
      82/    9062 : 90 FB               	jmp 	FailWrong
      83/    9064 :                     
      84/    9064 :                     FailError:
      85/    9064 : 40                  	lde 		
      86/    9065 : 90 FD               	jmp 	FailError
      87/    9067 :                     
      88/    9067 :                     Complete:
      89/    9067 : C4 00               	ldi 	0
      90/    9069 : 01                  	xae
      91/    906A : 90 FB               	jmp 	Complete
      92/    906C :                     
      93/    906C :                     	include expression.asm 										; screen I/O stuff.
(1)    1/    906C :                     ; ****************************************************************************************************************
(1)    2/    906C :                     ; ****************************************************************************************************************
(1)    3/    906C :                     ;
 AS V1.42 Beta [Bld 102] - source file exprtest.asm(expression.asm) - page 3 - 12/9/2015 9:54:42


(1)    4/    906C :                     ;											Expression, MINOL
(1)    5/    906C :                     ;											=================
(1)    6/    906C :                     ;
(1)    7/    906C :                     ;	Terms are :
(1)    8/    906C :                     ;		0-9* 		Numeric constant
(1)    9/    906C :                     ;		A-Z 		Variables
(1)   10/    906C :                     ;		(h,l) 		Memory direct access
(1)   11/    906C :                     ;		! 			Random number
(1)   12/    906C :                     ;
(1)   13/    906C :                     ;	Operators are:	+,-,*,/
(1)   14/    906C :                     ;
(1)   15/    906C :                     ; ****************************************************************************************************************
(1)   16/    906C :                     ; ****************************************************************************************************************
(1)   17/    906C :                     
(1)   18/    906C :                     ; ****************************************************************************************************************
(1)   19/    906C :                     ; ****************************************************************************************************************
(1)   20/    906C :                     ;
(1)   21/    906C :                     ;				Evaluate an expression at P1. Returns A = Result, CY/L = 1 or A = Error, CY/L = 0
(1)   22/    906C :                     ;
(1)   23/    906C :                     ;	Preserves registers except A and P1, which is advanced to the end of the expression - on exit it points to
(1)   24/    906C :                     ;	NULL or the next character - so 2+3, will return A = 5, CY/L = 1,P1 pointing to the comma.
(1)   25/    906C :                     ;
(1)   26/    906C :                     ;	This isn't re-entrant.
(1)   27/    906C :                     ;
(1)   28/    906C :                     ; ****************************************************************************************************************
(1)   29/    906C :                     ; ****************************************************************************************************************
(1)   30/    906C :                     
(1)   31/    906C :                     EvaluateExpression:
(1)   32/    906C :                     
(1)   33/    906C : =0x0                __EEValue = 0 													; stack positions of current value & pending
(1)   34/    906C : =0x1                __EEOperator = 1 												; operator.
(1)   35/    906C : =0x1A               __EERandomOffset = 26 											; offset to random seed from p3
(1)   36/    906C :                     
(1)   37/    906C : =0x4                ERROR_BadTerm = 4
(1)   38/    906C : =0x5                ERROR_Syntax = 5
(1)   39/    906C : =0x7                ERROR_DivZero = 7
(1)   40/    906C :                     
(1)   41/    906C : 40                  	lde 														; save E on stack
(1)   42/    906D : CE FF               	st 		@-1(p2)
(1)   43/    906F : 37                  	xpah 	p3 													; save P3 on stack
(1)   44/    9070 : CE FF               	st 		@-1(p2)
(1)   45/    9072 : 33                  	xpal 	p3
(1)   46/    9073 : CE FF               	st 		@-1(p2)
(1)   47/    9075 : C4 2B               	ldi 	'+'													; pending expression (+) at +1(p2)
(1)   48/    9077 : CE FF               	st 		@-1(p2)												; set up so done "0+" in theory :)
(1)   49/    9079 : C4 00               	ldi 	0 													; current value (0) at +0(p2)
(1)   50/    907B : CE FF               	st 		@-1(p2)
(1)   51/    907D : 90 39               	jmp 	__EELoop
(1)   52/    907F :                     
(1)   53/    907F :                     ; ****************************************************************************************************************
(1)   54/    907F :                     ;											! term (random number)
(1)   55/    907F :                     ; ****************************************************************************************************************
(1)   56/    907F :                     
(1)   57/    907F :                     __EERandom:
(1)   58/    907F : C3 1A               	ld 		__EERandomOffset(p3) 								; does it need initialising
(1)   59/    9081 : DB 1B               	or 		__EERandomOffset+1(p3)
(1)   60/    9083 : 9C 08               	jnz		__EERandom_IsInitialised
(1)   61/    9085 : C4 E1               	ldi 	0xE1												; if so, set to $ACE1
(1)   62/    9087 : CB 1A               	st 		__EERandomOffset(p3)
(1)   63/    9089 : C4 AC               	ldi 	0xAC
 AS V1.42 Beta [Bld 102] - source file exprtest.asm(expression.asm) - page 4 - 12/9/2015 9:54:42


(1)   64/    908B : CB 1B               	st 		__EERandomOffset+1(p3)
(1)   65/    908D :                     __EERandom_IsInitialised:
(1)   66/    908D : C3 1B               	ld 		__EERandomOffset+1(p3) 								; shift seed right into carry
(1)   67/    908F : 02                  	ccl
(1)   68/    9090 : 1F                  	rrl
(1)   69/    9091 : CB 1B               	st 		__EERandomOffset+1(p3)
(1)   70/    9093 : C3 1A               	ld 		__EERandomOffset(p3)
(1)   71/    9095 : 1F                  	rrl
(1)   72/    9096 : CB 1A               	st 		__EERandomOffset(p3)
(1)   73/    9098 : 06                  	csa  														; if the LSB was 1
(1)   74/    9099 : 94 06               	jp 		__EERandomNoToggle
(1)   75/    909B : C3 1B               	ld 		__EERandomOffset+1(p3)
(1)   76/    909D : E4 B4               	xri 	0xB4
(1)   77/    909F : CB 1B               	st 		__EERandomOffset+1(p3)
(1)   78/    90A1 :                     __EERandomNoToggle:
(1)   79/    90A1 : C3 1A               	ld 		__EERandomOffset(p3) 								; XOR two values together into E.
(1)   80/    90A3 : E3 1B               	xor 	__EERandomOffset+1(p3)
(1)   81/    90A5 : 01                  	xae
(1)   82/    90A6 : 90 64               	jmp 	__EECalculate3
(1)   83/    90A8 :                     
(1)   84/    90A8 :                     ; ****************************************************************************************************************
(1)   85/    90A8 :                     ;												  Read data (h,l)
(1)   86/    90A8 :                     ; ****************************************************************************************************************
(1)   87/    90A8 :                     
(1)   88/    90A8 :                     __EEDataAccess:
(1)   89/    90A8 : (MACRO)             	lpi 	p3,ReadHLMemory-1 									; read HL memory into A
(1)   89/    90A8 : C4 91                       ldi     (READHLMEMORY-1) / 256
(1)   89/    90AA : 37                          xpah    P3
(1)   89/    90AB : C4 CC                       ldi     (READHLMEMORY-1) & 255
(1)   89/    90AD : 33                          xpal    P3
(1)   90/    90AE : 3F                  	xppc 	p3
(1)   91/    90AF : 01                  	xae 														; save in E
(1)   92/    90B0 : 06                  	csa 														; if carry is set then calculate as normal.
(1)   93/    90B1 : D4 80               	ani 	0x80
(1)   94/    90B3 : 9C 57               	jnz 	__EECalculate3
(1)   95/    90B5 : 40                  	lde 														; get error code
(1)   96/    90B6 : 90 7D               	jmp 	__EEError
(1)   97/    90B8 :                     
(1)   98/    90B8 :                     ; ****************************************************************************************************************
(1)   99/    90B8 :                     ;
(1)  100/    90B8 :                     ;											Main loop - get another term.
(1)  101/    90B8 :                     ;
(1)  102/    90B8 :                     ; ****************************************************************************************************************
(1)  103/    90B8 :                     __EELoop:
(1)  104/    90B8 : C4 A0               	ldi 	Variables&255 										; point P3 to variables.
(1)  105/    90BA : 33                  	xpal 	p3
(1)  106/    90BB : C4 0C               	ldi 	Variables/256
(1)  107/    90BD : 37                  	xpah 	p3
(1)  108/    90BE :                     
(1)  109/    90BE : C1 00               	ld 		(p1) 												; check end of string.
(1)  110/    90C0 : 98 71               	jz 		__EEBadTerm 				
(1)  111/    90C2 : C5 01               	ld 		@1(p1) 												; get next character till non-space
(1)  112/    90C4 : E4 20               	xri		' '
(1)  113/    90C6 : 98 F0               	jz 		__EELoop
(1)  114/    90C8 :                     
(1)  115/    90C8 : E4 08               	xri 	' ' ! '('											; if ( then (x,y) memory access.
(1)  116/    90CA : 98 DC               	jz 		__EEDataAccess
(1)  117/    90CC : E4 09               	xri 	'(' ! '!' 											; if ! then random number.
(1)  118/    90CE : 98 AF               	jz 		__EERandom
(1)  119/    90D0 :                     
 AS V1.42 Beta [Bld 102] - source file exprtest.asm(expression.asm) - page 5 - 12/9/2015 9:54:42


(1)  120/    90D0 : C1 FF               	ld 		-1(p1) 												; get character.
(1)  121/    90D2 : 02                  	ccl
(1)  122/    90D3 : F4 50               	adi 	128-'0' 											; if < '0' then there is an error.
(1)  123/    90D5 : 94 5C               	jp 		__EEBadTerm
(1)  124/    90D7 : F4 76               	adi 	0xFF-0x89 											; if > '9' then it is not a digit.
(1)  125/    90D9 : 94 20               	jp 		__EENotDigit 										; so check for A-Z
(1)  126/    90DB :                     
(1)  127/    90DB :                     ; ****************************************************************************************************************
(1)  128/    90DB :                     ;
(1)  129/    90DB :                     ;								We have a constant value 0-255, extract it
(1)  130/    90DB :                     ;
(1)  131/    90DB :                     ; ****************************************************************************************************************
(1)  132/    90DB :                     
(1)  133/    90DB : C1 FF               	ld 		-1(p1) 												; re-read digit
(1)  134/    90DD : D4 0F               	ani 	0x0F 												; make number
(1)  135/    90DF : 01                  	xae 														; put in E.
(1)  136/    90E0 :                     __EEConstantLoop:
(1)  137/    90E0 : C1 00               	ld 		(p1) 												; keep going until non digit found
(1)  138/    90E2 : 02                  	ccl
(1)  139/    90E3 : F4 50               	adi 	128-'0'												; exit if outside range 0-9.
(1)  140/    90E5 : 94 63               	jp 		__EECalculate 										; calculate the result.
(1)  141/    90E7 : F4 76               	adi 	0xFF-0x89 
(1)  142/    90E9 : 94 5F               	jp 		__EECalculate 
(1)  143/    90EB : 40                  	lde 														; A = E
(1)  144/    90EC : 02                  	ccl
(1)  145/    90ED : 70                  	ade 														; A = E * 2
(1)  146/    90EE : 70                  	ade 														; A = E * 3
(1)  147/    90EF : 70                  	ade 														; A = E * 4
(1)  148/    90F0 : 70                  	ade 														; A = E * 5
(1)  149/    90F1 : 01                  	xae 														; E = E * 5
(1)  150/    90F2 : C5 01               	ld 		@1(p1) 												; read digit and bump pointer.
(1)  151/    90F4 : D4 0F               	ani 	0x0F 												; make number
(1)  152/    90F6 : 70                  	ade 														; add E * 5 twice, e.g. E * 10
(1)  153/    90F7 : 70                  	ade
(1)  154/    90F8 : 01                  	xae 														; put into E
(1)  155/    90F9 : 90 E5               	jmp 	__EEConstantLoop
(1)  156/    90FB :                     
(1)  157/    90FB :                     ; ****************************************************************************************************************
(1)  158/    90FB :                     ;
(1)  159/    90FB :                     ;												Check for variable A-Z.
(1)  160/    90FB :                     ;
(1)  161/    90FB :                     ; ****************************************************************************************************************
(1)  162/    90FB :                     __EENotDigit:
(1)  163/    90FB : C1 FF               	ld 		-1(p1) 												; read character again.
(1)  164/    90FD : 02                  	ccl
(1)  165/    90FE : F4 3F               	adi 	128-'A' 											; check in range A-Z.
(1)  166/    9100 : 94 31               	jp 		__EEBadTerm 										; if not in that range, we failed.
(1)  167/    9102 : F4 66               	adi 	0x80-26 
(1)  168/    9104 : 94 2D               	jp 		__EEBadTerm 
(1)  169/    9106 : F4 1A               	adi 	26 													; make it 0-25 (A-Z)
(1)  170/    9108 : 01                  	xae 														; E is variable number 0-25
(1)  171/    9109 : C3 80               	ld 		-0x80(p3) 											; read variable value.
(1)  172/    910B : 01                  	xae 														; put in E
(1)  173/    910C :                     __EECalculate3:
(1)  174/    910C : 90 3C               	jmp 	__EECalculate 										; calculate result of delayed operation.
(1)  175/    910E :                     ;
(1)  176/    910E :                     ;	Bump over spaces to find operator.
(1)  177/    910E :                     ;
(1)  178/    910E :                     __EEGetNextOperator:
(1)  179/    910E : 03                  	scl 														; set Carry/Link indicating okay.
 AS V1.42 Beta [Bld 102] - source file exprtest.asm(expression.asm) - page 6 - 12/9/2015 9:54:42


(1)  180/    910F : C1 00               	ld 		0(p1) 												; skip spaces, checking for exit.
(1)  181/    9111 : 98 25               	jz 		__EEExit 											; exit on NULL.
(1)  182/    9113 : E4 20               	xri 	' ' 												
(1)  183/    9115 : 9C 04               	jnz 	__EECheckOperator
(1)  184/    9117 : C5 01               	ld 		@1(p1)
(1)  185/    9119 : 90 F3               	jmp 	__EEGetNextOperator
(1)  186/    911B :                     ;
(1)  187/    911B :                     ;	Found something not NULL or space - see if it is an operator + - * /, in which case go round again.
(1)  188/    911B :                     ;
(1)  189/    911B :                     __EECheckOperator:
(1)  190/    911B : C1 00               	ld 		(p1) 												; get operator
(1)  191/    911D : E4 2B               	xri 	'+' 												; check if it is +,-,*,/
(1)  192/    911F : 98 0C               	jz 		__EEDoOperator
(1)  193/    9121 : E4 06               	xri 	'+'!'-'
(1)  194/    9123 : 98 08               	jz 		__EEDoOperator
(1)  195/    9125 : E4 07               	xri 	'-'!'*'
(1)  196/    9127 : 98 04               	jz 		__EEDoOperator
(1)  197/    9129 : E4 05               	xri 	'*'!'/'
(1)  198/    912B : 9C 0B               	jnz 	__EEExit 											; if not any of those, then exit.
(1)  199/    912D :                     __EEDoOperator:
(1)  200/    912D : C5 01               	ld 		@1(p1) 												; get and save operator
(1)  201/    912F : CA 01               	st 		1(p2)
(1)  202/    9131 : 90 85               	jmp		__EELoop 											; go get another term. 			
(1)  203/    9133 :                     ;
(1)  204/    9133 :                     ;	Handle Errors (1) Bad Term (2) Divide by zero.
(1)  205/    9133 :                     ;
(1)  206/    9133 :                     __EEBadTerm:
(1)  207/    9133 : C4 04               	ldi 	ERROR_BadTerm 										; syntax in expression
(1)  208/    9135 :                     __EEError:
(1)  209/    9135 : CA 00               	st 		__EEValue(p2) 										; error code as result.
(1)  210/    9137 : 02                  	ccl 														; CY/L clear indicating error
(1)  211/    9138 :                     ;
(1)  212/    9138 :                     ;	Exit with the value in __EEValue(p2) and CY/L set accordingly.
(1)  213/    9138 :                     ;
(1)  214/    9138 :                     __EEExit:
(1)  215/    9138 : C6 02               	ld 		@2(p2) 												; skip over saved values
(1)  216/    913A : C6 01               	ld 		@1(p2) 												; restore P3
(1)  217/    913C : 33                  	xpal 	p3
(1)  218/    913D : C6 01               	ld 		@1(p2)
(1)  219/    913F : 37                  	xpah 	p3
(1)  220/    9140 : C6 01               	ld 		@1(p2) 												; restore E
(1)  221/    9142 : 01                  	xae 
(1)  222/    9143 : C2 FB               	ld 		-5(p2)												; get answer into A
(1)  223/    9145 : 3F                  	xppc 	p3 													; and exit.
(1)  224/    9146 :                     
(1)  225/    9146 :                     __EE_Divide_Zero:
(1)  226/    9146 : C4 07               	ldi 	ERROR_DivZero 										; come here for divide by zero.	
(1)  227/    9148 : 90 EB               	jmp 	__EEError
(1)  228/    914A :                     
(1)  229/    914A :                     ; ****************************************************************************************************************
(1)  230/    914A :                     ;
(1)  231/    914A :                     ;							Do 0(p2) op E where op is 1(p2) and is a valid operator.
(1)  232/    914A :                     ;	
(1)  233/    914A :                     ; ****************************************************************************************************************
(1)  234/    914A :                     
(1)  235/    914A :                     __EECalculate:
(1)  236/    914A : C2 01               	ld 		__EEOperator(p2) 									; get the operator.
(1)  237/    914C : E4 2D               	xri 	'-'
(1)  238/    914E : 98 10               	jz 		__EE_Subtract
(1)  239/    9150 : E4 07               	xri 	'-'!'*'
 AS V1.42 Beta [Bld 102] - source file exprtest.asm(expression.asm) - page 7 - 12/9/2015 9:54:42


(1)  240/    9152 : 98 14               	jz 		__EE_Multiply
(1)  241/    9154 : E4 05               	xri 	'*'!'/'
(1)  242/    9156 : 98 32               	jz 		__EE_Divide
(1)  243/    9158 :                     
(1)  244/    9158 :                     ; ****************************************************************************************************************
(1)  245/    9158 :                     ;														  Add.
(1)  246/    9158 :                     ; ****************************************************************************************************************
(1)  247/    9158 :                     
(1)  248/    9158 :                     __EE_Add:
(1)  249/    9158 : 02                  	ccl
(1)  250/    9159 : C2 00               	ld 		__EEValue(p2)
(1)  251/    915B : 70                  	ade
(1)  252/    915C : CA 00               	st 		__EEValue(p2)
(1)  253/    915E : 90 AE               	jmp 	__EEGetNextOperator
(1)  254/    9160 :                     
(1)  255/    9160 :                     ; ****************************************************************************************************************
(1)  256/    9160 :                     ;														Subtract
(1)  257/    9160 :                     ; ****************************************************************************************************************
(1)  258/    9160 :                     
(1)  259/    9160 :                     __EE_Subtract:
(1)  260/    9160 : 03                  	scl
(1)  261/    9161 : C2 00               	ld 		__EEValue(p2)
(1)  262/    9163 : 78                  	cae
(1)  263/    9164 : CA 00               	st 		__EEValue(p2)
(1)  264/    9166 :                     __EEGetNextOperator2:
(1)  265/    9166 : 90 A6               	jmp 	__EEGetNextOperator
(1)  266/    9168 :                     
(1)  267/    9168 :                     ; ****************************************************************************************************************
(1)  268/    9168 :                     ;														Multiply
(1)  269/    9168 :                     ; ****************************************************************************************************************
(1)  270/    9168 :                     
(1)  271/    9168 :                     __EE_Multiply:										
(1)  272/    9168 : C2 00               	ld 		__EEValue(p2) 													; a = __EEOperator(p2)
(1)  273/    916A : CA 01               	st 		__EEOperator(p2)
(1)  274/    916C : C4 00               	ldi 	0																; res = __EEValue(p2)
(1)  275/    916E : CA 00               	st 		__EEValue(p2) 													; clear it.
(1)  276/    9170 :                     __EE_MultiplyLoop:
(1)  277/    9170 : 40                  	lde  																	; if B == 0 then we are done.
(1)  278/    9171 : 98 9B               	jz 		__EEGetNextOperator
(1)  279/    9173 : D4 01               	ani 	1 																; if B LSB is non zero.
(1)  280/    9175 : 98 07               	jz 		__EE_Multiply_B0IsZero
(1)  281/    9177 : C2 01               	ld 		__EEOperator(p2) 												; add A to Result
(1)  282/    9179 : 02                  	ccl
(1)  283/    917A : F2 00               	add 	__EEValue(p2)
(1)  284/    917C : CA 00               	st 		__EEValue(p2)
(1)  285/    917E :                     __EE_Multiply_B0IsZero:
(1)  286/    917E : 40                  	lde 																	; shift B right
(1)  287/    917F : 1C                  	sr
(1)  288/    9180 : 01                  	xae
(1)  289/    9181 : C2 01               	ld 		__EEOperator(p2) 												; shift A left
(1)  290/    9183 : 02                  	ccl
(1)  291/    9184 : F2 01               	add 	__EEOperator(p2)
(1)  292/    9186 : CA 01               	st 		__EEOperator(p2)
(1)  293/    9188 : 90 E6               	jmp 	__EE_MultiplyLoop
(1)  294/    918A :                     
(1)  295/    918A :                     ;	res = 0
(1)  296/    918A :                     ;	while (b != 0):
(1)  297/    918A :                     ;		if (b & 1) != 0:
(1)  298/    918A :                     ;		 	res = (res + a) & 0xFF
(1)  299/    918A :                     ;		a = (a << 1) & 0xFF
 AS V1.42 Beta [Bld 102] - source file exprtest.asm(expression.asm) - page 8 - 12/9/2015 9:54:42


(1)  300/    918A :                     ;		b = (b >> 1) & 0xFF
(1)  301/    918A :                     
(1)  302/    918A :                     
(1)  303/    918A :                     ; ****************************************************************************************************************
(1)  304/    918A :                     ;														Divide
(1)  305/    918A :                     ; ****************************************************************************************************************
(1)  306/    918A :                     
(1)  307/    918A :                     __EE_Divide:
(1)  308/    918A : 40                  	lde 																	; if denominator zero, error 2.
(1)  309/    918B : 98 B9               	jz 		__EE_Divide_Zero
(1)  310/    918D : C2 00               	ld 		__EEValue(p2) 													; numerator into __EEOperator(p2)
(1)  311/    918F : CA 01               	st 		__EEOperator(p2) 												; denominator is in E
(1)  312/    9191 : C4 00               	ldi 	0
(1)  313/    9193 : CA 00               	st 		__EEValue(p2)													; quotient in __EEValue(p2)
(1)  314/    9195 : CA FF               	st 		-1(p2) 															; remainder in -1(p2)
(1)  315/    9197 : C4 80               	ldi 	0x80 									
(1)  316/    9199 : CA FE               	st 		-2(p2) 															; bit in -2(p2)
(1)  317/    919B :                     
(1)  318/    919B :                     __EE_Divide_Loop:
(1)  319/    919B : C2 FE               	ld 		-2(p2) 															; exit if bit = 0,we've finished.
(1)  320/    919D : 98 C7               	jz 		__EEGetNextOperator2
(1)  321/    919F :                     
(1)  322/    919F : 02                  	ccl 	 																; shift remainder left.
(1)  323/    91A0 : C2 FF               	ld 		-1(p2)
(1)  324/    91A2 : F2 FF               	add 	-1(p2)
(1)  325/    91A4 : CA FF               	st 		-1(p2)
(1)  326/    91A6 :                     
(1)  327/    91A6 : C2 01               	ld 		__EEOperator(p2)												; get numerator.
(1)  328/    91A8 : 94 02               	jp 		__EE_Divide_Numerator_Positive
(1)  329/    91AA : AA FF               	ild 	-1(p2)  														; if numerator -ve, increment remainder.
(1)  330/    91AC :                     __EE_Divide_Numerator_Positive:
(1)  331/    91AC :                     
(1)  332/    91AC : C2 FF               	ld 		-1(p2) 															; calculate remainder - denominator
(1)  333/    91AE : 03                  	scl
(1)  334/    91AF : 78                  	cae 
(1)  335/    91B0 : CA FD               	st 		-3(p2) 															; save in temp -3(p2)
(1)  336/    91B2 : 06                  	csa 																	; if temp >= 0, CY/L is set
(1)  337/    91B3 : 94 0A               	jp 		__EE_Divide_Temp_Positive
(1)  338/    91B5 :                     
(1)  339/    91B5 : C2 FD               	ld 		-3(p2) 															; copy temp to remainder
(1)  340/    91B7 : CA FF               	st 		-1(p2)
(1)  341/    91B9 : C2 FE               	ld 		-2(p2) 															; or bit into quotient
(1)  342/    91BB : DA 00               	or 		__EEValue(p2)
(1)  343/    91BD : CA 00               	st 		__EEValue(p2)
(1)  344/    91BF :                     __EE_Divide_Temp_Positive:
(1)  345/    91BF :                     
(1)  346/    91BF : C2 FE               	ld 		-2(p2) 															; shift bit right
(1)  347/    91C1 : 1C                  	sr
(1)  348/    91C2 : CA FE               	st 		-2(p2)
(1)  349/    91C4 :                     
(1)  350/    91C4 : C2 01               	ld 		__EEOperator(p2)												; shift numerator positive
(1)  351/    91C6 : 02                  	ccl
(1)  352/    91C7 : F2 01               	add 	__EEOperator(p2)
(1)  353/    91C9 : CA 01               	st 		__EEOperator(p2)
(1)  354/    91CB : 90 CE               	jmp 	__EE_Divide_Loop
(1)  355/    91CD :                     
(1)  356/    91CD :                     ;	quotient = 0			
(1)  357/    91CD :                     ;	remainder = 0 			
(1)  358/    91CD :                     ;	bit = 0x80
(1)  359/    91CD :                     ;
 AS V1.42 Beta [Bld 102] - source file exprtest.asm(expression.asm) - page 9 - 12/9/2015 9:54:42


(1)  360/    91CD :                     ;	while (bit != 0):
(1)  361/    91CD :                     ;
(1)  362/    91CD :                     ;		remainder = remainder << 1
(1)  363/    91CD :                     ;		if numerator & 0x80 != 0:
(1)  364/    91CD :                     ;			remainder = (remainder + 1) & 0xFF
(1)  365/    91CD :                     ;		temp = remainder - denominator
(1)  366/    91CD :                     ;		if temp >= 0:
(1)  367/    91CD :                     ;			remainder = temp
(1)  368/    91CD :                     ;			quotient = quotient | bit
(1)  369/    91CD :                     ;		bit = (bit >> 1) & 0xFF
(1)  370/    91CD :                     ;		numerator = (numerator << 1) & 0xFF
(1)  371/    91CD :                     
(1)  372/    91CD :                     
(1)  373/    91CD :                     ; ****************************************************************************************************************
(1)  374/    91CD :                     ; ****************************************************************************************************************
(1)  375/    91CD :                     ;
(1)  376/    91CD :                     ;		P1 points to <expr>,<expr>) - parse out the values, read memory location and return in A, 
(1)  377/    91CD :                     ;		CY/L = 0 => error A. -2(p2) and -1(p2) should contain the address if we need to read it later.
(1)  378/    91CD :                     ;	
(1)  379/    91CD :                     ; ****************************************************************************************************************
(1)  380/    91CD :                     ; ****************************************************************************************************************
(1)  381/    91CD :                     
(1)  382/    91CD :                     ReadHLMemory:
(1)  383/    91CD :                     
(1)  384/    91CD : =0x3                RHL_AddrLo = 3
(1)  385/    91CD : =0x4                RHL_AddrHi = 4
(1)  386/    91CD : =0xFFFFFFFFF..      RHL_Result = -1
(1)  387/    91CD :                     
(1)  388/    91CD : 40                  	lde 														; save E
(1)  389/    91CE : CE FD               	st 		@-3(p2) 											; save leaving room for addr.lo and addr.hi
(1)  390/    91D0 : 37                  	xpah 	p3 													; save P3
(1)  391/    91D1 : CE FF               	st 		@-1(p2)
(1)  392/    91D3 : 33                  	xpal 	p3
(1)  393/    91D4 : CE FF               	st 		@-1(p2)
(1)  394/    91D6 : C4 2C               	ldi 	',' 												; first seperator is a comma.
(1)  395/    91D8 : 01                  	xae
(1)  396/    91D9 :                     __RHLLoop:	
(1)  397/    91D9 : C2 03               	ld 		RHL_AddrLo(p2) 										; copy addr lo to addr hi
(1)  398/    91DB : CA 04               	st 		RHL_AddrHi(p2)
(1)  399/    91DD : (MACRO)             	lpi 	p3,EvaluateExpression-1 							; evaluate the expression.
(1)  399/    91DD : C4 90                       ldi     (EVALUATEEXPRESSION-1) / 256
(1)  399/    91DF : 37                          xpah    P3
(1)  399/    91E0 : C4 6B                       ldi     (EVALUATEEXPRESSION-1) & 255
(1)  399/    91E2 : 33                          xpal    P3
(1)  400/    91E3 : 3F                  	xppc 	p3
(1)  401/    91E4 : CA 03               	st 		RHL_AddrLo(p2) 										; save in addr.lo
(1)  402/    91E6 : 06                  	csa  														; if error
(1)  403/    91E7 : 94 25               	jp 		__RHLError
(1)  404/    91E9 :                     __RHLSkip:
(1)  405/    91E9 : C1 00               	ld 		0(p1) 												; check for end of line
(1)  406/    91EB : 98 25               	jz 		__RHLSyntax
(1)  407/    91ED : C5 01               	ld 		@1(p1) 												; fetch next character
(1)  408/    91EF : E4 20               	xri 	' ' 												; skip over spaces.
(1)  409/    91F1 : 98 F6               	jz 		__RHLSkip 
(1)  410/    91F3 : C1 FF               	ld 		-1(p1) 												; get fetched character
(1)  411/    91F5 : 60                  	xre 														; is it the one we wanted ?
(1)  412/    91F6 : 9C 1A               	jnz 	__RHLSyntax 										; no, so fail.
(1)  413/    91F8 : 40                  	lde 														; get character
(1)  414/    91F9 : E4 05               	xri 	','!')'												; switch from , to )
(1)  415/    91FB : 01                  	xae 														; put back in E.
 AS V1.42 Beta [Bld 102] - source file exprtest.asm(expression.asm) - page 10 - 12/9/2015 9:54:42


(1)  416/    91FC : 40                  	lde 														; if it is ')' , go back.
(1)  417/    91FD : E4 29               	xri 	')'
(1)  418/    91FF : 98 D8               	jz 		__RHLLoop 
(1)  419/    9201 :                     
(1)  420/    9201 : C2 03               	ld 		RHL_AddrLo(p2) 										; load address into P3
(1)  421/    9203 : 33                  	xpal 	p3
(1)  422/    9204 : C2 04               	ld 		RHL_AddrHi(p2)
(1)  423/    9206 : 37                  	xpah 	p3
(1)  424/    9207 : C3 00               	ld 		0(p3) 												; read byte there
(1)  425/    9209 : CA FF               	st 		-1(p2) 												; save in return value space.
(1)  426/    920B : 03                  	scl 														; set CY/L indicating no error
(1)  427/    920C : 90 09               	jmp 	__RHLExit 											; and exit.
(1)  428/    920E :                     
(1)  429/    920E :                     __RHLError:
(1)  430/    920E : C2 03               	ld 		RHL_AddrLo(p2) 										; read error code
(1)  431/    9210 : 90 02               	jmp 	__RHLSaveErrorAndExit
(1)  432/    9212 :                     
(1)  433/    9212 :                     __RHLSyntax:
(1)  434/    9212 : C4 05               	ldi 	ERROR_Syntax 										; syntax error
(1)  435/    9214 :                     __RHLSaveErrorAndExit:
(1)  436/    9214 : CA FF               	st 		RHL_Result(p2)										; save as error code
(1)  437/    9216 : 02                  	ccl 														; return error
(1)  438/    9217 :                     
(1)  439/    9217 :                     __RHLExit:														; exit with result in RHL_AddrLo.
(1)  440/    9217 : C6 01               	ld 		@1(p2) 												; reload P3
(1)  441/    9219 : 33                  	xpal 	p3
(1)  442/    921A : C6 01               	ld 		@1(p2)
(1)  443/    921C : 37                  	xpah 	p3
(1)  444/    921D : C6 03               	ld 		@3(p2)
(1)  445/    921F : 01                  	xae
(1)  446/    9220 : C2 FA               	ld 		-6(p2) 												; get the return value
(1)  447/    9222 : 3F                  	xppc 	p3 													; and exit.
(1)  448/    9223 :                     
      94/    9223 :                     
      95/    9223 :                     TestData:
      96/    9223 : 33 2B 34 2A 35 2F   	db 		"3+4*5/2",0,17
                    32 00 11 
      97/    922C : 31 2B 31 00 02      	db 		"1+1",0,2
      98/    9231 : 00                  	db		0
      99/    9232 :                     
     100/    9232 :                     
 AS V1.42 Beta [Bld 102] - source file exprtest.asm - page 11 - 12/9/2015 9:54:42


  symbol table (* = unused):
  ------------------------

*ARCHITECTURE :  i386-unknown-win32 - | *BIGENDIAN :                      0 - |
*BRANCHEXT :                      0 - | *CASESENSITIVE :                  0 - |
 COMPLETE :                    9067 C | *CONSTPI :        3.141592653589793 - |
*DATE :                   12/9/2015 - |  ERROR_BADTERM :                  4 - |
 ERROR_DIVZERO :                  7 - |  ERROR_SYNTAX :                   5 - |
 EVALUATEEXPRESSION :          906C C |  FAILERROR :                   9064 C |
 FAILWRONG :                   905F C | *FALSE :                          0 - |
 FINDEOS :                     904E C | *FULLPMMU :                       1 - |
*HAS64 :                          1 - | *HASDSP :                         0 - |
*HASFPU :                         0 - | *HASPMMU :                        0 - |
*INEXTMODE :                      0 - | *INLWORDMODE :                    0 - |
*INMAXMODE :                      0 - | *INSRCMODE :                      0 - |
*INSUPMODE :                      0 - | *LISTON :                         1 - |
*MACEXP :                         1 - | *MOMCPU :                         C - |
*MOMCPUNAME :                 SC/MP - | *NESTMAX :                      100 - |
*PACKING :                        0 - | *PADDING :                        1 - |
 READHLMEMORY :                91CD C | *RELAXED :                        0 - |
 RHL_ADDRHI :                     4 - |  RHL_ADDRLO :                     3 - |
 RHL_RESULT :      FFFFFFFFFFFFFFFF - |  TESTDATA :                    9223 C |
 TESTLOOP :                    9021 C | *TIME :                     9:54:42 - |
*TRUE :                           1 - |  VARIABLES :                    CA0 - |
*VERSION :                     142F - |  __EEBADTERM :                 9133 C |
 __EECALCULATE :               914A C |  __EECALCULATE3 :              910C C |
 __EECHECKOPERATOR :           911B C |  __EECONSTANTLOOP :            90E0 C |
 __EEDATAACCESS :              90A8 C |  __EEDOOPERATOR :              912D C |
 __EEERROR :                   9135 C |  __EEEXIT :                    9138 C |
 __EEGETNEXTOPERATOR :         910E C |  __EEGETNEXTOPERATOR2 :        9166 C |
 __EELOOP :                    90B8 C |  __EENOTDIGIT :                90FB C |
 __EEOPERATOR :                   1 - |  __EERANDOM :                  907F C |
 __EERANDOMNOTOGGLE :          90A1 C |  __EERANDOMOFFSET :              1A - |
 __EERANDOM_ISINITIALISED :    908D C |  __EEVALUE :                      0 - |
*__EE_ADD :                    9158 C |  __EE_DIVIDE :                 918A C |
 __EE_DIVIDE_LOOP :            919B C |
 __EE_DIVIDE_NUMERATOR_POSITIVE :                                      91AC C |
 __EE_DIVIDE_TEMP_POSITIVE :   91BF C |  __EE_DIVIDE_ZERO :            9146 C |
 __EE_MULTIPLY :               9168 C |  __EE_MULTIPLYLOOP :           9170 C |
 __EE_MULTIPLY_B0ISZERO :      917E C |  __EE_SUBTRACT :               9160 C |
 __RHLERROR :                  920E C |  __RHLEXIT :                   9217 C |
 __RHLLOOP :                   91D9 C |  __RHLSAVEERRORANDEXIT :       9214 C |
 __RHLSKIP :                   91E9 C |  __RHLSYNTAX :                 9212 C |

     78 symbols
     29 unused symbols

 AS V1.42 Beta [Bld 102] - source file exprtest.asm - page 12 - 12/9/2015 9:54:42


  defined macros:
  ---------------

LPI                                   |

      1 macro

 AS V1.42 Beta [Bld 102] - source file exprtest.asm - page 13 - 12/9/2015 9:54:42


  codepages:
  ----------

STANDARD (0 changed characters)


0.01 seconds assembly time

    548 lines source file
    580 lines incl. macro expansions
      2 passes
      0 errors
      0 warnings
