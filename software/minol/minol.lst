 AS V1.42 Beta [Bld 102] - source file minol.asm - page 1 - 1/10/2016 10:39:19


       1/       0 :                     ; ****************************************************************************************************************
       2/       0 :                     ; ****************************************************************************************************************
       3/       0 :                     ;
       4/       0 :                     ;												Minol ROM Image
       5/       0 :                     ;
       6/       0 :                     ; ****************************************************************************************************************
       7/       0 :                     ; ****************************************************************************************************************
       8/       0 :                     
       9/       0 :                     	cpu 	sc/mp
      10/       0 :                     
      11/       0 :                     	include source\memorymacros.asm 							; Memory allocation and Macro definition.	
(1)    1/       0 :                     ; ****************************************************************************************************************
(1)    2/       0 :                     ; ****************************************************************************************************************
(1)    3/       0 :                     ;
(1)    4/       0 :                     ;										Memory and Macro Allocation.
(1)    5/       0 :                     ;	
(1)    6/       0 :                     ; ****************************************************************************************************************
(1)    7/       0 :                     ; ****************************************************************************************************************
(1)    8/       0 :                     
(1)    9/       0 : =0x3                OSMathLibrary = 0x0003 											; the Maths library is here.
(1)   10/       0 : =0x210              BootMonitor = 0x210 											; address to boot monitor
(1)   11/       0 :                     
(1)   12/       0 :                     ; ****************************************************************************************************************
(1)   13/       0 :                     ;												 Memory Allocation
(1)   14/       0 :                     ; ****************************************************************************************************************
(1)   15/       0 :                     
(1)   16/       0 : =0xC00              ScreenMirror = 0xC00 											; Screen mirror, 128 bytes, 256 byte page boundary.
(1)   17/       0 : =0xC80              ScreenCursor = ScreenMirror+0x80  								; Position on that screen (00..7F)
(1)   18/       0 :                     
(1)   19/       0 : =0xC90              SystemMemory = 0xC90 											; System Memory
(1)   20/       0 :                     
(1)   21/       0 : =0xC8E              RandomSeed = SystemMemory-2										; Random Seed Value (2 bytes)
(1)   22/       0 : =0xC8D              CurrentLine = SystemMemory-3 									; Current Line Number (1 byte)
(1)   23/       0 : =0xC90              Variables = SystemMemory 										; Variables (26 bytes)
(1)   24/       0 :                     
(1)   25/       0 :                     ; ****************************************************************************************************************
(1)   26/       0 :                     ;														Macros
(1)   27/       0 :                     ; ****************************************************************************************************************
(1)   28/       0 :                     
(1)   29/       0 :                     lpi	macro	ptr,addr											; load pointer register with constant
(1)   30/       0 :                     	ldi 	(addr) / 256
(1)   31/       0 :                     	xpah 	ptr
(1)   32/       0 :                     	ldi 	(addr) & 255
(1)   33/       0 :                     	xpal 	ptr
(1)   34/       0 :                     	endm
(1)   35/       0 :                     
(1)   36/       0 :                     pushp macro ptr 												; push pointer register on stack
(1)   37/       0 :                     	xpah 	ptr
(1)   38/       0 :                     	st 		@-1(p2)
(1)   39/       0 :                     	xpal 	ptr
(1)   40/       0 :                     	st 		@-1(p2)
(1)   41/       0 :                     	endm
(1)   42/       0 :                     
(1)   43/       0 :                     pullp macro ptr 												; pull pointer register off stack
(1)   44/       0 :                     	ld 		@1(p2)
(1)   45/       0 :                     	xpal 	ptr
(1)   46/       0 :                     	ld 		@1(p2)
(1)   47/       0 :                     	xpah 	ptr
(1)   48/       0 :                     	endm
(1)   49/       0 :                     
 AS V1.42 Beta [Bld 102] - source file minol.asm(memorymacros.asm) - page 2 - 1/10/2016 10:39:19


(1)   50/       0 :                     pushe macro 													; push E on stack
(1)   51/       0 :                     	lde
(1)   52/       0 :                     	st 		@-1(p2)
(1)   53/       0 :                     	endm
(1)   54/       0 :                     
(1)   55/       0 :                     pulle macro 													; pull E off stack
(1)   56/       0 :                     	ld 		@1(p2)
(1)   57/       0 :                     	xae
(1)   58/       0 :                     	endm
(1)   59/       0 :                     
(1)   60/       0 :                     pusha macro 													; push A on stack
(1)   61/       0 :                     	st 		@-1(p2)
(1)   62/       0 :                     	endm
(1)   63/       0 :                     
(1)   64/       0 :                     pulla macro
(1)   65/       0 :                     	ld 		@1(p2)
(1)   66/       0 :                     	endm
(1)   67/       0 :                     
(1)   68/       0 :                     setv macro ch,value 											; sets a variable to a value, assumes P3 = Variables.
(1)   69/       0 :                     	ldi 	(value) & 255
(1)   70/       0 :                     	st 		((ch) - 'A')(p3)
(1)   71/       0 :                     	endm
(1)   72/       0 :                     
(1)   73/       0 :                     code macro lineNo,code 											; a debugging macro, which fakes up a line of code.
(1)   74/       0 :                     	db 		strlen(code)+3 										; one byte offset to next (255 = End of code)
(1)   75/       0 :                     	db 		lineNo 												; one byte line number 
(1)   76/       0 :                     	db 		code,0 												; ASCIIZ string
(1)   77/       0 :                     	endm
(1)   78/       0 :                     
(1)   79/       0 :                     cmd macro 	c1,c2,length,code
(1)   80/       0 :                     	db 		c1,c2 												; first and second characters
(1)   81/       0 :                     	db 		(length)-1											; length -1 (first char already skipped)
(1)   82/       0 :                     	dw 		(code)-1 											; execution point for prefetch.
(1)   83/       0 :                     	endm
      12/       0 :                     	include source\errors.asm 									; Error Codes
(1)    1/       0 :                     ; ****************************************************************************************************************
(1)    2/       0 :                     ; ****************************************************************************************************************
(1)    3/       0 :                     ;
(1)    4/       0 :                     ;												Error Codes
(1)    5/       0 :                     ;
(1)    6/       0 :                     ; ****************************************************************************************************************
(1)    7/       0 :                     ; ****************************************************************************************************************
(1)    8/       0 :                     
(1)    9/       0 : =0xFF               ERRC_END = 0xFF													; psuedo error, program stopped.
(1)   10/       0 : =0x1                ERRC_LABEL = 1 													; Label does not exist (e.g. GOTO)
(1)   11/       0 : =0x2                ERRC_UNKNOWN = 2												; Unknown instruction
(1)   12/       0 : =0x4                ERRC_TERM = 4 													; Illegal term/expression
(1)   13/       0 : =0x5                ERRC_SYNTAX = 5													; Syntax Error
(1)   14/       0 : =0x6                ERRC_MEMORY = 6 												; Out of memory
(1)   15/       0 : =0x7                ERRC_DIVZERO = 7 												; Division by Zero Error.
(1)   16/       0 :                     
(1)   17/       0 :                     
(1)   18/       0 :                     
      13/       0 :                     
      14/       0 :                     ; ****************************************************************************************************************
      15/       0 :                     ; ****************************************************************************************************************
      16/       0 :                     ; 	NOTE: When executing line follow the line with $FF so it thinks it has reached the program end.
      17/       0 :                     ; ****************************************************************************************************************
      18/       0 :                     ; ****************************************************************************************************************
      19/       0 :                     
 AS V1.42 Beta [Bld 102] - source file minol.asm - page 3 - 1/10/2016 10:39:19


      20/       0 :                     
      21/       0 :                     ; ****************************************************************************************************************
      22/       0 :                     ;													Main Program
      23/       0 :                     ; ****************************************************************************************************************
      24/       0 :                     
      25/    9000 :                     	org 	0x9000 												; the ROM starts here
      26/    9000 :                     
      27/    9000 : 68                  	db 		0x68												; this makes it boot straight into this ROM.
      28/    9001 : (MACRO)             	lpi 	p2,0xFF8											; set up stack default value
      28/    9001 : C4 0F                       ldi     (0XFF8) / 256
      28/    9003 : 36                          xpah    P2
      28/    9004 : C4 F8                       ldi     (0XFF8) & 255
      28/    9006 : 32                          xpal    P2
      29/    9007 : (MACRO)             	lpi 	p3,SystemMemory
      29/    9007 : C4 0C                       ldi     (SYSTEMMEMORY) / 256
      29/    9009 : 37                          xpah    P3
      29/    900A : C4 90                       ldi     (SYSTEMMEMORY) & 255
      29/    900C : 33                          xpal    P3
      30/    900D :                     
      31/    900D : (MACRO)             	lpi 	p3,CMD_Run-1
      31/    900D : C4 93                       ldi     (CMD_RUN-1) / 256
      31/    900F : 37                          xpah    P3
      31/    9010 : C4 A1                       ldi     (CMD_RUN-1) & 255
      31/    9012 : 33                          xpal    P3
      32/    9013 : 3F                  	xppc	p3
      33/    9014 :                     wait1:	
      34/    9014 : 90 FE               	jmp 	wait1
      35/    9016 :                     
      36/    9016 :                     
      37/    9016 :                     ProgramBase:
      38/    9016 : (MACRO)             	code 	1,"\"START\":CLEAR:GOTO 140"
      38/    9016 : 19                          db              strlen("\"START\":CLEAR:GOTO 140")+3                                                                          ; one byte offset to next (255 = End of "\"START\":CLEAR:GOTO 140")
      38/    9017 : 01                          db              1                                                                                          ; one byte line number 
      38/    9018 : 22 53 54 41 52 54           db              "\"START\":CLEAR:GOTO 140",0                                                                                          ; ASCIIZ string
                    22 3A 43 4C 45 41 
                    52 3A 47 4F 54 4F 
                    20 31 34 30 00 
      39/    902F : (MACRO)             	code 	10,"HELLO WORLD"
      39/    902F : 0E                          db              strlen("HELLO WORLD")+3                                                                          ; one byte offset to next (255 = End of "HELLO WORLD")
      39/    9030 : 0A                          db              10                                                                                          ; one byte line number 
      39/    9031 : 48 45 4C 4C 4F 20           db              "HELLO WORLD",0                                                                                          ; ASCIIZ string
                    57 4F 52 4C 44 00 
      40/    903D : (MACRO)             	code 	20,"GOTO 20"
      40/    903D : 0A                          db              strlen("GOTO 20")+3                                                                          ; one byte offset to next (255 = End of "GOTO 20")
      40/    903E : 14                          db              20                                                                                          ; one byte line number 
      40/    903F : 47 4F 54 4F 20 32           db              "GOTO 20",0                                                                                          ; ASCIIZ string
                    30 00 
      41/    9047 : (MACRO)             	code 	30,"LET B = 69:LET A = 42:C = A + B:END"
      41/    9047 : 26                          db              strlen("LET B = 69:LET A = 42:C = A + B:END")+3                                                                          ; one byte offset to next (255 = End of "LET B = 69:LET A = 42:C = A 
      41/    9048 : 1E                          db              30                                                                                          ; one byte line number 
      41/    9049 : 4C 45 54 20 42 20           db              "LET B = 69:LET A = 42:C = A + B:END",0                                                                                          ; ASCIIZ string
                    3D 20 36 39 3A 4C 
                    45 54 20 41 20 3D 
                    20 34 32 3A 43 20 
                    3D 20 41 20 2B 20 
                    42 3A 45 4E 44 00 
      42/    906D : (MACRO)             	code 	120,"D = D + 1:(0,4) = D:(12,130) = 69:GOTO 120"
      42/    906D : 2D                          db              strlen("D = D + 1:(0,4) = D:(12,130) = 69:GOTO 120")+3                                                                          ; one byte offset to next (255 = End of "D = D + 1:(0,4) = D:(
      42/    906E : 78                          db              120                                                                                          ; one byte line number 
      42/    906F : 44 20 3D 20 44 20           db              "D = D + 1:(0,4) = D:(12,130) = 69:GOTO 120",0                                                                                          ; ASCIIZ string
 AS V1.42 Beta [Bld 102] - source file minol.asm - page 4 - 1/10/2016 10:39:19


                    2B 20 31 3A 28 30 
                    2C 34 29 20 3D 20 
                    44 3A 28 31 32 2C 
                    31 33 30 29 20 3D 
                    20 36 39 3A 47 4F 
                    54 4F 20 31 32 30 
                    00 
      43/    909A : (MACRO)             	code 	130,"A=!:B='@':C=42:D=0-1:GOTO 130"
      43/    909A : 20                          db              strlen("A=!:B='@':C=42:D=0-1:GOTO 130")+3                                                                          ; one byte offset to next (255 = End of "A=!:B='@':C=42:D=0-1:GOTO 130")
      43/    909B : 82                          db              130                                                                                          ; one byte line number 
      43/    909C : 41 3D 21 3A 42 3D           db              "A=!:B='@':C=42:D=0-1:GOTO 130",0                                                                                          ; ASCIIZ string
                    27 40 27 3A 43 3D 
                    34 32 3A 44 3D 30 
                    2D 31 3A 47 4F 54 
                    4F 20 31 33 30 00 
      44/    90BA : (MACRO)             	code 	140,"IF 1 # 255 ; A = A + 1: B = B + 1"
      44/    90BA : 24                          db              strlen("IF 1 # 255 ; A = A + 1: B = B + 1")+3                                                                          ; one byte offset to next (255 = End of "IF 1 # 255 ; A = A + 1: B = B 
      44/    90BB : 8C                          db              140                                                                                          ; one byte line number 
      44/    90BC : 49 46 20 31 20 23           db              "IF 1 # 255 ; A = A + 1: B = B + 1",0                                                                                          ; ASCIIZ string
                    20 32 35 35 20 3B 
                    20 41 20 3D 20 41 
                    20 2B 20 31 3A 20 
                    42 20 3D 20 42 20 
                    2B 20 31 00 
      45/    90DE : (MACRO)             	code 	150,"IF 255 # 255 ; C = C + 1: D = D + 1"
      45/    90DE : 26                          db              strlen("IF 255 # 255 ; C = C + 1: D = D + 1")+3                                                                          ; one byte offset to next (255 = End of "IF 255 # 255 ; C = C + 1: D 
      45/    90DF : 96                          db              150                                                                                          ; one byte line number 
      45/    90E0 : 49 46 20 32 35 35           db              "IF 255 # 255 ; C = C + 1: D = D + 1",0                                                                                          ; ASCIIZ string
                    20 23 20 32 35 35 
                    20 3B 20 43 20 3D 
                    20 43 20 2B 20 31 
                    3A 20 44 20 3D 20 
                    44 20 2B 20 31 00 
      46/    9104 : (MACRO)             	code 	200,"LET A = 0"
      46/    9104 : 0C                          db              strlen("LET A = 0")+3                                                                          ; one byte offset to next (255 = End of "LET A = 0")
      46/    9105 : C8                          db              200                                                                                          ; one byte line number 
      46/    9106 : 4C 45 54 20 41 20           db              "LET A = 0",0                                                                                          ; ASCIIZ string
                    3D 20 30 00 
      47/    9110 : (MACRO)             	code 	210,"LET A = A+1:(0,A)=A:IF A#250; GOTO 210"
      47/    9110 : 29                          db              strlen("LET A = A+1:(0,A)=A:IF A#250; GOTO 210")+3                                                                          ; one byte offset to next (255 = End of "LET A = A+1:(0,A)=A:IF A#
      47/    9111 : D2                          db              210                                                                                          ; one byte line number 
      47/    9112 : 4C 45 54 20 41 20           db              "LET A = A+1:(0,A)=A:IF A#250; GOTO 210",0                                                                                          ; ASCIIZ string
                    3D 20 41 2B 31 3A 
                    28 30 2C 41 29 3D 
                    41 3A 49 46 20 41 
                    23 32 35 30 3B 20 
                    47 4F 54 4F 20 32 
                    31 30 00 
      48/    9139 : FF                  	db 		255
      49/    913A :                     
      50/    913A :                     
      51/    913A :                     ; ****************************************************************************************************************
      52/    913A :                     ;													Source Files
      53/    913A :                     ; ****************************************************************************************************************
      54/    913A :                     
      55/    913A :                     	include source\screen.asm 									; screen I/O stuff.
(1)    1/    913A :                     ; ****************************************************************************************************************
(1)    2/    913A :                     ; ****************************************************************************************************************
(1)    3/    913A :                     ;
(1)    4/    913A :                     ;											Screen I/O, VTL-2 ROM
 AS V1.42 Beta [Bld 102] - source file minol.asm(screen.asm) - page 5 - 1/10/2016 10:39:19


(1)    5/    913A :                     ;											=====================
(1)    6/    913A :                     ;
(1)    7/    913A :                     ;	Provides Character and String Input/Output functionality.
(1)    8/    913A :                     ;
(1)    9/    913A :                     ; ****************************************************************************************************************
(1)   10/    913A :                     ; ****************************************************************************************************************
(1)   11/    913A :                     
(1)   12/    913A :                     ; ****************************************************************************************************************
(1)   13/    913A :                     ; ****************************************************************************************************************
(1)   14/    913A :                     ;
(1)   15/    913A :                     ;	Print routine. Prints either character in A, or ASCIIZ string at P1 (if A is zero). Preserves all registers
(1)   16/    913A :                     ;	except if printing string, P1 points to the character after the NULL terminator.
(1)   17/    913A :                     ;
(1)   18/    913A :                     ;	Scrolls automatically. Understands character codes 32-255, 8 (Backspace) 12 (Clear Screen) 13 (Carriage
(1)   19/    913A :                     ;	Return). Others are currently ignored (except 0, see above). Note L/C values (97....) display those characters
(1)   20/    913A :                     ;	in the ROM font *not* lower case :)
(1)   21/    913A :                     ;
(1)   22/    913A :                     ; ****************************************************************************************************************
(1)   23/    913A :                     ; ****************************************************************************************************************
(1)   24/    913A :                     
(1)   25/    913A :                     Print:
(1)   26/    913A :                     	section 	Print
(1)   27/    913A :                     
(1)   28/    913A : (MACRO)             	pusha														; push registers on stack
(1)   28/    913A : CE FF                       st              @-1(p2)
(1)   29/    913C : (MACRO)             	pushp 	p1
(1)   29/    913C : 35                          xpah    P1
(1)   29/    913D : CE FF                       st              @-1(p2)
(1)   29/    913F : 31                          xpal    P1
(1)   29/    9140 : CE FF                       st              @-1(p2)
(1)   30/    9142 : (MACRO)             	pushe
(1)   30/    9142 : 40                          lde
(1)   30/    9143 : CE FF                       st              @-1(p2)
(1)   31/    9145 :                     
(1)   32/    9145 : C2 03               	ld 		3(p2) 												; read character 
(1)   33/    9147 : 9C 12               	jnz 	__PRPrintCharacterA 								; if non zero print it on its own.
(1)   34/    9149 :                     
(1)   35/    9149 :                     __PRPrintString:
(1)   36/    9149 : C2 01               	ld 		1(p2) 												; restore original P1
(1)   37/    914B : 31                  	xpal 	p1
(1)   38/    914C : C2 02               	ld 		2(p2)
(1)   39/    914E : 35                  	xpah 	p1 													; read character at P1.
(1)   40/    914F : C5 01               	ld 		@1(p1)
(1)   41/    9151 : 01                  	xae 														; save in E.
(1)   42/    9152 : 35                  	xpah 	p1 													; write P1 back.
(1)   43/    9153 : CA 02               	st 		2(p2)
(1)   44/    9155 : 31                  	xpal 	p1
(1)   45/    9156 : CA 01               	st 		1(p2)
(1)   46/    9158 : 40                  	lde 														; get character from E
(1)   47/    9159 : 98 46               	jz 		__PRExitNoCheck 									; exit without loop check.
(1)   48/    915B :                     ;
(1)   49/    915B :                     ;	Print character in A now ; throughout it is stored in E.
(1)   50/    915B :                     ;
(1)   51/    915B :                     __PRPrintCharacterA:
(1)   52/    915B : 01                  	xae 														; save character in E.
(1)   53/    915C :                     ;
(1)   54/    915C :                     ;	Read cursor and set P1 to that address
(1)   55/    915C :                     ;
(1)   56/    915C : C4 0C               	ldi 	ScreenCursor/256 									; set P1 to point to screen cursor
(1)   57/    915E : 35                  	xpah 	p1
 AS V1.42 Beta [Bld 102] - source file minol.asm(screen.asm) - page 6 - 1/10/2016 10:39:19


(1)   58/    915F : C4 80               	ldi 	ScreenCursor&255
(1)   59/    9161 : 31                  	xpal 	p1
(1)   60/    9162 : C1 00               	ld 		0(p1) 												; put cursor position in P1.L
(1)   61/    9164 : 31                  	xpal 	p1
(1)   62/    9165 :                     ;
(1)   63/    9165 :                     ;	Check for control
(1)   64/    9165 :                     ;
(1)   65/    9165 : 40                  	lde 														; look at character
(1)   66/    9166 : D4 E0               	ani 	0xE0 												; is it code 0-31
(1)   67/    9168 : 98 45               	jz 		__PRIsControlChar
(1)   68/    916A :                     ;
(1)   69/    916A :                     ;	Print non-control
(1)   70/    916A :                     ;
(1)   71/    916A : 40                  	lde 														; read character
(1)   72/    916B : 03                  	scl 														; CY/L clear if < 96
(1)   73/    916C : FC 60               	cai 	96 
(1)   74/    916E : 06                  	csa 	 	 												; skip if carry set
(1)   75/    916F : E4 80               	xri 	0x80													
(1)   76/    9171 : 94 04               	jp 		__PRNotASCII
(1)   77/    9173 : 40                  	lde 														; if ASCII make 6 bit.
(1)   78/    9174 : D4 3F               	ani 	0x3F
(1)   79/    9176 : 01                  	xae
(1)   80/    9177 :                     __PRNotASCII:
(1)   81/    9177 : 40                  	lde 														; get character.
(1)   82/    9178 : C9 00               	st 		(p1) 												; save in shadow memory
(1)   83/    917A : 35                  	xpah 	p1 													; switch to VRAM, preserving A.
(1)   84/    917B : C4 00               	ldi 	0 													
(1)   85/    917D : 35                  	xpah 	p1
(1)   86/    917E : CD 01               	st 		@1(p1) 												; save in screen memory, advance write position.
(1)   87/    9180 :                     ;
(1)   88/    9180 :                     ;	Write cursor position back from P1.L
(1)   89/    9180 :                     ;
(1)   90/    9180 :                     __PRUpdateCursor:
(1)   91/    9180 : C4 0C               	ldi		ScreenCursor / 256 									; set P1 to point to screen cursor, restore position to P1
(1)   92/    9182 : 35                  	xpah 	p1
(1)   93/    9183 : C4 80               	ldi 	ScreenCursor & 255 
(1)   94/    9185 : 31                  	xpal 	p1 													; after this, adjusted cursor position is in AC.
(1)   95/    9186 : C9 00               	st 		(p1) 												; write back in cursor position
(1)   96/    9188 : 94 13               	jp 		__PRExit 											; if position is off the bottom then scroll.
(1)   97/    918A :                     ;
(1)   98/    918A :                     ;	Scroll display
(1)   99/    918A :                     ;
(1)  100/    918A : C4 0C               	ldi 	(ScreenMirror+16) / 256 							; point P1 to 2nd line.
(1)  101/    918C : 35                  	xpah 	p1
(1)  102/    918D : C4 10               	ldi 	(ScreenMirror+16) & 255
(1)  103/    918F :                     __PRScrollLoop:
(1)  104/    918F : 31                  	xpal 	p1
(1)  105/    9190 : C1 00               	ld 		0(p1) 												; copy char to previous line
(1)  106/    9192 : C9 F0               	st 		-16(p1)
(1)  107/    9194 : C5 01               	ld 		@1(p1) 												; bump pointer.
(1)  108/    9196 : 31                  	xpal 	p1
(1)  109/    9197 : 94 F6               	jp 		__PRScrollLoop
(1)  110/    9199 : C4 70               	ldi 	128-16 												; clear from and move to last line
(1)  111/    919B : 90 3D               	jmp 	__PRClearFromMoveTo
(1)  112/    919D :                     ;
(1)  113/    919D :                     ;	Exit screen drawing routine.
(1)  114/    919D :                     ;
(1)  115/    919D :                     __PRExit:
(1)  116/    919D : C2 03               	ld 		3(p2) 												; if character was zero, loop
(1)  117/    919F : 98 A8               	jz 		__PRPrintString 									; back as printing string at P1.
 AS V1.42 Beta [Bld 102] - source file minol.asm(screen.asm) - page 7 - 1/10/2016 10:39:19


(1)  118/    91A1 :                     __PRExitNoCheck:
(1)  119/    91A1 : (MACRO)             	pulle 														; restore registers
(1)  119/    91A1 : C6 01                       ld              @1(p2)
(1)  119/    91A3 : 01                          xae
(1)  120/    91A4 : (MACRO)             	pullp 	p1
(1)  120/    91A4 : C6 01                       ld              @1(p2)
(1)  120/    91A6 : 31                          xpal    P1
(1)  120/    91A7 : C6 01                       ld              @1(p2)
(1)  120/    91A9 : 35                          xpah    P1
(1)  121/    91AA : (MACRO)             	pulla
(1)  121/    91AA : C6 01                       ld              @1(p2)
(1)  122/    91AC : 3F                  	xppc 	p3 													; return
(1)  123/    91AD : 90 8B               	jmp 	Print 												; make re-entrant.
(1)  124/    91AF :                     ;
(1)  125/    91AF :                     ;	Check for supported control characters 8 (Backspace) 12 (Clear) 13 (Carriage Return)
(1)  126/    91AF :                     ;
(1)  127/    91AF :                     __PRIsControlChar:
(1)  128/    91AF : 40                  	lde 														; restore character.
(1)  129/    91B0 : E4 0D               	xri 	13 													; carriage return ? (13)
(1)  130/    91B2 : 98 1B               	jz 		__PRIsReturn
(1)  131/    91B4 : E4 01               	xri 	13!12 												; form feed ? (12)
(1)  132/    91B6 : 98 20               	jz 		__PRClearScreen
(1)  133/    91B8 : E4 04               	xri 	12!8 												; backspace ? (8)
(1)  134/    91BA : 9C E1               	jnz 	__PRExit 
(1)  135/    91BC :                     ;
(1)  136/    91BC :                     ;	Handle backspace (8)
(1)  137/    91BC :                     ;
(1)  138/    91BC : 31                  	xpal 	p1 													; check cursor position is zero
(1)  139/    91BD : 98 DE               	jz 		__PRExit 											; if it is, cannot backspace so exit.
(1)  140/    91BF : 31                  	xpal 	p1  												; put it back
(1)  141/    91C0 : C5 FF               	ld 		@-1(p1)												; move it back one
(1)  142/    91C2 : C4 20               	ldi 	' '	 												; erase in shadow
(1)  143/    91C4 : C9 00               	st 		(p1)
(1)  144/    91C6 : C4 00               	ldi 	0 													; point P1 to VRAM
(1)  145/    91C8 : 35                  	xpah 	p1
(1)  146/    91C9 : C4 20               	ldi 	' '													; erase in VRAM
(1)  147/    91CB : C9 00               	st 		(p1)
(1)  148/    91CD : 90 B1               	jmp 	__PRUpdateCursor 									; and exit
(1)  149/    91CF :                     ;
(1)  150/    91CF :                     ;	Handle carriage return (13)
(1)  151/    91CF :                     ;
(1)  152/    91CF :                     __PRIsReturn:
(1)  153/    91CF : 31                  	xpal 	p1 													; cursor position in A
(1)  154/    91D0 : D4 F0               	ani 	0xF0 												; start of current line
(1)  155/    91D2 : 02                  	ccl 														; down one line
(1)  156/    91D3 : F4 10               	adi 	0x10 	
(1)  157/    91D5 : 31                  	xpal 	p1 													; put it back in P1.
(1)  158/    91D6 : 90 A8               	jmp 	__PRUpdateCursor
(1)  159/    91D8 :                     ;
(1)  160/    91D8 :                     ;	Handle clear screen (12)
(1)  161/    91D8 :                     ;
(1)  162/    91D8 :                     __PRClearScreen:
(1)  163/    91D8 : C4 00               	ldi 	0 													; clear shadow memory from here.
(1)  164/    91DA :                     ;
(1)  165/    91DA :                     ;	From position A, clear the memory in the shadow screen to the end, copy the shadow screen to VRAM
(1)  166/    91DA :                     ;	then use position A as the new cursor position.
(1)  167/    91DA :                     ;
(1)  168/    91DA :                     __PRClearFromMoveTo:
(1)  169/    91DA : CE FF               	st 		@-1(p2) 											; save this position, the cursor goes here.
(1)  170/    91DC :                     __PRClearLoop:
 AS V1.42 Beta [Bld 102] - source file minol.asm(screen.asm) - page 8 - 1/10/2016 10:39:19


(1)  171/    91DC : 31                  	xpal 	p1 													; save position in P1.
(1)  172/    91DD : C4 20               	ldi 	' '													; write space there.
(1)  173/    91DF : CD 01               	st 		@1(p1)
(1)  174/    91E1 : 31                  	xpal 	p1
(1)  175/    91E2 : 94 F8               	jp 		__PRClearLoop 										; until reached shadow memory start.
(1)  176/    91E4 : C4 00               	ldi 	0 													; now copy shadow memory to screen memory.
(1)  177/    91E6 :                     __PRCopy:
(1)  178/    91E6 : 31                  	xpal 	p1 													; set up P1.L
(1)  179/    91E7 : C4 0C               	ldi 	ScreenMirror/256 									; point to shadow memory.
(1)  180/    91E9 : 35                  	xpah 	p1 													
(1)  181/    91EA : C1 00               	ld 		(p1) 												; read shadow memory
(1)  182/    91EC : 35                  	xpah 	p1 													; zero P1.H preserving A
(1)  183/    91ED : C4 00               	ldi 	0
(1)  184/    91EF : 35                  	xpah 	p1
(1)  185/    91F0 : CD 01               	st 		@1(p1) 												; save and increment p1
(1)  186/    91F2 : 31                  	xpal 	p1 
(1)  187/    91F3 : 94 F1               	jp 		__PRCopy 											; keep doing till all copied.
(1)  188/    91F5 : C6 01               	ld 		@1(p2) 												; read cursor position
(1)  189/    91F7 : 31                  	xpal 	p1 													; put in P1.L
(1)  190/    91F8 : 90 86               	jmp 	__PRUpdateCursor
(1)  191/    91FA :                     
(1)  192/    91FA :                     	endsection 	Print
(1)  193/    91FA :                     
(1)  194/    91FA :                     ; ****************************************************************************************************************
(1)  195/    91FA :                     ; ****************************************************************************************************************
(1)  196/    91FA :                     ;
(1)  197/    91FA :                     ;		Input a single character into A. Case is converted to Upper. All registers preserved except A
(1)  198/    91FA :                     ;
(1)  199/    91FA :                     ; ****************************************************************************************************************
(1)  200/    91FA :                     ; ****************************************************************************************************************
(1)  201/    91FA :                     
(1)  202/    91FA :                     GetChar:
(1)  203/    91FA :                     	section 	GetChar
(1)  204/    91FA : C4 08               	ldi 	0x8 												; set P1 to $8xx, and save P1.H
(1)  205/    91FC : 35                  	xpah 	p1
(1)  206/    91FD : CE FF               	st 		@-1(p2)
(1)  207/    91FF :                     __GCWaitKey: 													; wait for key press
(1)  208/    91FF : C1 00               	ld 		0(p1)
(1)  209/    9201 : 94 FC               	jp 		__GCWaitKey
(1)  210/    9203 : D4 7F               	ani	 	0x7F 												; throw away the upper bit.
(1)  211/    9205 : CA FF               	st 		-1(p2) 												; save it below stack
(1)  212/    9207 :                     __GCWaitRelease:
(1)  213/    9207 : C1 00               	ld 		0(p1) 												; wait for release
(1)  214/    9209 : D4 80               	ani 	0x80
(1)  215/    920B : 9C FA               	jnz 	__GCWaitRelease
(1)  216/    920D : C6 01               	ld 		@1(p2) 												; restore P1.H
(1)  217/    920F : 35                  	xpah 	p1
(1)  218/    9210 : C2 FE               	ld 		-2(p2) 												; restore saved value
(1)  219/    9212 : 02                  	ccl
(1)  220/    9213 : F4 20               	adi 	0x20												; will make lower case -ve
(1)  221/    9215 : 94 02               	jp 		__GCNotLower
(1)  222/    9217 : FC 20               	cai 	0x20 												; capitalise
(1)  223/    9219 :                     __GCNotLower:
(1)  224/    9219 : F4 E0               	adi 	0xE0 												; fix up.
(1)  225/    921B : 3F                  	xppc 	p3 													; return
(1)  226/    921C : 90 DC               	jmp 	GetChar 											; make re-entrant
(1)  227/    921E :                     	endsection 	GetChar
(1)  228/    921E :                     
(1)  229/    921E :                     ; ****************************************************************************************************************
(1)  230/    921E :                     ; ****************************************************************************************************************
 AS V1.42 Beta [Bld 102] - source file minol.asm(screen.asm) - page 9 - 1/10/2016 10:39:19


(1)  231/    921E :                     ;
(1)  232/    921E :                     ;			Read an ASCIIZ string from keyboard into P1 of length A maximum (excludes NULL terminator)
(1)  233/    921E :                     ;
(1)  234/    921E :                     ; ****************************************************************************************************************
(1)  235/    921E :                     ; ****************************************************************************************************************
(1)  236/    921E :                     
(1)  237/    921E :                     GetString:
(1)  238/    921E :                     	section GetString
(1)  239/    921E : (MACRO)             	pusha 														; save A,P3,E
(1)  239/    921E : CE FF                       st              @-1(p2)
(1)  240/    9220 : (MACRO)             	pushp 	p3
(1)  240/    9220 : 37                          xpah    P3
(1)  240/    9221 : CE FF                       st              @-1(p2)
(1)  240/    9223 : 33                          xpal    P3
(1)  240/    9224 : CE FF                       st              @-1(p2)
(1)  241/    9226 : (MACRO)             	pushe 
(1)  241/    9226 : 40                          lde
(1)  241/    9227 : CE FF                       st              @-1(p2)
(1)  242/    9229 : C4 00               	ldi 	0 													; set E (current position) to A.
(1)  243/    922B : 01                  	xae
(1)  244/    922C :                     __GSLoop:
(1)  245/    922C : (MACRO)             	lpi 	p3,Print-1 											; print the prompt (half coloured square)
(1)  245/    922C : C4 91                       ldi     (PRINT-1) / 256
(1)  245/    922E : 37                          xpah    P3
(1)  245/    922F : C4 39                       ldi     (PRINT-1) & 255
(1)  245/    9231 : 33                          xpal    P3
(1)  246/    9232 : C4 9B               	ldi 	155
(1)  247/    9234 : 3F                  	xppc 	p3
(1)  248/    9235 : (MACRO)             	lpi 	p3,GetChar-1 										; get a character
(1)  248/    9235 : C4 91                       ldi     (GETCHAR-1) / 256
(1)  248/    9237 : 37                          xpah    P3
(1)  248/    9238 : C4 F9                       ldi     (GETCHAR-1) & 255
(1)  248/    923A : 33                          xpal    P3
(1)  249/    923B : 3F                  	xppc 	p3
(1)  250/    923C : C9 80               	st 		-0x80(p1) 											; save it in the current position.
(1)  251/    923E : (MACRO)             	lpi 	p3,Print-1 											; erase the prompt with backspace.
(1)  251/    923E : C4 91                       ldi     (PRINT-1) / 256
(1)  251/    9240 : 37                          xpah    P3
(1)  251/    9241 : C4 39                       ldi     (PRINT-1) & 255
(1)  251/    9243 : 33                          xpal    P3
(1)  252/    9244 : C4 08               	ldi 	8
(1)  253/    9246 : 3F                  	xppc 	p3
(1)  254/    9247 : C1 80               	ld 		-0x80(p1) 											; re-read character
(1)  255/    9249 : D4 E0               	ani 	0xE0 												; check if control key.
(1)  256/    924B : 98 0F               	jz 		__GSControlKey 
(1)  257/    924D : 40                  	lde 														; get current position.
(1)  258/    924E : E2 03               	xor 	3(p2) 												; reached maximum length of buffer ?
(1)  259/    9250 : 98 DA               	jz 		__GSLoop 											; if so, ignore the key and go round again.
(1)  260/    9252 : C1 80               	ld 		-0x80(p1) 											; get character and print it
(1)  261/    9254 : 3F                  	xppc 	p3
(1)  262/    9255 : C4 01               	ldi 	1 													; increment E
(1)  263/    9257 : 02                  	ccl
(1)  264/    9258 : 70                  	ade
(1)  265/    9259 : 01                  	xae
(1)  266/    925A : 90 D0               	jmp 	__GSLoop 											; and go round again.
(1)  267/    925C :                     ;
(1)  268/    925C :                     ;	Handle control keys (0x00-0x1F)
(1)  269/    925C :                     ;
(1)  270/    925C :                     __GSControlKey:
(1)  271/    925C : C1 80               	ld 		-0x80(p1) 											; get typed in key
 AS V1.42 Beta [Bld 102] - source file minol.asm(screen.asm) - page 10 - 1/10/2016 10:39:19


(1)  272/    925E : E4 08               	xri 	8 													; check for backspace.
(1)  273/    9260 : 98 17               	jz 		__GSBackspace 			
(1)  274/    9262 : E4 05               	xri 	8!13 												; check for CR
(1)  275/    9264 : 9C C6               	jnz 	__GSLoop 											; if not, ignore the key.
(1)  276/    9266 :                     ;
(1)  277/    9266 :                     ;	Carriage Return, ending input.
(1)  278/    9266 :                     ;
(1)  279/    9266 : C9 80               	st 		-0x80(p1) 											; replace the CR written with NULL terminator.
(1)  280/    9268 : C4 0D               	ldi 	13 													; print CR
(1)  281/    926A : 3F                  	xppc 	p3
(1)  282/    926B : (MACRO)             	pulle 														; restore E,P3,A
(1)  282/    926B : C6 01                       ld              @1(p2)
(1)  282/    926D : 01                          xae
(1)  283/    926E : (MACRO)             	pullp	p3
(1)  283/    926E : C6 01                       ld              @1(p2)
(1)  283/    9270 : 33                          xpal    P3
(1)  283/    9271 : C6 01                       ld              @1(p2)
(1)  283/    9273 : 37                          xpah    P3
(1)  284/    9274 : (MACRO)             	pulla
(1)  284/    9274 : C6 01                       ld              @1(p2)
(1)  285/    9276 : 3F                  	xppc 	p3 													; return
(1)  286/    9277 : 90 A5               	jmp 	GetString 											; make re-entrant (probably unneccessary !!)
(1)  287/    9279 :                     ;
(1)  288/    9279 :                     ;	Backspace entered
(1)  289/    9279 :                     ;
(1)  290/    9279 :                     __GSBackspace
(1)  291/    9279 : 40                  	lde 														; if E = 0 we can't backspace any further.
(1)  292/    927A : 98 B0               	jz 		__GSLoop
(1)  293/    927C : C4 08               	ldi 	8 													; backspace on screen
(1)  294/    927E : 3F                  	xppc 	p3
(1)  295/    927F : C4 FF               	ldi 	0xFF 												; decrement E
(1)  296/    9281 : 02                  	ccl
(1)  297/    9282 : 70                  	ade
(1)  298/    9283 : 01                  	xae
(1)  299/    9284 : 90 A6               	jmp 	__GSLoop 											; and go round again.
(1)  300/    9286 :                     
(1)  301/    9286 :                     	endsection GetString
(1)  302/    9286 :                     
      56/    9286 :                     	include source\execute.asm 									; statement exec main loop
(1)    1/    9286 :                     ; ****************************************************************************************************************
(1)    2/    9286 :                     ; ****************************************************************************************************************
(1)    3/    9286 :                     ;
(1)    4/    9286 :                     ;										Instruction Execution
(1)    5/    9286 :                     ;	
(1)    6/    9286 :                     ; ****************************************************************************************************************
(1)    7/    9286 :                     ; ****************************************************************************************************************
(1)    8/    9286 :                     
(1)    9/    9286 :                     ; ****************************************************************************************************************
(1)   10/    9286 :                     ;							Source codes for execution, with skip-over go here
(1)   11/    9286 :                     ; ****************************************************************************************************************
(1)   12/    9286 :                     
(1)   13/    9286 :                     	include source\commands\os.asm 								; OS
(2)    1/    9286 :                     ; ****************************************************************************************************************
(2)    2/    9286 :                     ; ****************************************************************************************************************
(2)    3/    9286 :                     ;
(2)    4/    9286 :                     ;												OS command
(2)    5/    9286 :                     ;	
(2)    6/    9286 :                     ; ****************************************************************************************************************
(2)    7/    9286 :                     ; ****************************************************************************************************************
(2)    8/    9286 :                     
 AS V1.42 Beta [Bld 102] - source file minol.asm(os.asm) - page 11 - 1/10/2016 10:39:19


(2)    9/    9286 : 90 07               	jmp 	COS_Over
(2)   10/    9288 :                     
(2)   11/    9288 :                     CMD_OS:
(2)   12/    9288 : (MACRO)             	lpi 	p3,BootMonitor-1 									; monitor re-entry point
(2)   12/    9288 : C4 02                       ldi     (BOOTMONITOR-1) / 256
(2)   12/    928A : 37                          xpah    P3
(2)   12/    928B : C4 0F                       ldi     (BOOTMONITOR-1) & 255
(2)   12/    928D : 33                          xpal    P3
(2)   13/    928E : 3F                  	xppc 	p3													; go there.
(2)   14/    928F :                     
(2)   15/    928F :                     COS_Over:
(1)   14/    928F :                     	include source\commands\new_end.asm 						; NEW and END
(2)    1/    928F :                     ; ****************************************************************************************************************
(2)    2/    928F :                     ; ****************************************************************************************************************
(2)    3/    928F :                     ;
(2)    4/    928F :                     ;												NEW and END
(2)    5/    928F :                     ;	
(2)    6/    928F :                     ; ****************************************************************************************************************
(2)    7/    928F :                     ; ****************************************************************************************************************
(2)    8/    928F :                     
(2)    9/    928F : 90 0E               	jmp 	CNE_Over
(2)   10/    9291 :                     
(2)   11/    9291 :                     ; ****************************************************************************************************************
(2)   12/    9291 :                     ;						NEW (Erase program) also executes END in case in running program
(2)   13/    9291 :                     ; ****************************************************************************************************************
(2)   14/    9291 :                     
(2)   15/    9291 :                     CMD_New:
(2)   16/    9291 : (MACRO)             	lpi 	p3,ProgramBase 										; write $FF at program base
(2)   16/    9291 : C4 90                       ldi     (PROGRAMBASE) / 256
(2)   16/    9293 : 37                          xpah    P3
(2)   16/    9294 : C4 16                       ldi     (PROGRAMBASE) & 255
(2)   16/    9296 : 33                          xpal    P3
(2)   17/    9297 : C4 FF               	ldi 	0xFF
(2)   18/    9299 : CB 00               	st 		0(p3) 												; this erases the program
(2)   19/    929B :                     
(2)   20/    929B :                     ; ****************************************************************************************************************
(2)   21/    929B :                     ;													END program
(2)   22/    929B :                     ; ****************************************************************************************************************
(2)   23/    929B :                     
(2)   24/    929B :                     CMD_End:
(2)   25/    929B : 02                  	ccl 														; we cause an error, but it is ERRC_End which is 
(2)   26/    929C : C4 FF               	ldi 	ERRC_End 											; not an error and not reported as such.
(2)   27/    929E : 01                  	xae
(2)   28/    929F :                     
(2)   29/    929F :                     CNE_Over:
(1)   15/    929F :                     	include source\commands\clear.asm							; CLEAR
(2)    1/    929F :                     ; ****************************************************************************************************************
(2)    2/    929F :                     ; ****************************************************************************************************************
(2)    3/    929F :                     ;
(2)    4/    929F :                     ;													CLEAR
(2)    5/    929F :                     ;	
(2)    6/    929F :                     ; ****************************************************************************************************************
(2)    7/    929F :                     ; ****************************************************************************************************************
(2)    8/    929F :                     
(2)    9/    929F : 90 13               	jmp	CCL_Over
(2)   10/    92A1 :                     
(2)   11/    92A1 :                     ; ****************************************************************************************************************
(2)   12/    92A1 :                     ;												CLEAR command
(2)   13/    92A1 :                     ; ****************************************************************************************************************
(2)   14/    92A1 :                     
 AS V1.42 Beta [Bld 102] - source file minol.asm(clear.asm) - page 12 - 1/10/2016 10:39:19


(2)   15/    92A1 :                     CMD_Clear:
(2)   16/    92A1 : (MACRO)             	lpi 	p3,Variables 										; point P3 to variables
(2)   16/    92A1 : C4 0C                       ldi     (VARIABLES) / 256
(2)   16/    92A3 : 37                          xpah    P3
(2)   16/    92A4 : C4 90                       ldi     (VARIABLES) & 255
(2)   16/    92A6 : 33                          xpal    P3
(2)   17/    92A7 : C4 1A               	ldi 	26 													; loop counter to 26
(2)   18/    92A9 : CA FF               	st 		-1(p2)
(2)   19/    92AB :                     CCL_Loop:
(2)   20/    92AB : C4 00               	ldi 	0x00												; clear a variable
(2)   21/    92AD : CF 01               	st 		@1(p3)
(2)   22/    92AF : BA FF               	dld 	-1(p2) 												; done all
(2)   23/    92B1 : 9C F8               	jnz 	CCL_Loop											; loop back
(2)   24/    92B3 : 03                  	scl 														; no error
(2)   25/    92B4 :                     
(2)   26/    92B4 :                     CCL_Over:
(1)   16/    92B4 :                     	include source\commands\call.asm 							; CALL
(2)    1/    92B4 :                     ; ****************************************************************************************************************
(2)    2/    92B4 :                     ; ****************************************************************************************************************
(2)    3/    92B4 :                     ;
(2)    4/    92B4 :                     ;												CALL command
(2)    5/    92B4 :                     ;	
(2)    6/    92B4 :                     ; ****************************************************************************************************************
(2)    7/    92B4 :                     ; ****************************************************************************************************************
(2)    8/    92B4 :                     
(2)    9/    92B4 : 90 27               	jmp		CCA_Over
(2)   10/    92B6 :                     
(2)   11/    92B6 :                     CMD_Call:
(2)   12/    92B6 : (MACRO)             	lpi 	p3,EvaluateAddressPair-1 							; evaluate the address pair (e.g. (H,L))
(2)   12/    92B6 : C4 95                       ldi     (EVALUATEADDRESSPAIR-1) / 256
(2)   12/    92B8 : 37                          xpah    P3
(2)   12/    92B9 : C4 7A                       ldi     (EVALUATEADDRESSPAIR-1) & 255
(2)   12/    92BB : 33                          xpal    P3
(2)   13/    92BC : 3F                  	xppc 	p3
(2)   14/    92BD : 94 1E               	jp 		CCA_Over 											; exit on error.
(2)   15/    92BF : C2 FE               	ld 		-2(p2) 												; retrieve the L value to E
(2)   16/    92C1 : 01                  	xae 	
(2)   17/    92C2 : C2 FF               	ld 		-1(p2)												; retrieve the H value to P3.H
(2)   18/    92C4 : 37                  	xpah 	p3
(2)   19/    92C5 : 40                  	lde	 														; copy L value to P3.L
(2)   20/    92C6 : 33                  	xpal 	p3
(2)   21/    92C7 : C7 FF               	ld 		@-1(p3) 											; fix up for pre-increment
(2)   22/    92C9 : (MACRO)             	pushp 	p1 													; save P1
(2)   22/    92C9 : 35                          xpah    P1
(2)   22/    92CA : CE FF                       st              @-1(p2)
(2)   22/    92CC : 31                          xpal    P1
(2)   22/    92CD : CE FF                       st              @-1(p2)
(2)   23/    92CF : (MACRO)             	lpi 	p1,Variables 										; and point P1 to the variables
(2)   23/    92CF : C4 0C                       ldi     (VARIABLES) / 256
(2)   23/    92D1 : 35                          xpah    P1
(2)   23/    92D2 : C4 90                       ldi     (VARIABLES) & 255
(2)   23/    92D4 : 31                          xpal    P1
(2)   24/    92D5 : 03                  	scl 														; set CY/L flag, so the call can return an error.
(2)   25/    92D6 : 3F                  	xppc 	p3 													; call the routine
(2)   26/    92D7 : (MACRO)             	pullp	p1 													; restore P1
(2)   26/    92D7 : C6 01                       ld              @1(p2)
(2)   26/    92D9 : 31                          xpal    P1
(2)   26/    92DA : C6 01                       ld              @1(p2)
(2)   26/    92DC : 35                          xpah    P1
(2)   27/    92DD :                     	
 AS V1.42 Beta [Bld 102] - source file minol.asm(call.asm) - page 13 - 1/10/2016 10:39:19


(2)   28/    92DD :                     CCA_Over:
(1)   17/    92DD :                     	include source\commands\let.asm 							; LET (optional, but slower if not present)
(2)    1/    92DD :                     ; ****************************************************************************************************************
(2)    2/    92DD :                     ; ****************************************************************************************************************
(2)    3/    92DD :                     ;
(2)    4/    92DD :                     ;												LET command
(2)    5/    92DD :                     ;	
(2)    6/    92DD :                     ; ****************************************************************************************************************
(2)    7/    92DD :                     ; ****************************************************************************************************************
(2)    8/    92DD :                     
(2)    9/    92DD : 90 51               	jmp 	CLE_Over
(2)   10/    92DF :                     
(2)   11/    92DF :                     CMD_Let:
(2)   12/    92DF : C1 00               	ld 		(p1) 												; look at character
(2)   13/    92E1 : E4 28               	xri 	'('													; is it let (h,l) ?
(2)   14/    92E3 : 98 20               	jz 		CLE_IsHL 											; if so, go to the (H,L) code
(2)   15/    92E5 : C1 00               	ld 		(p1) 												; re-read it.
(2)   16/    92E7 : 02                  	ccl
(2)   17/    92E8 : F4 A5               	adi 	255-'Z' 											; will be +ve on error
(2)   18/    92EA : 94 04               	jp 		CLE_Syntax 											; e.g. > Z
(2)   19/    92EC : F4 1A               	adi 	26 													; will be 0-25 if A..Z
(2)   20/    92EE : 94 06               	jp 		CLE_SingleVariable
(2)   21/    92F0 :                     ;
(2)   22/    92F0 :                     ;	Syntax Error
(2)   23/    92F0 :                     ;
(2)   24/    92F0 :                     CLE_Syntax:
(2)   25/    92F0 : C4 05               	ldi 	ERRC_Syntax 										; set E to error code.
(2)   26/    92F2 : 01                  	xae
(2)   27/    92F3 : 02                  	ccl 														; CY/L = 0 = Error
(2)   28/    92F4 : 90 3A               	jmp 	CLE_Over 											; and exit
(2)   29/    92F6 :                     ;
(2)   30/    92F6 :                     ;	A-Z. AC contains 0-25
(2)   31/    92F6 :                     ;
(2)   32/    92F6 :                     CLE_SingleVariable:
(2)   33/    92F6 : 02                  	ccl  														; work out variable address, and put on stack.
(2)   34/    92F7 : F4 90               	adi 	Variables & 255
(2)   35/    92F9 : CE FE               	st 		@-2(p2) 
(2)   36/    92FB : C4 0C               	ldi 	Variables / 256
(2)   37/    92FD : F4 00               	adi 	0
(2)   38/    92FF : CA 01               	st 		1(p2)
(2)   39/    9301 : C5 01               	ld 		@1(p1) 												; skip over the variable.
(2)   40/    9303 : 90 0B               	jmp 	CLE_EvaluateAndWrite
(2)   41/    9305 :                     ;
(2)   42/    9305 :                     ;	LET is (H,L) = <expr>
(2)   43/    9305 :                     ;
(2)   44/    9305 :                     CLE_IsHL:
(2)   45/    9305 : (MACRO)             	lpi 	p3,EvaluateAddressPair-1 							; evaluate the (H,L)
(2)   45/    9305 : C4 95                       ldi     (EVALUATEADDRESSPAIR-1) / 256
(2)   45/    9307 : 37                          xpah    P3
(2)   45/    9308 : C4 7A                       ldi     (EVALUATEADDRESSPAIR-1) & 255
(2)   45/    930A : 33                          xpal    P3
(2)   46/    930B : 3F                  	xppc 	p3
(2)   47/    930C : 94 22               	jp 		CLE_Over 											; exit on error
(2)   48/    930E : C6 FE               	ld 		@-2(p2) 											; the address to write to is now on TOS.
(2)   49/    9310 :                     ;
(2)   50/    9310 :                     ;	Evaluate and write.
(2)   51/    9310 :                     ;
(2)   52/    9310 :                     CLE_EvaluateAndWrite:
(2)   53/    9310 : C5 01               	ld 		@1(p1) 												; skip over spaces
(2)   54/    9312 : E4 20               	xri 	' '
 AS V1.42 Beta [Bld 102] - source file minol.asm(let.asm) - page 14 - 1/10/2016 10:39:19


(2)   55/    9314 : 98 FA               	jz 		CLE_EvaluateAndWrite
(2)   56/    9316 : E4 1D               	xri 	' '!'='												; check first non space character is =
(2)   57/    9318 : 9C D6               	jnz 	CLE_Syntax 											; if not, a syntax error.
(2)   58/    931A :                     
(2)   59/    931A : (MACRO)             	lpi 	p3,EvaluateExpression-1 							; set up to evaluate the RHS
(2)   59/    931A : C4 94                       ldi     (EVALUATEEXPRESSION-1) / 256
(2)   59/    931C : 37                          xpah    P3
(2)   59/    931D : C4 26                       ldi     (EVALUATEEXPRESSION-1) & 255
(2)   59/    931F : 33                          xpal    P3
(2)   60/    9320 : 3F                  	xppc 	p3													; do it
(2)   61/    9321 : C6 02               	ld 		@2(p2) 												; remove target from TOS but leave data there
(2)   62/    9323 : 06                  	csa 														; did that evaluate cause an error ?
(2)   63/    9324 : 94 0A               	jp 		CLE_Over 											; if so, exit with that error.
(2)   64/    9326 :                     
(2)   65/    9326 : C2 FE               	ld 		-2(p2) 												; load address into P3
(2)   66/    9328 : 33                  	xpal 	p3
(2)   67/    9329 : C2 FF               	ld 		-1(p2)
(2)   68/    932B : 37                  	xpah 	p3
(2)   69/    932C : 40                  	lde 														; get value
(2)   70/    932D : CB 00               	st 		(p3) 												; store there
(2)   71/    932F : 03                  	scl 														; no error and exit.
(2)   72/    9330 :                     
(2)   73/    9330 :                     CLE_Over:
(1)   18/    9330 :                     	include source\commands\if.asm								; IF
(2)    1/    9330 :                     ; ****************************************************************************************************************
(2)    2/    9330 :                     ; ****************************************************************************************************************
(2)    3/    9330 :                     ;
(2)    4/    9330 :                     ;												IF command
(2)    5/    9330 :                     ;	
(2)    6/    9330 :                     ; ****************************************************************************************************************
(2)    7/    9330 :                     ; ****************************************************************************************************************
(2)    8/    9330 :                     
(2)    9/    9330 : 90 4D               	jmp		CIF_Over
(2)   10/    9332 :                     
(2)   11/    9332 :                     CMD_If:
(2)   12/    9332 : 3F                  	xppc 	p3 													; calculate LHS of expr.
(2)   13/    9333 : 94 4A               	jp 		CIF_Over											; exit on error.
(2)   14/    9335 : C1 00               	ld 		(p1)												; get the relative operator.
(2)   15/    9337 : E4 3D               	xri 	'='													; check it is =, < or #
(2)   16/    9339 : 98 0E               	jz 		CIF_Continue
(2)   17/    933B : E4 1E               	xri 	'='!'#'
(2)   18/    933D : 98 0A               	jz 		CIF_Continue
(2)   19/    933F : E4 1F               	xri 	'#'!'<'
(2)   20/    9341 : 98 06               	jz 		CIF_Continue
(2)   21/    9343 :                     
(2)   22/    9343 :                     CIF_Syntax:
(2)   23/    9343 : C4 05               	ldi	 	ERRC_Syntax											; report syntax error
(2)   24/    9345 : 01                  	xae
(2)   25/    9346 : 02                  	ccl
(2)   26/    9347 : 90 36               	jmp 	CIF_Over
(2)   27/    9349 :                     
(2)   28/    9349 :                     CIF_Continue:
(2)   29/    9349 : C5 01               	ld 		@1(p1) 												; reget operator, and save on stack
(2)   30/    934B : CE FF               	st 		@-1(p2)
(2)   31/    934D : 40                  	lde 														; save LHS on stack.
(2)   32/    934E : CE FF               	st 		@-1(p2)
(2)   33/    9350 : 3F                  	xppc 	p3 													; evaluate the RHS of the expression
(2)   34/    9351 : C6 02               	ld 		@2(p2) 												; drop operator and LHS but the values still there.
(2)   35/    9353 : 06                  	csa 														; check for RHS error
(2)   36/    9354 : 94 29               	jp 		CIF_Over 											; and exit on error
 AS V1.42 Beta [Bld 102] - source file minol.asm(if.asm) - page 15 - 1/10/2016 10:39:19


(2)   37/    9356 : C2 FF               	ld 		-1(p2) 												; get operator
(2)   38/    9358 : E4 3C               	xri 	'<'
(2)   39/    935A : 9C 09               	jnz 	CIF_Equality 										; if not less than it's an equality test e.g. # or =
(2)   40/    935C :                     ;
(2)   41/    935C :                     ;	Less than test.
(2)   42/    935C :                     ;
(2)   43/    935C : C2 FE               	ld 		-2(p2) 												; get LHS
(2)   44/    935E : 03                  	scl
(2)   45/    935F : 78                  	cae 														; subtract RHS.
(2)   46/    9360 : 06                  	csa 														; get CY/L flag
(2)   47/    9361 : D4 80               	ani 	0x80 												; now it is AC = 0 if < true.
(2)   48/    9363 : 90 0D               	jmp 	CIF_TestIfZero
(2)   49/    9365 :                     ;
(2)   50/    9365 :                     ;	Equal/Not Equal Test.
(2)   51/    9365 :                     ;	
(2)   52/    9365 :                     CIF_Equality:
(2)   53/    9365 : C2 FE               	ld 		-2(p2) 												; get LHS
(2)   54/    9367 : 60                  	xre 														; compare to RHS. AC = 0 if *equal*
(2)   55/    9368 : 98 02               	jz 		CIF_Equality2
(2)   56/    936A : C4 02               	ldi 	2 													; AC = 0 if *equal* 2 if *different*
(2)   57/    936C :                     CIF_Equality2:
(2)   58/    936C : 01                  	xae 														; save in E
(2)   59/    936D : C2 FF               	ld 		-1(p2) 												; get operator.
(2)   60/    936F : D4 02               	ani 	2 													; is now 0 if '=' ($3D) 2 if '#' ($23)
(2)   61/    9371 : 60                  	xre 														; XOR with the result. Now 0 if passes test.
(2)   62/    9372 :                     ;
(2)   63/    9372 :                     ;	Pass Test (e.g. execute statement following ;) if AC = 0
(2)   64/    9372 :                     ;
(2)   65/    9372 :                     CIF_TestIfZero:
(2)   66/    9372 : 03                  	scl 														; set CY/L = No Error.
(2)   67/    9373 : 9C 0A               	jnz 	CIF_Over 											; if non-zero then do next command
(2)   68/    9375 : C1 00               	ld 		(p1) 												; get next character
(2)   69/    9377 : E4 3B               	xri 	';'													; should be a semicolon
(2)   70/    9379 : 9C C8               	jnz 	CIF_Syntax 											; if not error
(2)   71/    937B : C5 01               	ld 		@1(p1) 												; step over it.
(2)   72/    937D : 90 54               	jmp 	ExecuteFromAddressDirect 							; and run from here.
(2)   73/    937F :                     
(2)   74/    937F :                     CIF_Over:
(2)   75/    937F :                     
(2)   76/    937F :                     
(1)   19/    937F :                     	include source\commands\goto_run.asm						; GOTO and RUN (has to be last, probably !)
(2)    1/    937F :                     ; ****************************************************************************************************************
(2)    2/    937F :                     ; ****************************************************************************************************************
(2)    3/    937F :                     ;
(2)    4/    937F :                     ;												GOTO and RUN
(2)    5/    937F :                     ;	
(2)    6/    937F :                     ; ****************************************************************************************************************
(2)    7/    937F :                     ; ****************************************************************************************************************
(2)    8/    937F :                     
(2)    9/    937F : 90 29               	jmp 	CRG_Over											; Skip over this command.
(2)   10/    9381 :                     
(2)   11/    9381 :                     ; ****************************************************************************************************************
(2)   12/    9381 :                     ;												GOTO command
(2)   13/    9381 :                     ; ****************************************************************************************************************
(2)   14/    9381 :                     
(2)   15/    9381 :                     CMD_Goto:	
(2)   16/    9381 : 3F                  	xppc 	p3 													; evaluate the line number to GOTO, in E
(2)   17/    9382 : 94 26               	jp 		CRG_Over 											; exit if error occurred
(2)   18/    9384 : 40                  	lde 														; get line number
(2)   19/    9385 : CA FF               	st 		-1(p2) 												; save below TOS.
 AS V1.42 Beta [Bld 102] - source file minol.asm(goto_run.asm) - page 16 - 1/10/2016 10:39:19


(2)   20/    9387 : (MACRO)             	lpi 	p1,ProgramBase 										; point P1 to program Base.
(2)   20/    9387 : C4 90                       ldi     (PROGRAMBASE) / 256
(2)   20/    9389 : 35                          xpah    P1
(2)   20/    938A : C4 16                       ldi     (PROGRAMBASE) & 255
(2)   20/    938C : 31                          xpal    P1
(2)   21/    938D :                     CRG_Find:
(2)   22/    938D : C1 00               	ld 		0(p1) 												; look at offset
(2)   23/    938F : 94 06               	jp 		CRG_NotEnd											; if -ve then end of program.
(2)   24/    9391 : C4 01               	ldi 	ERRC_Label 											; return label error
(2)   25/    9393 : 01                  	xae
(2)   26/    9394 : 02                  	ccl 														; set error flag
(2)   27/    9395 : 90 13               	jmp 	CRG_Over
(2)   28/    9397 :                     ;
(2)   29/    9397 :                     CRG_NotEnd:
(2)   30/    9397 : 01                  	xae 														; offset in E
(2)   31/    9398 : C1 01               	ld 		1(p1) 												; get line number
(2)   32/    939A : E2 FF               	xor 	-1(p2) 												; go back if not required one.
(2)   33/    939C : 98 0A               	jz 		CRG_ExecuteFromP1									; if found, run from P1.
(2)   34/    939E : C5 80               	ld 		@-0x80(p1) 											; go to next line
(2)   35/    93A0 : 90 EB               	jmp 	CRG_Find 											; keep trying.
(2)   36/    93A2 :                     ;
(2)   37/    93A2 :                     ; ****************************************************************************************************************
(2)   38/    93A2 :                     ;												RUN command
(2)   39/    93A2 :                     ; ****************************************************************************************************************
(2)   40/    93A2 :                     
(2)   41/    93A2 :                     CMD_Run:	
(2)   42/    93A2 : (MACRO)             	lpi 	p1,ProgramBase 										; start from first line of program
(2)   42/    93A2 : C4 90                       ldi     (PROGRAMBASE) / 256
(2)   42/    93A4 : 35                          xpah    P1
(2)   42/    93A5 : C4 16                       ldi     (PROGRAMBASE) & 255
(2)   42/    93A7 : 31                          xpal    P1
(2)   43/    93A8 :                     CRG_ExecuteFromP1:
(2)   44/    93A8 : 90 0D               	jmp 	CheckLastCommandThenExecute 						; check if the last command and if not execute.
(2)   45/    93AA :                     
(2)   46/    93AA :                     CRG_Over:
(2)   47/    93AA :                     
(1)   20/    93AA :                     
(1)   21/    93AA :                     ; ****************************************************************************************************************
(1)   22/    93AA :                     ;								Command execution complete, check for error
(1)   23/    93AA :                     ; ****************************************************************************************************************
(1)   24/    93AA :                     
(1)   25/    93AA :                     EndOfCommandExecution:
(1)   26/    93AA : 06                  	csa 														; check CY/L error flag
(1)   27/    93AB : 94 12               	jp 		GotoCommandLine 									; if CY/L = 0 error so go to command line.
(1)   28/    93AD :                     
(1)   29/    93AD :                     ; ****************************************************************************************************************
(1)   30/    93AD :                     ;	Come here to execute the instruction P1 points to, after having executed, e.g. skips forward to : or NULL
(1)   31/    93AD :                     ; ****************************************************************************************************************
(1)   32/    93AD :                     
(1)   33/    93AD :                     ExecuteNextInstruction:
(1)   34/    93AD : C5 01               	ld 		@1(p1) 												; get next and skip
(1)   35/    93AF : 98 06               	jz 		CheckLastCommandThenExecute							; if NULL, check if running mode and continue if so.
(1)   36/    93B1 : E4 3A               	xri 	':'
(1)   37/    93B3 : 9C F8               	jnz 	ExecuteNextInstruction 								; keep going until colon read.
(1)   38/    93B5 : 90 1C               	jmp 	ExecuteFromAddressDirect 							; run code from the address given.
(1)   39/    93B7 :                     ;
(1)   40/    93B7 :                     ;	Test to see if the line is not the last one (e.g. offset is +ve) and if so, execute its code.
(1)   41/    93B7 :                     ;
(1)   42/    93B7 :                     CheckLastCommandThenExecute:
(1)   43/    93B7 : C1 00               	ld 		(p1) 												; look at the offset to next.
 AS V1.42 Beta [Bld 102] - source file minol.asm(execute.asm) - page 17 - 1/10/2016 10:39:19


(1)   44/    93B9 : 94 0C               	jp 		ExecuteFromCommandStart 							; if +ve value, execute the line here.
(1)   45/    93BB :                     ;
(1)   46/    93BB :                     ;	Have reached the end of the program. The buffer with typed commands has $FF on the end to 'fake' this.
(1)   47/    93BB :                     ; 	e.g. when it reaches the end of that command it thinks it's dropped off the top of the program
(1)   48/    93BB :                     ;
(1)   49/    93BB : 03                  	scl 														; there is no error.
(1)   50/    93BC : C4 FF               	ldi 	ERRC_End 											; set the error code to "End"
(1)   51/    93BE : 01                  	xae
(1)   52/    93BF :                     GotoCommandLine: 												; return to Command Line with CY/L = error and E = code
(1)   53/    93BF : 90 FE               	jmp 	GotoCommandLine										; if CY/L = 1 (no error) E not used.
(1)   54/    93C1 :                     ;
(1)   55/    93C1 :                     ;	Syntax error comes here.
(1)   56/    93C1 :                     ;
(1)   57/    93C1 :                     SyntaxError:
(1)   58/    93C1 : C4 05               	ldi 	ERRC_Syntax
(1)   59/    93C3 : 01                  	xae
(1)   60/    93C4 : 02                  	ccl
(1)   61/    93C5 : 90 F8               	jmp 	GotoCommandLine
(1)   62/    93C7 :                     
(1)   63/    93C7 :                     ; ****************************************************************************************************************
(1)   64/    93C7 :                     ;	  Execute from the instruction at P1 (preceded by offset, line number), which is known to be a valid line.
(1)   65/    93C7 :                     ; ****************************************************************************************************************
(1)   66/    93C7 :                     
(1)   67/    93C7 :                     ExecuteFromCommandStart:
(1)   68/    93C7 : (MACRO)             	lpi 	p3,CurrentLine 										; point P3 to the current line
(1)   68/    93C7 : C4 0C                       ldi     (CURRENTLINE) / 256
(1)   68/    93C9 : 37                          xpah    P3
(1)   68/    93CA : C4 8D                       ldi     (CURRENTLINE) & 255
(1)   68/    93CC : 33                          xpal    P3
(1)   69/    93CD : C1 01               	ld 		1(p1) 												; read the line number 
(1)   70/    93CF : CB 00               	st 		(p3)												; and save it - current line # updated.
(1)   71/    93D1 : C5 02               	ld 		@2(p1) 												; skip over offset (+0) line number (+1)
(1)   72/    93D3 :                     
(1)   73/    93D3 :                     ; ****************************************************************************************************************
(1)   74/    93D3 :                     ;				Run command where the instruction is at P1 (e.g. it is an ASCIIZ string)
(1)   75/    93D3 :                     ; ****************************************************************************************************************
(1)   76/    93D3 :                     
(1)   77/    93D3 :                     ExecuteFromAddressDirect:
(1)   78/    93D3 : C5 01               	ld 		@1(p1) 												; read next character
(1)   79/    93D5 : 98 E0               	jz 		CheckLastCommandThenExecute 						; if \0 then check for the next line.
(1)   80/    93D7 : E4 20               	xri	 	' '
(1)   81/    93D9 : 98 F8               	jz 		ExecuteFromAddressDirect 							; skip over spaces.
(1)   82/    93DB : E4 1A               	xri 	' '!':'												
(1)   83/    93DD : 98 F4               	jz 		ExecuteFromAddressDirect 							; skip over colons.
(1)   84/    93DF : E4 18               	xri 	':'!'"'					
(1)   85/    93E1 : 98 CA               	jz 		ExecuteNextInstruction 								; if double quote (comment) found go to next instruction.
(1)   86/    93E3 :                     ;
(1)   87/    93E3 :                     ;	Now look the command up in the command list.
(1)   88/    93E3 :                     ;
(1)   89/    93E3 : C1 FF               	ld 		-1(p1) 												; read first character of command again
(1)   90/    93E5 : 01                  	xae 														; put in E.
(1)   91/    93E6 : (MACRO)             	lpi 	p3,CommandList
(1)   91/    93E6 : C4 95                       ldi     (COMMANDLIST) / 256
(1)   91/    93E8 : 37                          xpah    P3
(1)   91/    93E9 : C4 C5                       ldi     (COMMANDLIST) & 255
(1)   91/    93EB : 33                          xpal    P3
(1)   92/    93EC :                     EAFD_Search:
(1)   93/    93EC : C7 05               	ld 		@5(p3) 												; read first character and bump to next.
(1)   94/    93EE : 98 2C               	jz 		EAFD_LETCode 										; if zero then give up.
(1)   95/    93F0 : 60                  	xre 														; same as first character ?
 AS V1.42 Beta [Bld 102] - source file minol.asm(execute.asm) - page 18 - 1/10/2016 10:39:19


(1)   96/    93F1 : 9C F9               	jnz		EAFD_Search 										; no, keep looking.
(1)   97/    93F3 :                     
(1)   98/    93F3 : C3 FC               	ld 		-4(p3) 												; read 2nd character
(1)   99/    93F5 : E1 00               	xor 	(p1) 												; compare against actual second character
(1)  100/    93F7 : 9C F3               	jnz 	EAFD_Search
(1)  101/    93F9 :                     ;
(1)  102/    93F9 :                     ;	Skip over characters in the command, checking for NULL and : which would be syntax errors.
(1)  103/    93F9 :                     ;
(1)  104/    93F9 : C3 FD               	ld 		-3(p3) 												; number of characters to skip (one less than total as one skipped)
(1)  105/    93FB : CA FF               	st 		-1(p2) 												; temporary count.
(1)  106/    93FD :                     EAFD_Skip:
(1)  107/    93FD : C5 01               	ld 		@1(p1) 												; read a character and skip
(1)  108/    93FF : 98 C0               	jz 		SyntaxError 										; if zero, then syntax error
(1)  109/    9401 : E4 3A               	xri 	':'
(1)  110/    9403 : 98 BC               	jz 		SyntaxError 										; if colon, then syntax error.
(1)  111/    9405 : BA FF               	dld 	-1(p2) 												; do it the requisite number of times.
(1)  112/    9407 : 9C F4               	jnz 	EAFD_Skip
(1)  113/    9409 :                     ;
(1)  114/    9409 :                     ;	Skip over any subsequent spaces
(1)  115/    9409 :                     ;
(1)  116/    9409 :                     EAFD_SkipSpaces:
(1)  117/    9409 : C5 01               	ld 		@1(p1) 												; check for spaces
(1)  118/    940B : E4 20               	xri 	' '													; space found
(1)  119/    940D : 98 FA               	jz 		EAFD_SkipSpaces
(1)  120/    940F : C5 FF               	ld 		@-1(p1) 											; undo last fetch so first character of next bit.
(1)  121/    9411 :                     ;
(1)  122/    9411 :                     ;	P1 is set up so execute the handler.
(1)  123/    9411 :                     ;
(1)  124/    9411 : C3 FE               	ld 		-2(p3)												; get execute LSB
(1)  125/    9413 : 01                  	xae 														; save in E
(1)  126/    9414 : C3 FF               	ld 		-1(p3) 												; get execute MSB
(1)  127/    9416 : 37                  	xpah 	p3 													; put in P3.H
(1)  128/    9417 : 40                  	lde 														; copy E to P3.L
(1)  129/    9418 : 33                  	xpal 	p3
(1)  130/    9419 : 3F                  	xppc 	p3
(1)  131/    941A : 90 0B               	jmp 	EvaluateExpression 									; is set up to have immediate evaluate call.
(1)  132/    941C :                     ;
(1)  133/    941C :                     ;	Couldn't find a command, so point P1 to first character, then call the LET code.
(1)  134/    941C :                     ;
(1)  135/    941C :                     EAFD_LETCode:
(1)  136/    941C : C5 FF               	ld 		@-1(p1) 											; point P1 to first character of command.
(1)  137/    941E : (MACRO)             	lpi 	p3,CMD_Let-1 										; go execute LET with evaluate re-entrancy
(1)  137/    941E : C4 92                       ldi     (CMD_LET-1) / 256
(1)  137/    9420 : 37                          xpah    P3
(1)  137/    9421 : C4 DE                       ldi     (CMD_LET-1) & 255
(1)  137/    9423 : 33                          xpal    P3
(1)  138/    9424 : 3F                  	xppc 	p3
(1)  139/    9425 : 90 00               	jmp 	EvaluateExpression
(1)  140/    9427 :                     
(1)  141/    9427 :                     	include source\expression.asm 								; expression evaluator.
(2)    1/    9427 :                     ; ****************************************************************************************************************
(2)    2/    9427 :                     ; ****************************************************************************************************************
(2)    3/    9427 :                     ;
(2)    4/    9427 :                     ;												Expression Evaluation
(2)    5/    9427 :                     ;
(2)    6/    9427 :                     ; ****************************************************************************************************************
(2)    7/    9427 :                     ; ****************************************************************************************************************
(2)    8/    9427 :                     
(2)    9/    9427 :                     ; ****************************************************************************************************************
(2)   10/    9427 :                     ; ****************************************************************************************************************
 AS V1.42 Beta [Bld 102] - source file minol.asm(expression.asm) - page 19 - 1/10/2016 10:39:19


(2)   11/    9427 :                     ;
(2)   12/    9427 :                     ;		Evaluate expression at P1. Return 	CY/L = 0 : Error 	E = Error Code
(2)   13/    9427 :                     ;											CY/L = 1 : Okay 	E = Result
(2)   14/    9427 :                     ;
(2)   15/    9427 :                     ;		Terms are : 	A-Z 			Variables
(2)   16/    9427 :                     ;						[0-9]+			Constants
(2)   17/    9427 :                     ;						! 				Random byte
(2)   18/    9427 :                     ;						'?'				Character constant
(2)   19/    9427 :                     ;						(<expr>,<expr>)	Read Memory location
(2)   20/    9427 :                     ;
(2)   21/    9427 :                     ; ****************************************************************************************************************
(2)   22/    9427 :                     ; ****************************************************************************************************************
(2)   23/    9427 :                     
(2)   24/    9427 : =0x1                EEX_PendingOp = 1 												; offset to pending operation
(2)   25/    9427 : =0x0                EEX_Value = 0 													; offset to value
(2)   26/    9427 :                     
(2)   27/    9427 :                     EvaluateExpression:
(2)   28/    9427 : (MACRO)             	pushp 	p3 													; save P3 on stack
(2)   28/    9427 : 37                          xpah    P3
(2)   28/    9428 : CE FF                       st              @-1(p2)
(2)   28/    942A : 33                          xpal    P3
(2)   28/    942B : CE FF                       st              @-1(p2)
(2)   29/    942D : C4 2B               	ldi 	'+'													; push pending operation on stack
(2)   30/    942F : CE FF               	st 		@-1(p2)
(2)   31/    9431 : C4 00               	ldi 	0 													; push current value on stack
(2)   32/    9433 : CE FF               	st 		@-1(p2)												; effectively this puts 0+ on the front of the expression.
(2)   33/    9435 :                     
(2)   34/    9435 :                     ; ****************************************************************************************************************
(2)   35/    9435 :                     ;													Get Next Term
(2)   36/    9435 :                     ; ****************************************************************************************************************
(2)   37/    9435 :                     
(2)   38/    9435 :                     EEX_Term:
(2)   39/    9435 : (MACRO)             	lpi 	p3,Variables 										; point P3 to variables
(2)   39/    9435 : C4 0C                       ldi     (VARIABLES) / 256
(2)   39/    9437 : 37                          xpah    P3
(2)   39/    9438 : C4 90                       ldi     (VARIABLES) & 255
(2)   39/    943A : 33                          xpal    P3
(2)   40/    943B :                     EEX_NextChar:
(2)   41/    943B : C1 00               	ld 		(p1) 												; look at character
(2)   42/    943D : 98 4F               	jz 		EEX_TermError
(2)   43/    943F : C5 01               	ld 		@1(p1) 												; fetch and skip over.
(2)   44/    9441 : E4 20               	xri 	' '													; is it space ?
(2)   45/    9443 : 98 F6               	jz 		EEX_NextChar
(2)   46/    9445 : E4 08               	xri 	' '!'('												; is it memory access ?
(2)   47/    9447 : 98 55               	jz 		EEX_MemoryAccess
(2)   48/    9449 : E4 09               	xri 	'('!'!'												; is it a random value ?
(2)   49/    944B : 9C 1B               	jnz 	EEX_NotRandom
(2)   50/    944D :                     
(2)   51/    944D :                     ; ****************************************************************************************************************
(2)   52/    944D :                     ;												Term is ! (random byte)
(2)   53/    944D :                     ; ****************************************************************************************************************
(2)   54/    944D :                     
(2)   55/    944D :                     EEX_Random:
(2)   56/    944D : 02                  	ccl 	
(2)   57/    944E : C3 FF               	ld 		RandomSeed+1-Variables(p3) 							; shift the seed right
(2)   58/    9450 : 1F                  	rrl
(2)   59/    9451 : CB FF               	st 		RandomSeed+1-Variables(p3)
(2)   60/    9453 : 01                  	xae 														; put MSB in E
(2)   61/    9454 : C3 FE               	ld 		RandomSeed-Variables(p3)
(2)   62/    9456 : 1F                  	rrl
 AS V1.42 Beta [Bld 102] - source file minol.asm(expression.asm) - page 20 - 1/10/2016 10:39:19


(2)   63/    9457 : CB FE               	st 		RandomSeed-Variables(p3)
(2)   64/    9459 : 60                  	xre 														; XOR E into LSB
(2)   65/    945A : 01                  	xae
(2)   66/    945B : 06                  	csa 														; if CY/L is zero
(2)   67/    945C : D4 80               	ani 	0x80
(2)   68/    945E : 9C 06               	jnz 	EEX_NoTap 
(2)   69/    9460 : C3 FF               	ld 		RandomSeed+1-Variables(p3) 							; XOR MSB with $B4
(2)   70/    9462 : E4 B4               	xri 	0xB4
(2)   71/    9464 : CB FF               	st 		RandomSeed+1-Variables(p3)
(2)   72/    9466 :                     EEX_NoTap:
(2)   73/    9466 : 90 65               	jmp 	EEX_HaveTerm
(2)   74/    9468 :                     
(2)   75/    9468 :                     EEX_NotRandom:
(2)   76/    9468 : E4 06               	xri 	'!'!0x27											; is it a quote ?
(2)   77/    946A : 9C 0F               	jnz 	EEX_NotQuote
(2)   78/    946C :                     
(2)   79/    946C :                     ; ****************************************************************************************************************
(2)   80/    946C :                     ;													Term is '<char>'
(2)   81/    946C :                     ; ****************************************************************************************************************
(2)   82/    946C :                     
(2)   83/    946C : C1 00               	ld 		(p1) 												; get character that is quoted
(2)   84/    946E : 98 1E               	jz 		EEX_TermError 										; if zero, error.
(2)   85/    9470 : 01                  	xae 														; save in E if okay character.
(2)   86/    9471 : C1 01               	ld 		1(p1) 												; get character after that
(2)   87/    9473 : E4 27               	xri 	0x27 												; is it a quote ?
(2)   88/    9475 : 9C 17               	jnz 	EEX_TermError
(2)   89/    9477 : C5 02               	ld 		@2(p1) 												; skip over character and quote
(2)   90/    9479 : 90 52               	jmp 	EEX_HaveTerm 										; and execute as if a legal term
(2)   91/    947B :                     
(2)   92/    947B :                     ; ****************************************************************************************************************
(2)   93/    947B :                     ;									Not 'x' or !, so test for 0-9 and A-Z
(2)   94/    947B :                     ; ****************************************************************************************************************
(2)   95/    947B :                     
(2)   96/    947B :                     EEX_NotQuote:
(2)   97/    947B : C1 FF               	ld 		-1(p1)												; get old character.
(2)   98/    947D : 02                  	ccl
(2)   99/    947E : F4 A5               	adi 	255-'Z'												; if >= 'Z' then error.										
(2)  100/    9480 : 94 0C               	jp 		EEX_TermError
(2)  101/    9482 : F4 1A               	adi 	26 													; will be 0..25 if A..Z
(2)  102/    9484 : 94 43               	jp 		EEX_Variable 										; so do as a variable.
(2)  103/    9486 : F4 07               	adi 	'A'-1-'9'											; check if > 9
(2)  104/    9488 : 94 04               	jp 		EEX_TermError
(2)  105/    948A : F4 0A               	adi 	10 													; if 0-9
(2)  106/    948C : 94 1D               	jp 		EEX_Constant
(2)  107/    948E :                     
(2)  108/    948E :                     ; ****************************************************************************************************************
(2)  109/    948E :                     ;													 Error Exit.
(2)  110/    948E :                     ; ****************************************************************************************************************
(2)  111/    948E :                     
(2)  112/    948E :                     EEX_TermError:
(2)  113/    948E : C4 04               	ldi 	ERRC_Term 											; put term error in A
(2)  114/    9490 :                     EEX_Error:
(2)  115/    9490 : 01                  	xae 														; put error code in E
(2)  116/    9491 : 02                  	ccl 														; clear CY/L indicating error
(2)  117/    9492 :                     EEX_Exit:
(2)  118/    9492 : C6 02               	ld 		@2(p2) 												; throw the pending operation and value
(2)  119/    9494 : (MACRO)             	pullp 	p3 													; restore P3
(2)  119/    9494 : C6 01                       ld              @1(p2)
(2)  119/    9496 : 33                          xpal    P3
(2)  119/    9497 : C6 01                       ld              @1(p2)
 AS V1.42 Beta [Bld 102] - source file minol.asm(expression.asm) - page 21 - 1/10/2016 10:39:19


(2)  119/    9499 : 37                          xpah    P3
(2)  120/    949A : 06                  	csa 														; put CY/L in A bit 7
(2)  121/    949B : 3F                  	xppc 	p3 													; and exit
(2)  122/    949C : 90 89               	jmp 	EvaluateExpression 									; make re-entrant
(2)  123/    949E :                     
(2)  124/    949E :                     ; ****************************************************************************************************************
(2)  125/    949E :                     ;										Handle (<expr>,<expr>)
(2)  126/    949E :                     ; ****************************************************************************************************************
(2)  127/    949E :                     
(2)  128/    949E :                     EEX_MemoryAccess:
(2)  129/    949E : C5 FF               	ld 		@-1(p1) 											; point to the (
(2)  130/    94A0 : (MACRO)             	lpi 	p3,EvaluateAddressPair-1 							; call the evaluate/read of (h,l)
(2)  130/    94A0 : C4 95                       ldi     (EVALUATEADDRESSPAIR-1) / 256
(2)  130/    94A2 : 37                          xpah    P3
(2)  130/    94A3 : C4 7A                       ldi     (EVALUATEADDRESSPAIR-1) & 255
(2)  130/    94A5 : 33                          xpal    P3
(2)  131/    94A6 : 3F                  	xppc 	p3
(2)  132/    94A7 : 94 E9               	jp 		EEX_Exit 											; error occurred, so exit with it.
(2)  133/    94A9 : 90 22               	jmp 	EEX_HaveTerm
(2)  134/    94AB :                     
(2)  135/    94AB :                     ; ****************************************************************************************************************
(2)  136/    94AB :                     ;								Handle constant, first digit value is in A
(2)  137/    94AB :                     ; ****************************************************************************************************************
(2)  138/    94AB :                     
(2)  139/    94AB :                     EEX_Constant:
(2)  140/    94AB : 01                  	xae 														; put first digit value in E
(2)  141/    94AC :                     EEX_ConstantLoop:
(2)  142/    94AC : C1 00               	ld 		(p1) 												; get next character.
(2)  143/    94AE : 02                  	ccl
(2)  144/    94AF : F4 C6               	adi 	255-'9' 											; if >= 9 term is too large.
(2)  145/    94B1 : 94 1A               	jp 		EEX_HaveTerm
(2)  146/    94B3 : F4 8A               	adi 	10+128
(2)  147/    94B5 : 94 16               	jp 		EEX_HaveTerm
(2)  148/    94B7 : 02                  	ccl
(2)  149/    94B8 : 40                  	lde 														; A = n
(2)  150/    94B9 : 70                  	ade 														; A = n * 2
(2)  151/    94BA : 70                  	ade 														; A = n * 3
(2)  152/    94BB : 70                  	ade 														; A = n * 4
(2)  153/    94BC : 70                  	ade 														; A = n * 5
(2)  154/    94BD : 01                  	xae 														; E = n * 5
(2)  155/    94BE : 40                  	lde 														; A = n * 5
(2)  156/    94BF : 70                  	ade 														; A = n * 10
(2)  157/    94C0 : 01                  	xae
(2)  158/    94C1 : C5 01               	ld 		@1(p1) 												; read character convert to number
(2)  159/    94C3 : D4 0F               	ani 	0x0F
(2)  160/    94C5 : 70                  	ade
(2)  161/    94C6 : 01                  	xae
(2)  162/    94C7 : 90 E3               	jmp 	EEX_ConstantLoop
(2)  163/    94C9 :                     
(2)  164/    94C9 :                     
(2)  165/    94C9 :                     ; ****************************************************************************************************************
(2)  166/    94C9 :                     ;									Access variable, variable id (0-25) in A
(2)  167/    94C9 :                     ; ****************************************************************************************************************
(2)  168/    94C9 :                     
(2)  169/    94C9 :                     EEX_Variable:
(2)  170/    94C9 : 01                  	xae 														; put value 0-25 in E
(2)  171/    94CA : C3 80               	ld 		-0x80(p3) 											; load using E as index
(2)  172/    94CC : 01                  	xae 														; put in E
(2)  173/    94CD :                     
(2)  174/    94CD :                     ; ****************************************************************************************************************
 AS V1.42 Beta [Bld 102] - source file minol.asm(expression.asm) - page 22 - 1/10/2016 10:39:19


(2)  175/    94CD :                     ;										Have the right term in E, process it
(2)  176/    94CD :                     ; ****************************************************************************************************************
(2)  177/    94CD :                     
(2)  178/    94CD :                     EEX_HaveTerm:
(2)  179/    94CD : C2 01               	ld 		EEX_PendingOp(p2) 									; get pending operation.
(2)  180/    94CF : E4 2B               	xri 	'+'
(2)  181/    94D1 : 9C 06               	jnz 	EEX_NotAdd
(2)  182/    94D3 :                     
(2)  183/    94D3 :                     ; ****************************************************************************************************************
(2)  184/    94D3 :                     ;												Add Right Term to Value
(2)  185/    94D3 :                     ; ****************************************************************************************************************
(2)  186/    94D3 : 02                  	ccl
(2)  187/    94D4 : C2 00               	ld 		EEX_Value(p2)										; get value
(2)  188/    94D6 : 70                  	ade 														; add right
(2)  189/    94D7 : 90 08               	jmp 	EEX_SaveAndExit 									; save and exit
(2)  190/    94D9 :                     
(2)  191/    94D9 :                     EEX_NotAdd:
(2)  192/    94D9 : E4 06               	xri 	'+'!'-'
(2)  193/    94DB : 9C 12               	jnz		EEX_NotSubtract
(2)  194/    94DD :                     
(2)  195/    94DD :                     ; ****************************************************************************************************************
(2)  196/    94DD :                     ;											 Subtract Right Term from Value
(2)  197/    94DD :                     ; ****************************************************************************************************************
(2)  198/    94DD : 03                  	scl
(2)  199/    94DE : C2 00               	ld 		EEX_Value(p2)										; get value
(2)  200/    94E0 : 78                  	cae 														; subtract right
(2)  201/    94E1 :                     EEX_SaveAndExit:
(2)  202/    94E1 : CA 00               	st 		EEX_Value(p2) 										; save value back
(2)  203/    94E3 : 90 30               	jmp 	EEX_CheckNextOperation 								; and exit, look for next operator.
(2)  204/    94E5 :                     
(2)  205/    94E5 :                     EEX_Divide_Zero:												; handle divide by zero error.
(2)  206/    94E5 : C4 07               	ldi 	ERRC_DivZero
(2)  207/    94E7 : 90 A7               	jmp 	EEX_Error
(2)  208/    94E9 :                     
(2)  209/    94E9 :                     EEX_EndExpression:
(2)  210/    94E9 : C2 00               	ld 		EEX_Value(p2) 										; get current value
(2)  211/    94EB : 01                  	xae 														; put in E
(2)  212/    94EC : 03                  	scl 														; set CY/L indicating expression okay.
(2)  213/    94ED : 90 A3               	jmp 	EEX_Exit 											; and exit.
(2)  214/    94EF :                     
(2)  215/    94EF :                     EEX_NotSubtract:
(2)  216/    94EF : E4 07               	xri 	'-'!'*'
(2)  217/    94F1 : 9C 45               	jnz 	EEX_Divide
(2)  218/    94F3 :                     
(2)  219/    94F3 :                     ; ****************************************************************************************************************
(2)  220/    94F3 :                     ;											 Multiply Right Term into Value
(2)  221/    94F3 :                     ; ****************************************************************************************************************
(2)  222/    94F3 :                     
(2)  223/    94F3 : C2 00               	ld 		EEX_Value(p2) 										; a = left value
(2)  224/    94F5 : CA 01               	st 		1(p2)
(2)  225/    94F7 : C4 00               	ldi 	0													; res = 0(p2)
(2)  226/    94F9 : CA 00               	st 		0(p2) 												; clear it.
(2)  227/    94FB :                     EEX_MultiplyLoop:
(2)  228/    94FB : 40                  	lde  														; if B == 0 then we are done.
(2)  229/    94FC : 98 17               	jz 		EEX_CheckNextOperation
(2)  230/    94FE : D4 01               	ani 	1 													; if B LSB is non zero.
(2)  231/    9500 : 98 07               	jz 		EEX_Multiply_B0IsZero
(2)  232/    9502 : C2 00               	ld 		0(p2) 												; add A to Result
(2)  233/    9504 : 02                  	ccl
(2)  234/    9505 : F2 01               	add 	1(p2)
 AS V1.42 Beta [Bld 102] - source file minol.asm(expression.asm) - page 23 - 1/10/2016 10:39:19


(2)  235/    9507 : CA 00               	st 		0(p2)
(2)  236/    9509 :                     EEX_Multiply_B0IsZero:
(2)  237/    9509 : 40                  	lde 														; shift B right
(2)  238/    950A : 1C                  	sr
(2)  239/    950B : 01                  	xae
(2)  240/    950C : C2 01               	ld 		1(p2) 												; shift A left
(2)  241/    950E : 02                  	ccl
(2)  242/    950F : F2 01               	add 	1(p2)
(2)  243/    9511 : CA 01               	st 		1(p2)
(2)  244/    9513 : 90 E6               	jmp 	EEX_MultiplyLoop
(2)  245/    9515 :                     
(2)  246/    9515 :                     ; ****************************************************************************************************************
(2)  247/    9515 :                     ;											Check next operation
(2)  248/    9515 :                     ; ****************************************************************************************************************
(2)  249/    9515 :                     
(2)  250/    9515 :                     EEX_CheckNextOperation:
(2)  251/    9515 : C5 01               	ld 		@1(p1)												; skip over spaces
(2)  252/    9517 : E4 20               	xri 	' '
(2)  253/    9519 : 98 FA               	jz 		EEX_CheckNextOperation
(2)  254/    951B : C5 FF               	ld 		@-1(p1)												; get operator
(2)  255/    951D : E4 2B               	xri 	'+'													; check if + - * /
(2)  256/    951F : 98 0C               	jz 		EEX_FoundOperator
(2)  257/    9521 : E4 06               	xri 	'+'!'-'
(2)  258/    9523 : 98 08               	jz 		EEX_FoundOperator
(2)  259/    9525 : E4 07               	xri 	'-'!'*'
(2)  260/    9527 : 98 04               	jz 		EEX_FoundOperator
(2)  261/    9529 : E4 05               	xri 	'*'!'/'
(2)  262/    952B : 9C BC               	jnz 	EEX_EndExpression
(2)  263/    952D :                     
(2)  264/    952D :                     EEX_FoundOperator:
(2)  265/    952D : C5 01               	ld  	@1(p1) 												; get and skip operator
(2)  266/    952F : CA 01               	st 		EEX_PendingOp(p2)									; save then pending operator
(2)  267/    9531 : (MACRO)             	lpi 	p3,EEX_Term-1
(2)  267/    9531 : C4 94                       ldi     (EEX_TERM-1) / 256
(2)  267/    9533 : 37                          xpah    P3
(2)  267/    9534 : C4 34                       ldi     (EEX_TERM-1) & 255
(2)  267/    9536 : 33                          xpal    P3
(2)  268/    9537 : 3F                  	xppc 	p3
(2)  269/    9538 :                     
(2)  270/    9538 :                     ; ****************************************************************************************************************
(2)  271/    9538 :                     ;											 Divide Right Term into Value
(2)  272/    9538 :                     ; ****************************************************************************************************************
(2)  273/    9538 :                     
(2)  274/    9538 :                     EEX_Divide:
(2)  275/    9538 : 40                  	lde 														; if denominator zero, error 2.
(2)  276/    9539 : 98 AA               	jz 		EEX_Divide_Zero
(2)  277/    953B : C2 00               	ld 		0(p2) 												; numerator into 1(p2)
(2)  278/    953D : CA 01               	st 		1(p2) 												; denominator is in E
(2)  279/    953F : C4 00               	ldi 	0
(2)  280/    9541 : CA 00               	st 		0(p2)												; quotient in 0(p2)
(2)  281/    9543 : CA FF               	st 		-1(p2) 												; remainder in -1(p2)
(2)  282/    9545 : C4 80               	ldi 	0x80 									
(2)  283/    9547 : CA FE               	st 		-2(p2) 												; bit in -2(p2)
(2)  284/    9549 :                     
(2)  285/    9549 :                     EEX_Divide_Loop:
(2)  286/    9549 : C2 FE               	ld 		-2(p2) 												; exit if bit = 0,we've finished.
(2)  287/    954B : 98 C8               	jz 		EEX_CheckNextOperation
(2)  288/    954D :                     
(2)  289/    954D : 02                  	ccl 	 													; shift remainder left.
(2)  290/    954E : C2 FF               	ld 		-1(p2)
 AS V1.42 Beta [Bld 102] - source file minol.asm(expression.asm) - page 24 - 1/10/2016 10:39:19


(2)  291/    9550 : F2 FF               	add 	-1(p2)
(2)  292/    9552 : CA FF               	st 		-1(p2)
(2)  293/    9554 :                     
(2)  294/    9554 : C2 01               	ld 		1(p2)												; get numerator.
(2)  295/    9556 : 94 02               	jp 		EEX_Divide_Numerator_Positive
(2)  296/    9558 : AA FF               	ild 	-1(p2)  											; if numerator -ve, increment remainder.
(2)  297/    955A :                     EEX_Divide_Numerator_Positive:
(2)  298/    955A :                     
(2)  299/    955A : C2 FF               	ld 		-1(p2) 												; calculate remainder - denominator
(2)  300/    955C : 03                  	scl
(2)  301/    955D : 78                  	cae 
(2)  302/    955E : CA FD               	st 		-3(p2) 												; save in temp -3(p2)
(2)  303/    9560 : 06                  	csa 														; if temp >= 0, CY/L is set
(2)  304/    9561 : 94 0A               	jp 		EEX_Divide_Temp_Positive
(2)  305/    9563 :                     
(2)  306/    9563 : C2 FD               	ld 		-3(p2) 												; copy temp to remainder
(2)  307/    9565 : CA FF               	st 		-1(p2)
(2)  308/    9567 : C2 FE               	ld 		-2(p2) 												; or bit into quotient
(2)  309/    9569 : DA 00               	or 		0(p2)
(2)  310/    956B : CA 00               	st 		0(p2)
(2)  311/    956D :                     EEX_Divide_Temp_Positive:
(2)  312/    956D : C2 FE               	ld 		-2(p2) 												; shift bit right
(2)  313/    956F : 1C                  	sr
(2)  314/    9570 : CA FE               	st 		-2(p2)
(2)  315/    9572 :                     
(2)  316/    9572 : C2 01               	ld 		1(p2)												; shift numerator positive
(2)  317/    9574 : 02                  	ccl
(2)  318/    9575 : F2 01               	add 	1(p2)
(2)  319/    9577 : CA 01               	st 		1(p2)
(2)  320/    9579 : 90 CE               	jmp 	EEX_Divide_Loop
(2)  321/    957B :                     
(2)  322/    957B :                     ; ****************************************************************************************************************
(2)  323/    957B :                     ; ****************************************************************************************************************
(2)  324/    957B :                     ;
(2)  325/    957B :                     ;	Evaluate an address pair at P1 e.g. (<expr>,<expr>).  Returns as for expression, but stack-2, stack-1 are
(2)  326/    957B :                     ;	the address (the data at that address is in E if no error occurs). Used for reading and writing.
(2)  327/    957B :                     ;
(2)  328/    957B :                     ; ****************************************************************************************************************
(2)  329/    957B :                     ; ****************************************************************************************************************
(2)  330/    957B :                     
(2)  331/    957B :                     EvaluateAddressPair:
(2)  332/    957B : C6 FE               	ld 		@-2(p2)												; make space to store HL
(2)  333/    957D : (MACRO)             	pushp 	p3 													; save return address.
(2)  333/    957D : 37                          xpah    P3
(2)  333/    957E : CE FF                       st              @-1(p2)
(2)  333/    9580 : 33                          xpal    P3
(2)  333/    9581 : CE FF                       st              @-1(p2)
(2)  334/    9583 : C1 00               	ld 		(p1) 												; check first is '(', exit with term error if not
(2)  335/    9585 : E4 28               	xri 	'('
(2)  336/    9587 : 9C 2E               	jnz 	EAP_Error
(2)  337/    9589 : C5 01               	ld 		@1(p1)												; skip over it.
(2)  338/    958B : (MACRO)             	lpi 	p3,EvaluateExpression-1 							; evaluate H
(2)  338/    958B : C4 94                       ldi     (EVALUATEEXPRESSION-1) / 256
(2)  338/    958D : 37                          xpah    P3
(2)  338/    958E : C4 26                       ldi     (EVALUATEEXPRESSION-1) & 255
(2)  338/    9590 : 33                          xpal    P3
(2)  339/    9591 : 3F                  	xppc 	p3
(2)  340/    9592 : 94 27               	jp 		EAP_Exit 											; exit if failed
(2)  341/    9594 : 40                  	lde 														; store H at 3(P2)
(2)  342/    9595 : CA 03               	st 		3(p2)
 AS V1.42 Beta [Bld 102] - source file minol.asm(expression.asm) - page 25 - 1/10/2016 10:39:19


(2)  343/    9597 : C1 00               	ld 		(p1) 												; check for ','
(2)  344/    9599 : E4 2C               	xri 	','
(2)  345/    959B : 9C 1A               	jnz 	EAP_Error											; fail if not present
(2)  346/    959D : C5 01               	ld 		@1(p1)												; skip over comma
(2)  347/    959F : 3F                  	xppc 	p3 													; evaluate L
(2)  348/    95A0 : 94 19               	jp 		EAP_Exit 											; exit on error
(2)  349/    95A2 : 40                  	lde 														; store L at 2(P2)
(2)  350/    95A3 : CA 02               	st 		2(p2)
(2)  351/    95A5 : 33                  	xpal 	p3 													; and put in P3.L for later
(2)  352/    95A6 : C1 00               	ld 		(p1) 												; check for ')'
(2)  353/    95A8 : E4 29               	xri 	')'
(2)  354/    95AA : 9C 0B               	jnz 	EAP_Error
(2)  355/    95AC : C5 01               	ld 		@1(p1) 												; skip over close bracket
(2)  356/    95AE : C2 03               	ld 		3(p2) 												; put 3(P2) in P3.H
(2)  357/    95B0 : 37                  	xpah 	p3
(2)  358/    95B1 : C3 00               	ld 		(p3) 												; read address
(2)  359/    95B3 : 01                  	xae 														; put in E
(2)  360/    95B4 : 03                  	scl 														; set carry to indicate okay
(2)  361/    95B5 : 90 04               	jmp 	EAP_Exit 											; and exit.
(2)  362/    95B7 :                     ;
(2)  363/    95B7 :                     EAP_Error:
(2)  364/    95B7 : C4 04               	ldi 	ERRC_TERM 											; set error up
(2)  365/    95B9 : 01                  	xae
(2)  366/    95BA : 02                  	ccl
(2)  367/    95BB :                     ;
(2)  368/    95BB :                     EAP_Exit:														; exit
(2)  369/    95BB : (MACRO)             	pullp 	p3 													; restore P3
(2)  369/    95BB : C6 01                       ld              @1(p2)
(2)  369/    95BD : 33                          xpal    P3
(2)  369/    95BE : C6 01                       ld              @1(p2)
(2)  369/    95C0 : 37                          xpah    P3
(2)  370/    95C1 : C6 02               	ld 		@2(p2) 												; drop the H L address store
(2)  371/    95C3 : 06                  	csa 														; A bit 7 = CY/L
(2)  372/    95C4 : 3F                  	xppc 	p3
(2)  373/    95C5 :                     
(2)  374/    95C5 :                     
(1)  142/    95C5 :                     
(1)  143/    95C5 :                     ; ****************************************************************************************************************
(1)  144/    95C5 :                     ;		Command look up table - should be ordered by degree of usage, and OS things (e.g. LIST) at the end
(1)  145/    95C5 :                     ; ****************************************************************************************************************
(1)  146/    95C5 :                     
(1)  147/    95C5 :                     CommandList:
(1)  148/    95C5 : (MACRO)             	cmd 	'L','E',3,CMD_Let 									; LET var|(h,l) = <expr>
(1)  148/    95C5 : 4C 45                       db              'L','E'                                                                                           ; first and second characters
(1)  148/    95C7 : 02                          db              (3)-1                                                                                      ; 3 -1 (first char already skipped)
(1)  148/    95C8 : DE 92                       dw              (CMD_LET)-1                                                                                        ; execution point for prefetch.
(1)  149/    95CA : (MACRO)             	cmd 	'I','F',2,CMD_If 									; If [expr][=|#|<][expr]; [statement]
(1)  149/    95CA : 49 46                       db              'I','F'                                                                                           ; first and second characters
(1)  149/    95CC : 01                          db              (2)-1                                                                                      ; 2 -1 (first char already skipped)
(1)  149/    95CD : 31 93                       dw              (CMD_IF)-1                                                                                        ; execution point for prefetch.
(1)  150/    95CF : (MACRO)             	cmd 	'G','O',4,CMD_Goto									; GOTO [line number]
(1)  150/    95CF : 47 4F                       db              'G','O'                                                                                           ; first and second characters
(1)  150/    95D1 : 03                          db              (4)-1                                                                                      ; 4 -1 (first char already skipped)
(1)  150/    95D2 : 80 93                       dw              (CMD_GOTO)-1                                                                                        ; execution point for prefetch.
(1)  151/    95D4 : (MACRO)             	cmd 	'C','A',4,CMD_Call									; CALL (high,low)
(1)  151/    95D4 : 43 41                       db              'C','A'                                                                                           ; first and second characters
(1)  151/    95D6 : 03                          db              (4)-1                                                                                      ; 4 -1 (first char already skipped)
(1)  151/    95D7 : B5 92                       dw              (CMD_CALL)-1                                                                                        ; execution point for prefetch.
(1)  152/    95D9 : (MACRO)             	cmd 	'C','L',5,CMD_Clear									; CLEAR
(1)  152/    95D9 : 43 4C                       db              'C','L'                                                                                           ; first and second characters
 AS V1.42 Beta [Bld 102] - source file minol.asm(execute.asm) - page 26 - 1/10/2016 10:39:19


(1)  152/    95DB : 04                          db              (5)-1                                                                                      ; 5 -1 (first char already skipped)
(1)  152/    95DC : A0 92                       dw              (CMD_CLEAR)-1                                                                                        ; execution point for prefetch.
(1)  153/    95DE : (MACRO)             	cmd 	'E','N',3,CMD_End 									; END
(1)  153/    95DE : 45 4E                       db              'E','N'                                                                                           ; first and second characters
(1)  153/    95E0 : 02                          db              (3)-1                                                                                      ; 3 -1 (first char already skipped)
(1)  153/    95E1 : 9A 92                       dw              (CMD_END)-1                                                                                        ; execution point for prefetch.
(1)  154/    95E3 : (MACRO)             	cmd 	'N','E',3,CMD_New 									; NEW
(1)  154/    95E3 : 4E 45                       db              'N','E'                                                                                           ; first and second characters
(1)  154/    95E5 : 02                          db              (3)-1                                                                                      ; 3 -1 (first char already skipped)
(1)  154/    95E6 : 90 92                       dw              (CMD_NEW)-1                                                                                        ; execution point for prefetch.
(1)  155/    95E8 : (MACRO)             	cmd 	'R','U',3,CMD_Run									; RUN
(1)  155/    95E8 : 52 55                       db              'R','U'                                                                                           ; first and second characters
(1)  155/    95EA : 02                          db              (3)-1                                                                                      ; 3 -1 (first char already skipped)
(1)  155/    95EB : A1 93                       dw              (CMD_RUN)-1                                                                                        ; execution point for prefetch.
(1)  156/    95ED : (MACRO)             	cmd 	'O','S',2,CMD_OS 									; OS
(1)  156/    95ED : 4F 53                       db              'O','S'                                                                                           ; first and second characters
(1)  156/    95EF : 01                          db              (2)-1                                                                                      ; 2 -1 (first char already skipped)
(1)  156/    95F0 : 87 92                       dw              (CMD_OS)-1                                                                                        ; execution point for prefetch.
(1)  157/    95F2 : 00                  	db 		0
(1)  158/    95F3 :                     
(1)  159/    95F3 :                     ; Done:	GOTO, RUN, CLEAR, NEW, END, OS, CALL, LET (and optional version)
(1)  160/    95F3 :                     ; Not Done: PR,IN,LIST
      57/    95F3 :                     
 AS V1.42 Beta [Bld 102] - source file minol.asm - page 27 - 1/10/2016 10:39:19


  symbol table (* = unused):
  ------------------------

*ARCHITECTURE :  i386-unknown-win32 - | *BIGENDIAN :                      0 - |
 BOOTMONITOR :                  210 - | *BRANCHEXT :                      0 - |
*CASESENSITIVE :                  0 - |  CCA_OVER :                    92DD C |
 CCL_LOOP :                    92AB C |  CCL_OVER :                    92B4 C |
 CHECKLASTCOMMANDTHENEXECUTE : 93B7 C |  CIF_CONTINUE :                9349 C |
 CIF_EQUALITY :                9365 C |  CIF_EQUALITY2 :               936C C |
 CIF_OVER :                    937F C |  CIF_SYNTAX :                  9343 C |
 CIF_TESTIFZERO :              9372 C |  CLE_EVALUATEANDWRITE :        9310 C |
 CLE_ISHL :                    9305 C |  CLE_OVER :                    9330 C |
 CLE_SINGLEVARIABLE :          92F6 C |  CLE_SYNTAX :                  92F0 C |
 CMD_CALL :                    92B6 C |  CMD_CLEAR :                   92A1 C |
 CMD_END :                     929B C |  CMD_GOTO :                    9381 C |
 CMD_IF :                      9332 C |  CMD_LET :                     92DF C |
 CMD_NEW :                     9291 C |  CMD_OS :                      9288 C |
 CMD_RUN :                     93A2 C |  CNE_OVER :                    929F C |
 COMMANDLIST :                 95C5 C | *CONSTPI :        3.141592653589793 - |
 COS_OVER :                    928F C |  CRG_EXECUTEFROMP1 :           93A8 C |
 CRG_FIND :                    938D C |  CRG_NOTEND :                  9397 C |
 CRG_OVER :                    93AA C |  CURRENTLINE :                  C8D - |
*DATE :                   1/10/2016 - |  EAFD_LETCODE :                941C C |
 EAFD_SEARCH :                 93EC C |  EAFD_SKIP :                   93FD C |
 EAFD_SKIPSPACES :             9409 C |  EAP_ERROR :                   95B7 C |
 EAP_EXIT :                    95BB C |  EEX_CHECKNEXTOPERATION :      9515 C |
 EEX_CONSTANT :                94AB C |  EEX_CONSTANTLOOP :            94AC C |
 EEX_DIVIDE :                  9538 C |  EEX_DIVIDE_LOOP :             9549 C |
 EEX_DIVIDE_NUMERATOR_POSITIVE :                                       955A C |
 EEX_DIVIDE_TEMP_POSITIVE :    956D C |  EEX_DIVIDE_ZERO :             94E5 C |
 EEX_ENDEXPRESSION :           94E9 C |  EEX_ERROR :                   9490 C |
 EEX_EXIT :                    9492 C |  EEX_FOUNDOPERATOR :           952D C |
 EEX_HAVETERM :                94CD C |  EEX_MEMORYACCESS :            949E C |
 EEX_MULTIPLYLOOP :            94FB C |  EEX_MULTIPLY_B0ISZERO :       9509 C |
 EEX_NEXTCHAR :                943B C |  EEX_NOTADD :                  94D9 C |
 EEX_NOTAP :                   9466 C |  EEX_NOTQUOTE :                947B C |
 EEX_NOTRANDOM :               9468 C |  EEX_NOTSUBTRACT :             94EF C |
 EEX_PENDINGOP :                  1 - | *EEX_RANDOM :                  944D C |
 EEX_SAVEANDEXIT :             94E1 C |  EEX_TERM :                    9435 C |
 EEX_TERMERROR :               948E C |  EEX_VALUE :                      0 - |
 EEX_VARIABLE :                94C9 C | *ENDOFCOMMANDEXECUTION :       93AA C |
 ERRC_DIVZERO :                   7 - |  ERRC_END :                      FF - |
 ERRC_LABEL :                     1 - | *ERRC_MEMORY :                    6 - |
 ERRC_SYNTAX :                    5 - |  ERRC_TERM :                      4 - |
*ERRC_UNKNOWN :                   2 - |  EVALUATEADDRESSPAIR :         957B C |
 EVALUATEEXPRESSION :          9427 C |  EXECUTEFROMADDRESSDIRECT :    93D3 C |
 EXECUTEFROMCOMMANDSTART :     93C7 C |  EXECUTENEXTINSTRUCTION :      93AD C |
*FALSE :                          0 - | *FULLPMMU :                       1 - |
 GETCHAR :                     91FA C |  GETSTRING :                   921E C |
 GOTOCOMMANDLINE :             93BF C | *HAS64 :                          1 - |
*HASDSP :                         0 - | *HASFPU :                         0 - |
*HASPMMU :                        0 - | *INEXTMODE :                      0 - |
*INLWORDMODE :                    0 - | *INMAXMODE :                      0 - |
*INSRCMODE :                      0 - | *INSUPMODE :                      0 - |
*LISTON :                         1 - | *MACEXP :                         1 - |
*MOMCPU :                         C - | *MOMCPUNAME :                 SC/MP - |
*NESTMAX :                      100 - | *OSMATHLIBRARY :                  3 - |
*PACKING :                        0 - | *PADDING :                        1 - |
 PRINT :                       913A C |  PROGRAMBASE :                 9016 C |
 RANDOMSEED :                   C8E - | *RELAXED :                        0 - |
 AS V1.42 Beta [Bld 102] - source file minol.asm - page 28 - 1/10/2016 10:39:19


 SCREENCURSOR :                 C80 - |  SCREENMIRROR :                 C00 - |
 SYNTAXERROR :                 93C1 C |  SYSTEMMEMORY :                 C90 - |
*TIME :                    10:39:19 - | *TRUE :                           1 - |
 VARIABLES :                    C90 - | *VERSION :                     142F - |
 WAIT1 :                       9014 C |  __GCNOTLOWER [GETCHAR] :      9219 C |
 __GCWAITKEY [GETCHAR] :       91FF C |  __GCWAITRELEASE [GETCHAR] :   9207 C |
 __GSBACKSPACE [GETSTRING] :   9279 C |  __GSCONTROLKEY [GETSTRING] :  925C C |
 __GSLOOP [GETSTRING] :        922C C |  __PRCLEARFROMMOVETO [PRINT] : 91DA C |
 __PRCLEARLOOP [PRINT] :       91DC C |  __PRCLEARSCREEN [PRINT] :     91D8 C |
 __PRCOPY [PRINT] :            91E6 C |  __PREXIT [PRINT] :            919D C |
 __PREXITNOCHECK [PRINT] :     91A1 C |  __PRISCONTROLCHAR [PRINT] :   91AF C |
 __PRISRETURN [PRINT] :        91CF C |  __PRNOTASCII [PRINT] :        9177 C |
 __PRPRINTCHARACTERA [PRINT] : 915B C |  __PRPRINTSTRING [PRINT] :     9149 C |
 __PRSCROLLLOOP [PRINT] :      918F C |  __PRUPDATECURSOR [PRINT] :    9180 C |

    141 symbols
     33 unused symbols

 AS V1.42 Beta [Bld 102] - source file minol.asm - page 29 - 1/10/2016 10:39:19


  defined macros:
  ---------------

CMD                                   | CODE                                 
LPI                                   | PULLA                                
PULLE                                 | PULLP                                
PUSHA                                 | PUSHE                                
PUSHP                                 | SETV                                 

     10 macros

 AS V1.42 Beta [Bld 102] - source file minol.asm - page 30 - 1/10/2016 10:39:19


  codepages:
  ----------

STANDARD (0 changed characters)


0.21 seconds assembly time

   1288 lines source file
   1485 lines incl. macro expansions
      2 passes
      0 errors
      0 warnings
