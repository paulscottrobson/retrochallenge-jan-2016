 AS V1.42 Beta [Bld 102] - source file minol.asm - page 1 - 12/9/2015 20:48:09


       1/       0 :                     ; ****************************************************************************************************************
       2/       0 :                     ; ****************************************************************************************************************
       3/       0 :                     ;
       4/       0 :                     ;												MINOL Intepreter
       5/       0 :                     ;
       6/       0 :                     ; ****************************************************************************************************************
       7/       0 :                     ; ****************************************************************************************************************
       8/       0 :                     
       9/       0 :                     ; ****************************************************************************************************************
      10/       0 :                     ;												 Memory Allocation
      11/       0 :                     ; ****************************************************************************************************************
      12/       0 :                     
      13/       0 :                     	cpu 	sc/mp
      14/       0 :                     	
      15/       0 : =0xC00              ScreenMirror = 0xC00 											; Screen mirror, 128 bytes, 256 byte page boundary.
      16/       0 : =0xC80              ScreenCursor = ScreenMirror+0x80  								; Position on that screen (00..7F)
      17/       0 :                     
      18/       0 : =0xC82              Variables = ScreenCursor+2 										; uses 32 bytes for expression evaluation
      19/       0 :                     
      20/       0 : =0xCA2              MinolVars = Variables + 32 										; MINOL variables start here.
      21/       0 :                     
      22/       0 : =0xCA2              CurrentLine = MinolVars + 0 									; current line number (0 = not running)
      23/       0 : =0xCA3              CurrentAddr = MinolVars + 1 									; position in current line (Low,High)
      24/       0 : =0xCA5              ProgramBase = MinolVars + 3 									; address of program base (Low,High)
      25/       0 :                     
      26/       0 :                     ; ****************************************************************************************************************
      27/       0 :                     ;														Macros
      28/       0 :                     ; ****************************************************************************************************************
      29/       0 :                     
      30/       0 :                     lpi	macro	ptr,addr
      31/       0 :                     	ldi 	(addr) / 256
      32/       0 :                     	xpah 	ptr
      33/       0 :                     	ldi 	(addr) & 255
      34/       0 :                     	xpal 	ptr
      35/       0 :                     	endm
      36/       0 :                     
      37/       0 :                     ; ****************************************************************************************************************
      38/       0 :                     ;													Main Program
      39/       0 :                     ; ****************************************************************************************************************
      40/       0 :                     
      41/    9000 :                     	org 	0x9000 												; the ROM starts here
      42/    9000 :                     
      43/    9000 : 68                  	db 		0x68												; this makes it boot straight into this ROM.
      44/    9001 : (MACRO)             	lpi 	p2,0xFFF											; set up stack
      44/    9001 : C4 0F                       ldi     (0XFFF) / 256
      44/    9003 : 36                          xpah    P2
      44/    9004 : C4 FF                       ldi     (0XFFF) & 255
      44/    9006 : 32                          xpal    P2
      45/    9007 :                     
      46/    9007 : (MACRO)             	lpi 	p3,Print-1 											; clear screen
      46/    9007 : C4 90                       ldi     (PRINT-1) / 256
      46/    9009 : 37                          xpah    P3
      46/    900A : C4 DA                       ldi     (PRINT-1) & 255
      46/    900C : 33                          xpal    P3
      47/    900D : C4 0C               	ldi 	12
      48/    900F : 3F                  	xppc 	p3
      49/    9010 : C4 5D               	ldi 	']'													; Prompt
      50/    9012 : 3F                  	xppc 	p3
      51/    9013 : (MACRO)             	lpi 	p1,test
      51/    9013 : C4 90                       ldi     (TEST) / 256
 AS V1.42 Beta [Bld 102] - source file minol.asm - page 2 - 12/9/2015 20:48:09


      51/    9015 : 35                          xpah    P1
      51/    9016 : C4 22                       ldi     (TEST) & 255
      51/    9018 : 31                          xpal    P1
      52/    9019 : (MACRO)             	lpi 	p3,ExecuteCommand-1
      52/    9019 : C4 90                       ldi     (EXECUTECOMMAND-1) / 256
      52/    901B : 37                          xpah    P3
      52/    901C : C4 38                       ldi     (EXECUTECOMMAND-1) & 255
      52/    901E : 33                          xpal    P3
      53/    901F : 3F                  	xppc 	p3
      54/    9020 :                     
      55/    9020 :                     stop:
      56/    9020 : 90 FE               	jmp 	stop
      57/    9022 :                     
      58/    9022 :                     ; ****************************************************************************************************************
      59/    9022 :                     ;										Routines in source subdirectory
      60/    9022 :                     ; ****************************************************************************************************************
      61/    9022 :                     	
      62/    9022 :                     	include source\execute.asm									; command execution
(1)    1/    9022 :                     ; ****************************************************************************************************************
(1)    2/    9022 :                     ; ****************************************************************************************************************
(1)    3/    9022 :                     ;
(1)    4/    9022 :                     ;											Execute MINOL ommand
(1)    5/    9022 :                     ;
(1)    6/    9022 :                     ;		Command at P1, Stack at P2. Preserves A,E except in Error (CY/L = 0 where A is error code).
(1)    7/    9022 :                     ;
(1)    8/    9022 :                     ; ****************************************************************************************************************
(1)    9/    9022 :                     ; ****************************************************************************************************************
(1)   10/    9022 :                     
(1)   11/    9022 : 45 4E 44 3A 41 20   test:db 	"END:A = 2",0
                    3D 20 32 00 
(1)   12/    902C :                     
(1)   13/    902C :                     __EXExit:
(1)   14/    902C : 03                  	scl 														; is okay.
(1)   15/    902D :                     __EXExitNoSC:
(1)   16/    902D : C6 01               	ld 		@1(p2) 												; restore P3
(1)   17/    902F : 33                  	xpal 	p3
(1)   18/    9030 : C6 01               	ld 		@1(p2)
(1)   19/    9032 : 37                  	xpah 	p3
(1)   20/    9033 : C6 01               	ld 		@1(p2)												; restore E
(1)   21/    9035 : 01                  	xae
(1)   22/    9036 : C6 01               	ld 		@1(p2) 												; restore A
(1)   23/    9038 : 3F                  	xppc 	p3
(1)   24/    9039 :                     
(1)   25/    9039 :                     ExecuteCommand:
(1)   26/    9039 : CE FF               	st 		@-1(p2) 											; push A
(1)   27/    903B : 40                  	lde 														; push E
(1)   28/    903C : CE FF               	st 		@-1(p2)
(1)   29/    903E : 37                  	xpah 	p3 													; push P3.
(1)   30/    903F : CE FF               	st 		@-1(p2)
(1)   31/    9041 : 33                  	xpal 	p3
(1)   32/    9042 : CE FF               	st 		@-1(p2)
(1)   33/    9044 :                     
(1)   34/    9044 :                     __EXFirst:
(1)   35/    9044 : C1 00               	ld 		0(p1) 												; found EOS 
(1)   36/    9046 : 98 E4               	jz 		__EXExit 											; exit, empty string.
(1)   37/    9048 : C5 01               	ld 		@1(p1) 												; fetch and skip over
(1)   38/    904A : E4 20               	xri 	' ' 												; is it space ?
(1)   39/    904C : 98 F6               	jz 		__EXFirst 											; keep going.
(1)   40/    904E : E4 1A               	xri 	' '!':'												; if it is colon, then exit.
(1)   41/    9050 : 98 DA               	jz 		__EXExit
 AS V1.42 Beta [Bld 102] - source file minol.asm(execute.asm) - page 3 - 12/9/2015 20:48:09


(1)   42/    9052 : E4 18               	xri 	':'!'"'												; if it is quote (comment )
(1)   43/    9054 : 9C 12               	jnz 	__EXCode 											; try it as a command.
(1)   44/    9056 :                     ;
(1)   45/    9056 :                     ;	Go to next command, skip forward to ':' (skip over) or End of String (\0)
(1)   46/    9056 :                     ;
(1)   47/    9056 :                     __EXNextCommand:
(1)   48/    9056 : C1 00               	ld 		(p1)												; if 0 then end of command
(1)   49/    9058 : 98 D2               	jz 		__EXExit
(1)   50/    905A : C5 01               	ld 		@1(p1) 												; fetch and bump
(1)   51/    905C : E4 3A               	xri 	':'
(1)   52/    905E : 9C F6               	jnz 	__EXNextCommand 									; until found a colon.
(1)   53/    9060 : 90 CA               	jmp 	__EXExit
(1)   54/    9062 :                     
(1)   55/    9062 :                     __EX_ReportError:
(1)   56/    9062 : 40                  	lde 														; get error code
(1)   57/    9063 : CA 03               	st 		3(p2) 												; save so returned as A
(1)   58/    9065 : 02                  	ccl 														; clear carry
(1)   59/    9066 : 90 C5               	jmp 	__EXExitNoSC 										; exit without setting CY/L
(1)   60/    9068 :                     
(1)   61/    9068 :                     ; ****************************************************************************************************************
(1)   62/    9068 :                     ;
(1)   63/    9068 :                     ;	Instructions:
(1)   64/    9068 :                     ;
(1)   65/    9068 :                     ;		CALL 	(h,l)
(1)   66/    9068 :                     ;		CLEAR
(1)   67/    9068 :                     ;
(1)   68/    9068 :                     ;	Unimplemented:
(1)   69/    9068 :                     ;
(1)   70/    9068 :                     ;		END
(1)   71/    9068 :                     ;		[LET]	var|(h,l) = <expr>
(1)   72/    9068 :                     ;		GOTO	<expr>
(1)   73/    9068 :                     ;		LIST
(1)   74/    9068 :                     ;		NEW 	(stops running program as well)
(1)   75/    9068 :                     ;		IF 		<expr> [#<=] <expr> ; instruction
(1)   76/    9068 :                     ;		IN 		string|var,...
(1)   77/    9068 :                     ;		OS 		Boots to Monitor (JMP $210)
(1)   78/    9068 :                     ;		PR 		string|number|string const,....[;]
(1)   79/    9068 :                     ;		RUN
(1)   80/    9068 :                     ;
(1)   81/    9068 :                     ; ****************************************************************************************************************
(1)   82/    9068 :                     
(1)   83/    9068 :                     __EXCode:
(1)   84/    9068 : (MACRO)             	lpi 	p3,__EXSkipCharacters-1 							; character/space skipping routine
(1)   84/    9068 : C4 90                       ldi     (__EXSKIPCHARACTERS-1) / 256
(1)   84/    906A : 37                          xpah    P3
(1)   84/    906B : C4 C1                       ldi     (__EXSKIPCHARACTERS-1) & 255
(1)   84/    906D : 33                          xpal    P3
(1)   85/    906E : C1 FF               	ld 		-1(p1) 												; reload character for decoding.
(1)   86/    9070 : E4 43               	xri 	'C'
(1)   87/    9072 : 9C 33               	jnz 	__EX_Decode_NotC									; check if it is C(A)LL or C(L)ear
(1)   88/    9074 : C1 00               	ld 		0(p1) 												; get next character
(1)   89/    9076 : E4 41               	xri 	'A'
(1)   90/    9078 : 98 14               	jz 		__EX_Command_CALL
(1)   91/    907A :                     
(1)   92/    907A :                     ; ****************************************************************************************************************
(1)   93/    907A :                     ;									CLEAR command. Clear all variables.
(1)   94/    907A :                     ; ****************************************************************************************************************
(1)   95/    907A :                     
(1)   96/    907A : (MACRO)             	lpi 	p3,Variables 										; point P3 to variables
(1)   96/    907A : C4 0C                       ldi     (VARIABLES) / 256
 AS V1.42 Beta [Bld 102] - source file minol.asm(execute.asm) - page 4 - 12/9/2015 20:48:09


(1)   96/    907C : 37                          xpah    P3
(1)   96/    907D : C4 82                       ldi     (VARIABLES) & 255
(1)   96/    907F : 33                          xpal    P3
(1)   97/    9080 : C4 1A               	ldi 	26 													; clear 26
(1)   98/    9082 : CA FF               	st 		-1(p2)
(1)   99/    9084 :                     __EX_CALL_Loop:
(1)  100/    9084 : C4 00               	ldi 	0 													; clear and bump pointer
(1)  101/    9086 : CF 01               	st 		@1(p3)
(1)  102/    9088 : BA FF               	dld 	-1(p2) 												; do it 26 times.
(1)  103/    908A : 9C F8               	jnz 	__EX_CALL_Loop
(1)  104/    908C : 90 C8               	jmp 	__EXNextCommand 									; next command.
(1)  105/    908E :                     
(1)  106/    908E :                     ; ****************************************************************************************************************
(1)  107/    908E :                     ;				CALL (h,l) Calls machine code routine at (H,L) where h,l are any two expressions.
(1)  108/    908E :                     ; ****************************************************************************************************************
(1)  109/    908E :                     
(1)  110/    908E :                     __EX_Command_CALL:
(1)  111/    908E : C4 03               	ldi 	3 													; skip 'A' 'L' 'L' and spaces.
(1)  112/    9090 : 3F                  	xppc 	p3
(1)  113/    9091 : (MACRO)             	lpi 	p3,ReadHLMemoryFull-1 								; read the (h,l)
(1)  113/    9091 : C4 93                       ldi     (READHLMEMORYFULL-1) / 256
(1)  113/    9093 : 37                          xpah    P3
(1)  113/    9094 : C4 87                       ldi     (READHLMEMORYFULL-1) & 255
(1)  113/    9096 : 33                          xpal    P3
(1)  114/    9097 : 3F                  	xppc 	p3 
(1)  115/    9098 : 01                  	xae
(1)  116/    9099 : 06                  	csa 
(1)  117/    909A : 94 C6               	jp 		__EX_ReportError 									; if CY/L = 0 then error.
(1)  118/    909C : C2 FE               	ld 		-2(p2) 												; read L
(1)  119/    909E : 33                  	xpal 	p3
(1)  120/    909F : C2 FF               	ld 		-1(p2) 												; read H
(1)  121/    90A1 : 37                  	xpah 	p3
(1)  122/    90A2 : C7 FF               	ld 		@-1(p3) 											; fix up for pre-increment
(1)  123/    90A4 : 3F                  	xppc 	p3
(1)  124/    90A5 : 90 AF               	jmp 	__EXNextCommand										; next command.
(1)  125/    90A7 :                     
(1)  126/    90A7 :                     __EX_Decode_NotC:
(1)  127/    90A7 : E4 06               	xri 	'C'!'E'
(1)  128/    90A9 : 9C 15               	jnz 	__EX_Decode_NotE
(1)  129/    90AB :                     
(1)  130/    90AB :                     ; ****************************************************************************************************************
(1)  131/    90AB :                     ;											END end running program
(1)  132/    90AB :                     ; ****************************************************************************************************************
(1)  133/    90AB :                     
(1)  134/    90AB : C4 02               	ldi 	2 													; skip N and D
(1)  135/    90AD : 3F                  	xppc 	p3 
(1)  136/    90AE : (MACRO)             	lpi 	p3,CurrentLine 										; set current line to zero.
(1)  136/    90AE : C4 0C                       ldi     (CURRENTLINE) / 256
(1)  136/    90B0 : 37                          xpah    P3
(1)  136/    90B1 : C4 A2                       ldi     (CURRENTLINE) & 255
(1)  136/    90B3 : 33                          xpal    P3
(1)  137/    90B4 : C4 00               	ldi 	0
(1)  138/    90B6 : CB 00               	st 		(p3)
(1)  139/    90B8 :                     __EX_END_EndOfLine:
(1)  140/    90B8 : C5 01               	ld 		@1(p1) 												; keep going till find NULL EOL marker
(1)  141/    90BA : 9C FC               	jnz 	__EX_END_EndOfLine
(1)  142/    90BC : C5 FF               	ld 		@-1(p1) 											; point back to the EOS
(1)  143/    90BE : 90 96               	jmp 	__EXNextCommand 									; and do next command, in this case will be input :)
(1)  144/    90C0 :                     
(1)  145/    90C0 :                     
 AS V1.42 Beta [Bld 102] - source file minol.asm(execute.asm) - page 5 - 12/9/2015 20:48:09


(1)  146/    90C0 :                     __EX_Decode_NotE:
(1)  147/    90C0 :                     
(1)  148/    90C0 : 90 FE               wait2:	jmp 	wait2
(1)  149/    90C2 :                     
(1)  150/    90C2 :                     
(1)  151/    90C2 :                     __EXSkipCharacters:
(1)  152/    90C2 : CA FF               	st 		-1(p2)
(1)  153/    90C4 :                     __EXSkipOne:
(1)  154/    90C4 : C1 00               	ld 		(p1)
(1)  155/    90C6 : 98 12               	jz 		__EXSkipExit
(1)  156/    90C8 : C5 01               	ld 		@1(p1)
(1)  157/    90CA : BA FF               	dld 	-1(p2)
(1)  158/    90CC : 9C F6               	jnz 	__EXSkipOne
(1)  159/    90CE :                     __EXSkipSpace:
(1)  160/    90CE : C1 00               	ld 		(p1)
(1)  161/    90D0 : 98 08               	jz 		__EXSkipExit
(1)  162/    90D2 : C5 01               	ld 		@1(p1)
(1)  163/    90D4 : E4 20               	xri 	' '
(1)  164/    90D6 : 98 F6               	jz 		__EXSkipSpace
(1)  165/    90D8 : C5 FF               	ld 		@-1(p1)
(1)  166/    90DA :                     __EXSkipExit
(1)  167/    90DA : 3F                  	xppc 	p3
      63/    90DB :                     
      64/    90DB :                     ; ****************************************************************************************************************
      65/    90DB :                     ;						Routines developed and tested seperately in other subdirectories.
      66/    90DB :                     ; ****************************************************************************************************************
      67/    90DB :                     
      68/    90DB :                     	include ..\screen\screen.asm 								; screen I/O stuff.
(1)    1/    90DB :                     ; ****************************************************************************************************************
(1)    2/    90DB :                     ; ****************************************************************************************************************
(1)    3/    90DB :                     ;
(1)    4/    90DB :                     ;											Screen I/O, MINOL ROM
(1)    5/    90DB :                     ;											=====================
(1)    6/    90DB :                     ;
(1)    7/    90DB :                     ;	Provides Character and String Input/Output functionality.
(1)    8/    90DB :                     ;
(1)    9/    90DB :                     ; ****************************************************************************************************************
(1)   10/    90DB :                     ; ****************************************************************************************************************
(1)   11/    90DB :                     
(1)   12/    90DB :                     ; ****************************************************************************************************************
(1)   13/    90DB :                     ; ****************************************************************************************************************
(1)   14/    90DB :                     ;
(1)   15/    90DB :                     ;	Print routine. Prints either character in A, or ASCIIZ string at P1 (if A is zero). Preserves all registers
(1)   16/    90DB :                     ;	except if printing string, P1 points to the character after the NULL terminator.
(1)   17/    90DB :                     ;
(1)   18/    90DB :                     ;	Scrolls automatically. Understands character codes 32-255, 8 (Backspace) 12 (Clear Screen) 13 (Carriage
(1)   19/    90DB :                     ;	Return). Others are currently ignored (except 0, see above). Note L/C values (97....) display those characters
(1)   20/    90DB :                     ;	in the ROM font *not* lower case :)
(1)   21/    90DB :                     ;
(1)   22/    90DB :                     ; ****************************************************************************************************************
(1)   23/    90DB :                     ; ****************************************************************************************************************
(1)   24/    90DB :                     
(1)   25/    90DB :                     Print:
(1)   26/    90DB :                     	section 	Print
(1)   27/    90DB :                     
(1)   28/    90DB : CE FF               	st 		@-1(p2) 											; save character on stack.
(1)   29/    90DD : 35                  	xpah 	p1
(1)   30/    90DE : CE FF               	st 		@-1(p2) 											; save P1 on the stack.
(1)   31/    90E0 : 31                  	xpal 	p1
(1)   32/    90E1 : CE FF               	st 		@-1(p2)
 AS V1.42 Beta [Bld 102] - source file minol.asm(screen.asm) - page 6 - 12/9/2015 20:48:09


(1)   33/    90E3 : 01                  	xae 	
(1)   34/    90E4 : CE FF               	st 		@-1(p2) 											; save E on the stack.
(1)   35/    90E6 :                     
(1)   36/    90E6 : C2 03               	ld 		3(p2) 												; read character 
(1)   37/    90E8 : 9C 12               	jnz 	__PRPrintCharacterA 								; if non zero print it on its own.
(1)   38/    90EA :                     
(1)   39/    90EA :                     __PRPrintString:
(1)   40/    90EA : C2 01               	ld 		1(p2) 												; restore original P1
(1)   41/    90EC : 31                  	xpal 	p1
(1)   42/    90ED : C2 02               	ld 		2(p2)
(1)   43/    90EF : 35                  	xpah 	p1 													; read character at P1.
(1)   44/    90F0 : C5 01               	ld 		@1(p1)
(1)   45/    90F2 : 01                  	xae 														; save in E.
(1)   46/    90F3 : 35                  	xpah 	p1 													; write P1 back.
(1)   47/    90F4 : CA 02               	st 		2(p2)
(1)   48/    90F6 : 31                  	xpal 	p1
(1)   49/    90F7 : CA 01               	st 		1(p2)
(1)   50/    90F9 : 40                  	lde 														; get character from E
(1)   51/    90FA : 98 46               	jz 		__PRExitNoCheck 									; exit without loop check.
(1)   52/    90FC :                     ;
(1)   53/    90FC :                     ;	Print character in A now ; throughout it is stored in E.
(1)   54/    90FC :                     ;
(1)   55/    90FC :                     __PRPrintCharacterA:
(1)   56/    90FC : 01                  	xae 														; save character in E.
(1)   57/    90FD :                     ;
(1)   58/    90FD :                     ;	Read cursor and set P1 to that address
(1)   59/    90FD :                     ;
(1)   60/    90FD : C4 0C               	ldi 	ScreenCursor/256 									; set P1 to point to screen cursor
(1)   61/    90FF : 35                  	xpah 	p1
(1)   62/    9100 : C4 80               	ldi 	ScreenCursor&255
(1)   63/    9102 : 31                  	xpal 	p1
(1)   64/    9103 : C1 00               	ld 		0(p1) 												; put cursor position in P1.L
(1)   65/    9105 : 31                  	xpal 	p1
(1)   66/    9106 :                     ;
(1)   67/    9106 :                     ;	Check for control
(1)   68/    9106 :                     ;
(1)   69/    9106 : 40                  	lde 														; look at character
(1)   70/    9107 : D4 E0               	ani 	0xE0 												; is it code 0-31
(1)   71/    9109 : 98 45               	jz 		__PRIsControlChar
(1)   72/    910B :                     ;
(1)   73/    910B :                     ;	Print non-control
(1)   74/    910B :                     ;
(1)   75/    910B : 40                  	lde 														; read character
(1)   76/    910C : 03                  	scl 														; CY/L clear if < 96
(1)   77/    910D : FC 60               	cai 	96 
(1)   78/    910F : 06                  	csa 	 	 												; skip if carry set
(1)   79/    9110 : E4 80               	xri 	0x80													
(1)   80/    9112 : 94 04               	jp 		__PRNotASCII
(1)   81/    9114 : 40                  	lde 														; if ASCII make 6 bit.
(1)   82/    9115 : D4 3F               	ani 	0x3F
(1)   83/    9117 : 01                  	xae
(1)   84/    9118 :                     __PRNotASCII:
(1)   85/    9118 : 40                  	lde 														; get character.
(1)   86/    9119 : C9 00               	st 		(p1) 												; save in shadow memory
(1)   87/    911B : 35                  	xpah 	p1 													; switch to VRAM, preserving A.
(1)   88/    911C : C4 00               	ldi 	0 													
(1)   89/    911E : 35                  	xpah 	p1
(1)   90/    911F : CD 01               	st 		@1(p1) 												; save in screen memory, advance write position.
(1)   91/    9121 :                     ;
(1)   92/    9121 :                     ;	Write cursor position back from P1.L
 AS V1.42 Beta [Bld 102] - source file minol.asm(screen.asm) - page 7 - 12/9/2015 20:48:09


(1)   93/    9121 :                     ;
(1)   94/    9121 :                     __PRUpdateCursor:
(1)   95/    9121 : C4 0C               	ldi		ScreenCursor / 256 									; set P1 to point to screen cursor, restore position to P1
(1)   96/    9123 : 35                  	xpah 	p1
(1)   97/    9124 : C4 80               	ldi 	ScreenCursor & 255 
(1)   98/    9126 : 31                  	xpal 	p1 													; after this, adjusted cursor position is in AC.
(1)   99/    9127 : C9 00               	st 		(p1) 												; write back in cursor position
(1)  100/    9129 : 94 13               	jp 		__PRExit 											; if position is off the bottom then scroll.
(1)  101/    912B :                     ;
(1)  102/    912B :                     ;	Scroll display
(1)  103/    912B :                     ;
(1)  104/    912B : C4 0C               	ldi 	(ScreenMirror+16) / 256 							; point P1 to 2nd line.
(1)  105/    912D : 35                  	xpah 	p1
(1)  106/    912E : C4 10               	ldi 	(ScreenMirror+16) & 255
(1)  107/    9130 :                     __PRScrollLoop:
(1)  108/    9130 : 31                  	xpal 	p1
(1)  109/    9131 : C1 00               	ld 		0(p1) 												; copy char to previous line
(1)  110/    9133 : C9 F0               	st 		-16(p1)
(1)  111/    9135 : C5 01               	ld 		@1(p1) 												; bump pointer.
(1)  112/    9137 : 31                  	xpal 	p1
(1)  113/    9138 : 94 F6               	jp 		__PRScrollLoop
(1)  114/    913A : C4 70               	ldi 	128-16 												; clear from and move to last line
(1)  115/    913C : 90 3D               	jmp 	__PRClearFromMoveTo
(1)  116/    913E :                     ;
(1)  117/    913E :                     ;	Exit screen drawing routine.
(1)  118/    913E :                     ;
(1)  119/    913E :                     __PRExit:
(1)  120/    913E : C2 03               	ld 		3(p2) 												; if character was zero, loop
(1)  121/    9140 : 98 A8               	jz 		__PRPrintString 									; back as printing string at P1.
(1)  122/    9142 :                     __PRExitNoCheck:
(1)  123/    9142 : C6 01               	ld 		@1(p2) 												; restore E
(1)  124/    9144 : 01                  	xae
(1)  125/    9145 : C6 01               	ld 		@1(p2) 												; restore P1
(1)  126/    9147 : 31                  	xpal 	p1
(1)  127/    9148 : C6 01               	ld 		@1(p2)
(1)  128/    914A : 35                  	xpah 	p1
(1)  129/    914B : C6 01               	ld 		@1(p2)												; restore A
(1)  130/    914D : 3F                  	xppc 	p3 													; return
(1)  131/    914E : 90 8B               	jmp 	Print 												; make re-entrant.
(1)  132/    9150 :                     ;
(1)  133/    9150 :                     ;	Check for supported control characters 8 (Backspace) 12 (Clear) 13 (Carriage Return)
(1)  134/    9150 :                     ;
(1)  135/    9150 :                     __PRIsControlChar:
(1)  136/    9150 : 40                  	lde 														; restore character.
(1)  137/    9151 : E4 0D               	xri 	13 													; carriage return ? (13)
(1)  138/    9153 : 98 1B               	jz 		__PRIsReturn
(1)  139/    9155 : E4 01               	xri 	13!12 												; form feed ? (12)
(1)  140/    9157 : 98 20               	jz 		__PRClearScreen
(1)  141/    9159 : E4 04               	xri 	12!8 												; backspace ? (8)
(1)  142/    915B : 9C E1               	jnz 	__PRExit 
(1)  143/    915D :                     ;
(1)  144/    915D :                     ;	Handle backspace (8)
(1)  145/    915D :                     ;
(1)  146/    915D : 31                  	xpal 	p1 													; check cursor position is zero
(1)  147/    915E : 98 DE               	jz 		__PRExit 											; if it is, cannot backspace so exit.
(1)  148/    9160 : 31                  	xpal 	p1  												; put it back
(1)  149/    9161 : C5 FF               	ld 		@-1(p1)												; move it back one
(1)  150/    9163 : C4 20               	ldi 	' '	 												; erase in shadow
(1)  151/    9165 : C9 00               	st 		(p1)
(1)  152/    9167 : C4 00               	ldi 	0 													; point P1 to VRAM
 AS V1.42 Beta [Bld 102] - source file minol.asm(screen.asm) - page 8 - 12/9/2015 20:48:09


(1)  153/    9169 : 35                  	xpah 	p1
(1)  154/    916A : C4 20               	ldi 	' '													; erase in VRAM
(1)  155/    916C : C9 00               	st 		(p1)
(1)  156/    916E : 90 B1               	jmp 	__PRUpdateCursor 									; and exit
(1)  157/    9170 :                     ;
(1)  158/    9170 :                     ;	Handle carriage return (13)
(1)  159/    9170 :                     ;
(1)  160/    9170 :                     __PRIsReturn:
(1)  161/    9170 : 31                  	xpal 	p1 													; cursor position in A
(1)  162/    9171 : D4 F0               	ani 	0xF0 												; start of current line
(1)  163/    9173 : 02                  	ccl 														; down one line
(1)  164/    9174 : F4 10               	adi 	0x10 	
(1)  165/    9176 : 31                  	xpal 	p1 													; put it back in P1.
(1)  166/    9177 : 90 A8               	jmp 	__PRUpdateCursor
(1)  167/    9179 :                     ;
(1)  168/    9179 :                     ;	Handle clear screen (12)
(1)  169/    9179 :                     ;
(1)  170/    9179 :                     __PRClearScreen:
(1)  171/    9179 : C4 00               	ldi 	0 													; clear shadow memory from here.
(1)  172/    917B :                     ;
(1)  173/    917B :                     ;	From position A, clear the memory in the shadow screen to the end, copy the shadow screen to VRAM
(1)  174/    917B :                     ;	then use position A as the new cursor position.
(1)  175/    917B :                     ;
(1)  176/    917B :                     __PRClearFromMoveTo:
(1)  177/    917B : CE FF               	st 		@-1(p2) 											; save this position, the cursor goes here.
(1)  178/    917D :                     __PRClearLoop:
(1)  179/    917D : 31                  	xpal 	p1 													; save position in P1.
(1)  180/    917E : C4 20               	ldi 	' '													; write space there.
(1)  181/    9180 : CD 01               	st 		@1(p1)
(1)  182/    9182 : 31                  	xpal 	p1
(1)  183/    9183 : 94 F8               	jp 		__PRClearLoop 										; until reached shadow memory start.
(1)  184/    9185 : C4 00               	ldi 	0 													; now copy shadow memory to screen memory.
(1)  185/    9187 :                     __PRCopy:
(1)  186/    9187 : 31                  	xpal 	p1 													; set up P1.L
(1)  187/    9188 : C4 0C               	ldi 	ScreenMirror/256 									; point to shadow memory.
(1)  188/    918A : 35                  	xpah 	p1 													
(1)  189/    918B : C1 00               	ld 		(p1) 												; read shadow memory
(1)  190/    918D : 35                  	xpah 	p1 													; zero P1.H preserving A
(1)  191/    918E : C4 00               	ldi 	0
(1)  192/    9190 : 35                  	xpah 	p1
(1)  193/    9191 : CD 01               	st 		@1(p1) 												; save and increment p1
(1)  194/    9193 : 31                  	xpal 	p1 
(1)  195/    9194 : 94 F1               	jp 		__PRCopy 											; keep doing till all copied.
(1)  196/    9196 : C6 01               	ld 		@1(p2) 												; read cursor position
(1)  197/    9198 : 31                  	xpal 	p1 													; put in P1.L
(1)  198/    9199 : 90 86               	jmp 	__PRUpdateCursor
(1)  199/    919B :                     
(1)  200/    919B :                     	endsection 	Print
(1)  201/    919B :                     
(1)  202/    919B :                     ; ****************************************************************************************************************
(1)  203/    919B :                     ; ****************************************************************************************************************
(1)  204/    919B :                     ;
(1)  205/    919B :                     ;		Input a single character into A. Case is converted to Upper. All registers preserved except A
(1)  206/    919B :                     ;
(1)  207/    919B :                     ; ****************************************************************************************************************
(1)  208/    919B :                     ; ****************************************************************************************************************
(1)  209/    919B :                     
(1)  210/    919B :                     GetChar:
(1)  211/    919B :                     	section 	GetChar
(1)  212/    919B : C4 08               	ldi 	0x8 												; set P1 to $8xx, and save P1.H
 AS V1.42 Beta [Bld 102] - source file minol.asm(screen.asm) - page 9 - 12/9/2015 20:48:09


(1)  213/    919D : 35                  	xpah 	p1
(1)  214/    919E : CE FF               	st 		@-1(p2)
(1)  215/    91A0 :                     __GCWaitKey: 													; wait for key press
(1)  216/    91A0 : C1 00               	ld 		0(p1)
(1)  217/    91A2 : 94 FC               	jp 		__GCWaitKey
(1)  218/    91A4 : D4 7F               	ani	 	0x7F 												; throw away the upper bit.
(1)  219/    91A6 : CA FF               	st 		-1(p2) 												; save it below stack
(1)  220/    91A8 :                     __GCWaitRelease:
(1)  221/    91A8 : C1 00               	ld 		0(p1) 												; wait for release
(1)  222/    91AA : D4 80               	ani 	0x80
(1)  223/    91AC : 9C FA               	jnz 	__GCWaitRelease
(1)  224/    91AE : C6 01               	ld 		@1(p2) 												; restore P1.H
(1)  225/    91B0 : 35                  	xpah 	p1
(1)  226/    91B1 : C2 FE               	ld 		-2(p2) 												; restore saved value
(1)  227/    91B3 : 02                  	ccl
(1)  228/    91B4 : F4 20               	adi 	0x20												; will make lower case -ve
(1)  229/    91B6 : 94 02               	jp 		__GCNotLower
(1)  230/    91B8 : FC 20               	cai 	0x20 												; capitalise
(1)  231/    91BA :                     __GCNotLower:
(1)  232/    91BA : F4 E0               	adi 	0xE0 												; fix up.
(1)  233/    91BC : 3F                  	xppc 	p3 													; return
(1)  234/    91BD : 90 DC               	jmp 	GetChar 											; make re-entrant
(1)  235/    91BF :                     	endsection 	GetChar
(1)  236/    91BF :                     
(1)  237/    91BF :                     ; ****************************************************************************************************************
(1)  238/    91BF :                     ; ****************************************************************************************************************
(1)  239/    91BF :                     ;
(1)  240/    91BF :                     ;			Read an ASCIIZ string from keyboard into P1 of length A maximum (excludes NULL terminator)
(1)  241/    91BF :                     ;
(1)  242/    91BF :                     ; ****************************************************************************************************************
(1)  243/    91BF :                     ; ****************************************************************************************************************
(1)  244/    91BF :                     
(1)  245/    91BF :                     GetString:
(1)  246/    91BF :                     	section GetString
(1)  247/    91BF : CE FF               	st 		@-1(p2) 											; save length on stack.
(1)  248/    91C1 : 37                  	xpah 	p3 													; save P3 on stack
(1)  249/    91C2 : CE FF               	st 		@-1(p2)
(1)  250/    91C4 : 33                  	xpal 	p3
(1)  251/    91C5 : CE FF               	st 		@-1(p2)
(1)  252/    91C7 : 40                  	lde
(1)  253/    91C8 : CE FF               	st 		@-1(p2) 											; save E on stack
(1)  254/    91CA : C4 00               	ldi 	0 													; set E (current position) to A.
(1)  255/    91CC : 01                  	xae
(1)  256/    91CD :                     __GSLoop:
(1)  257/    91CD : (MACRO)             	lpi 	p3,Print-1 											; print the prompt (half coloured square)
(1)  257/    91CD : C4 90                       ldi     (PRINT-1) / 256
(1)  257/    91CF : 37                          xpah    P3
(1)  257/    91D0 : C4 DA                       ldi     (PRINT-1) & 255
(1)  257/    91D2 : 33                          xpal    P3
(1)  258/    91D3 : C4 9B               	ldi 	155
(1)  259/    91D5 : 3F                  	xppc 	p3
(1)  260/    91D6 : (MACRO)             	lpi 	p3,GetChar-1 										; get a character
(1)  260/    91D6 : C4 91                       ldi     (GETCHAR-1) / 256
(1)  260/    91D8 : 37                          xpah    P3
(1)  260/    91D9 : C4 9A                       ldi     (GETCHAR-1) & 255
(1)  260/    91DB : 33                          xpal    P3
(1)  261/    91DC : 3F                  	xppc 	p3
(1)  262/    91DD : C9 80               	st 		-0x80(p1) 											; save it in the current position.
(1)  263/    91DF : (MACRO)             	lpi 	p3,Print-1 											; erase the prompt with backspace.
(1)  263/    91DF : C4 90                       ldi     (PRINT-1) / 256
 AS V1.42 Beta [Bld 102] - source file minol.asm(screen.asm) - page 10 - 12/9/2015 20:48:09


(1)  263/    91E1 : 37                          xpah    P3
(1)  263/    91E2 : C4 DA                       ldi     (PRINT-1) & 255
(1)  263/    91E4 : 33                          xpal    P3
(1)  264/    91E5 : C4 08               	ldi 	8
(1)  265/    91E7 : 3F                  	xppc 	p3
(1)  266/    91E8 : C1 80               	ld 		-0x80(p1) 											; re-read character
(1)  267/    91EA : D4 E0               	ani 	0xE0 												; check if control key.
(1)  268/    91EC : 98 0F               	jz 		__GSControlKey 
(1)  269/    91EE : 40                  	lde 														; get current position.
(1)  270/    91EF : E2 03               	xor 	3(p2) 												; reached maximum length of buffer ?
(1)  271/    91F1 : 98 DA               	jz 		__GSLoop 											; if so, ignore the key and go round again.
(1)  272/    91F3 : C1 80               	ld 		-0x80(p1) 											; get character and print it
(1)  273/    91F5 : 3F                  	xppc 	p3
(1)  274/    91F6 : C4 01               	ldi 	1 													; increment E
(1)  275/    91F8 : 02                  	ccl
(1)  276/    91F9 : 70                  	ade
(1)  277/    91FA : 01                  	xae
(1)  278/    91FB : 90 D0               	jmp 	__GSLoop 											; and go round again.
(1)  279/    91FD :                     ;
(1)  280/    91FD :                     ;	Handle control keys (0x00-0x1F)
(1)  281/    91FD :                     ;
(1)  282/    91FD :                     __GSControlKey:
(1)  283/    91FD : C1 80               	ld 		-0x80(p1) 											; get typed in key
(1)  284/    91FF : E4 08               	xri 	8 													; check for backspace.
(1)  285/    9201 : 98 17               	jz 		__GSBackspace 			
(1)  286/    9203 : E4 05               	xri 	8!13 												; check for CR
(1)  287/    9205 : 9C C6               	jnz 	__GSLoop 											; if not, ignore the key.
(1)  288/    9207 :                     ;
(1)  289/    9207 :                     ;	Carriage Return, ending input.
(1)  290/    9207 :                     ;
(1)  291/    9207 : C9 80               	st 		-0x80(p1) 											; replace the CR written with NULL terminator.
(1)  292/    9209 : C4 0D               	ldi 	13 													; print CR
(1)  293/    920B : 3F                  	xppc 	p3
(1)  294/    920C : C6 01               	ld 		@1(p2) 												; pop E
(1)  295/    920E : 01                  	xae
(1)  296/    920F : C6 01               	ld 		@1(p2) 												; pop P3
(1)  297/    9211 : 33                  	xpal 	p3
(1)  298/    9212 : C6 01               	ld 		@1(p2)
(1)  299/    9214 : 37                  	xpah 	p3
(1)  300/    9215 : C6 01               	ld 		@1(p2)												; pop A
(1)  301/    9217 : 3F                  	xppc 	p3 													; return
(1)  302/    9218 : 90 A5               	jmp 	GetString 											; make re-entrant (probably unneccessary !!)
(1)  303/    921A :                     ;
(1)  304/    921A :                     ;	Backspace entered
(1)  305/    921A :                     ;
(1)  306/    921A :                     __GSBackspace
(1)  307/    921A : 40                  	lde 														; if E = 0 we can't backspace any further.
(1)  308/    921B : 98 B0               	jz 		__GSLoop
(1)  309/    921D : C4 08               	ldi 	8 													; backspace on screen
(1)  310/    921F : 3F                  	xppc 	p3
(1)  311/    9220 : C4 FF               	ldi 	0xFF 												; decrement E
(1)  312/    9222 : 02                  	ccl
(1)  313/    9223 : 70                  	ade
(1)  314/    9224 : 01                  	xae
(1)  315/    9225 : 90 A6               	jmp 	__GSLoop 											; and go round again.
(1)  316/    9227 :                     
(1)  317/    9227 :                     	endsection GetString
(1)  318/    9227 :                     
      69/    9227 :                     	include ..\expression\expression.asm 						; expression stuff.
(1)    1/    9227 :                     ; ****************************************************************************************************************
 AS V1.42 Beta [Bld 102] - source file minol.asm(expression.asm) - page 11 - 12/9/2015 20:48:09


(1)    2/    9227 :                     ; ****************************************************************************************************************
(1)    3/    9227 :                     ;
(1)    4/    9227 :                     ;											Expression, MINOL
(1)    5/    9227 :                     ;											=================
(1)    6/    9227 :                     ;
(1)    7/    9227 :                     ;	Terms are :
(1)    8/    9227 :                     ;		0-9* 		Numeric constant
(1)    9/    9227 :                     ;		A-Z 		Variables
(1)   10/    9227 :                     ;		(h,l) 		Memory direct access
(1)   11/    9227 :                     ;		! 			Random number
(1)   12/    9227 :                     ;
(1)   13/    9227 :                     ;	Operators are:	+,-,*,/
(1)   14/    9227 :                     ;
(1)   15/    9227 :                     ; ****************************************************************************************************************
(1)   16/    9227 :                     ; ****************************************************************************************************************
(1)   17/    9227 :                     
(1)   18/    9227 :                     ; ****************************************************************************************************************
(1)   19/    9227 :                     ; ****************************************************************************************************************
(1)   20/    9227 :                     ;
(1)   21/    9227 :                     ;				Evaluate an expression at P1. Returns A = Result, CY/L = 1 or A = Error, CY/L = 0
(1)   22/    9227 :                     ;
(1)   23/    9227 :                     ;	Preserves registers except A and P1, which is advanced to the end of the expression - on exit it points to
(1)   24/    9227 :                     ;	NULL or the next character - so 2+3, will return A = 5, CY/L = 1,P1 pointing to the comma.
(1)   25/    9227 :                     ;
(1)   26/    9227 :                     ;	This isn't re-entrant.
(1)   27/    9227 :                     ;
(1)   28/    9227 :                     ; ****************************************************************************************************************
(1)   29/    9227 :                     ; ****************************************************************************************************************
(1)   30/    9227 :                     
(1)   31/    9227 :                     EvaluateExpression:
(1)   32/    9227 :                     
(1)   33/    9227 : =0x0                __EEValue = 0 													; stack positions of current value & pending
(1)   34/    9227 : =0x1                __EEOperator = 1 												; operator.
(1)   35/    9227 : =0x1A               __EERandomOffset = 26 											; offset to random seed from p3
(1)   36/    9227 :                     
(1)   37/    9227 : =0x4                ERROR_BadTerm = 4
(1)   38/    9227 : =0x5                ERROR_Syntax = 5
(1)   39/    9227 : =0x7                ERROR_DivZero = 7
(1)   40/    9227 :                     
(1)   41/    9227 : 40                  	lde 														; save E on stack
(1)   42/    9228 : CE FF               	st 		@-1(p2)
(1)   43/    922A : 37                  	xpah 	p3 													; save P3 on stack
(1)   44/    922B : CE FF               	st 		@-1(p2)
(1)   45/    922D : 33                  	xpal 	p3
(1)   46/    922E : CE FF               	st 		@-1(p2)
(1)   47/    9230 : C4 2B               	ldi 	'+'													; pending expression (+) at +1(p2)
(1)   48/    9232 : CE FF               	st 		@-1(p2)												; set up so done "0+" in theory :)
(1)   49/    9234 : C4 00               	ldi 	0 													; current value (0) at +0(p2)
(1)   50/    9236 : CE FF               	st 		@-1(p2)
(1)   51/    9238 : 90 39               	jmp 	__EELoop
(1)   52/    923A :                     
(1)   53/    923A :                     ; ****************************************************************************************************************
(1)   54/    923A :                     ;											! term (random number)
(1)   55/    923A :                     ; ****************************************************************************************************************
(1)   56/    923A :                     
(1)   57/    923A :                     __EERandom:
(1)   58/    923A : C3 1A               	ld 		__EERandomOffset(p3) 								; does it need initialising
(1)   59/    923C : DB 1B               	or 		__EERandomOffset+1(p3)
(1)   60/    923E : 9C 08               	jnz		__EERandom_IsInitialised
(1)   61/    9240 : C4 E1               	ldi 	0xE1												; if so, set to $ACE1
 AS V1.42 Beta [Bld 102] - source file minol.asm(expression.asm) - page 12 - 12/9/2015 20:48:09


(1)   62/    9242 : CB 1A               	st 		__EERandomOffset(p3)
(1)   63/    9244 : C4 AC               	ldi 	0xAC
(1)   64/    9246 : CB 1B               	st 		__EERandomOffset+1(p3)
(1)   65/    9248 :                     __EERandom_IsInitialised:
(1)   66/    9248 : C3 1B               	ld 		__EERandomOffset+1(p3) 								; shift seed right into carry
(1)   67/    924A : 02                  	ccl
(1)   68/    924B : 1F                  	rrl
(1)   69/    924C : CB 1B               	st 		__EERandomOffset+1(p3)
(1)   70/    924E : C3 1A               	ld 		__EERandomOffset(p3)
(1)   71/    9250 : 1F                  	rrl
(1)   72/    9251 : CB 1A               	st 		__EERandomOffset(p3)
(1)   73/    9253 : 06                  	csa  														; if the LSB was 1
(1)   74/    9254 : 94 06               	jp 		__EERandomNoToggle
(1)   75/    9256 : C3 1B               	ld 		__EERandomOffset+1(p3)
(1)   76/    9258 : E4 B4               	xri 	0xB4
(1)   77/    925A : CB 1B               	st 		__EERandomOffset+1(p3)
(1)   78/    925C :                     __EERandomNoToggle:
(1)   79/    925C : C3 1A               	ld 		__EERandomOffset(p3) 								; XOR two values together into E.
(1)   80/    925E : E3 1B               	xor 	__EERandomOffset+1(p3)
(1)   81/    9260 : 01                  	xae
(1)   82/    9261 : 90 64               	jmp 	__EECalculate3
(1)   83/    9263 :                     
(1)   84/    9263 :                     ; ****************************************************************************************************************
(1)   85/    9263 :                     ;												  Read data (h,l)
(1)   86/    9263 :                     ; ****************************************************************************************************************
(1)   87/    9263 :                     
(1)   88/    9263 :                     __EEDataAccess:
(1)   89/    9263 : (MACRO)             	lpi 	p3,ReadHLMemory-1 									; read HL memory into A
(1)   89/    9263 : C4 93                       ldi     (READHLMEMORY-1) / 256
(1)   89/    9265 : 37                          xpah    P3
(1)   89/    9266 : C4 93                       ldi     (READHLMEMORY-1) & 255
(1)   89/    9268 : 33                          xpal    P3
(1)   90/    9269 : 3F                  	xppc 	p3
(1)   91/    926A : 01                  	xae 														; save in E
(1)   92/    926B : 06                  	csa 														; if carry is set then calculate as normal.
(1)   93/    926C : D4 80               	ani 	0x80
(1)   94/    926E : 9C 57               	jnz 	__EECalculate3
(1)   95/    9270 : 40                  	lde 														; get error code
(1)   96/    9271 : 90 7D               	jmp 	__EEError
(1)   97/    9273 :                     
(1)   98/    9273 :                     ; ****************************************************************************************************************
(1)   99/    9273 :                     ;
(1)  100/    9273 :                     ;											Main loop - get another term.
(1)  101/    9273 :                     ;
(1)  102/    9273 :                     ; ****************************************************************************************************************
(1)  103/    9273 :                     __EELoop:
(1)  104/    9273 : C4 82               	ldi 	Variables&255 										; point P3 to variables.
(1)  105/    9275 : 33                  	xpal 	p3
(1)  106/    9276 : C4 0C               	ldi 	Variables/256
(1)  107/    9278 : 37                  	xpah 	p3
(1)  108/    9279 :                     
(1)  109/    9279 : C1 00               	ld 		(p1) 												; check end of string.
(1)  110/    927B : 98 71               	jz 		__EEBadTerm 				
(1)  111/    927D : C5 01               	ld 		@1(p1) 												; get next character till non-space
(1)  112/    927F : E4 20               	xri		' '
(1)  113/    9281 : 98 F0               	jz 		__EELoop
(1)  114/    9283 :                     
(1)  115/    9283 : E4 08               	xri 	' ' ! '('											; if ( then (x,y) memory access.
(1)  116/    9285 : 98 DC               	jz 		__EEDataAccess
(1)  117/    9287 : E4 09               	xri 	'(' ! '!' 											; if ! then random number.
 AS V1.42 Beta [Bld 102] - source file minol.asm(expression.asm) - page 13 - 12/9/2015 20:48:09


(1)  118/    9289 : 98 AF               	jz 		__EERandom
(1)  119/    928B :                     
(1)  120/    928B : C1 FF               	ld 		-1(p1) 												; get character.
(1)  121/    928D : 02                  	ccl
(1)  122/    928E : F4 50               	adi 	128-'0' 											; if < '0' then there is an error.
(1)  123/    9290 : 94 5C               	jp 		__EEBadTerm
(1)  124/    9292 : F4 76               	adi 	0xFF-0x89 											; if > '9' then it is not a digit.
(1)  125/    9294 : 94 20               	jp 		__EENotDigit 										; so check for A-Z
(1)  126/    9296 :                     
(1)  127/    9296 :                     ; ****************************************************************************************************************
(1)  128/    9296 :                     ;
(1)  129/    9296 :                     ;								We have a constant value 0-255, extract it
(1)  130/    9296 :                     ;
(1)  131/    9296 :                     ; ****************************************************************************************************************
(1)  132/    9296 :                     
(1)  133/    9296 : C1 FF               	ld 		-1(p1) 												; re-read digit
(1)  134/    9298 : D4 0F               	ani 	0x0F 												; make number
(1)  135/    929A : 01                  	xae 														; put in E.
(1)  136/    929B :                     __EEConstantLoop:
(1)  137/    929B : C1 00               	ld 		(p1) 												; keep going until non digit found
(1)  138/    929D : 02                  	ccl
(1)  139/    929E : F4 50               	adi 	128-'0'												; exit if outside range 0-9.
(1)  140/    92A0 : 94 63               	jp 		__EECalculate 										; calculate the result.
(1)  141/    92A2 : F4 76               	adi 	0xFF-0x89 
(1)  142/    92A4 : 94 5F               	jp 		__EECalculate 
(1)  143/    92A6 : 40                  	lde 														; A = E
(1)  144/    92A7 : 02                  	ccl
(1)  145/    92A8 : 70                  	ade 														; A = E * 2
(1)  146/    92A9 : 70                  	ade 														; A = E * 3
(1)  147/    92AA : 70                  	ade 														; A = E * 4
(1)  148/    92AB : 70                  	ade 														; A = E * 5
(1)  149/    92AC : 01                  	xae 														; E = E * 5
(1)  150/    92AD : C5 01               	ld 		@1(p1) 												; read digit and bump pointer.
(1)  151/    92AF : D4 0F               	ani 	0x0F 												; make number
(1)  152/    92B1 : 70                  	ade 														; add E * 5 twice, e.g. E * 10
(1)  153/    92B2 : 70                  	ade
(1)  154/    92B3 : 01                  	xae 														; put into E
(1)  155/    92B4 : 90 E5               	jmp 	__EEConstantLoop
(1)  156/    92B6 :                     
(1)  157/    92B6 :                     ; ****************************************************************************************************************
(1)  158/    92B6 :                     ;
(1)  159/    92B6 :                     ;												Check for variable A-Z.
(1)  160/    92B6 :                     ;
(1)  161/    92B6 :                     ; ****************************************************************************************************************
(1)  162/    92B6 :                     __EENotDigit:
(1)  163/    92B6 : C1 FF               	ld 		-1(p1) 												; read character again.
(1)  164/    92B8 : 02                  	ccl
(1)  165/    92B9 : F4 3F               	adi 	128-'A' 											; check in range A-Z.
(1)  166/    92BB : 94 31               	jp 		__EEBadTerm 										; if not in that range, we failed.
(1)  167/    92BD : F4 66               	adi 	0x80-26 
(1)  168/    92BF : 94 2D               	jp 		__EEBadTerm 
(1)  169/    92C1 : F4 1A               	adi 	26 													; make it 0-25 (A-Z)
(1)  170/    92C3 : 01                  	xae 														; E is variable number 0-25
(1)  171/    92C4 : C3 80               	ld 		-0x80(p3) 											; read variable value.
(1)  172/    92C6 : 01                  	xae 														; put in E
(1)  173/    92C7 :                     __EECalculate3:
(1)  174/    92C7 : 90 3C               	jmp 	__EECalculate 										; calculate result of delayed operation.
(1)  175/    92C9 :                     ;
(1)  176/    92C9 :                     ;	Bump over spaces to find operator.
(1)  177/    92C9 :                     ;
 AS V1.42 Beta [Bld 102] - source file minol.asm(expression.asm) - page 14 - 12/9/2015 20:48:09


(1)  178/    92C9 :                     __EEGetNextOperator:
(1)  179/    92C9 : 03                  	scl 														; set Carry/Link indicating okay.
(1)  180/    92CA : C1 00               	ld 		0(p1) 												; skip spaces, checking for exit.
(1)  181/    92CC : 98 25               	jz 		__EEExit 											; exit on NULL.
(1)  182/    92CE : E4 20               	xri 	' ' 												
(1)  183/    92D0 : 9C 04               	jnz 	__EECheckOperator
(1)  184/    92D2 : C5 01               	ld 		@1(p1)
(1)  185/    92D4 : 90 F3               	jmp 	__EEGetNextOperator
(1)  186/    92D6 :                     ;
(1)  187/    92D6 :                     ;	Found something not NULL or space - see if it is an operator + - * /, in which case go round again.
(1)  188/    92D6 :                     ;
(1)  189/    92D6 :                     __EECheckOperator:
(1)  190/    92D6 : C1 00               	ld 		(p1) 												; get operator
(1)  191/    92D8 : E4 2B               	xri 	'+' 												; check if it is +,-,*,/
(1)  192/    92DA : 98 0C               	jz 		__EEDoOperator
(1)  193/    92DC : E4 06               	xri 	'+'!'-'
(1)  194/    92DE : 98 08               	jz 		__EEDoOperator
(1)  195/    92E0 : E4 07               	xri 	'-'!'*'
(1)  196/    92E2 : 98 04               	jz 		__EEDoOperator
(1)  197/    92E4 : E4 05               	xri 	'*'!'/'
(1)  198/    92E6 : 9C 0B               	jnz 	__EEExit 											; if not any of those, then exit.
(1)  199/    92E8 :                     __EEDoOperator:
(1)  200/    92E8 : C5 01               	ld 		@1(p1) 												; get and save operator
(1)  201/    92EA : CA 01               	st 		1(p2)
(1)  202/    92EC : 90 85               	jmp		__EELoop 											; go get another term. 			
(1)  203/    92EE :                     ;
(1)  204/    92EE :                     ;	Handle Errors (1) Bad Term (2) Divide by zero.
(1)  205/    92EE :                     ;
(1)  206/    92EE :                     __EEBadTerm:
(1)  207/    92EE : C4 04               	ldi 	ERROR_BadTerm 										; syntax in expression
(1)  208/    92F0 :                     __EEError:
(1)  209/    92F0 : CA 00               	st 		__EEValue(p2) 										; error code as result.
(1)  210/    92F2 : 02                  	ccl 														; CY/L clear indicating error
(1)  211/    92F3 :                     ;
(1)  212/    92F3 :                     ;	Exit with the value in __EEValue(p2) and CY/L set accordingly.
(1)  213/    92F3 :                     ;
(1)  214/    92F3 :                     __EEExit:
(1)  215/    92F3 : C6 02               	ld 		@2(p2) 												; skip over saved values
(1)  216/    92F5 : C6 01               	ld 		@1(p2) 												; restore P3
(1)  217/    92F7 : 33                  	xpal 	p3
(1)  218/    92F8 : C6 01               	ld 		@1(p2)
(1)  219/    92FA : 37                  	xpah 	p3
(1)  220/    92FB : C6 01               	ld 		@1(p2) 												; restore E
(1)  221/    92FD : 01                  	xae 
(1)  222/    92FE : C2 FB               	ld 		-5(p2)												; get answer into A
(1)  223/    9300 : 3F                  	xppc 	p3 													; and exit.
(1)  224/    9301 :                     
(1)  225/    9301 :                     __EE_Divide_Zero:
(1)  226/    9301 : C4 07               	ldi 	ERROR_DivZero 										; come here for divide by zero.	
(1)  227/    9303 : 90 EB               	jmp 	__EEError
(1)  228/    9305 :                     
(1)  229/    9305 :                     ; ****************************************************************************************************************
(1)  230/    9305 :                     ;
(1)  231/    9305 :                     ;							Do 0(p2) op E where op is 1(p2) and is a valid operator.
(1)  232/    9305 :                     ;	
(1)  233/    9305 :                     ; ****************************************************************************************************************
(1)  234/    9305 :                     
(1)  235/    9305 :                     __EECalculate:
(1)  236/    9305 : C2 01               	ld 		__EEOperator(p2) 									; get the operator.
(1)  237/    9307 : E4 2D               	xri 	'-'
 AS V1.42 Beta [Bld 102] - source file minol.asm(expression.asm) - page 15 - 12/9/2015 20:48:09


(1)  238/    9309 : 98 10               	jz 		__EE_Subtract
(1)  239/    930B : E4 07               	xri 	'-'!'*'
(1)  240/    930D : 98 14               	jz 		__EE_Multiply
(1)  241/    930F : E4 05               	xri 	'*'!'/'
(1)  242/    9311 : 98 32               	jz 		__EE_Divide
(1)  243/    9313 :                     
(1)  244/    9313 :                     ; ****************************************************************************************************************
(1)  245/    9313 :                     ;														  Add.
(1)  246/    9313 :                     ; ****************************************************************************************************************
(1)  247/    9313 :                     
(1)  248/    9313 :                     __EE_Add:
(1)  249/    9313 : 02                  	ccl
(1)  250/    9314 : C2 00               	ld 		__EEValue(p2)
(1)  251/    9316 : 70                  	ade
(1)  252/    9317 : CA 00               	st 		__EEValue(p2)
(1)  253/    9319 : 90 AE               	jmp 	__EEGetNextOperator
(1)  254/    931B :                     
(1)  255/    931B :                     ; ****************************************************************************************************************
(1)  256/    931B :                     ;														Subtract
(1)  257/    931B :                     ; ****************************************************************************************************************
(1)  258/    931B :                     
(1)  259/    931B :                     __EE_Subtract:
(1)  260/    931B : 03                  	scl
(1)  261/    931C : C2 00               	ld 		__EEValue(p2)
(1)  262/    931E : 78                  	cae
(1)  263/    931F : CA 00               	st 		__EEValue(p2)
(1)  264/    9321 :                     __EEGetNextOperator2:
(1)  265/    9321 : 90 A6               	jmp 	__EEGetNextOperator
(1)  266/    9323 :                     
(1)  267/    9323 :                     ; ****************************************************************************************************************
(1)  268/    9323 :                     ;														Multiply
(1)  269/    9323 :                     ; ****************************************************************************************************************
(1)  270/    9323 :                     
(1)  271/    9323 :                     __EE_Multiply:										
(1)  272/    9323 : C2 00               	ld 		__EEValue(p2) 													; a = __EEOperator(p2)
(1)  273/    9325 : CA 01               	st 		__EEOperator(p2)
(1)  274/    9327 : C4 00               	ldi 	0																; res = __EEValue(p2)
(1)  275/    9329 : CA 00               	st 		__EEValue(p2) 													; clear it.
(1)  276/    932B :                     __EE_MultiplyLoop:
(1)  277/    932B : 40                  	lde  																	; if B == 0 then we are done.
(1)  278/    932C : 98 9B               	jz 		__EEGetNextOperator
(1)  279/    932E : D4 01               	ani 	1 																; if B LSB is non zero.
(1)  280/    9330 : 98 07               	jz 		__EE_Multiply_B0IsZero
(1)  281/    9332 : C2 01               	ld 		__EEOperator(p2) 												; add A to Result
(1)  282/    9334 : 02                  	ccl
(1)  283/    9335 : F2 00               	add 	__EEValue(p2)
(1)  284/    9337 : CA 00               	st 		__EEValue(p2)
(1)  285/    9339 :                     __EE_Multiply_B0IsZero:
(1)  286/    9339 : 40                  	lde 																	; shift B right
(1)  287/    933A : 1C                  	sr
(1)  288/    933B : 01                  	xae
(1)  289/    933C : C2 01               	ld 		__EEOperator(p2) 												; shift A left
(1)  290/    933E : 02                  	ccl
(1)  291/    933F : F2 01               	add 	__EEOperator(p2)
(1)  292/    9341 : CA 01               	st 		__EEOperator(p2)
(1)  293/    9343 : 90 E6               	jmp 	__EE_MultiplyLoop
(1)  294/    9345 :                     
(1)  295/    9345 :                     ;	res = 0
(1)  296/    9345 :                     ;	while (b != 0):
(1)  297/    9345 :                     ;		if (b & 1) != 0:
 AS V1.42 Beta [Bld 102] - source file minol.asm(expression.asm) - page 16 - 12/9/2015 20:48:09


(1)  298/    9345 :                     ;		 	res = (res + a) & 0xFF
(1)  299/    9345 :                     ;		a = (a << 1) & 0xFF
(1)  300/    9345 :                     ;		b = (b >> 1) & 0xFF
(1)  301/    9345 :                     
(1)  302/    9345 :                     
(1)  303/    9345 :                     ; ****************************************************************************************************************
(1)  304/    9345 :                     ;														Divide
(1)  305/    9345 :                     ; ****************************************************************************************************************
(1)  306/    9345 :                     
(1)  307/    9345 :                     __EE_Divide:
(1)  308/    9345 : 40                  	lde 																	; if denominator zero, error 2.
(1)  309/    9346 : 98 B9               	jz 		__EE_Divide_Zero
(1)  310/    9348 : C2 00               	ld 		__EEValue(p2) 													; numerator into __EEOperator(p2)
(1)  311/    934A : CA 01               	st 		__EEOperator(p2) 												; denominator is in E
(1)  312/    934C : C4 00               	ldi 	0
(1)  313/    934E : CA 00               	st 		__EEValue(p2)													; quotient in __EEValue(p2)
(1)  314/    9350 : CA FF               	st 		-1(p2) 															; remainder in -1(p2)
(1)  315/    9352 : C4 80               	ldi 	0x80 									
(1)  316/    9354 : CA FE               	st 		-2(p2) 															; bit in -2(p2)
(1)  317/    9356 :                     
(1)  318/    9356 :                     __EE_Divide_Loop:
(1)  319/    9356 : C2 FE               	ld 		-2(p2) 															; exit if bit = 0,we've finished.
(1)  320/    9358 : 98 C7               	jz 		__EEGetNextOperator2
(1)  321/    935A :                     
(1)  322/    935A : 02                  	ccl 	 																; shift remainder left.
(1)  323/    935B : C2 FF               	ld 		-1(p2)
(1)  324/    935D : F2 FF               	add 	-1(p2)
(1)  325/    935F : CA FF               	st 		-1(p2)
(1)  326/    9361 :                     
(1)  327/    9361 : C2 01               	ld 		__EEOperator(p2)												; get numerator.
(1)  328/    9363 : 94 02               	jp 		__EE_Divide_Numerator_Positive
(1)  329/    9365 : AA FF               	ild 	-1(p2)  														; if numerator -ve, increment remainder.
(1)  330/    9367 :                     __EE_Divide_Numerator_Positive:
(1)  331/    9367 :                     
(1)  332/    9367 : C2 FF               	ld 		-1(p2) 															; calculate remainder - denominator
(1)  333/    9369 : 03                  	scl
(1)  334/    936A : 78                  	cae 
(1)  335/    936B : CA FD               	st 		-3(p2) 															; save in temp -3(p2)
(1)  336/    936D : 06                  	csa 																	; if temp >= 0, CY/L is set
(1)  337/    936E : 94 0A               	jp 		__EE_Divide_Temp_Positive
(1)  338/    9370 :                     
(1)  339/    9370 : C2 FD               	ld 		-3(p2) 															; copy temp to remainder
(1)  340/    9372 : CA FF               	st 		-1(p2)
(1)  341/    9374 : C2 FE               	ld 		-2(p2) 															; or bit into quotient
(1)  342/    9376 : DA 00               	or 		__EEValue(p2)
(1)  343/    9378 : CA 00               	st 		__EEValue(p2)
(1)  344/    937A :                     __EE_Divide_Temp_Positive:
(1)  345/    937A :                     
(1)  346/    937A : C2 FE               	ld 		-2(p2) 															; shift bit right
(1)  347/    937C : 1C                  	sr
(1)  348/    937D : CA FE               	st 		-2(p2)
(1)  349/    937F :                     
(1)  350/    937F : C2 01               	ld 		__EEOperator(p2)												; shift numerator positive
(1)  351/    9381 : 02                  	ccl
(1)  352/    9382 : F2 01               	add 	__EEOperator(p2)
(1)  353/    9384 : CA 01               	st 		__EEOperator(p2)
(1)  354/    9386 : 90 CE               	jmp 	__EE_Divide_Loop
(1)  355/    9388 :                     
(1)  356/    9388 :                     ;	quotient = 0			
(1)  357/    9388 :                     ;	remainder = 0 			
 AS V1.42 Beta [Bld 102] - source file minol.asm(expression.asm) - page 17 - 12/9/2015 20:48:09


(1)  358/    9388 :                     ;	bit = 0x80
(1)  359/    9388 :                     ;
(1)  360/    9388 :                     ;	while (bit != 0):
(1)  361/    9388 :                     ;
(1)  362/    9388 :                     ;		remainder = remainder << 1
(1)  363/    9388 :                     ;		if numerator & 0x80 != 0:
(1)  364/    9388 :                     ;			remainder = (remainder + 1) & 0xFF
(1)  365/    9388 :                     ;		temp = remainder - denominator
(1)  366/    9388 :                     ;		if temp >= 0:
(1)  367/    9388 :                     ;			remainder = temp
(1)  368/    9388 :                     ;			quotient = quotient | bit
(1)  369/    9388 :                     ;		bit = (bit >> 1) & 0xFF
(1)  370/    9388 :                     ;		numerator = (numerator << 1) & 0xFF
(1)  371/    9388 :                     
(1)  372/    9388 :                     
(1)  373/    9388 :                     ; ****************************************************************************************************************
(1)  374/    9388 :                     ; ****************************************************************************************************************
(1)  375/    9388 :                     ;
(1)  376/    9388 :                     ;		P1 points to <expr>,<expr>) - parse out the values, read memory location and return in A, 
(1)  377/    9388 :                     ;		CY/L = 0 => error A. -2(p2) and -1(p2) should contain the address if we need to read it later.
(1)  378/    9388 :                     ;	
(1)  379/    9388 :                     ; ****************************************************************************************************************
(1)  380/    9388 :                     ; ****************************************************************************************************************
(1)  381/    9388 :                     
(1)  382/    9388 :                     ReadHLMemoryFull:
(1)  383/    9388 : C5 01               	ld 		@1(p1) 												; look at next character and bump.
(1)  384/    938A : E4 28               	xri 	'(' 												; if it is '(' then evaluate normally.
(1)  385/    938C : 98 06               	jz 		ReadHLMemory
(1)  386/    938E : C5 FF               	ld 		@-1(p1) 											; undo the post increment.
(1)  387/    9390 : 02                  	ccl 														; return with a syntax error.
(1)  388/    9391 : C4 05               	ldi 	ERROR_Syntax 
(1)  389/    9393 : 3F                  	xppc 	p3 
(1)  390/    9394 :                     
(1)  391/    9394 :                     ReadHLMemory:
(1)  392/    9394 :                     
(1)  393/    9394 : =0x3                RHL_AddrLo = 3
(1)  394/    9394 : =0x4                RHL_AddrHi = 4
(1)  395/    9394 : =0xFFFFFFFFF..      RHL_Result = -1
(1)  396/    9394 :                     
(1)  397/    9394 : 40                  	lde 														; save E
(1)  398/    9395 : CE FD               	st 		@-3(p2) 											; save leaving room for addr.lo and addr.hi
(1)  399/    9397 : 37                  	xpah 	p3 													; save P3
(1)  400/    9398 : CE FF               	st 		@-1(p2)
(1)  401/    939A : 33                  	xpal 	p3
(1)  402/    939B : CE FF               	st 		@-1(p2)
(1)  403/    939D : C4 2C               	ldi 	',' 												; first seperator is a comma.
(1)  404/    939F : 01                  	xae
(1)  405/    93A0 :                     __RHLLoop:	
(1)  406/    93A0 : C2 03               	ld 		RHL_AddrLo(p2) 										; copy addr lo to addr hi
(1)  407/    93A2 : CA 04               	st 		RHL_AddrHi(p2)
(1)  408/    93A4 : (MACRO)             	lpi 	p3,EvaluateExpression-1 							; evaluate the expression.
(1)  408/    93A4 : C4 92                       ldi     (EVALUATEEXPRESSION-1) / 256
(1)  408/    93A6 : 37                          xpah    P3
(1)  408/    93A7 : C4 26                       ldi     (EVALUATEEXPRESSION-1) & 255
(1)  408/    93A9 : 33                          xpal    P3
(1)  409/    93AA : 3F                  	xppc 	p3
(1)  410/    93AB : CA 03               	st 		RHL_AddrLo(p2) 										; save in addr.lo
(1)  411/    93AD : 06                  	csa  														; if error
(1)  412/    93AE : 94 25               	jp 		__RHLError
(1)  413/    93B0 :                     __RHLSkip:
 AS V1.42 Beta [Bld 102] - source file minol.asm(expression.asm) - page 18 - 12/9/2015 20:48:09


(1)  414/    93B0 : C1 00               	ld 		0(p1) 												; check for end of line
(1)  415/    93B2 : 98 25               	jz 		__RHLSyntax
(1)  416/    93B4 : C5 01               	ld 		@1(p1) 												; fetch next character
(1)  417/    93B6 : E4 20               	xri 	' ' 												; skip over spaces.
(1)  418/    93B8 : 98 F6               	jz 		__RHLSkip 
(1)  419/    93BA : C1 FF               	ld 		-1(p1) 												; get fetched character
(1)  420/    93BC : 60                  	xre 														; is it the one we wanted ?
(1)  421/    93BD : 9C 1A               	jnz 	__RHLSyntax 										; no, so fail.
(1)  422/    93BF : 40                  	lde 														; get character
(1)  423/    93C0 : E4 05               	xri 	','!')'												; switch from , to )
(1)  424/    93C2 : 01                  	xae 														; put back in E.
(1)  425/    93C3 : 40                  	lde 														; if it is ')' , go back.
(1)  426/    93C4 : E4 29               	xri 	')'
(1)  427/    93C6 : 98 D8               	jz 		__RHLLoop 
(1)  428/    93C8 :                     
(1)  429/    93C8 : C2 03               	ld 		RHL_AddrLo(p2) 										; load address into P3
(1)  430/    93CA : 33                  	xpal 	p3
(1)  431/    93CB : C2 04               	ld 		RHL_AddrHi(p2)
(1)  432/    93CD : 37                  	xpah 	p3
(1)  433/    93CE : C3 00               	ld 		0(p3) 												; read byte there
(1)  434/    93D0 : CA FF               	st 		-1(p2) 												; save in return value space.
(1)  435/    93D2 : 03                  	scl 														; set CY/L indicating no error
(1)  436/    93D3 : 90 09               	jmp 	__RHLExit 											; and exit.
(1)  437/    93D5 :                     
(1)  438/    93D5 :                     __RHLError:
(1)  439/    93D5 : C2 03               	ld 		RHL_AddrLo(p2) 										; read error code
(1)  440/    93D7 : 90 02               	jmp 	__RHLSaveErrorAndExit
(1)  441/    93D9 :                     
(1)  442/    93D9 :                     __RHLSyntax:
(1)  443/    93D9 : C4 05               	ldi 	ERROR_Syntax 										; syntax error
(1)  444/    93DB :                     __RHLSaveErrorAndExit:
(1)  445/    93DB : CA FF               	st 		RHL_Result(p2)										; save as error code
(1)  446/    93DD : 02                  	ccl 														; return error
(1)  447/    93DE :                     
(1)  448/    93DE :                     __RHLExit:														; exit with result in RHL_AddrLo.
(1)  449/    93DE : C6 01               	ld 		@1(p2) 												; reload P3
(1)  450/    93E0 : 33                  	xpal 	p3
(1)  451/    93E1 : C6 01               	ld 		@1(p2)
(1)  452/    93E3 : 37                  	xpah 	p3
(1)  453/    93E4 : C6 03               	ld 		@3(p2)
(1)  454/    93E6 : 01                  	xae
(1)  455/    93E7 : C2 FA               	ld 		-6(p2) 												; get the return value
(1)  456/    93E9 : 3F                  	xppc 	p3 													; and exit.
(1)  457/    93EA :                     
      70/    93EA :                     
      71/    93EA :                     
      72/    93EA :                     
 AS V1.42 Beta [Bld 102] - source file minol.asm - page 19 - 12/9/2015 20:48:09


  symbol table (* = unused):
  ------------------------

*ARCHITECTURE :  i386-unknown-win32 - | *BIGENDIAN :                      0 - |
*BRANCHEXT :                      0 - | *CASESENSITIVE :                  0 - |
*CONSTPI :        3.141592653589793 - | *CURRENTADDR :                  CA3 - |
 CURRENTLINE :                  CA2 - | *DATE :                   12/9/2015 - |
 ERROR_BADTERM :                  4 - |  ERROR_DIVZERO :                  7 - |
 ERROR_SYNTAX :                   5 - |  EVALUATEEXPRESSION :          9227 C |
 EXECUTECOMMAND :              9039 C | *FALSE :                          0 - |
*FULLPMMU :                       1 - |  GETCHAR :                     919B C |
 GETSTRING :                   91BF C | *HAS64 :                          1 - |
*HASDSP :                         0 - | *HASFPU :                         0 - |
*HASPMMU :                        0 - | *INEXTMODE :                      0 - |
*INLWORDMODE :                    0 - | *INMAXMODE :                      0 - |
*INSRCMODE :                      0 - | *INSUPMODE :                      0 - |
*LISTON :                         1 - | *MACEXP :                         1 - |
 MINOLVARS :                    CA2 - | *MOMCPU :                         C - |
*MOMCPUNAME :                 SC/MP - | *NESTMAX :                      100 - |
*PACKING :                        0 - | *PADDING :                        1 - |
 PRINT :                       90DB C | *PROGRAMBASE :                  CA5 - |
 READHLMEMORY :                9394 C |  READHLMEMORYFULL :            9388 C |
*RELAXED :                        0 - |  RHL_ADDRHI :                     4 - |
 RHL_ADDRLO :                     3 - |  RHL_RESULT :      FFFFFFFFFFFFFFFF - |
 SCREENCURSOR :                 C80 - |  SCREENMIRROR :                 C00 - |
 STOP :                        9020 C |  TEST :                        9022 C |
*TIME :                    20:48:09 - | *TRUE :                           1 - |
 VARIABLES :                    C82 - | *VERSION :                     142F - |
 WAIT2 :                       90C0 C |  __EEBADTERM :                 92EE C |
 __EECALCULATE :               9305 C |  __EECALCULATE3 :              92C7 C |
 __EECHECKOPERATOR :           92D6 C |  __EECONSTANTLOOP :            929B C |
 __EEDATAACCESS :              9263 C |  __EEDOOPERATOR :              92E8 C |
 __EEERROR :                   92F0 C |  __EEEXIT :                    92F3 C |
 __EEGETNEXTOPERATOR :         92C9 C |  __EEGETNEXTOPERATOR2 :        9321 C |
 __EELOOP :                    9273 C |  __EENOTDIGIT :                92B6 C |
 __EEOPERATOR :                   1 - |  __EERANDOM :                  923A C |
 __EERANDOMNOTOGGLE :          925C C |  __EERANDOMOFFSET :              1A - |
 __EERANDOM_ISINITIALISED :    9248 C |  __EEVALUE :                      0 - |
*__EE_ADD :                    9313 C |  __EE_DIVIDE :                 9345 C |
 __EE_DIVIDE_LOOP :            9356 C |
 __EE_DIVIDE_NUMERATOR_POSITIVE :                                      9367 C |
 __EE_DIVIDE_TEMP_POSITIVE :   937A C |  __EE_DIVIDE_ZERO :            9301 C |
 __EE_MULTIPLY :               9323 C |  __EE_MULTIPLYLOOP :           932B C |
 __EE_MULTIPLY_B0ISZERO :      9339 C |  __EE_SUBTRACT :               931B C |
 __EXCODE :                    9068 C |  __EXEXIT :                    902C C |
 __EXEXITNOSC :                902D C |  __EXFIRST :                   9044 C |
 __EXNEXTCOMMAND :             9056 C |  __EXSKIPCHARACTERS :          90C2 C |
 __EXSKIPEXIT :                90DA C |  __EXSKIPONE :                 90C4 C |
 __EXSKIPSPACE :               90CE C |  __EX_CALL_LOOP :              9084 C |
 __EX_COMMAND_CALL :           908E C |  __EX_DECODE_NOTC :            90A7 C |
 __EX_DECODE_NOTE :            90C0 C |  __EX_END_ENDOFLINE :          90B8 C |
 __EX_REPORTERROR :            9062 C |  __GCNOTLOWER [GETCHAR] :      91BA C |
 __GCWAITKEY [GETCHAR] :       91A0 C |  __GCWAITRELEASE [GETCHAR] :   91A8 C |
 __GSBACKSPACE [GETSTRING] :   921A C |  __GSCONTROLKEY [GETSTRING] :  91FD C |
 __GSLOOP [GETSTRING] :        91CD C |  __PRCLEARFROMMOVETO [PRINT] : 917B C |
 __PRCLEARLOOP [PRINT] :       917D C |  __PRCLEARSCREEN [PRINT] :     9179 C |
 __PRCOPY [PRINT] :            9187 C |  __PREXIT [PRINT] :            913E C |
 __PREXITNOCHECK [PRINT] :     9142 C |  __PRISCONTROLCHAR [PRINT] :   9150 C |
 __PRISRETURN [PRINT] :        9170 C |  __PRNOTASCII [PRINT] :        9118 C |
 __PRPRINTCHARACTERA [PRINT] : 90FC C |  __PRPRINTSTRING [PRINT] :     90EA C |
 AS V1.42 Beta [Bld 102] - source file minol.asm - page 20 - 12/9/2015 20:48:09


 __PRSCROLLLOOP [PRINT] :      9130 C |  __PRUPDATECURSOR [PRINT] :    9121 C |
 __RHLERROR :                  93D5 C |  __RHLEXIT :                   93DE C |
 __RHLLOOP :                   93A0 C |  __RHLSAVEERRORANDEXIT :       93DB C |
 __RHLSKIP :                   93B0 C |  __RHLSYNTAX :                 93D9 C |

    120 symbols
     31 unused symbols

 AS V1.42 Beta [Bld 102] - source file minol.asm - page 21 - 12/9/2015 20:48:09


  defined macros:
  ---------------

LPI                                   |

      1 macro

 AS V1.42 Beta [Bld 102] - source file minol.asm - page 22 - 12/9/2015 20:48:09


  codepages:
  ----------

STANDARD (0 changed characters)


0.01 seconds assembly time

   1014 lines source file
   1066 lines incl. macro expansions
      2 passes
      0 errors
      0 warnings
