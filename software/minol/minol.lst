 AS V1.42 Beta [Bld 102] - source file minol.asm - page 1 - 1/9/2016 13:55:47


       1/       0 :                     ; ****************************************************************************************************************
       2/       0 :                     ; ****************************************************************************************************************
       3/       0 :                     ;
       4/       0 :                     ;												Minol ROM Image
       5/       0 :                     ;
       6/       0 :                     ; ****************************************************************************************************************
       7/       0 :                     ; ****************************************************************************************************************
       8/       0 :                     
       9/       0 :                     	cpu 	sc/mp
      10/       0 :                     
      11/       0 :                     	include source\memorymacros.asm 							; Memory allocation and Macro definition.	
(1)    1/       0 :                     ; ****************************************************************************************************************
(1)    2/       0 :                     ; ****************************************************************************************************************
(1)    3/       0 :                     ;
(1)    4/       0 :                     ;										Memory and Macro Allocation.
(1)    5/       0 :                     ;	
(1)    6/       0 :                     ; ****************************************************************************************************************
(1)    7/       0 :                     ; ****************************************************************************************************************
(1)    8/       0 :                     
(1)    9/       0 : =0x3                OSMathLibrary = 0x0003 											; the Maths library is here.
(1)   10/       0 : =0x210              BootMonitor = 0x210 											; address to boot monitor
(1)   11/       0 :                     
(1)   12/       0 :                     ; ****************************************************************************************************************
(1)   13/       0 :                     ;												 Memory Allocation
(1)   14/       0 :                     ; ****************************************************************************************************************
(1)   15/       0 :                     
(1)   16/       0 : =0xC00              ScreenMirror = 0xC00 											; Screen mirror, 128 bytes, 256 byte page boundary.
(1)   17/       0 : =0xC80              ScreenCursor = ScreenMirror+0x80  								; Position on that screen (00..7F)
(1)   18/       0 :                     
(1)   19/       0 : =0xC90              SystemMemory = 0xC90 											; System Memory
(1)   20/       0 :                     
(1)   21/       0 : =0xC8E              RandomSeed = SystemMemory-2										; Random Seed Value (2 bytes)
(1)   22/       0 : =0xC8D              CurrentLine = SystemMemory-3 									; Current Line Number (1 byte)
(1)   23/       0 : =0xC90              Variables = SystemMemory 										; Variables (26 bytes)
(1)   24/       0 :                     
(1)   25/       0 :                     ; ****************************************************************************************************************
(1)   26/       0 :                     ;														Macros
(1)   27/       0 :                     ; ****************************************************************************************************************
(1)   28/       0 :                     
(1)   29/       0 :                     lpi	macro	ptr,addr											; load pointer register with constant
(1)   30/       0 :                     	ldi 	(addr) / 256
(1)   31/       0 :                     	xpah 	ptr
(1)   32/       0 :                     	ldi 	(addr) & 255
(1)   33/       0 :                     	xpal 	ptr
(1)   34/       0 :                     	endm
(1)   35/       0 :                     
(1)   36/       0 :                     pushp macro ptr 												; push pointer register on stack
(1)   37/       0 :                     	xpah 	ptr
(1)   38/       0 :                     	st 		@-1(p2)
(1)   39/       0 :                     	xpal 	ptr
(1)   40/       0 :                     	st 		@-1(p2)
(1)   41/       0 :                     	endm
(1)   42/       0 :                     
(1)   43/       0 :                     pullp macro ptr 												; pull pointer register off stack
(1)   44/       0 :                     	ld 		@1(p2)
(1)   45/       0 :                     	xpal 	ptr
(1)   46/       0 :                     	ld 		@1(p2)
(1)   47/       0 :                     	xpah 	ptr
(1)   48/       0 :                     	endm
(1)   49/       0 :                     
 AS V1.42 Beta [Bld 102] - source file minol.asm(memorymacros.asm) - page 2 - 1/9/2016 13:55:47


(1)   50/       0 :                     pushe macro 													; push E on stack
(1)   51/       0 :                     	lde
(1)   52/       0 :                     	st 		@-1(p2)
(1)   53/       0 :                     	endm
(1)   54/       0 :                     
(1)   55/       0 :                     pulle macro 													; pull E off stack
(1)   56/       0 :                     	ld 		@1(p2)
(1)   57/       0 :                     	xae
(1)   58/       0 :                     	endm
(1)   59/       0 :                     
(1)   60/       0 :                     pusha macro 													; push A on stack
(1)   61/       0 :                     	st 		@-1(p2)
(1)   62/       0 :                     	endm
(1)   63/       0 :                     
(1)   64/       0 :                     pulla macro
(1)   65/       0 :                     	ld 		@1(p2)
(1)   66/       0 :                     	endm
(1)   67/       0 :                     
(1)   68/       0 :                     setv macro ch,value 											; sets a variable to a value, assumes P3 = Variables.
(1)   69/       0 :                     	ldi 	(value) & 255
(1)   70/       0 :                     	st 		((ch) - 'A')(p3)
(1)   71/       0 :                     	endm
(1)   72/       0 :                     
(1)   73/       0 :                     code macro lineNo,code 											; a debugging macro, which fakes up a line of code.
(1)   74/       0 :                     	db 		strlen(code)+3 										; one byte offset to next (255 = End of code)
(1)   75/       0 :                     	db 		lineNo 												; one byte line number 
(1)   76/       0 :                     	db 		code,0 												; ASCIIZ string
(1)   77/       0 :                     	endm
(1)   78/       0 :                     
(1)   79/       0 :                     cmd macro 	c1,c2,length,code
(1)   80/       0 :                     	db 		c1,c2 												; first and second characters
(1)   81/       0 :                     	db 		(length)-1											; length -1 (first char already skipped)
(1)   82/       0 :                     	dw 		(code)-1 											; execution point for prefetch.
(1)   83/       0 :                     	endm
      12/       0 :                     	include source\errors.asm 									; Error Codes
(1)    1/       0 :                     ; ****************************************************************************************************************
(1)    2/       0 :                     ; ****************************************************************************************************************
(1)    3/       0 :                     ;
(1)    4/       0 :                     ;												Error Codes
(1)    5/       0 :                     ;
(1)    6/       0 :                     ; ****************************************************************************************************************
(1)    7/       0 :                     ; ****************************************************************************************************************
(1)    8/       0 :                     
(1)    9/       0 : =0x1                ERRC_LABEL = 1 													; Label does not exist (e.g. GOTO)
(1)   10/       0 : =0x2                ERRC_UNKNOWN = 2												; Unknown instruction
(1)   11/       0 : =0x4                ERRC_TERM = 4 													; Illegal term/expression
(1)   12/       0 : =0x5                ERRC_SYNTAX = 5													; Syntax Error
(1)   13/       0 : =0x6                ERRC_MEMORY = 6 												; Out of memory
(1)   14/       0 : =0x7                ERRC_DIVZERO = 7 												; Division by Zero Error.
(1)   15/       0 :                     
(1)   16/       0 :                     
(1)   17/       0 :                     
      13/       0 :                     
      14/       0 :                     ; ****************************************************************************************************************
      15/       0 :                     ; ****************************************************************************************************************
      16/       0 :                     ; 	NOTE: When executing line follow the line with $FF so it thinks it has reached the program end.
      17/       0 :                     ; ****************************************************************************************************************
      18/       0 :                     ; ****************************************************************************************************************
      19/       0 :                     
      20/       0 :                     
 AS V1.42 Beta [Bld 102] - source file minol.asm - page 3 - 1/9/2016 13:55:47


      21/       0 :                     ; ****************************************************************************************************************
      22/       0 :                     ;													Main Program
      23/       0 :                     ; ****************************************************************************************************************
      24/       0 :                     
      25/    9000 :                     	org 	0x9000 												; the ROM starts here
      26/    9000 :                     
      27/    9000 : 68                  	db 		0x68												; this makes it boot straight into this ROM.
      28/    9001 : (MACRO)             	lpi 	p2,0xFF8											; set up stack default value
      28/    9001 : C4 0F                       ldi     (0XFF8) / 256
      28/    9003 : 36                          xpah    P2
      28/    9004 : C4 F8                       ldi     (0XFF8) & 255
      28/    9006 : 32                          xpal    P2
      29/    9007 : (MACRO)             	lpi 	p3,SystemMemory
      29/    9007 : C4 0C                       ldi     (SYSTEMMEMORY) / 256
      29/    9009 : 37                          xpah    P3
      29/    900A : C4 90                       ldi     (SYSTEMMEMORY) & 255
      29/    900C : 33                          xpal    P3
      30/    900D :                     
      31/    900D : (MACRO)             	lpi 	p3,CMD_Run-1
      31/    900D : C4 91                       ldi     (CMD_RUN-1) / 256
      31/    900F : 37                          xpah    P3
      31/    9010 : C4 9E                       ldi     (CMD_RUN-1) & 255
      31/    9012 : 33                          xpal    P3
      32/    9013 : 3F                  	xppc	p3
      33/    9014 :                     wait1:	
      34/    9014 : 90 FE               	jmp 	wait1
      35/    9016 :                     
      36/    9016 :                     
      37/    9016 :                     ProgramBase:
      38/    9016 : (MACRO)             	code 	1,"\"START\":GOTO 120"
      38/    9016 : 13                          db              strlen("\"START\":GOTO 120")+3                                                                          ; one byte offset to next (255 = End of "\"START\":GOTO 120")
      38/    9017 : 01                          db              1                                                                                          ; one byte line number 
      38/    9018 : 22 53 54 41 52 54           db              "\"START\":GOTO 120",0                                                                                          ; ASCIIZ string
                    22 3A 47 4F 54 4F 
                    20 31 32 30 00 
      39/    9029 : (MACRO)             	code 	10,"HELLO WORLD"
      39/    9029 : 0E                          db              strlen("HELLO WORLD")+3                                                                          ; one byte offset to next (255 = End of "HELLO WORLD")
      39/    902A : 0A                          db              10                                                                                          ; one byte line number 
      39/    902B : 48 45 4C 4C 4F 20           db              "HELLO WORLD",0                                                                                          ; ASCIIZ string
                    57 4F 52 4C 44 00 
      40/    9037 : (MACRO)             	code 	20,"GOTO 20"
      40/    9037 : 0A                          db              strlen("GOTO 20")+3                                                                          ; one byte offset to next (255 = End of "GOTO 20")
      40/    9038 : 14                          db              20                                                                                          ; one byte line number 
      40/    9039 : 47 4F 54 4F 20 32           db              "GOTO 20",0                                                                                          ; ASCIIZ string
                    30 00 
      41/    9041 : (MACRO)             	code 	30,"END"
      41/    9041 : 06                          db              strlen("END")+3                                                                          ; one byte offset to next (255 = End of "END")
      41/    9042 : 1E                          db              30                                                                                          ; one byte line number 
      41/    9043 : 45 4E 44 00                 db              "END",0                                                                                          ; ASCIIZ string
      42/    9047 :                     
      43/    9047 : 47 4F 54 4F 20 31   	db 		"GOTO 132",0,255
                    33 32 00 FF 
      44/    9051 :                     
      45/    9051 :                     
      46/    9051 :                     ; ****************************************************************************************************************
      47/    9051 :                     ;													Source Files
      48/    9051 :                     ; *********************************12*******************************************************************************
      49/    9051 :                     
      50/    9051 :                     	include source\screen.asm 									; screen I/O stuff.
(1)    1/    9051 :                     ; ****************************************************************************************************************
 AS V1.42 Beta [Bld 102] - source file minol.asm(screen.asm) - page 4 - 1/9/2016 13:55:47


(1)    2/    9051 :                     ; ****************************************************************************************************************
(1)    3/    9051 :                     ;
(1)    4/    9051 :                     ;											Screen I/O, VTL-2 ROM
(1)    5/    9051 :                     ;											=====================
(1)    6/    9051 :                     ;
(1)    7/    9051 :                     ;	Provides Character and String Input/Output functionality.
(1)    8/    9051 :                     ;
(1)    9/    9051 :                     ; ****************************************************************************************************************
(1)   10/    9051 :                     ; ****************************************************************************************************************
(1)   11/    9051 :                     
(1)   12/    9051 :                     ; ****************************************************************************************************************
(1)   13/    9051 :                     ; ****************************************************************************************************************
(1)   14/    9051 :                     ;
(1)   15/    9051 :                     ;	Print routine. Prints either character in A, or ASCIIZ string at P1 (if A is zero). Preserves all registers
(1)   16/    9051 :                     ;	except if printing string, P1 points to the character after the NULL terminator.
(1)   17/    9051 :                     ;
(1)   18/    9051 :                     ;	Scrolls automatically. Understands character codes 32-255, 8 (Backspace) 12 (Clear Screen) 13 (Carriage
(1)   19/    9051 :                     ;	Return). Others are currently ignored (except 0, see above). Note L/C values (97....) display those characters
(1)   20/    9051 :                     ;	in the ROM font *not* lower case :)
(1)   21/    9051 :                     ;
(1)   22/    9051 :                     ; ****************************************************************************************************************
(1)   23/    9051 :                     ; ****************************************************************************************************************
(1)   24/    9051 :                     
(1)   25/    9051 :                     Print:
(1)   26/    9051 :                     	section 	Print
(1)   27/    9051 :                     
(1)   28/    9051 : (MACRO)             	pusha														; push registers on stack
(1)   28/    9051 : CE FF                       st              @-1(p2)
(1)   29/    9053 : (MACRO)             	pushp 	p1
(1)   29/    9053 : 35                          xpah    P1
(1)   29/    9054 : CE FF                       st              @-1(p2)
(1)   29/    9056 : 31                          xpal    P1
(1)   29/    9057 : CE FF                       st              @-1(p2)
(1)   30/    9059 : (MACRO)             	pushe
(1)   30/    9059 : 40                          lde
(1)   30/    905A : CE FF                       st              @-1(p2)
(1)   31/    905C :                     
(1)   32/    905C : C2 03               	ld 		3(p2) 												; read character 
(1)   33/    905E : 9C 12               	jnz 	__PRPrintCharacterA 								; if non zero print it on its own.
(1)   34/    9060 :                     
(1)   35/    9060 :                     __PRPrintString:
(1)   36/    9060 : C2 01               	ld 		1(p2) 												; restore original P1
(1)   37/    9062 : 31                  	xpal 	p1
(1)   38/    9063 : C2 02               	ld 		2(p2)
(1)   39/    9065 : 35                  	xpah 	p1 													; read character at P1.
(1)   40/    9066 : C5 01               	ld 		@1(p1)
(1)   41/    9068 : 01                  	xae 														; save in E.
(1)   42/    9069 : 35                  	xpah 	p1 													; write P1 back.
(1)   43/    906A : CA 02               	st 		2(p2)
(1)   44/    906C : 31                  	xpal 	p1
(1)   45/    906D : CA 01               	st 		1(p2)
(1)   46/    906F : 40                  	lde 														; get character from E
(1)   47/    9070 : 98 46               	jz 		__PRExitNoCheck 									; exit without loop check.
(1)   48/    9072 :                     ;
(1)   49/    9072 :                     ;	Print character in A now ; throughout it is stored in E.
(1)   50/    9072 :                     ;
(1)   51/    9072 :                     __PRPrintCharacterA:
(1)   52/    9072 : 01                  	xae 														; save character in E.
(1)   53/    9073 :                     ;
(1)   54/    9073 :                     ;	Read cursor and set P1 to that address
 AS V1.42 Beta [Bld 102] - source file minol.asm(screen.asm) - page 5 - 1/9/2016 13:55:47


(1)   55/    9073 :                     ;
(1)   56/    9073 : C4 0C               	ldi 	ScreenCursor/256 									; set P1 to point to screen cursor
(1)   57/    9075 : 35                  	xpah 	p1
(1)   58/    9076 : C4 80               	ldi 	ScreenCursor&255
(1)   59/    9078 : 31                  	xpal 	p1
(1)   60/    9079 : C1 00               	ld 		0(p1) 												; put cursor position in P1.L
(1)   61/    907B : 31                  	xpal 	p1
(1)   62/    907C :                     ;
(1)   63/    907C :                     ;	Check for control
(1)   64/    907C :                     ;
(1)   65/    907C : 40                  	lde 														; look at character
(1)   66/    907D : D4 E0               	ani 	0xE0 												; is it code 0-31
(1)   67/    907F : 98 45               	jz 		__PRIsControlChar
(1)   68/    9081 :                     ;
(1)   69/    9081 :                     ;	Print non-control
(1)   70/    9081 :                     ;
(1)   71/    9081 : 40                  	lde 														; read character
(1)   72/    9082 : 03                  	scl 														; CY/L clear if < 96
(1)   73/    9083 : FC 60               	cai 	96 
(1)   74/    9085 : 06                  	csa 	 	 												; skip if carry set
(1)   75/    9086 : E4 80               	xri 	0x80													
(1)   76/    9088 : 94 04               	jp 		__PRNotASCII
(1)   77/    908A : 40                  	lde 														; if ASCII make 6 bit.
(1)   78/    908B : D4 3F               	ani 	0x3F
(1)   79/    908D : 01                  	xae
(1)   80/    908E :                     __PRNotASCII:
(1)   81/    908E : 40                  	lde 														; get character.
(1)   82/    908F : C9 00               	st 		(p1) 												; save in shadow memory
(1)   83/    9091 : 35                  	xpah 	p1 													; switch to VRAM, preserving A.
(1)   84/    9092 : C4 00               	ldi 	0 													
(1)   85/    9094 : 35                  	xpah 	p1
(1)   86/    9095 : CD 01               	st 		@1(p1) 												; save in screen memory, advance write position.
(1)   87/    9097 :                     ;
(1)   88/    9097 :                     ;	Write cursor position back from P1.L
(1)   89/    9097 :                     ;
(1)   90/    9097 :                     __PRUpdateCursor:
(1)   91/    9097 : C4 0C               	ldi		ScreenCursor / 256 									; set P1 to point to screen cursor, restore position to P1
(1)   92/    9099 : 35                  	xpah 	p1
(1)   93/    909A : C4 80               	ldi 	ScreenCursor & 255 
(1)   94/    909C : 31                  	xpal 	p1 													; after this, adjusted cursor position is in AC.
(1)   95/    909D : C9 00               	st 		(p1) 												; write back in cursor position
(1)   96/    909F : 94 13               	jp 		__PRExit 											; if position is off the bottom then scroll.
(1)   97/    90A1 :                     ;
(1)   98/    90A1 :                     ;	Scroll display
(1)   99/    90A1 :                     ;
(1)  100/    90A1 : C4 0C               	ldi 	(ScreenMirror+16) / 256 							; point P1 to 2nd line.
(1)  101/    90A3 : 35                  	xpah 	p1
(1)  102/    90A4 : C4 10               	ldi 	(ScreenMirror+16) & 255
(1)  103/    90A6 :                     __PRScrollLoop:
(1)  104/    90A6 : 31                  	xpal 	p1
(1)  105/    90A7 : C1 00               	ld 		0(p1) 												; copy char to previous line
(1)  106/    90A9 : C9 F0               	st 		-16(p1)
(1)  107/    90AB : C5 01               	ld 		@1(p1) 												; bump pointer.
(1)  108/    90AD : 31                  	xpal 	p1
(1)  109/    90AE : 94 F6               	jp 		__PRScrollLoop
(1)  110/    90B0 : C4 70               	ldi 	128-16 												; clear from and move to last line
(1)  111/    90B2 : 90 3D               	jmp 	__PRClearFromMoveTo
(1)  112/    90B4 :                     ;
(1)  113/    90B4 :                     ;	Exit screen drawing routine.
(1)  114/    90B4 :                     ;
 AS V1.42 Beta [Bld 102] - source file minol.asm(screen.asm) - page 6 - 1/9/2016 13:55:48


(1)  115/    90B4 :                     __PRExit:
(1)  116/    90B4 : C2 03               	ld 		3(p2) 												; if character was zero, loop
(1)  117/    90B6 : 98 A8               	jz 		__PRPrintString 									; back as printing string at P1.
(1)  118/    90B8 :                     __PRExitNoCheck:
(1)  119/    90B8 : (MACRO)             	pulle 														; restore registers
(1)  119/    90B8 : C6 01                       ld              @1(p2)
(1)  119/    90BA : 01                          xae
(1)  120/    90BB : (MACRO)             	pullp 	p1
(1)  120/    90BB : C6 01                       ld              @1(p2)
(1)  120/    90BD : 31                          xpal    P1
(1)  120/    90BE : C6 01                       ld              @1(p2)
(1)  120/    90C0 : 35                          xpah    P1
(1)  121/    90C1 : (MACRO)             	pulla
(1)  121/    90C1 : C6 01                       ld              @1(p2)
(1)  122/    90C3 : 3F                  	xppc 	p3 													; return
(1)  123/    90C4 : 90 8B               	jmp 	Print 												; make re-entrant.
(1)  124/    90C6 :                     ;
(1)  125/    90C6 :                     ;	Check for supported control characters 8 (Backspace) 12 (Clear) 13 (Carriage Return)
(1)  126/    90C6 :                     ;
(1)  127/    90C6 :                     __PRIsControlChar:
(1)  128/    90C6 : 40                  	lde 														; restore character.
(1)  129/    90C7 : E4 0D               	xri 	13 													; carriage return ? (13)
(1)  130/    90C9 : 98 1B               	jz 		__PRIsReturn
(1)  131/    90CB : E4 01               	xri 	13!12 												; form feed ? (12)
(1)  132/    90CD : 98 20               	jz 		__PRClearScreen
(1)  133/    90CF : E4 04               	xri 	12!8 												; backspace ? (8)
(1)  134/    90D1 : 9C E1               	jnz 	__PRExit 
(1)  135/    90D3 :                     ;
(1)  136/    90D3 :                     ;	Handle backspace (8)
(1)  137/    90D3 :                     ;
(1)  138/    90D3 : 31                  	xpal 	p1 													; check cursor position is zero
(1)  139/    90D4 : 98 DE               	jz 		__PRExit 											; if it is, cannot backspace so exit.
(1)  140/    90D6 : 31                  	xpal 	p1  												; put it back
(1)  141/    90D7 : C5 FF               	ld 		@-1(p1)												; move it back one
(1)  142/    90D9 : C4 20               	ldi 	' '	 												; erase in shadow
(1)  143/    90DB : C9 00               	st 		(p1)
(1)  144/    90DD : C4 00               	ldi 	0 													; point P1 to VRAM
(1)  145/    90DF : 35                  	xpah 	p1
(1)  146/    90E0 : C4 20               	ldi 	' '													; erase in VRAM
(1)  147/    90E2 : C9 00               	st 		(p1)
(1)  148/    90E4 : 90 B1               	jmp 	__PRUpdateCursor 									; and exit
(1)  149/    90E6 :                     ;
(1)  150/    90E6 :                     ;	Handle carriage return (13)
(1)  151/    90E6 :                     ;
(1)  152/    90E6 :                     __PRIsReturn:
(1)  153/    90E6 : 31                  	xpal 	p1 													; cursor position in A
(1)  154/    90E7 : D4 F0               	ani 	0xF0 												; start of current line
(1)  155/    90E9 : 02                  	ccl 														; down one line
(1)  156/    90EA : F4 10               	adi 	0x10 	
(1)  157/    90EC : 31                  	xpal 	p1 													; put it back in P1.
(1)  158/    90ED : 90 A8               	jmp 	__PRUpdateCursor
(1)  159/    90EF :                     ;
(1)  160/    90EF :                     ;	Handle clear screen (12)
(1)  161/    90EF :                     ;
(1)  162/    90EF :                     __PRClearScreen:
(1)  163/    90EF : C4 00               	ldi 	0 													; clear shadow memory from here.
(1)  164/    90F1 :                     ;
(1)  165/    90F1 :                     ;	From position A, clear the memory in the shadow screen to the end, copy the shadow screen to VRAM
(1)  166/    90F1 :                     ;	then use position A as the new cursor position.
(1)  167/    90F1 :                     ;
 AS V1.42 Beta [Bld 102] - source file minol.asm(screen.asm) - page 7 - 1/9/2016 13:55:48


(1)  168/    90F1 :                     __PRClearFromMoveTo:
(1)  169/    90F1 : CE FF               	st 		@-1(p2) 											; save this position, the cursor goes here.
(1)  170/    90F3 :                     __PRClearLoop:
(1)  171/    90F3 : 31                  	xpal 	p1 													; save position in P1.
(1)  172/    90F4 : C4 20               	ldi 	' '													; write space there.
(1)  173/    90F6 : CD 01               	st 		@1(p1)
(1)  174/    90F8 : 31                  	xpal 	p1
(1)  175/    90F9 : 94 F8               	jp 		__PRClearLoop 										; until reached shadow memory start.
(1)  176/    90FB : C4 00               	ldi 	0 													; now copy shadow memory to screen memory.
(1)  177/    90FD :                     __PRCopy:
(1)  178/    90FD : 31                  	xpal 	p1 													; set up P1.L
(1)  179/    90FE : C4 0C               	ldi 	ScreenMirror/256 									; point to shadow memory.
(1)  180/    9100 : 35                  	xpah 	p1 													
(1)  181/    9101 : C1 00               	ld 		(p1) 												; read shadow memory
(1)  182/    9103 : 35                  	xpah 	p1 													; zero P1.H preserving A
(1)  183/    9104 : C4 00               	ldi 	0
(1)  184/    9106 : 35                  	xpah 	p1
(1)  185/    9107 : CD 01               	st 		@1(p1) 												; save and increment p1
(1)  186/    9109 : 31                  	xpal 	p1 
(1)  187/    910A : 94 F1               	jp 		__PRCopy 											; keep doing till all copied.
(1)  188/    910C : C6 01               	ld 		@1(p2) 												; read cursor position
(1)  189/    910E : 31                  	xpal 	p1 													; put in P1.L
(1)  190/    910F : 90 86               	jmp 	__PRUpdateCursor
(1)  191/    9111 :                     
(1)  192/    9111 :                     	endsection 	Print
(1)  193/    9111 :                     
(1)  194/    9111 :                     ; ****************************************************************************************************************
(1)  195/    9111 :                     ; ****************************************************************************************************************
(1)  196/    9111 :                     ;
(1)  197/    9111 :                     ;		Input a single character into A. Case is converted to Upper. All registers preserved except A
(1)  198/    9111 :                     ;
(1)  199/    9111 :                     ; ****************************************************************************************************************
(1)  200/    9111 :                     ; ****************************************************************************************************************
(1)  201/    9111 :                     
(1)  202/    9111 :                     GetChar:
(1)  203/    9111 :                     	section 	GetChar
(1)  204/    9111 : C4 08               	ldi 	0x8 												; set P1 to $8xx, and save P1.H
(1)  205/    9113 : 35                  	xpah 	p1
(1)  206/    9114 : CE FF               	st 		@-1(p2)
(1)  207/    9116 :                     __GCWaitKey: 													; wait for key press
(1)  208/    9116 : C1 00               	ld 		0(p1)
(1)  209/    9118 : 94 FC               	jp 		__GCWaitKey
(1)  210/    911A : D4 7F               	ani	 	0x7F 												; throw away the upper bit.
(1)  211/    911C : CA FF               	st 		-1(p2) 												; save it below stack
(1)  212/    911E :                     __GCWaitRelease:
(1)  213/    911E : C1 00               	ld 		0(p1) 												; wait for release
(1)  214/    9120 : D4 80               	ani 	0x80
(1)  215/    9122 : 9C FA               	jnz 	__GCWaitRelease
(1)  216/    9124 : C6 01               	ld 		@1(p2) 												; restore P1.H
(1)  217/    9126 : 35                  	xpah 	p1
(1)  218/    9127 : C2 FE               	ld 		-2(p2) 												; restore saved value
(1)  219/    9129 : 02                  	ccl
(1)  220/    912A : F4 20               	adi 	0x20												; will make lower case -ve
(1)  221/    912C : 94 02               	jp 		__GCNotLower
(1)  222/    912E : FC 20               	cai 	0x20 												; capitalise
(1)  223/    9130 :                     __GCNotLower:
(1)  224/    9130 : F4 E0               	adi 	0xE0 												; fix up.
(1)  225/    9132 : 3F                  	xppc 	p3 													; return
(1)  226/    9133 : 90 DC               	jmp 	GetChar 											; make re-entrant
(1)  227/    9135 :                     	endsection 	GetChar
 AS V1.42 Beta [Bld 102] - source file minol.asm(screen.asm) - page 8 - 1/9/2016 13:55:48


(1)  228/    9135 :                     
(1)  229/    9135 :                     ; ****************************************************************************************************************
(1)  230/    9135 :                     ; ****************************************************************************************************************
(1)  231/    9135 :                     ;
(1)  232/    9135 :                     ;			Read an ASCIIZ string from keyboard into P1 of length A maximum (excludes NULL terminator)
(1)  233/    9135 :                     ;
(1)  234/    9135 :                     ; ****************************************************************************************************************
(1)  235/    9135 :                     ; ****************************************************************************************************************
(1)  236/    9135 :                     
(1)  237/    9135 :                     GetString:
(1)  238/    9135 :                     	section GetString
(1)  239/    9135 : (MACRO)             	pusha 														; save A,P3,E
(1)  239/    9135 : CE FF                       st              @-1(p2)
(1)  240/    9137 : (MACRO)             	pushp 	p3
(1)  240/    9137 : 37                          xpah    P3
(1)  240/    9138 : CE FF                       st              @-1(p2)
(1)  240/    913A : 33                          xpal    P3
(1)  240/    913B : CE FF                       st              @-1(p2)
(1)  241/    913D : (MACRO)             	pushe 
(1)  241/    913D : 40                          lde
(1)  241/    913E : CE FF                       st              @-1(p2)
(1)  242/    9140 : C4 00               	ldi 	0 													; set E (current position) to A.
(1)  243/    9142 : 01                  	xae
(1)  244/    9143 :                     __GSLoop:
(1)  245/    9143 : (MACRO)             	lpi 	p3,Print-1 											; print the prompt (half coloured square)
(1)  245/    9143 : C4 90                       ldi     (PRINT-1) / 256
(1)  245/    9145 : 37                          xpah    P3
(1)  245/    9146 : C4 50                       ldi     (PRINT-1) & 255
(1)  245/    9148 : 33                          xpal    P3
(1)  246/    9149 : C4 9B               	ldi 	155
(1)  247/    914B : 3F                  	xppc 	p3
(1)  248/    914C : (MACRO)             	lpi 	p3,GetChar-1 										; get a character
(1)  248/    914C : C4 91                       ldi     (GETCHAR-1) / 256
(1)  248/    914E : 37                          xpah    P3
(1)  248/    914F : C4 10                       ldi     (GETCHAR-1) & 255
(1)  248/    9151 : 33                          xpal    P3
(1)  249/    9152 : 3F                  	xppc 	p3
(1)  250/    9153 : C9 80               	st 		-0x80(p1) 											; save it in the current position.
(1)  251/    9155 : (MACRO)             	lpi 	p3,Print-1 											; erase the prompt with backspace.
(1)  251/    9155 : C4 90                       ldi     (PRINT-1) / 256
(1)  251/    9157 : 37                          xpah    P3
(1)  251/    9158 : C4 50                       ldi     (PRINT-1) & 255
(1)  251/    915A : 33                          xpal    P3
(1)  252/    915B : C4 08               	ldi 	8
(1)  253/    915D : 3F                  	xppc 	p3
(1)  254/    915E : C1 80               	ld 		-0x80(p1) 											; re-read character
(1)  255/    9160 : D4 E0               	ani 	0xE0 												; check if control key.
(1)  256/    9162 : 98 0F               	jz 		__GSControlKey 
(1)  257/    9164 : 40                  	lde 														; get current position.
(1)  258/    9165 : E2 03               	xor 	3(p2) 												; reached maximum length of buffer ?
(1)  259/    9167 : 98 DA               	jz 		__GSLoop 											; if so, ignore the key and go round again.
(1)  260/    9169 : C1 80               	ld 		-0x80(p1) 											; get character and print it
(1)  261/    916B : 3F                  	xppc 	p3
(1)  262/    916C : C4 01               	ldi 	1 													; increment E
(1)  263/    916E : 02                  	ccl
(1)  264/    916F : 70                  	ade
(1)  265/    9170 : 01                  	xae
(1)  266/    9171 : 90 D0               	jmp 	__GSLoop 											; and go round again.
(1)  267/    9173 :                     ;
(1)  268/    9173 :                     ;	Handle control keys (0x00-0x1F)
 AS V1.42 Beta [Bld 102] - source file minol.asm(screen.asm) - page 9 - 1/9/2016 13:55:48


(1)  269/    9173 :                     ;
(1)  270/    9173 :                     __GSControlKey:
(1)  271/    9173 : C1 80               	ld 		-0x80(p1) 											; get typed in key
(1)  272/    9175 : E4 08               	xri 	8 													; check for backspace.
(1)  273/    9177 : 98 17               	jz 		__GSBackspace 			
(1)  274/    9179 : E4 05               	xri 	8!13 												; check for CR
(1)  275/    917B : 9C C6               	jnz 	__GSLoop 											; if not, ignore the key.
(1)  276/    917D :                     ;
(1)  277/    917D :                     ;	Carriage Return, ending input.
(1)  278/    917D :                     ;
(1)  279/    917D : C9 80               	st 		-0x80(p1) 											; replace the CR written with NULL terminator.
(1)  280/    917F : C4 0D               	ldi 	13 													; print CR
(1)  281/    9181 : 3F                  	xppc 	p3
(1)  282/    9182 : (MACRO)             	pulle 														; restore E,P3,A
(1)  282/    9182 : C6 01                       ld              @1(p2)
(1)  282/    9184 : 01                          xae
(1)  283/    9185 : (MACRO)             	pullp	p3
(1)  283/    9185 : C6 01                       ld              @1(p2)
(1)  283/    9187 : 33                          xpal    P3
(1)  283/    9188 : C6 01                       ld              @1(p2)
(1)  283/    918A : 37                          xpah    P3
(1)  284/    918B : (MACRO)             	pulla
(1)  284/    918B : C6 01                       ld              @1(p2)
(1)  285/    918D : 3F                  	xppc 	p3 													; return
(1)  286/    918E : 90 A5               	jmp 	GetString 											; make re-entrant (probably unneccessary !!)
(1)  287/    9190 :                     ;
(1)  288/    9190 :                     ;	Backspace entered
(1)  289/    9190 :                     ;
(1)  290/    9190 :                     __GSBackspace
(1)  291/    9190 : 40                  	lde 														; if E = 0 we can't backspace any further.
(1)  292/    9191 : 98 B0               	jz 		__GSLoop
(1)  293/    9193 : C4 08               	ldi 	8 													; backspace on screen
(1)  294/    9195 : 3F                  	xppc 	p3
(1)  295/    9196 : C4 FF               	ldi 	0xFF 												; decrement E
(1)  296/    9198 : 02                  	ccl
(1)  297/    9199 : 70                  	ade
(1)  298/    919A : 01                  	xae
(1)  299/    919B : 90 A6               	jmp 	__GSLoop 											; and go round again.
(1)  300/    919D :                     
(1)  301/    919D :                     	endsection GetString
(1)  302/    919D :                     
      51/    919D :                     	include source\execute.asm 									; statement exec main loop
(1)    1/    919D :                     ; ****************************************************************************************************************
(1)    2/    919D :                     ; ****************************************************************************************************************
(1)    3/    919D :                     ;
(1)    4/    919D :                     ;										Instruction Execution
(1)    5/    919D :                     ;	
(1)    6/    919D :                     ; ****************************************************************************************************************
(1)    7/    919D :                     ; ****************************************************************************************************************
(1)    8/    919D :                     
(1)    9/    919D :                     ; ****************************************************************************************************************
(1)   10/    919D :                     ;							Source codes for execution, with skip-over go here
(1)   11/    919D :                     ; ****************************************************************************************************************
(1)   12/    919D :                     
(1)   13/    919D :                     	include source\commands\goto_run.asm						; GOTO and RUN
(2)    1/    919D :                     ; ****************************************************************************************************************
(2)    2/    919D :                     ; ****************************************************************************************************************
(2)    3/    919D :                     ;
(2)    4/    919D :                     ;												GOTO and RUN
(2)    5/    919D :                     ;	
 AS V1.42 Beta [Bld 102] - source file minol.asm(goto_run.asm) - page 10 - 1/9/2016 13:55:48


(2)    6/    919D :                     ; ****************************************************************************************************************
(2)    7/    919D :                     ; ****************************************************************************************************************
(2)    8/    919D :                     
(2)    9/    919D : 90 29               	jmp 	CRG_Over
(2)   10/    919F :                     
(2)   11/    919F :                     ; ****************************************************************************************************************
(2)   12/    919F :                     ;												RUN command
(2)   13/    919F :                     ; ****************************************************************************************************************
(2)   14/    919F :                     
(2)   15/    919F :                     CMD_Run:	
(2)   16/    919F : (MACRO)             	lpi 	p1,ProgramBase 										; start from first line of program
(2)   16/    919F : C4 90                       ldi     (PROGRAMBASE) / 256
(2)   16/    91A1 : 35                          xpah    P1
(2)   16/    91A2 : C4 16                       ldi     (PROGRAMBASE) & 255
(2)   16/    91A4 : 31                          xpal    P1
(2)   17/    91A5 :                     CRG_ExecuteFromP1:
(2)   18/    91A5 : 90 2E               	jmp 	CheckLastCommandThenExecute 						; check if the last command and if not execute.
(2)   19/    91A7 :                     
(2)   20/    91A7 :                     ; ****************************************************************************************************************
(2)   21/    91A7 :                     ;												GOTO command
(2)   22/    91A7 :                     ; ****************************************************************************************************************
(2)   23/    91A7 :                     
(2)   24/    91A7 :                     CMD_Goto:	
(2)   25/    91A7 : 3F                  	xppc 	p3 													; evaluate the line number to GOTO, in E
(2)   26/    91A8 : 94 1E               	jp 		CRG_Over 											; exit if error occurred
(2)   27/    91AA : 40                  	lde 														; get line number
(2)   28/    91AB : CA FF               	st 		-1(p2) 												; save below TOS.
(2)   29/    91AD : (MACRO)             	lpi 	p1,ProgramBase 										; point P1 to program Base.
(2)   29/    91AD : C4 90                       ldi     (PROGRAMBASE) / 256
(2)   29/    91AF : 35                          xpah    P1
(2)   29/    91B0 : C4 16                       ldi     (PROGRAMBASE) & 255
(2)   29/    91B2 : 31                          xpal    P1
(2)   30/    91B3 :                     CRG_Find:
(2)   31/    91B3 : C1 00               	ld 		0(p1) 												; look at offset
(2)   32/    91B5 : 94 06               	jp 		CRG_NotEnd											; if -ve then end of program.
(2)   33/    91B7 : C4 01               	ldi 	ERRC_Label 											; return label error
(2)   34/    91B9 : 01                  	xae
(2)   35/    91BA : 02                  	ccl 														; set error flag
(2)   36/    91BB : 90 0B               	jmp 	CRG_Over
(2)   37/    91BD :                     ;
(2)   38/    91BD :                     CRG_NotEnd:
(2)   39/    91BD : 01                  	xae 														; offset in E
(2)   40/    91BE : C1 01               	ld 		1(p1) 												; get line number
(2)   41/    91C0 : E2 FF               	xor 	-1(p2) 												; go back if not required one.
(2)   42/    91C2 : 98 E1               	jz 		CRG_ExecuteFromP1									; if found, run from P1.
(2)   43/    91C4 : C5 80               	ld 		@-0x80(p1) 											; go to next line
(2)   44/    91C6 : 90 EB               	jmp 	CRG_Find 											; keep trying.
(2)   45/    91C8 :                     ;
(2)   46/    91C8 :                     CRG_Over:
(1)   14/    91C8 :                     
(1)   15/    91C8 :                     ; ****************************************************************************************************************
(1)   16/    91C8 :                     ;								Command execution complete, check for error
(1)   17/    91C8 :                     ; ****************************************************************************************************************
(1)   18/    91C8 :                     
(1)   19/    91C8 :                     EndOfCommandExecution:
(1)   20/    91C8 : 06                  	csa 														; check CY/L error flag
(1)   21/    91C9 : 94 0F               	jp 		GotoCommandLine 									; if CY/L = 0 error so go to command line.
(1)   22/    91CB :                     
(1)   23/    91CB :                     ; ****************************************************************************************************************
(1)   24/    91CB :                     ;	Come here to execute the instruction P1 points to, after having executed, e.g. skips forward to : or NULL
 AS V1.42 Beta [Bld 102] - source file minol.asm(execute.asm) - page 11 - 1/9/2016 13:55:48


(1)   25/    91CB :                     ; ****************************************************************************************************************
(1)   26/    91CB :                     
(1)   27/    91CB :                     ExecuteNextInstruction:
(1)   28/    91CB : C5 01               	ld 		@1(p1) 												; get next and skip
(1)   29/    91CD : 98 06               	jz 		CheckLastCommandThenExecute							; if NULL, check if running mode and continue if so.
(1)   30/    91CF : E4 3A               	xri 	':'
(1)   31/    91D1 : 9C F8               	jnz 	ExecuteNextInstruction 								; keep going until colon read.
(1)   32/    91D3 : 90 19               	jmp 	ExecuteFromAddressDirect 							; run code from the address given.
(1)   33/    91D5 :                     ;
(1)   34/    91D5 :                     ;	Test to see if the line is not the last one (e.g. offset is +ve) and if so, execute its code.
(1)   35/    91D5 :                     ;
(1)   36/    91D5 :                     CheckLastCommandThenExecute:
(1)   37/    91D5 : C1 00               	ld 		(p1) 												; look at the offset to next.
(1)   38/    91D7 : 94 09               	jp 		ExecuteFromCommandStart 							; if +ve value, execute the line here.
(1)   39/    91D9 :                     ;
(1)   40/    91D9 :                     ;	Have reached the end of the program. The buffer with typed commands has $FF on the end to 'fake' this.
(1)   41/    91D9 :                     ; 	e.g. when it reaches the end of that command it thinks it's dropped off the top of the program
(1)   42/    91D9 :                     ;
(1)   43/    91D9 : 03                  	scl 														; there is no error.
(1)   44/    91DA :                     GotoCommandLine: 												; return to Command Line with CY/L = error and E = code
(1)   45/    91DA : 90 FE               	jmp 	GotoCommandLine										; if CY/L = 1 (no error) E not used.
(1)   46/    91DC :                     ;
(1)   47/    91DC :                     ;	Syntax error comes here.
(1)   48/    91DC :                     ;
(1)   49/    91DC :                     SyntaxError:
(1)   50/    91DC : C4 05               	ldi 	ERRC_Syntax
(1)   51/    91DE : 01                  	xae
(1)   52/    91DF : 02                  	ccl
(1)   53/    91E0 : 90 F8               	jmp 	GotoCommandLine
(1)   54/    91E2 :                     
(1)   55/    91E2 :                     ; ****************************************************************************************************************
(1)   56/    91E2 :                     ;	  Execute from the instruction at P1 (preceded by offset, line number), which is known to be a valid line.
(1)   57/    91E2 :                     ; ****************************************************************************************************************
(1)   58/    91E2 :                     
(1)   59/    91E2 :                     ExecuteFromCommandStart:
(1)   60/    91E2 : (MACRO)             	lpi 	p3,CurrentLine 										; point P3 to the current line
(1)   60/    91E2 : C4 0C                       ldi     (CURRENTLINE) / 256
(1)   60/    91E4 : 37                          xpah    P3
(1)   60/    91E5 : C4 8D                       ldi     (CURRENTLINE) & 255
(1)   60/    91E7 : 33                          xpal    P3
(1)   61/    91E8 : C1 01               	ld 		1(p1) 												; read the line number 
(1)   62/    91EA : CB 00               	st 		(p3)												; and save it - current line # updated.
(1)   63/    91EC : C5 02               	ld 		@2(p1) 												; skip over offset (+0) line number (+1)
(1)   64/    91EE :                     
(1)   65/    91EE :                     ; ****************************************************************************************************************
(1)   66/    91EE :                     ;				Run command where the instruction is at P1 (e.g. it is an ASCIIZ string)
(1)   67/    91EE :                     ; ****************************************************************************************************************
(1)   68/    91EE :                     
(1)   69/    91EE :                     ExecuteFromAddressDirect:
(1)   70/    91EE : C5 01               	ld 		@1(p1) 												; read next character
(1)   71/    91F0 : 98 E3               	jz 		CheckLastCommandThenExecute 						; if \0 then check for the next line.
(1)   72/    91F2 : E4 20               	xri	 	' '
(1)   73/    91F4 : 98 F8               	jz 		ExecuteFromAddressDirect 							; skip over spaces.
(1)   74/    91F6 : E4 1A               	xri 	' '!':'												
(1)   75/    91F8 : 98 F4               	jz 		ExecuteFromAddressDirect 							; skip over colons.
(1)   76/    91FA : E4 18               	xri 	':'!'"'					
(1)   77/    91FC : 98 CD               	jz 		ExecuteNextInstruction 								; if double quote (comment) found go to next instruction.
(1)   78/    91FE :                     ;
(1)   79/    91FE :                     ;	Now look the command up in the command list.
(1)   80/    91FE :                     ;
 AS V1.42 Beta [Bld 102] - source file minol.asm(execute.asm) - page 12 - 1/9/2016 13:55:48


(1)   81/    91FE : C1 FF               	ld 		-1(p1) 												; read first character of command again
(1)   82/    9200 : 01                  	xae 														; put in E.
(1)   83/    9201 : (MACRO)             	lpi 	p3,CommandList
(1)   83/    9201 : C4 93                       ldi     (COMMANDLIST) / 256
(1)   83/    9203 : 37                          xpah    P3
(1)   83/    9204 : C4 DB                       ldi     (COMMANDLIST) & 255
(1)   83/    9206 : 33                          xpal    P3
(1)   84/    9207 :                     EAFD_Search:
(1)   85/    9207 : C7 05               	ld 		@5(p3) 												; read first character and bump to next.
(1)   86/    9209 : 98 2C               	jz 		EAFD_LETCode 										; if zero then give up.
(1)   87/    920B : 60                  	xre 														; same as first character ?
(1)   88/    920C : 9C F9               	jnz		EAFD_Search 										; no, keep looking.
(1)   89/    920E :                     
(1)   90/    920E : C3 FC               	ld 		-4(p3) 												; read 2nd character
(1)   91/    9210 : E1 00               	xor 	(p1) 												; compare against actual second character
(1)   92/    9212 : 9C F3               	jnz 	EAFD_Search
(1)   93/    9214 :                     ;
(1)   94/    9214 :                     ;	Skip over characters in the command, checking for NULL and : which would be syntax errors.
(1)   95/    9214 :                     ;
(1)   96/    9214 : C3 FD               	ld 		-3(p3) 												; number of characters to skip (one less than total as one skipped)
(1)   97/    9216 : CA FF               	st 		-1(p2) 												; temporary count.
(1)   98/    9218 :                     EAFD_Skip:
(1)   99/    9218 : C5 01               	ld 		@1(p1) 												; read a character and skip
(1)  100/    921A : 98 C0               	jz 		SyntaxError 										; if zero, then syntax error
(1)  101/    921C : E4 3A               	xri 	':'
(1)  102/    921E : 98 BC               	jz 		SyntaxError 										; if colon, then syntax error.
(1)  103/    9220 : BA FF               	dld 	-1(p2) 												; do it the requisite number of times.
(1)  104/    9222 : 9C F4               	jnz 	EAFD_Skip
(1)  105/    9224 :                     ;
(1)  106/    9224 :                     ;	Skip over any subsequent spaces
(1)  107/    9224 :                     ;
(1)  108/    9224 :                     EAFD_SkipSpaces:
(1)  109/    9224 : C5 01               	ld 		@1(p1) 												; check for spaces
(1)  110/    9226 : E4 20               	xri 	' '													; space found
(1)  111/    9228 : 98 FA               	jz 		EAFD_SkipSpaces
(1)  112/    922A : C5 FF               	ld 		@-1(p1) 											; undo last fetch so first character of next bit.
(1)  113/    922C :                     ;
(1)  114/    922C :                     ;	P1 is set up so execute the handler.
(1)  115/    922C :                     ;
(1)  116/    922C : C3 FE               	ld 		-2(p3)												; get execute LSB
(1)  117/    922E : 01                  	xae 														; save in E
(1)  118/    922F : C3 FF               	ld 		-1(p3) 												; get execute MSB
(1)  119/    9231 : 37                  	xpah 	p3 													; put in P3.H
(1)  120/    9232 : 40                  	lde 														; copy E to P3.L
(1)  121/    9233 : 33                  	xpal 	p3
(1)  122/    9234 : 3F                  	xppc 	p3
(1)  123/    9235 : 90 06               	jmp 	EvaluateExpression 									; is set up to have immediate evaluate call.
(1)  124/    9237 :                     ;
(1)  125/    9237 :                     ;	Couldn't find a command, so point P1 to first character, then call the LET code.
(1)  126/    9237 :                     ;
(1)  127/    9237 :                     EAFD_LETCode:
(1)  128/    9237 : C5 FF               	ld 		@-1(p1) 											; point P1 to first character of command.
(1)  129/    9239 : 90 FE               wait5:jmp 	wait5 												; GO TO LET CODE whereever that is. do later.
(1)  130/    923B : 90 00               	jmp 	EvaluateExpression
(1)  131/    923D :                     
(1)  132/    923D :                     	include source\expression.asm 								; expression evaluator.
(2)    1/    923D :                     ; ****************************************************************************************************************
(2)    2/    923D :                     ; ****************************************************************************************************************
(2)    3/    923D :                     ;
(2)    4/    923D :                     ;												Expression Evaluation
 AS V1.42 Beta [Bld 102] - source file minol.asm(expression.asm) - page 13 - 1/9/2016 13:55:48


(2)    5/    923D :                     ;
(2)    6/    923D :                     ; ****************************************************************************************************************
(2)    7/    923D :                     ; ****************************************************************************************************************
(2)    8/    923D :                     
(2)    9/    923D :                     ; ****************************************************************************************************************
(2)   10/    923D :                     ; ****************************************************************************************************************
(2)   11/    923D :                     ;
(2)   12/    923D :                     ;		Evaluate expression at P1. Return 	CY/L = 0 : Error 	E = Error Code
(2)   13/    923D :                     ;											CY/L = 1 : Okay 	E = Result
(2)   14/    923D :                     ;
(2)   15/    923D :                     ;		Terms are : 	A-Z 			Variables
(2)   16/    923D :                     ;						[0-9]+			Constants
(2)   17/    923D :                     ;						! 				Random byte
(2)   18/    923D :                     ;						'?'				Character constant
(2)   19/    923D :                     ;						(<expr>,<expr>)	Read Memory location
(2)   20/    923D :                     ;
(2)   21/    923D :                     ; ****************************************************************************************************************
(2)   22/    923D :                     ; ****************************************************************************************************************
(2)   23/    923D :                     
(2)   24/    923D : =0x1                EEX_PendingOp = 1 												; offset to pending operation
(2)   25/    923D : =0x0                EEX_Value = 0 													; offset to value
(2)   26/    923D :                     
(2)   27/    923D :                     EvaluateExpression:
(2)   28/    923D : (MACRO)             	pushp 	p3 													; save P3 on stack
(2)   28/    923D : 37                          xpah    P3
(2)   28/    923E : CE FF                       st              @-1(p2)
(2)   28/    9240 : 33                          xpal    P3
(2)   28/    9241 : CE FF                       st              @-1(p2)
(2)   29/    9243 : C4 2B               	ldi 	'+'													; push pending operation on stack
(2)   30/    9245 : CE FF               	st 		@-1(p2)
(2)   31/    9247 : C4 00               	ldi 	0 													; push current value on stack
(2)   32/    9249 : CE FF               	st 		@-1(p2)												; effectively this puts 0+ on the front of the expression.
(2)   33/    924B :                     
(2)   34/    924B :                     ; ****************************************************************************************************************
(2)   35/    924B :                     ;													Get Next Term
(2)   36/    924B :                     ; ****************************************************************************************************************
(2)   37/    924B :                     
(2)   38/    924B :                     EEX_Term:
(2)   39/    924B : (MACRO)             	lpi 	p3,Variables 										; point P3 to variables
(2)   39/    924B : C4 0C                       ldi     (VARIABLES) / 256
(2)   39/    924D : 37                          xpah    P3
(2)   39/    924E : C4 90                       ldi     (VARIABLES) & 255
(2)   39/    9250 : 33                          xpal    P3
(2)   40/    9251 :                     EEX_NextChar:
(2)   41/    9251 : C1 00               	ld 		(p1) 												; look at character
(2)   42/    9253 : 98 4F               	jz 		EEX_TermError
(2)   43/    9255 : C5 01               	ld 		@1(p1) 												; fetch and skip over.
(2)   44/    9257 : E4 20               	xri 	' '													; is it space ?
(2)   45/    9259 : 98 F6               	jz 		EEX_NextChar
(2)   46/    925B : E4 08               	xri 	' '!'('												; is it memory access ?
(2)   47/    925D : 98 55               	jz 		EEX_MemoryAccess
(2)   48/    925F : E4 09               	xri 	'('!'!'												; is it a random value ?
(2)   49/    9261 : 9C 1B               	jnz 	EEX_NotRandom
(2)   50/    9263 :                     
(2)   51/    9263 :                     ; ****************************************************************************************************************
(2)   52/    9263 :                     ;												Term is ! (random byte)
(2)   53/    9263 :                     ; ****************************************************************************************************************
(2)   54/    9263 :                     
(2)   55/    9263 :                     EEX_Random:
(2)   56/    9263 : 02                  	ccl 	
 AS V1.42 Beta [Bld 102] - source file minol.asm(expression.asm) - page 14 - 1/9/2016 13:55:48


(2)   57/    9264 : C3 FF               	ld 		RandomSeed+1-Variables(p3) 							; shift the seed right
(2)   58/    9266 : 1F                  	rrl
(2)   59/    9267 : CB FF               	st 		RandomSeed+1-Variables(p3)
(2)   60/    9269 : 01                  	xae 														; put MSB in E
(2)   61/    926A : C3 FE               	ld 		RandomSeed-Variables(p3)
(2)   62/    926C : 1F                  	rrl
(2)   63/    926D : CB FE               	st 		RandomSeed-Variables(p3)
(2)   64/    926F : 60                  	xre 														; XOR E into LSB
(2)   65/    9270 : 01                  	xae
(2)   66/    9271 : 06                  	csa 														; if CY/L is zero
(2)   67/    9272 : D4 80               	ani 	0x80
(2)   68/    9274 : 9C 06               	jnz 	EEX_NoTap 
(2)   69/    9276 : C3 FF               	ld 		RandomSeed+1-Variables(p3) 							; XOR MSB with $B4
(2)   70/    9278 : E4 B4               	xri 	0xB4
(2)   71/    927A : CB FF               	st 		RandomSeed+1-Variables(p3)
(2)   72/    927C :                     EEX_NoTap:
(2)   73/    927C : 90 65               	jmp 	EEX_HaveTerm
(2)   74/    927E :                     
(2)   75/    927E :                     EEX_NotRandom:
(2)   76/    927E : E4 06               	xri 	'!'!0x27											; is it a quote ?
(2)   77/    9280 : 9C 0F               	jnz 	EEX_NotQuote
(2)   78/    9282 :                     
(2)   79/    9282 :                     ; ****************************************************************************************************************
(2)   80/    9282 :                     ;													Term is '<char>'
(2)   81/    9282 :                     ; ****************************************************************************************************************
(2)   82/    9282 :                     
(2)   83/    9282 : C1 00               	ld 		(p1) 												; get character that is quoted
(2)   84/    9284 : 98 1E               	jz 		EEX_TermError 										; if zero, error.
(2)   85/    9286 : 01                  	xae 														; save in E if okay character.
(2)   86/    9287 : C1 01               	ld 		1(p1) 												; get character after that
(2)   87/    9289 : E4 27               	xri 	0x27 												; is it a quote ?
(2)   88/    928B : 9C 17               	jnz 	EEX_TermError
(2)   89/    928D : C5 02               	ld 		@2(p1) 												; skip over character and quote
(2)   90/    928F : 90 52               	jmp 	EEX_HaveTerm 										; and execute as if a legal term
(2)   91/    9291 :                     
(2)   92/    9291 :                     ; ****************************************************************************************************************
(2)   93/    9291 :                     ;									Not 'x' or !, so test for 0-9 and A-Z
(2)   94/    9291 :                     ; ****************************************************************************************************************
(2)   95/    9291 :                     
(2)   96/    9291 :                     EEX_NotQuote:
(2)   97/    9291 : C1 FF               	ld 		-1(p1)												; get old character.
(2)   98/    9293 : 02                  	ccl
(2)   99/    9294 : F4 A5               	adi 	255-'Z'												; if >= 'Z' then error.										
(2)  100/    9296 : 94 0C               	jp 		EEX_TermError
(2)  101/    9298 : F4 1A               	adi 	26 													; will be 0..25 if A..Z
(2)  102/    929A : 94 43               	jp 		EEX_Variable 										; so do as a variable.
(2)  103/    929C : F4 07               	adi 	'A'-1-'9'											; check if > 9
(2)  104/    929E : 94 04               	jp 		EEX_TermError
(2)  105/    92A0 : F4 0A               	adi 	10 													; if 0-9
(2)  106/    92A2 : 94 1D               	jp 		EEX_Constant
(2)  107/    92A4 :                     
(2)  108/    92A4 :                     ; ****************************************************************************************************************
(2)  109/    92A4 :                     ;													 Error Exit.
(2)  110/    92A4 :                     ; ****************************************************************************************************************
(2)  111/    92A4 :                     
(2)  112/    92A4 :                     EEX_TermError:
(2)  113/    92A4 : C4 04               	ldi 	ERRC_Term 											; put term error in A
(2)  114/    92A6 :                     EEX_Error:
(2)  115/    92A6 : 01                  	xae 														; put error code in E
(2)  116/    92A7 : 02                  	ccl 														; clear CY/L indicating error
 AS V1.42 Beta [Bld 102] - source file minol.asm(expression.asm) - page 15 - 1/9/2016 13:55:48


(2)  117/    92A8 :                     EEX_Exit:
(2)  118/    92A8 : C6 02               	ld 		@2(p2) 												; throw the pending operation and value
(2)  119/    92AA : (MACRO)             	pullp 	p3 													; restore P3
(2)  119/    92AA : C6 01                       ld              @1(p2)
(2)  119/    92AC : 33                          xpal    P3
(2)  119/    92AD : C6 01                       ld              @1(p2)
(2)  119/    92AF : 37                          xpah    P3
(2)  120/    92B0 : 06                  	csa 														; put CY/L in A bit 7
(2)  121/    92B1 : 3F                  	xppc 	p3 													; and exit
(2)  122/    92B2 : 90 89               	jmp 	EvaluateExpression 									; make re-entrant
(2)  123/    92B4 :                     
(2)  124/    92B4 :                     ; ****************************************************************************************************************
(2)  125/    92B4 :                     ;										Handle (<expr>,<expr>)
(2)  126/    92B4 :                     ; ****************************************************************************************************************
(2)  127/    92B4 :                     
(2)  128/    92B4 :                     EEX_MemoryAccess:
(2)  129/    92B4 : C5 FF               	ld 		@-1(p1) 											; point to the (
(2)  130/    92B6 : (MACRO)             	lpi 	p3,EvaluateAddressPair-1 							; call the evaluate/read of (h,l)
(2)  130/    92B6 : C4 93                       ldi     (EVALUATEADDRESSPAIR-1) / 256
(2)  130/    92B8 : 37                          xpah    P3
(2)  130/    92B9 : C4 90                       ldi     (EVALUATEADDRESSPAIR-1) & 255
(2)  130/    92BB : 33                          xpal    P3
(2)  131/    92BC : 3F                  	xppc 	p3
(2)  132/    92BD : 94 E9               	jp 		EEX_Exit 											; error occurred, so exit with it.
(2)  133/    92BF : 90 22               	jmp 	EEX_HaveTerm
(2)  134/    92C1 :                     
(2)  135/    92C1 :                     ; ****************************************************************************************************************
(2)  136/    92C1 :                     ;								Handle constant, first digit value is in A
(2)  137/    92C1 :                     ; ****************************************************************************************************************
(2)  138/    92C1 :                     
(2)  139/    92C1 :                     EEX_Constant:
(2)  140/    92C1 : 01                  	xae 														; put first digit value in E
(2)  141/    92C2 :                     EEX_ConstantLoop:
(2)  142/    92C2 : C1 00               	ld 		(p1) 												; get next character.
(2)  143/    92C4 : 02                  	ccl
(2)  144/    92C5 : F4 C6               	adi 	255-'9' 											; if >= 9 term is too large.
(2)  145/    92C7 : 94 1A               	jp 		EEX_HaveTerm
(2)  146/    92C9 : F4 8A               	adi 	10+128
(2)  147/    92CB : 94 16               	jp 		EEX_HaveTerm
(2)  148/    92CD : 02                  	ccl
(2)  149/    92CE : 40                  	lde 														; A = n
(2)  150/    92CF : 70                  	ade 														; A = n * 2
(2)  151/    92D0 : 70                  	ade 														; A = n * 3
(2)  152/    92D1 : 70                  	ade 														; A = n * 4
(2)  153/    92D2 : 70                  	ade 														; A = n * 5
(2)  154/    92D3 : 01                  	xae 														; E = n * 5
(2)  155/    92D4 : 40                  	lde 														; A = n * 5
(2)  156/    92D5 : 70                  	ade 														; A = n * 10
(2)  157/    92D6 : 01                  	xae
(2)  158/    92D7 : C5 01               	ld 		@1(p1) 												; read character convert to number
(2)  159/    92D9 : D4 0F               	ani 	0x0F
(2)  160/    92DB : 70                  	ade
(2)  161/    92DC : 01                  	xae
(2)  162/    92DD : 90 E3               	jmp 	EEX_ConstantLoop
(2)  163/    92DF :                     
(2)  164/    92DF :                     
(2)  165/    92DF :                     ; ****************************************************************************************************************
(2)  166/    92DF :                     ;									Access variable, variable id (0-25) in A
(2)  167/    92DF :                     ; ****************************************************************************************************************
(2)  168/    92DF :                     
 AS V1.42 Beta [Bld 102] - source file minol.asm(expression.asm) - page 16 - 1/9/2016 13:55:48


(2)  169/    92DF :                     EEX_Variable:
(2)  170/    92DF : 01                  	xae 														; put value 0-25 in E
(2)  171/    92E0 : C3 80               	ld 		-0x80(p3) 											; load using E as index
(2)  172/    92E2 : 01                  	xae 														; put in E
(2)  173/    92E3 :                     
(2)  174/    92E3 :                     ; ****************************************************************************************************************
(2)  175/    92E3 :                     ;										Have the right term in E, process it
(2)  176/    92E3 :                     ; ****************************************************************************************************************
(2)  177/    92E3 :                     
(2)  178/    92E3 :                     EEX_HaveTerm:
(2)  179/    92E3 : C2 01               	ld 		EEX_PendingOp(p2) 									; get pending operation.
(2)  180/    92E5 : E4 2B               	xri 	'+'
(2)  181/    92E7 : 9C 06               	jnz 	EEX_NotAdd
(2)  182/    92E9 :                     
(2)  183/    92E9 :                     ; ****************************************************************************************************************
(2)  184/    92E9 :                     ;												Add Right Term to Value
(2)  185/    92E9 :                     ; ****************************************************************************************************************
(2)  186/    92E9 : 02                  	ccl
(2)  187/    92EA : C2 00               	ld 		EEX_Value(p2)										; get value
(2)  188/    92EC : 70                  	ade 														; add right
(2)  189/    92ED : 90 08               	jmp 	EEX_SaveAndExit 									; save and exit
(2)  190/    92EF :                     
(2)  191/    92EF :                     EEX_NotAdd:
(2)  192/    92EF : E4 06               	xri 	'+'!'-'
(2)  193/    92F1 : 9C 12               	jnz		EEX_NotSubtract
(2)  194/    92F3 :                     
(2)  195/    92F3 :                     ; ****************************************************************************************************************
(2)  196/    92F3 :                     ;											 Subtract Right Term from Value
(2)  197/    92F3 :                     ; ****************************************************************************************************************
(2)  198/    92F3 : 03                  	scl
(2)  199/    92F4 : C2 00               	ld 		EEX_Value(p2)										; get value
(2)  200/    92F6 : 78                  	cae 														; subtract right
(2)  201/    92F7 :                     EEX_SaveAndExit:
(2)  202/    92F7 : CA 00               	st 		EEX_Value(p2) 										; save value back
(2)  203/    92F9 : 90 30               	jmp 	EEX_CheckNextOperation 								; and exit, look for next operator.
(2)  204/    92FB :                     
(2)  205/    92FB :                     EEX_Divide_Zero:												; handle divide by zero error.
(2)  206/    92FB : C4 07               	ldi 	ERRC_DivZero
(2)  207/    92FD : 90 A7               	jmp 	EEX_Error
(2)  208/    92FF :                     
(2)  209/    92FF :                     EEX_EndExpression:
(2)  210/    92FF : C2 00               	ld 		EEX_Value(p2) 										; get current value
(2)  211/    9301 : 01                  	xae 														; put in E
(2)  212/    9302 : 03                  	scl 														; set CY/L indicating expression okay.
(2)  213/    9303 : 90 A3               	jmp 	EEX_Exit 											; and exit.
(2)  214/    9305 :                     
(2)  215/    9305 :                     EEX_NotSubtract:
(2)  216/    9305 : E4 07               	xri 	'-'!'*'
(2)  217/    9307 : 9C 45               	jnz 	EEX_Divide
(2)  218/    9309 :                     
(2)  219/    9309 :                     ; ****************************************************************************************************************
(2)  220/    9309 :                     ;											 Multiply Right Term into Value
(2)  221/    9309 :                     ; ****************************************************************************************************************
(2)  222/    9309 :                     
(2)  223/    9309 : C2 00               	ld 		EEX_Value(p2) 										; a = left value
(2)  224/    930B : CA 01               	st 		1(p2)
(2)  225/    930D : C4 00               	ldi 	0													; res = 0(p2)
(2)  226/    930F : CA 00               	st 		0(p2) 												; clear it.
(2)  227/    9311 :                     EEX_MultiplyLoop:
(2)  228/    9311 : 40                  	lde  														; if B == 0 then we are done.
 AS V1.42 Beta [Bld 102] - source file minol.asm(expression.asm) - page 17 - 1/9/2016 13:55:48


(2)  229/    9312 : 98 17               	jz 		EEX_CheckNextOperation
(2)  230/    9314 : D4 01               	ani 	1 													; if B LSB is non zero.
(2)  231/    9316 : 98 07               	jz 		EEX_Multiply_B0IsZero
(2)  232/    9318 : C2 00               	ld 		0(p2) 												; add A to Result
(2)  233/    931A : 02                  	ccl
(2)  234/    931B : F2 01               	add 	1(p2)
(2)  235/    931D : CA 00               	st 		0(p2)
(2)  236/    931F :                     EEX_Multiply_B0IsZero:
(2)  237/    931F : 40                  	lde 														; shift B right
(2)  238/    9320 : 1C                  	sr
(2)  239/    9321 : 01                  	xae
(2)  240/    9322 : C2 01               	ld 		1(p2) 												; shift A left
(2)  241/    9324 : 02                  	ccl
(2)  242/    9325 : F2 01               	add 	1(p2)
(2)  243/    9327 : CA 01               	st 		1(p2)
(2)  244/    9329 : 90 E6               	jmp 	EEX_MultiplyLoop
(2)  245/    932B :                     
(2)  246/    932B :                     ; ****************************************************************************************************************
(2)  247/    932B :                     ;											Check next operation
(2)  248/    932B :                     ; ****************************************************************************************************************
(2)  249/    932B :                     
(2)  250/    932B :                     EEX_CheckNextOperation:
(2)  251/    932B : C5 01               	ld 		@1(p1)												; skip over spaces
(2)  252/    932D : E4 20               	xri 	' '
(2)  253/    932F : 98 FA               	jz 		EEX_CheckNextOperation
(2)  254/    9331 : C5 FF               	ld 		@-1(p1)												; get operator
(2)  255/    9333 : E4 2B               	xri 	'+'													; check if + - * /
(2)  256/    9335 : 98 0C               	jz 		EEX_FoundOperator
(2)  257/    9337 : E4 06               	xri 	'+'!'-'
(2)  258/    9339 : 98 08               	jz 		EEX_FoundOperator
(2)  259/    933B : E4 07               	xri 	'-'!'*'
(2)  260/    933D : 98 04               	jz 		EEX_FoundOperator
(2)  261/    933F : E4 05               	xri 	'*'!'/'
(2)  262/    9341 : 9C BC               	jnz 	EEX_EndExpression
(2)  263/    9343 :                     
(2)  264/    9343 :                     EEX_FoundOperator:
(2)  265/    9343 : C5 01               	ld  	@1(p1) 												; get and skip operator
(2)  266/    9345 : CA 01               	st 		EEX_PendingOp(p2)									; save then pending operator
(2)  267/    9347 : (MACRO)             	lpi 	p3,EEX_Term-1
(2)  267/    9347 : C4 92                       ldi     (EEX_TERM-1) / 256
(2)  267/    9349 : 37                          xpah    P3
(2)  267/    934A : C4 4A                       ldi     (EEX_TERM-1) & 255
(2)  267/    934C : 33                          xpal    P3
(2)  268/    934D : 3F                  	xppc 	p3
(2)  269/    934E :                     
(2)  270/    934E :                     ; ****************************************************************************************************************
(2)  271/    934E :                     ;											 Divide Right Term into Value
(2)  272/    934E :                     ; ****************************************************************************************************************
(2)  273/    934E :                     
(2)  274/    934E :                     EEX_Divide:
(2)  275/    934E : 40                  	lde 														; if denominator zero, error 2.
(2)  276/    934F : 98 AA               	jz 		EEX_Divide_Zero
(2)  277/    9351 : C2 00               	ld 		0(p2) 												; numerator into 1(p2)
(2)  278/    9353 : CA 01               	st 		1(p2) 												; denominator is in E
(2)  279/    9355 : C4 00               	ldi 	0
(2)  280/    9357 : CA 00               	st 		0(p2)												; quotient in 0(p2)
(2)  281/    9359 : CA FF               	st 		-1(p2) 												; remainder in -1(p2)
(2)  282/    935B : C4 80               	ldi 	0x80 									
(2)  283/    935D : CA FE               	st 		-2(p2) 												; bit in -2(p2)
(2)  284/    935F :                     
 AS V1.42 Beta [Bld 102] - source file minol.asm(expression.asm) - page 18 - 1/9/2016 13:55:48


(2)  285/    935F :                     EEX_Divide_Loop:
(2)  286/    935F : C2 FE               	ld 		-2(p2) 												; exit if bit = 0,we've finished.
(2)  287/    9361 : 98 C8               	jz 		EEX_CheckNextOperation
(2)  288/    9363 :                     
(2)  289/    9363 : 02                  	ccl 	 													; shift remainder left.
(2)  290/    9364 : C2 FF               	ld 		-1(p2)
(2)  291/    9366 : F2 FF               	add 	-1(p2)
(2)  292/    9368 : CA FF               	st 		-1(p2)
(2)  293/    936A :                     
(2)  294/    936A : C2 01               	ld 		1(p2)												; get numerator.
(2)  295/    936C : 94 02               	jp 		EEX_Divide_Numerator_Positive
(2)  296/    936E : AA FF               	ild 	-1(p2)  											; if numerator -ve, increment remainder.
(2)  297/    9370 :                     EEX_Divide_Numerator_Positive:
(2)  298/    9370 :                     
(2)  299/    9370 : C2 FF               	ld 		-1(p2) 												; calculate remainder - denominator
(2)  300/    9372 : 03                  	scl
(2)  301/    9373 : 78                  	cae 
(2)  302/    9374 : CA FD               	st 		-3(p2) 												; save in temp -3(p2)
(2)  303/    9376 : 06                  	csa 														; if temp >= 0, CY/L is set
(2)  304/    9377 : 94 0A               	jp 		EEX_Divide_Temp_Positive
(2)  305/    9379 :                     
(2)  306/    9379 : C2 FD               	ld 		-3(p2) 												; copy temp to remainder
(2)  307/    937B : CA FF               	st 		-1(p2)
(2)  308/    937D : C2 FE               	ld 		-2(p2) 												; or bit into quotient
(2)  309/    937F : DA 00               	or 		0(p2)
(2)  310/    9381 : CA 00               	st 		0(p2)
(2)  311/    9383 :                     EEX_Divide_Temp_Positive:
(2)  312/    9383 : C2 FE               	ld 		-2(p2) 												; shift bit right
(2)  313/    9385 : 1C                  	sr
(2)  314/    9386 : CA FE               	st 		-2(p2)
(2)  315/    9388 :                     
(2)  316/    9388 : C2 01               	ld 		1(p2)												; shift numerator positive
(2)  317/    938A : 02                  	ccl
(2)  318/    938B : F2 01               	add 	1(p2)
(2)  319/    938D : CA 01               	st 		1(p2)
(2)  320/    938F : 90 CE               	jmp 	EEX_Divide_Loop
(2)  321/    9391 :                     
(2)  322/    9391 :                     ; ****************************************************************************************************************
(2)  323/    9391 :                     ; ****************************************************************************************************************
(2)  324/    9391 :                     ;
(2)  325/    9391 :                     ;	Evaluate an address pair at P1 e.g. (<expr>,<expr>).  Returns as for expression, but stack-2, stack-1 are
(2)  326/    9391 :                     ;	the address (the data at that address is in E if no error occurs). Used for reading and writing.
(2)  327/    9391 :                     ;
(2)  328/    9391 :                     ; ****************************************************************************************************************
(2)  329/    9391 :                     ; ****************************************************************************************************************
(2)  330/    9391 :                     
(2)  331/    9391 :                     EvaluateAddressPair:
(2)  332/    9391 : C6 FE               	ld 		@-2(p2)												; make space to store HL
(2)  333/    9393 : (MACRO)             	pushp 	p3 													; save return address.
(2)  333/    9393 : 37                          xpah    P3
(2)  333/    9394 : CE FF                       st              @-1(p2)
(2)  333/    9396 : 33                          xpal    P3
(2)  333/    9397 : CE FF                       st              @-1(p2)
(2)  334/    9399 : C1 00               	ld 		(p1) 												; check first is '(', exit with term error if not
(2)  335/    939B : E4 28               	xri 	'('
(2)  336/    939D : 9C 2E               	jnz 	EAP_Error
(2)  337/    939F : C5 01               	ld 		@1(p1)												; skip over it.
(2)  338/    93A1 : (MACRO)             	lpi 	p3,EvaluateExpression-1 							; evaluate H
(2)  338/    93A1 : C4 92                       ldi     (EVALUATEEXPRESSION-1) / 256
(2)  338/    93A3 : 37                          xpah    P3
 AS V1.42 Beta [Bld 102] - source file minol.asm(expression.asm) - page 19 - 1/9/2016 13:55:48


(2)  338/    93A4 : C4 3C                       ldi     (EVALUATEEXPRESSION-1) & 255
(2)  338/    93A6 : 33                          xpal    P3
(2)  339/    93A7 : 3F                  	xppc 	p3
(2)  340/    93A8 : 94 27               	jp 		EAP_Exit 											; exit if failed
(2)  341/    93AA : 40                  	lde 														; store H at 3(P2)
(2)  342/    93AB : CA 03               	st 		3(p2)
(2)  343/    93AD : C1 00               	ld 		(p1) 												; check for ','
(2)  344/    93AF : E4 2C               	xri 	','
(2)  345/    93B1 : 9C 1A               	jnz 	EAP_Error											; fail if not present
(2)  346/    93B3 : C5 01               	ld 		@1(p1)												; skip over comma
(2)  347/    93B5 : 3F                  	xppc 	p3 													; evaluate L
(2)  348/    93B6 : 94 19               	jp 		EAP_Exit 											; exit on error
(2)  349/    93B8 : 40                  	lde 														; store L at 2(P2)
(2)  350/    93B9 : CA 02               	st 		2(p2)
(2)  351/    93BB : 33                  	xpal 	p3 													; and put in P3.L for later
(2)  352/    93BC : C1 00               	ld 		(p1) 												; check for ')'
(2)  353/    93BE : E4 29               	xri 	')'
(2)  354/    93C0 : 9C 0B               	jnz 	EAP_Error
(2)  355/    93C2 : C5 01               	ld 		@1(p1) 												; skip over close bracket
(2)  356/    93C4 : C2 03               	ld 		3(p2) 												; put 3(P2) in P3.H
(2)  357/    93C6 : 37                  	xpah 	p3
(2)  358/    93C7 : C3 00               	ld 		(p3) 												; read address
(2)  359/    93C9 : 01                  	xae 														; put in E
(2)  360/    93CA : 03                  	scl 														; set carry to indicate okay
(2)  361/    93CB : 90 04               	jmp 	EAP_Exit 											; and exit.
(2)  362/    93CD :                     ;
(2)  363/    93CD :                     EAP_Error:
(2)  364/    93CD : C4 04               	ldi 	ERRC_TERM 											; set error up
(2)  365/    93CF : 01                  	xae
(2)  366/    93D0 : 02                  	ccl
(2)  367/    93D1 :                     ;
(2)  368/    93D1 :                     EAP_Exit:														; exit
(2)  369/    93D1 : (MACRO)             	pullp 	p3 													; restore P3
(2)  369/    93D1 : C6 01                       ld              @1(p2)
(2)  369/    93D3 : 33                          xpal    P3
(2)  369/    93D4 : C6 01                       ld              @1(p2)
(2)  369/    93D6 : 37                          xpah    P3
(2)  370/    93D7 : C6 02               	ld 		@2(p2) 												; drop the H L address store
(2)  371/    93D9 : 06                  	csa 														; A bit 7 = CY/L
(2)  372/    93DA : 3F                  	xppc 	p3
(2)  373/    93DB :                     
(2)  374/    93DB :                     
(1)  133/    93DB :                     
(1)  134/    93DB :                     CommandList:
(1)  135/    93DB : (MACRO)             	cmd 	'G','O',4,CMD_Goto									; GOTO [line number]
(1)  135/    93DB : 47 4F                       db              'G','O'                                                                                           ; first and second characters
(1)  135/    93DD : 03                          db              (4)-1                                                                                      ; 4 -1 (first char already skipped)
(1)  135/    93DE : A6 91                       dw              (CMD_GOTO)-1                                                                                        ; execution point for prefetch.
(1)  136/    93E0 : (MACRO)             	cmd 	'R','U',3,CMD_Run									; RUN
(1)  136/    93E0 : 52 55                       db              'R','U'                                                                                           ; first and second characters
(1)  136/    93E2 : 02                          db              (3)-1                                                                                      ; 3 -1 (first char already skipped)
(1)  136/    93E3 : 9E 91                       dw              (CMD_RUN)-1                                                                                        ; execution point for prefetch.
(1)  137/    93E5 : 00                  	db 		0
(1)  138/    93E6 :                     
      52/    93E6 :                     
 AS V1.42 Beta [Bld 102] - source file minol.asm - page 20 - 1/9/2016 13:55:48


  symbol table (* = unused):
  ------------------------

*ARCHITECTURE :  i386-unknown-win32 - | *BIGENDIAN :                      0 - |
*BOOTMONITOR :                  210 - | *BRANCHEXT :                      0 - |
*CASESENSITIVE :                  0 - |  CHECKLASTCOMMANDTHENEXECUTE : 91D5 C |
 CMD_GOTO :                    91A7 C |  CMD_RUN :                     919F C |
 COMMANDLIST :                 93DB C | *CONSTPI :        3.141592653589793 - |
 CRG_EXECUTEFROMP1 :           91A5 C |  CRG_FIND :                    91B3 C |
 CRG_NOTEND :                  91BD C |  CRG_OVER :                    91C8 C |
 CURRENTLINE :                  C8D - | *DATE :                    1/9/2016 - |
 EAFD_LETCODE :                9237 C |  EAFD_SEARCH :                 9207 C |
 EAFD_SKIP :                   9218 C |  EAFD_SKIPSPACES :             9224 C |
 EAP_ERROR :                   93CD C |  EAP_EXIT :                    93D1 C |
 EEX_CHECKNEXTOPERATION :      932B C |  EEX_CONSTANT :                92C1 C |
 EEX_CONSTANTLOOP :            92C2 C |  EEX_DIVIDE :                  934E C |
 EEX_DIVIDE_LOOP :             935F C |
 EEX_DIVIDE_NUMERATOR_POSITIVE :                                       9370 C |
 EEX_DIVIDE_TEMP_POSITIVE :    9383 C |  EEX_DIVIDE_ZERO :             92FB C |
 EEX_ENDEXPRESSION :           92FF C |  EEX_ERROR :                   92A6 C |
 EEX_EXIT :                    92A8 C |  EEX_FOUNDOPERATOR :           9343 C |
 EEX_HAVETERM :                92E3 C |  EEX_MEMORYACCESS :            92B4 C |
 EEX_MULTIPLYLOOP :            9311 C |  EEX_MULTIPLY_B0ISZERO :       931F C |
 EEX_NEXTCHAR :                9251 C |  EEX_NOTADD :                  92EF C |
 EEX_NOTAP :                   927C C |  EEX_NOTQUOTE :                9291 C |
 EEX_NOTRANDOM :               927E C |  EEX_NOTSUBTRACT :             9305 C |
 EEX_PENDINGOP :                  1 - | *EEX_RANDOM :                  9263 C |
 EEX_SAVEANDEXIT :             92F7 C |  EEX_TERM :                    924B C |
 EEX_TERMERROR :               92A4 C |  EEX_VALUE :                      0 - |
 EEX_VARIABLE :                92DF C | *ENDOFCOMMANDEXECUTION :       91C8 C |
 ERRC_DIVZERO :                   7 - |  ERRC_LABEL :                     1 - |
*ERRC_MEMORY :                    6 - |  ERRC_SYNTAX :                    5 - |
 ERRC_TERM :                      4 - | *ERRC_UNKNOWN :                   2 - |
 EVALUATEADDRESSPAIR :         9391 C |  EVALUATEEXPRESSION :          923D C |
 EXECUTEFROMADDRESSDIRECT :    91EE C |  EXECUTEFROMCOMMANDSTART :     91E2 C |
 EXECUTENEXTINSTRUCTION :      91CB C | *FALSE :                          0 - |
*FULLPMMU :                       1 - |  GETCHAR :                     9111 C |
 GETSTRING :                   9135 C |  GOTOCOMMANDLINE :             91DA C |
*HAS64 :                          1 - | *HASDSP :                         0 - |
*HASFPU :                         0 - | *HASPMMU :                        0 - |
*INEXTMODE :                      0 - | *INLWORDMODE :                    0 - |
*INMAXMODE :                      0 - | *INSRCMODE :                      0 - |
*INSUPMODE :                      0 - | *LISTON :                         1 - |
*MACEXP :                         1 - | *MOMCPU :                         C - |
*MOMCPUNAME :                 SC/MP - | *NESTMAX :                      100 - |
*OSMATHLIBRARY :                  3 - | *PACKING :                        0 - |
*PADDING :                        1 - |  PRINT :                       9051 C |
 PROGRAMBASE :                 9016 C |  RANDOMSEED :                   C8E - |
*RELAXED :                        0 - |  SCREENCURSOR :                 C80 - |
 SCREENMIRROR :                 C00 - |  SYNTAXERROR :                 91DC C |
 SYSTEMMEMORY :                 C90 - | *TIME :                    13:55:47 - |
*TRUE :                           1 - |  VARIABLES :                    C90 - |
*VERSION :                     142F - |  WAIT1 :                       9014 C |
 WAIT5 :                       9239 C |  __GCNOTLOWER [GETCHAR] :      9130 C |
 __GCWAITKEY [GETCHAR] :       9116 C |  __GCWAITRELEASE [GETCHAR] :   911E C |
 __GSBACKSPACE [GETSTRING] :   9190 C |  __GSCONTROLKEY [GETSTRING] :  9173 C |
 __GSLOOP [GETSTRING] :        9143 C |  __PRCLEARFROMMOVETO [PRINT] : 90F1 C |
 __PRCLEARLOOP [PRINT] :       90F3 C |  __PRCLEARSCREEN [PRINT] :     90EF C |
 __PRCOPY [PRINT] :            90FD C |  __PREXIT [PRINT] :            90B4 C |
 __PREXITNOCHECK [PRINT] :     90B8 C |  __PRISCONTROLCHAR [PRINT] :   90C6 C |
 AS V1.42 Beta [Bld 102] - source file minol.asm - page 21 - 1/9/2016 13:55:48


 __PRISRETURN [PRINT] :        90E6 C |  __PRNOTASCII [PRINT] :        908E C |
 __PRPRINTCHARACTERA [PRINT] : 9072 C |  __PRPRINTSTRING [PRINT] :     9060 C |
 __PRSCROLLLOOP [PRINT] :      90A6 C |  __PRUPDATECURSOR [PRINT] :    9097 C |

    118 symbols
     34 unused symbols

 AS V1.42 Beta [Bld 102] - source file minol.asm - page 22 - 1/9/2016 13:55:48


  defined macros:
  ---------------

CMD                                   | CODE                                 
LPI                                   | PULLA                                
PULLE                                 | PULLP                                
PUSHA                                 | PUSHE                                
PUSHP                                 | SETV                                 

     10 macros

 AS V1.42 Beta [Bld 102] - source file minol.asm - page 23 - 1/9/2016 13:55:48


  codepages:
  ----------

STANDARD (0 changed characters)


0.01 seconds assembly time

   1012 lines source file
   1130 lines incl. macro expansions
      2 passes
      0 errors
      0 warnings
