 AS V1.42 Beta [Bld 102] - source file minol.asm - page 1 - 1/12/2016 16:51:50


       1/       0 :                     ; ****************************************************************************************************************
       2/       0 :                     ; ****************************************************************************************************************
       3/       0 :                     ;
       4/       0 :                     ;												Minol ROM Image
       5/       0 :                     ;
       6/       0 :                     ; ****************************************************************************************************************
       7/       0 :                     ; ****************************************************************************************************************
       8/       0 :                     
       9/       0 :                     	cpu 	sc/mp
      10/       0 :                     
      11/       0 :                     	include source\memorymacros.asm 							; Memory allocation and Macro definition.	
(1)    1/       0 :                     ; ****************************************************************************************************************
(1)    2/       0 :                     ; ****************************************************************************************************************
(1)    3/       0 :                     ;
(1)    4/       0 :                     ;										Memory and Macro Allocation.
(1)    5/       0 :                     ;	
(1)    6/       0 :                     ; ****************************************************************************************************************
(1)    7/       0 :                     ; ****************************************************************************************************************
(1)    8/       0 :                     
(1)    9/       0 : =0x3                OSMathLibrary = 0x0003 											; the Maths library is here.
(1)   10/       0 : =0x210              BootMonitor = 0x210 											; address to boot monitor
(1)   11/       0 :                     
(1)   12/       0 :                     ; ****************************************************************************************************************
(1)   13/       0 :                     ;												 Memory Allocation
(1)   14/       0 :                     ; ****************************************************************************************************************
(1)   15/       0 :                     
(1)   16/       0 : =0xC00              ScreenMirror = 0xC00 											; Screen mirror, 128 bytes, 256 byte page boundary.
(1)   17/       0 : =0xC80              ScreenCursor = ScreenMirror+0x80  								; Position on that screen (00..7F)
(1)   18/       0 :                     
(1)   19/       0 : =0xC90              SystemMemory = 0xC90 											; System Memory
(1)   20/       0 :                     
(1)   21/       0 : =0xC8E              RandomSeed = SystemMemory-2										; Random Seed Value (2 bytes)
(1)   22/       0 : =0xC8D              CurrentLine = SystemMemory-3 									; Current Line Number (1 byte)
(1)   23/       0 : =0xC90              Variables = SystemMemory 										; Variables (26 bytes)
(1)   24/       0 :                     
(1)   25/       0 : =0xCB0              KeyboardBuffer = SystemMemory+32 								; Keyboard input buffer
(1)   26/       0 : =0x48               KeyboardBufferSize = 72 										; Number of characters allowed to be typed in.
(1)   27/       0 :                     
(1)   28/       0 : =0x1000             ProgramBase = 0x1000 											; Program memory here.
(1)   29/       0 :                     
(1)   30/       0 :                     ; ****************************************************************************************************************
(1)   31/       0 :                     ;														Macros
(1)   32/       0 :                     ; ****************************************************************************************************************
(1)   33/       0 :                     
(1)   34/       0 :                     lpi	macro	ptr,addr											; load pointer register with constant
(1)   35/       0 :                     	ldi 	(addr) / 256
(1)   36/       0 :                     	xpah 	ptr
(1)   37/       0 :                     	ldi 	(addr) & 255
(1)   38/       0 :                     	xpal 	ptr
(1)   39/       0 :                     	endm
(1)   40/       0 :                     
(1)   41/       0 :                     pushp macro ptr 												; push pointer register on stack
(1)   42/       0 :                     	xpah 	ptr
(1)   43/       0 :                     	st 		@-1(p2)
(1)   44/       0 :                     	xpal 	ptr
(1)   45/       0 :                     	st 		@-1(p2)
(1)   46/       0 :                     	endm
(1)   47/       0 :                     
(1)   48/       0 :                     pullp macro ptr 												; pull pointer register off stack
(1)   49/       0 :                     	ld 		@1(p2)
 AS V1.42 Beta [Bld 102] - source file minol.asm(memorymacros.asm) - page 2 - 1/12/2016 16:51:50


(1)   50/       0 :                     	xpal 	ptr
(1)   51/       0 :                     	ld 		@1(p2)
(1)   52/       0 :                     	xpah 	ptr
(1)   53/       0 :                     	endm
(1)   54/       0 :                     
(1)   55/       0 :                     pushe macro 													; push E on stack
(1)   56/       0 :                     	lde
(1)   57/       0 :                     	st 		@-1(p2)
(1)   58/       0 :                     	endm
(1)   59/       0 :                     
(1)   60/       0 :                     pulle macro 													; pull E off stack
(1)   61/       0 :                     	ld 		@1(p2)
(1)   62/       0 :                     	xae
(1)   63/       0 :                     	endm
(1)   64/       0 :                     
(1)   65/       0 :                     pusha macro 													; push A on stack
(1)   66/       0 :                     	st 		@-1(p2)
(1)   67/       0 :                     	endm
(1)   68/       0 :                     
(1)   69/       0 :                     pulla macro
(1)   70/       0 :                     	ld 		@1(p2)
(1)   71/       0 :                     	endm
(1)   72/       0 :                     
(1)   73/       0 :                     setv macro ch,value 											; sets a variable to a value, assumes P3 = Variables.
(1)   74/       0 :                     	ldi 	(value) & 255
(1)   75/       0 :                     	st 		((ch) - 'A')(p3)
(1)   76/       0 :                     	endm
(1)   77/       0 :                     
(1)   78/       0 :                     code macro lineNo,code 											; a debugging macro, which fakes up a line of code.
(1)   79/       0 :                     	db 		strlen(code)+3 										; one byte offset to next (255 = End of code)
(1)   80/       0 :                     	db 		lineNo 												; one byte line number 
(1)   81/       0 :                     	db 		code,0 												; ASCIIZ string
(1)   82/       0 :                     	endm
(1)   83/       0 :                     
(1)   84/       0 :                     cmd macro 	c1,c2,length,code
(1)   85/       0 :                     	db 		c1,c2 												; first and second characters
(1)   86/       0 :                     	db 		(length)-1											; length -1 (first char already skipped)
(1)   87/       0 :                     	dw 		(code)-1 											; execution point for prefetch.
(1)   88/       0 :                     	endm
      12/       0 :                     	include source\errors.asm 									; Error codes
(1)    1/       0 :                     ; ****************************************************************************************************************
(1)    2/       0 :                     ; ****************************************************************************************************************
(1)    3/       0 :                     ;
(1)    4/       0 :                     ;												Error Codes
(1)    5/       0 :                     ;
(1)    6/       0 :                     ; ****************************************************************************************************************
(1)    7/       0 :                     ; ****************************************************************************************************************
(1)    8/       0 :                     
(1)    9/       0 : =0xFF               ERRC_END = 0xFF													; psuedo error, program stopped. Does "OK" as for no error.
(1)   10/       0 : =0x1                ERRC_LABEL = 1 													; Label does not exist (e.g. GOTO)
(1)   11/       0 : =0x2                ERRC_UNKNOWN = 2												; Unknown instruction
(1)   12/       0 : =0x4                ERRC_TERM = 4 													; Illegal term/expression
(1)   13/       0 : =0x5                ERRC_SYNTAX = 5													; Syntax Error
(1)   14/       0 : =0x6                ERRC_MEMORY = 6 												; Out of memory
(1)   15/       0 : =0x7                ERRC_DIVZERO = 7 												; Division by Zero Error.
(1)   16/       0 :                     
      13/       0 :                     
      14/       0 :                     ; ****************************************************************************************************************
      15/       0 :                     ; ****************************************************************************************************************
      16/       0 :                     ; 	NOTE: When executing line follow the line with $FF so it thinks it has reached the program end.
 AS V1.42 Beta [Bld 102] - source file minol.asm - page 3 - 1/12/2016 16:51:50


      17/       0 :                     ; ****************************************************************************************************************
      18/       0 :                     ; ****************************************************************************************************************
      19/       0 :                     
      20/       0 :                     
      21/       0 :                     ; ****************************************************************************************************************
      22/       0 :                     ;													Main Program
      23/       0 :                     ; ****************************************************************************************************************
      24/       0 :                     
      25/    9000 :                     	org 	0x9000 												; the ROM starts here
      26/    9000 :                     
      27/    9000 : 68                  	db 		0x68												; this makes it boot straight into this ROM.
      28/    9001 : (MACRO)             	lpi 	p2,0xFF8											; set up stack default value
      28/    9001 : C4 0F                       ldi     (0XFF8) / 256
      28/    9003 : 36                          xpah    P2
      28/    9004 : C4 F8                       ldi     (0XFF8) & 255
      28/    9006 : 32                          xpal    P2
      29/    9007 : (MACRO)             	lpi 	p3,Print-1
      29/    9007 : C4 91                       ldi     (PRINT-1) / 256
      29/    9009 : 37                          xpah    P3
      29/    900A : C4 02                       ldi     (PRINT-1) & 255
      29/    900C : 33                          xpal    P3
      30/    900D : C4 0C               	ldi 	12
      31/    900F : 3F                  	xppc	p3
      32/    9010 :                     
      33/    9010 : (MACRO)             	lpi 	p3,ProgramCode 										; copy program default code to memory.
      33/    9010 : C4 90                       ldi     (PROGRAMCODE) / 256
      33/    9012 : 37                          xpah    P3
      33/    9013 : C4 4F                       ldi     (PROGRAMCODE) & 255
      33/    9015 : 33                          xpal    P3
      34/    9016 : (MACRO)             	lpi 	p1,ProgramBase
      34/    9016 : C4 10                       ldi     (PROGRAMBASE) / 256
      34/    9018 : 35                          xpah    P1
      34/    9019 : C4 00                       ldi     (PROGRAMBASE) & 255
      34/    901B : 31                          xpal    P1
      35/    901C :                     Copy1:
      36/    901C : C7 01               	ld 		@1(p3)
      37/    901E : CD 01               	st 		@1(p1)
      38/    9020 : E4 FF               	xri 	0xFF
      39/    9022 : 9C F8               	jnz 	Copy1
      40/    9024 :                     
      41/    9024 : C4 1E               	ldi 	30 													; delete line 30
      42/    9026 : 01                  	xae
      43/    9027 : (MACRO)             	lpi 	p3,DeleteLine-1
      43/    9027 : C4 97                       ldi     (DELETELINE-1) / 256
      43/    9029 : 37                          xpah    P3
      43/    902A : C4 2C                       ldi     (DELETELINE-1) & 255
      43/    902C : 33                          xpal    P3
      44/    902D : 3F                  	xppc 	p3
      45/    902E :                     
      46/    902E : C4 23               	ldi 	35													; insert at 30
      47/    9030 : 01                  	xae 
      48/    9031 :                     ;	lpi 	p3,InsertLine-1
      49/    9031 : (MACRO)             	lpi 	p1,__InsertLineExample
      49/    9031 : C4 90                       ldi     (__INSERTLINEEXAMPLE) / 256
      49/    9033 : 35                          xpah    P1
      49/    9034 : C4 47                       ldi     (__INSERTLINEEXAMPLE) & 255
      49/    9036 : 31                          xpal    P1
      50/    9037 : 3F                  	xppc 	p3
      51/    9038 :                     
      52/    9038 : (MACRO)             	lpi 	p3,SystemMemory
 AS V1.42 Beta [Bld 102] - source file minol.asm - page 4 - 1/12/2016 16:51:50


      52/    9038 : C4 0C                       ldi     (SYSTEMMEMORY) / 256
      52/    903A : 37                          xpah    P3
      52/    903B : C4 90                       ldi     (SYSTEMMEMORY) & 255
      52/    903D : 33                          xpal    P3
      53/    903E : (MACRO)             	lpi 	p3,CMD_Run-1
      53/    903E : C4 94                       ldi     (CMD_RUN-1) / 256
      53/    9040 : 37                          xpah    P3
      53/    9041 : C4 CD                       ldi     (CMD_RUN-1) & 255
      53/    9043 : 33                          xpal    P3
      54/    9044 : 3F                  	xppc	p3
      55/    9045 :                     
      56/    9045 :                     wait1:	
      57/    9045 : 90 FE               	jmp 	wait1
      58/    9047 :                     
      59/    9047 :                     __InsertLineExample:
      60/    9047 : 08 23 50 52 20 35   	db 		8,35,"PR 55",0
                    35 00 
      61/    904F :                     
      62/    904F :                     ProgramCode:
      63/    904F : (MACRO)             	code 	10,"\"TEST PROGRAM\""
      63/    904F : 11                          db              strlen("\"TEST PROGRAM\"")+3                                                                          ; one byte offset to next (255 = End of "\"TEST PROGRAM\"")
      63/    9050 : 0A                          db              10                                                                                          ; one byte line number 
      63/    9051 : 22 54 45 53 54 20           db              "\"TEST PROGRAM\"",0                                                                                          ; ASCIIZ string
                    50 52 4F 47 52 41 
                    4D 22 00 
      64/    9060 : (MACRO)             	code 	20,"PR 4"
      64/    9060 : 07                          db              strlen("PR 4")+3                                                                          ; one byte offset to next (255 = End of "PR 4")
      64/    9061 : 14                          db              20                                                                                          ; one byte line number 
      64/    9062 : 50 52 20 34 00              db              "PR 4",0                                                                                          ; ASCIIZ string
      65/    9067 : (MACRO)             	code 	30,"PR 5"
      65/    9067 : 07                          db              strlen("PR 5")+3                                                                          ; one byte offset to next (255 = End of "PR 5")
      65/    9068 : 1E                          db              30                                                                                          ; one byte line number 
      65/    9069 : 50 52 20 35 00              db              "PR 5",0                                                                                          ; ASCIIZ string
      66/    906E : (MACRO)             	code 	40,"PR 6"
      66/    906E : 07                          db              strlen("PR 6")+3                                                                          ; one byte offset to next (255 = End of "PR 6")
      66/    906F : 28                          db              40                                                                                          ; one byte line number 
      66/    9070 : 50 52 20 36 00              db              "PR 6",0                                                                                          ; ASCIIZ string
      67/    9075 : (MACRO)             	code 	50,"PR 7"
      67/    9075 : 07                          db              strlen("PR 7")+3                                                                          ; one byte offset to next (255 = End of "PR 7")
      67/    9076 : 32                          db              50                                                                                          ; one byte line number 
      67/    9077 : 50 52 20 37 00              db              "PR 7",0                                                                                          ; ASCIIZ string
      68/    907C : FF                  	db 		255
      69/    907D :                     
      70/    907D :                     ; ****************************************************************************************************************
      71/    907D :                     ;													Source Files
      72/    907D :                     ; ****************************************************************************************************************
      73/    907D :                     
      74/    907D :                     	include source\itoa.asm 									; print integer routine.
(1)    1/    907D :                     ; ****************************************************************************************************************
(1)    2/    907D :                     ; ****************************************************************************************************************
(1)    3/    907D :                     ;
(1)    4/    907D :                     ;											Integer (Byte) Printer
(1)    5/    907D :                     ;											======================
(1)    6/    907D :                     ;	
(1)    7/    907D :                     ;	Print Integer in E as String to output routine. Uses stack space as temporary storage. Changes A/E but not
(1)    8/    907D :                     ;	P1 or P2. Unsigned.
(1)    9/    907D :                     ;	
(1)   10/    907D :                     ;	On exit P3 is set up to Print routine.
(1)   11/    907D :                     ;
(1)   12/    907D :                     ; ****************************************************************************************************************
 AS V1.42 Beta [Bld 102] - source file minol.asm(itoa.asm) - page 5 - 1/12/2016 16:51:50


(1)   13/    907D :                     ; ****************************************************************************************************************
(1)   14/    907D :                     
(1)   15/    907D :                     PrintInteger:
(1)   16/    907D : (MACRO)             	pushp 	p3													; save P3
(1)   16/    907D : 37                          xpah    P3
(1)   16/    907E : CE FF                       st              @-1(p2)
(1)   16/    9080 : 33                          xpal    P3
(1)   16/    9081 : CE FF                       st              @-1(p2)
(1)   17/    9083 : C4 FF               	ldi 	0xFF 												; use $FF to mark stack top.
(1)   18/    9085 : CE FF               	st 		@-1(p2)
(1)   19/    9087 : CE FD               	st 		@-3(p2) 											; allocate space for results.
(1)   20/    9089 : C4 64               	ldi 	100 												; start with 100s
(1)   21/    908B :                     __PIDivideOuter:
(1)   22/    908B : CA 01               	st 		1(p2) 												; save subtractor at stack (1)
(1)   23/    908D : C4 FF               	ldi 	0xFF 												; clear stack (0) (count) to -1 because we pre-increment.
(1)   24/    908F : CA 00               	st 		0(p2)
(1)   25/    9091 :                     __PIDivideLoop:
(1)   26/    9091 : AA 00               	ild 	0(p2) 												; bump the counter.
(1)   27/    9093 : 40                  	lde 														; get value
(1)   28/    9094 : 03                  	scl 														; subtract divider
(1)   29/    9095 : FA 01               	cad 	1(p2) 												
(1)   30/    9097 : 01                  	xae 														; put back in E
(1)   31/    9098 : 06                  	csa 														; if no borrow
(1)   32/    9099 : D4 80               	ani 	0x80
(1)   33/    909B : 9C F4               	jnz 	__PIDivideLoop 
(1)   34/    909D : 40                  	lde 														; add the divider.
(1)   35/    909E : 02                  	ccl
(1)   36/    909F : F2 01               	add 	1(p2)
(1)   37/    90A1 : 01                  	xae
(1)   38/    90A2 : C2 01               	ld 		1(p2) 												; get the divider back
(1)   39/    90A4 : E4 0A               	xri 	10 													; is it 10 ?
(1)   40/    90A6 : 98 06               	jz 		__PIDivideEnd 										; we have finished the division bit.
(1)   41/    90A8 : C6 01               	ld 		@1(p2) 												; push stack up one.
(1)   42/    90AA : C4 0A               	ldi 	10 													; and divide by 10
(1)   43/    90AC : 90 DD               	jmp 	__PIDivideOuter
(1)   44/    90AE :                     ;
(1)   45/    90AE :                     __PIDivideEnd:
(1)   46/    90AE :                     
(1)   47/    90AE : 40                  	lde 														; write out the last digit.
(1)   48/    90AF : CA 01               	st 		1(p2)
(1)   49/    90B1 : (MACRO)             	lpi 	p3,Print-1 											; point P3 to the print routine.
(1)   49/    90B1 : C4 91                       ldi     (PRINT-1) / 256
(1)   49/    90B3 : 37                          xpah    P3
(1)   49/    90B4 : C4 02                       ldi     (PRINT-1) & 255
(1)   49/    90B6 : 33                          xpal    P3
(1)   50/    90B7 :                     ;
(1)   51/    90B7 :                     ;	Remove leading spaces
(1)   52/    90B7 :                     ;
(1)   53/    90B7 : C6 FF               	ld 		@-1(p2) 											; look at first digit, if non-zero go to print
(1)   54/    90B9 : 9C 08               	jnz 	__PIPrint 
(1)   55/    90BB : C6 01               	ld 		@1(p2) 												; skip it, eliminate trailing zeros.
(1)   56/    90BD : C2 00               	ld 		(p2) 												; now look at second digit
(1)   57/    90BF : 9C 02               	jnz 	__PIPrint 											; skip it, eliminate trailing zeros.
(1)   58/    90C1 : C6 01               	ld 		@1(p2)
(1)   59/    90C3 :                     ;
(1)   60/    90C3 :                     __PIPrint:
(1)   61/    90C3 : C6 01               	ld 		@1(p2) 												; read digit
(1)   62/    90C5 : D4 80               	ani 	0x80												; if found -ve value then exit.
(1)   63/    90C7 : 9C 07               	jnz 	__PIExit
(1)   64/    90C9 : C2 FF               	ld 		-1(p2) 												; re-read it.
 AS V1.42 Beta [Bld 102] - source file minol.asm(itoa.asm) - page 6 - 1/12/2016 16:51:50


(1)   65/    90CB : DC 30               	ori 	'0'													; make ASCII
(1)   66/    90CD : 3F                  	xppc 	p3 													; print it
(1)   67/    90CE : 90 F3               	jmp 	__PIPrint 											; and keep printing.
(1)   68/    90D0 :                     ;
(1)   69/    90D0 :                     __PIExit:
(1)   70/    90D0 : (MACRO)             	pullp 	p3 													; restore P3
(1)   70/    90D0 : C6 01                       ld              @1(p2)
(1)   70/    90D2 : 33                          xpal    P3
(1)   70/    90D3 : C6 01                       ld              @1(p2)
(1)   70/    90D5 : 37                          xpah    P3
(1)   71/    90D6 : 3F                  	xppc 	p3 													; and exit
(1)   72/    90D7 : 90 2A               	jmp 	Print 												; and set up to execute print afterwards.
(1)   73/    90D9 :                     
(1)   74/    90D9 :                     
      75/    90D9 :                     	include source\atoi.asm 									; decode integer routine.
(1)    1/    90D9 :                     ; ****************************************************************************************************************
(1)    2/    90D9 :                     ; ****************************************************************************************************************
(1)    3/    90D9 :                     ;
(1)    4/    90D9 :                     ;								Try to extract integer into E. CY/L = 0 Error, P1 data
(1)    5/    90D9 :                     ;	
(1)    6/    90D9 :                     ; ****************************************************************************************************************
(1)    7/    90D9 :                     ; ****************************************************************************************************************
(1)    8/    90D9 :                     
(1)    9/    90D9 :                     GetConstant:
(1)   10/    90D9 : C4 00               	ldi 	0 													; number of characters read, push on stack.
(1)   11/    90DB : CE FF               	st 		@-1(p2)
(1)   12/    90DD : 01                  	xae 														; reset initial value.
(1)   13/    90DE :                     GCO_Loop:
(1)   14/    90DE : C1 00               	ld 		(p1) 												; get character.
(1)   15/    90E0 : 02                  	ccl
(1)   16/    90E1 : F4 C6               	adi 	255-'9'												; check range 0-9.
(1)   17/    90E3 : 94 17               	jp 		GCO_Exit
(1)   18/    90E5 : F4 8A               	adi 	128+10
(1)   19/    90E7 : 94 13               	jp 		GCO_Exit
(1)   20/    90E9 :                     
(1)   21/    90E9 : 02                  	ccl
(1)   22/    90EA : 40                  	lde 														; A = E 														
(1)   23/    90EB : 70                  	ade 														; A = E * 2
(1)   24/    90EC : 70                  	ade 														; A = E * 3
(1)   25/    90ED : 70                  	ade 														; A = E * 4
(1)   26/    90EE : 70                  	ade 														; A = E * 5
(1)   27/    90EF : 01                  	xae 														; E = E * 5
(1)   28/    90F0 : C5 01               	ld 		@1(p1) 												; get character and bump over.
(1)   29/    90F2 : D4 0F               	ani 	0x0F 												; make number
(1)   30/    90F4 : 02                  	ccl
(1)   31/    90F5 : 70                  	ade 														; add E * 5 twice.
(1)   32/    90F6 : 70                  	ade
(1)   33/    90F7 : 01                  	xae 														; back in E
(1)   34/    90F8 : AA 00               	ild 	(p2)												; bump count.
(1)   35/    90FA : 90 E2               	jmp 	GCO_Loop											; try next.
(1)   36/    90FC :                     ;
(1)   37/    90FC :                     GCO_Exit:
(1)   38/    90FC : C6 01               	ld 		@1(p2)												; get count.
(1)   39/    90FE : 02                  	ccl
(1)   40/    90FF : F4 FF               	adi 	255 												; CY/L will be set if one or more characters read in
(1)   41/    9101 : 06                  	csa 														; A contains CY/L flag now
(1)   42/    9102 : 3F                  	xppc 	p3 													; return.
(1)   43/    9103 :                     	
      76/    9103 :                     	include source\screen.asm 									; screen I/O stuff.
(1)    1/    9103 :                     ; ****************************************************************************************************************
 AS V1.42 Beta [Bld 102] - source file minol.asm(screen.asm) - page 7 - 1/12/2016 16:51:50


(1)    2/    9103 :                     ; ****************************************************************************************************************
(1)    3/    9103 :                     ;
(1)    4/    9103 :                     ;											Screen I/O, VTL-2 ROM
(1)    5/    9103 :                     ;											=====================
(1)    6/    9103 :                     ;
(1)    7/    9103 :                     ;	Provides Character and String Input/Output functionality.
(1)    8/    9103 :                     ;
(1)    9/    9103 :                     ; ****************************************************************************************************************
(1)   10/    9103 :                     ; ****************************************************************************************************************
(1)   11/    9103 :                     
(1)   12/    9103 :                     ; ****************************************************************************************************************
(1)   13/    9103 :                     ; ****************************************************************************************************************
(1)   14/    9103 :                     ;
(1)   15/    9103 :                     ;	Print routine. Prints either character in A, or ASCIIZ string at P1 (if A is zero). Preserves all registers
(1)   16/    9103 :                     ;	except if printing string, P1 points to the character after the NULL terminator.
(1)   17/    9103 :                     ;
(1)   18/    9103 :                     ;	Scrolls automatically. Understands character codes 32-255, 8 (Backspace) 12 (Clear Screen) 13 (Carriage
(1)   19/    9103 :                     ;	Return). Others are currently ignored (except 0, see above). Note L/C values (97....) display those characters
(1)   20/    9103 :                     ;	in the ROM font *not* lower case :)
(1)   21/    9103 :                     ;
(1)   22/    9103 :                     ; ****************************************************************************************************************
(1)   23/    9103 :                     ; ****************************************************************************************************************
(1)   24/    9103 :                     
(1)   25/    9103 :                     Print:
(1)   26/    9103 :                     	section 	Print
(1)   27/    9103 :                     
(1)   28/    9103 : (MACRO)             	pusha														; push registers on stack
(1)   28/    9103 : CE FF                       st              @-1(p2)
(1)   29/    9105 : (MACRO)             	pushp 	p1
(1)   29/    9105 : 35                          xpah    P1
(1)   29/    9106 : CE FF                       st              @-1(p2)
(1)   29/    9108 : 31                          xpal    P1
(1)   29/    9109 : CE FF                       st              @-1(p2)
(1)   30/    910B : (MACRO)             	pushe
(1)   30/    910B : 40                          lde
(1)   30/    910C : CE FF                       st              @-1(p2)
(1)   31/    910E :                     
(1)   32/    910E : C2 03               	ld 		3(p2) 												; read character 
(1)   33/    9110 : 9C 12               	jnz 	__PRPrintCharacterA 								; if non zero print it on its own.
(1)   34/    9112 :                     
(1)   35/    9112 :                     __PRPrintString:
(1)   36/    9112 : C2 01               	ld 		1(p2) 												; restore original P1
(1)   37/    9114 : 31                  	xpal 	p1
(1)   38/    9115 : C2 02               	ld 		2(p2)
(1)   39/    9117 : 35                  	xpah 	p1 													; read character at P1.
(1)   40/    9118 : C5 01               	ld 		@1(p1)
(1)   41/    911A : 01                  	xae 														; save in E.
(1)   42/    911B : 35                  	xpah 	p1 													; write P1 back.
(1)   43/    911C : CA 02               	st 		2(p2)
(1)   44/    911E : 31                  	xpal 	p1
(1)   45/    911F : CA 01               	st 		1(p2)
(1)   46/    9121 : 40                  	lde 														; get character from E
(1)   47/    9122 : 98 46               	jz 		__PRExitNoCheck 									; exit without loop check.
(1)   48/    9124 :                     ;
(1)   49/    9124 :                     ;	Print character in A now ; throughout it is stored in E.
(1)   50/    9124 :                     ;
(1)   51/    9124 :                     __PRPrintCharacterA:
(1)   52/    9124 : 01                  	xae 														; save character in E.
(1)   53/    9125 :                     ;
(1)   54/    9125 :                     ;	Read cursor and set P1 to that address
 AS V1.42 Beta [Bld 102] - source file minol.asm(screen.asm) - page 8 - 1/12/2016 16:51:50


(1)   55/    9125 :                     ;
(1)   56/    9125 : C4 0C               	ldi 	ScreenCursor/256 									; set P1 to point to screen cursor
(1)   57/    9127 : 35                  	xpah 	p1
(1)   58/    9128 : C4 80               	ldi 	ScreenCursor&255
(1)   59/    912A : 31                  	xpal 	p1
(1)   60/    912B : C1 00               	ld 		0(p1) 												; put cursor position in P1.L
(1)   61/    912D : 31                  	xpal 	p1
(1)   62/    912E :                     ;
(1)   63/    912E :                     ;	Check for control
(1)   64/    912E :                     ;
(1)   65/    912E : 40                  	lde 														; look at character
(1)   66/    912F : D4 E0               	ani 	0xE0 												; is it code 0-31
(1)   67/    9131 : 98 45               	jz 		__PRIsControlChar
(1)   68/    9133 :                     ;
(1)   69/    9133 :                     ;	Print non-control
(1)   70/    9133 :                     ;
(1)   71/    9133 : 40                  	lde 														; read character
(1)   72/    9134 : 03                  	scl 														; CY/L clear if < 96
(1)   73/    9135 : FC 60               	cai 	96 
(1)   74/    9137 : 06                  	csa 	 	 												; skip if carry set
(1)   75/    9138 : E4 80               	xri 	0x80													
(1)   76/    913A : 94 04               	jp 		__PRNotASCII
(1)   77/    913C : 40                  	lde 														; if ASCII make 6 bit.
(1)   78/    913D : D4 3F               	ani 	0x3F
(1)   79/    913F : 01                  	xae
(1)   80/    9140 :                     __PRNotASCII:
(1)   81/    9140 : 40                  	lde 														; get character.
(1)   82/    9141 : C9 00               	st 		(p1) 												; save in shadow memory
(1)   83/    9143 : 35                  	xpah 	p1 													; switch to VRAM, preserving A.
(1)   84/    9144 : C4 00               	ldi 	0 													
(1)   85/    9146 : 35                  	xpah 	p1
(1)   86/    9147 : CD 01               	st 		@1(p1) 												; save in screen memory, advance write position.
(1)   87/    9149 :                     ;
(1)   88/    9149 :                     ;	Write cursor position back from P1.L
(1)   89/    9149 :                     ;
(1)   90/    9149 :                     __PRUpdateCursor:
(1)   91/    9149 : C4 0C               	ldi		ScreenCursor / 256 									; set P1 to point to screen cursor, restore position to P1
(1)   92/    914B : 35                  	xpah 	p1
(1)   93/    914C : C4 80               	ldi 	ScreenCursor & 255 
(1)   94/    914E : 31                  	xpal 	p1 													; after this, adjusted cursor position is in AC.
(1)   95/    914F : C9 00               	st 		(p1) 												; write back in cursor position
(1)   96/    9151 : 94 13               	jp 		__PRExit 											; if position is off the bottom then scroll.
(1)   97/    9153 :                     ;
(1)   98/    9153 :                     ;	Scroll display
(1)   99/    9153 :                     ;
(1)  100/    9153 : C4 0C               	ldi 	(ScreenMirror+16) / 256 							; point P1 to 2nd line.
(1)  101/    9155 : 35                  	xpah 	p1
(1)  102/    9156 : C4 10               	ldi 	(ScreenMirror+16) & 255
(1)  103/    9158 :                     __PRScrollLoop:
(1)  104/    9158 : 31                  	xpal 	p1
(1)  105/    9159 : C1 00               	ld 		0(p1) 												; copy char to previous line
(1)  106/    915B : C9 F0               	st 		-16(p1)
(1)  107/    915D : C5 01               	ld 		@1(p1) 												; bump pointer.
(1)  108/    915F : 31                  	xpal 	p1
(1)  109/    9160 : 94 F6               	jp 		__PRScrollLoop
(1)  110/    9162 : C4 70               	ldi 	128-16 												; clear from and move to last line
(1)  111/    9164 : 90 3D               	jmp 	__PRClearFromMoveTo
(1)  112/    9166 :                     ;
(1)  113/    9166 :                     ;	Exit screen drawing routine.
(1)  114/    9166 :                     ;
 AS V1.42 Beta [Bld 102] - source file minol.asm(screen.asm) - page 9 - 1/12/2016 16:51:50


(1)  115/    9166 :                     __PRExit:
(1)  116/    9166 : C2 03               	ld 		3(p2) 												; if character was zero, loop
(1)  117/    9168 : 98 A8               	jz 		__PRPrintString 									; back as printing string at P1.
(1)  118/    916A :                     __PRExitNoCheck:
(1)  119/    916A : (MACRO)             	pulle 														; restore registers
(1)  119/    916A : C6 01                       ld              @1(p2)
(1)  119/    916C : 01                          xae
(1)  120/    916D : (MACRO)             	pullp 	p1
(1)  120/    916D : C6 01                       ld              @1(p2)
(1)  120/    916F : 31                          xpal    P1
(1)  120/    9170 : C6 01                       ld              @1(p2)
(1)  120/    9172 : 35                          xpah    P1
(1)  121/    9173 : (MACRO)             	pulla
(1)  121/    9173 : C6 01                       ld              @1(p2)
(1)  122/    9175 : 3F                  	xppc 	p3 													; return
(1)  123/    9176 : 90 8B               	jmp 	Print 												; make re-entrant.
(1)  124/    9178 :                     ;
(1)  125/    9178 :                     ;	Check for supported control characters 8 (Backspace) 12 (Clear) 13 (Carriage Return)
(1)  126/    9178 :                     ;
(1)  127/    9178 :                     __PRIsControlChar:
(1)  128/    9178 : 40                  	lde 														; restore character.
(1)  129/    9179 : E4 0D               	xri 	13 													; carriage return ? (13)
(1)  130/    917B : 98 1B               	jz 		__PRIsReturn
(1)  131/    917D : E4 01               	xri 	13!12 												; form feed ? (12)
(1)  132/    917F : 98 20               	jz 		__PRClearScreen
(1)  133/    9181 : E4 04               	xri 	12!8 												; backspace ? (8)
(1)  134/    9183 : 9C E1               	jnz 	__PRExit 
(1)  135/    9185 :                     ;
(1)  136/    9185 :                     ;	Handle backspace (8)
(1)  137/    9185 :                     ;
(1)  138/    9185 : 31                  	xpal 	p1 													; check cursor position is zero
(1)  139/    9186 : 98 DE               	jz 		__PRExit 											; if it is, cannot backspace so exit.
(1)  140/    9188 : 31                  	xpal 	p1  												; put it back
(1)  141/    9189 : C5 FF               	ld 		@-1(p1)												; move it back one
(1)  142/    918B : C4 20               	ldi 	' '	 												; erase in shadow
(1)  143/    918D : C9 00               	st 		(p1)
(1)  144/    918F : C4 00               	ldi 	0 													; point P1 to VRAM
(1)  145/    9191 : 35                  	xpah 	p1
(1)  146/    9192 : C4 20               	ldi 	' '													; erase in VRAM
(1)  147/    9194 : C9 00               	st 		(p1)
(1)  148/    9196 : 90 B1               	jmp 	__PRUpdateCursor 									; and exit
(1)  149/    9198 :                     ;
(1)  150/    9198 :                     ;	Handle carriage return (13)
(1)  151/    9198 :                     ;
(1)  152/    9198 :                     __PRIsReturn:
(1)  153/    9198 : 31                  	xpal 	p1 													; cursor position in A
(1)  154/    9199 : D4 F0               	ani 	0xF0 												; start of current line
(1)  155/    919B : 02                  	ccl 														; down one line
(1)  156/    919C : F4 10               	adi 	0x10 	
(1)  157/    919E : 31                  	xpal 	p1 													; put it back in P1.
(1)  158/    919F : 90 A8               	jmp 	__PRUpdateCursor
(1)  159/    91A1 :                     ;
(1)  160/    91A1 :                     ;	Handle clear screen (12)
(1)  161/    91A1 :                     ;
(1)  162/    91A1 :                     __PRClearScreen:
(1)  163/    91A1 : C4 00               	ldi 	0 													; clear shadow memory from here.
(1)  164/    91A3 :                     ;
(1)  165/    91A3 :                     ;	From position A, clear the memory in the shadow screen to the end, copy the shadow screen to VRAM
(1)  166/    91A3 :                     ;	then use position A as the new cursor position.
(1)  167/    91A3 :                     ;
 AS V1.42 Beta [Bld 102] - source file minol.asm(screen.asm) - page 10 - 1/12/2016 16:51:50


(1)  168/    91A3 :                     __PRClearFromMoveTo:
(1)  169/    91A3 : CE FF               	st 		@-1(p2) 											; save this position, the cursor goes here.
(1)  170/    91A5 :                     __PRClearLoop:
(1)  171/    91A5 : 31                  	xpal 	p1 													; save position in P1.
(1)  172/    91A6 : C4 20               	ldi 	' '													; write space there.
(1)  173/    91A8 : CD 01               	st 		@1(p1)
(1)  174/    91AA : 31                  	xpal 	p1
(1)  175/    91AB : 94 F8               	jp 		__PRClearLoop 										; until reached shadow memory start.
(1)  176/    91AD : C4 00               	ldi 	0 													; now copy shadow memory to screen memory.
(1)  177/    91AF :                     __PRCopy:
(1)  178/    91AF : 31                  	xpal 	p1 													; set up P1.L
(1)  179/    91B0 : C4 0C               	ldi 	ScreenMirror/256 									; point to shadow memory.
(1)  180/    91B2 : 35                  	xpah 	p1 													
(1)  181/    91B3 : C1 00               	ld 		(p1) 												; read shadow memory
(1)  182/    91B5 : 35                  	xpah 	p1 													; zero P1.H preserving A
(1)  183/    91B6 : C4 00               	ldi 	0
(1)  184/    91B8 : 35                  	xpah 	p1
(1)  185/    91B9 : CD 01               	st 		@1(p1) 												; save and increment p1
(1)  186/    91BB : 31                  	xpal 	p1 
(1)  187/    91BC : 94 F1               	jp 		__PRCopy 											; keep doing till all copied.
(1)  188/    91BE : C6 01               	ld 		@1(p2) 												; read cursor position
(1)  189/    91C0 : 31                  	xpal 	p1 													; put in P1.L
(1)  190/    91C1 : 90 86               	jmp 	__PRUpdateCursor
(1)  191/    91C3 :                     
(1)  192/    91C3 :                     	endsection 	Print
(1)  193/    91C3 :                     
(1)  194/    91C3 :                     ; ****************************************************************************************************************
(1)  195/    91C3 :                     ; ****************************************************************************************************************
(1)  196/    91C3 :                     ;
(1)  197/    91C3 :                     ;		Input a single character into A. Case is converted to Upper. All registers preserved except A
(1)  198/    91C3 :                     ;
(1)  199/    91C3 :                     ; ****************************************************************************************************************
(1)  200/    91C3 :                     ; ****************************************************************************************************************
(1)  201/    91C3 :                     
(1)  202/    91C3 :                     GetChar:
(1)  203/    91C3 :                     	section 	GetChar
(1)  204/    91C3 : C4 08               	ldi 	0x8 												; set P1 to $8xx, and save P1.H
(1)  205/    91C5 : 35                  	xpah 	p1
(1)  206/    91C6 : CE FF               	st 		@-1(p2)
(1)  207/    91C8 :                     __GCWaitKey: 													; wait for key press
(1)  208/    91C8 : C1 00               	ld 		0(p1)
(1)  209/    91CA : 94 FC               	jp 		__GCWaitKey
(1)  210/    91CC : D4 7F               	ani	 	0x7F 												; throw away the upper bit.
(1)  211/    91CE : CA FF               	st 		-1(p2) 												; save it below stack
(1)  212/    91D0 :                     __GCWaitRelease:
(1)  213/    91D0 : C1 00               	ld 		0(p1) 												; wait for release
(1)  214/    91D2 : D4 80               	ani 	0x80
(1)  215/    91D4 : 9C FA               	jnz 	__GCWaitRelease
(1)  216/    91D6 : C6 01               	ld 		@1(p2) 												; restore P1.H
(1)  217/    91D8 : 35                  	xpah 	p1
(1)  218/    91D9 : C2 FE               	ld 		-2(p2) 												; restore saved value
(1)  219/    91DB : 02                  	ccl
(1)  220/    91DC : F4 20               	adi 	0x20												; will make lower case -ve
(1)  221/    91DE : 94 02               	jp 		__GCNotLower
(1)  222/    91E0 : FC 20               	cai 	0x20 												; capitalise
(1)  223/    91E2 :                     __GCNotLower:
(1)  224/    91E2 : F4 E0               	adi 	0xE0 												; fix up.
(1)  225/    91E4 : 3F                  	xppc 	p3 													; return
(1)  226/    91E5 : 90 DC               	jmp 	GetChar 											; make re-entrant
(1)  227/    91E7 :                     	endsection 	GetChar
 AS V1.42 Beta [Bld 102] - source file minol.asm(screen.asm) - page 11 - 1/12/2016 16:51:50


(1)  228/    91E7 :                     
(1)  229/    91E7 :                     ; ****************************************************************************************************************
(1)  230/    91E7 :                     ; ****************************************************************************************************************
(1)  231/    91E7 :                     ;
(1)  232/    91E7 :                     ;			Read an ASCIIZ string from keyboard into P1 of length A maximum (excludes NULL terminator)
(1)  233/    91E7 :                     ;
(1)  234/    91E7 :                     ; ****************************************************************************************************************
(1)  235/    91E7 :                     ; ****************************************************************************************************************
(1)  236/    91E7 :                     
(1)  237/    91E7 :                     GetString:
(1)  238/    91E7 :                     	section GetString
(1)  239/    91E7 : (MACRO)             	pusha 														; save A,P3,E
(1)  239/    91E7 : CE FF                       st              @-1(p2)
(1)  240/    91E9 : (MACRO)             	pushp 	p3
(1)  240/    91E9 : 37                          xpah    P3
(1)  240/    91EA : CE FF                       st              @-1(p2)
(1)  240/    91EC : 33                          xpal    P3
(1)  240/    91ED : CE FF                       st              @-1(p2)
(1)  241/    91EF : (MACRO)             	pushe 
(1)  241/    91EF : 40                          lde
(1)  241/    91F0 : CE FF                       st              @-1(p2)
(1)  242/    91F2 : C4 00               	ldi 	0 													; set E (current position) to A.
(1)  243/    91F4 : 01                  	xae
(1)  244/    91F5 :                     __GSLoop:
(1)  245/    91F5 : (MACRO)             	lpi 	p3,Print-1 											; print the prompt (half coloured square)
(1)  245/    91F5 : C4 91                       ldi     (PRINT-1) / 256
(1)  245/    91F7 : 37                          xpah    P3
(1)  245/    91F8 : C4 02                       ldi     (PRINT-1) & 255
(1)  245/    91FA : 33                          xpal    P3
(1)  246/    91FB : C4 9B               	ldi 	155
(1)  247/    91FD : 3F                  	xppc 	p3
(1)  248/    91FE : (MACRO)             	lpi 	p3,GetChar-1 										; get a character
(1)  248/    91FE : C4 91                       ldi     (GETCHAR-1) / 256
(1)  248/    9200 : 37                          xpah    P3
(1)  248/    9201 : C4 C2                       ldi     (GETCHAR-1) & 255
(1)  248/    9203 : 33                          xpal    P3
(1)  249/    9204 : 3F                  	xppc 	p3
(1)  250/    9205 : C9 80               	st 		-0x80(p1) 											; save it in the current position.
(1)  251/    9207 : (MACRO)             	lpi 	p3,Print-1 											; erase the prompt with backspace.
(1)  251/    9207 : C4 91                       ldi     (PRINT-1) / 256
(1)  251/    9209 : 37                          xpah    P3
(1)  251/    920A : C4 02                       ldi     (PRINT-1) & 255
(1)  251/    920C : 33                          xpal    P3
(1)  252/    920D : C4 08               	ldi 	8
(1)  253/    920F : 3F                  	xppc 	p3
(1)  254/    9210 : C1 80               	ld 		-0x80(p1) 											; re-read character
(1)  255/    9212 : D4 E0               	ani 	0xE0 												; check if control key.
(1)  256/    9214 : 98 0F               	jz 		__GSControlKey 
(1)  257/    9216 : 40                  	lde 														; get current position.
(1)  258/    9217 : E2 03               	xor 	3(p2) 												; reached maximum length of buffer ?
(1)  259/    9219 : 98 DA               	jz 		__GSLoop 											; if so, ignore the key and go round again.
(1)  260/    921B : C1 80               	ld 		-0x80(p1) 											; get character and print it
(1)  261/    921D : 3F                  	xppc 	p3
(1)  262/    921E : C4 01               	ldi 	1 													; increment E
(1)  263/    9220 : 02                  	ccl
(1)  264/    9221 : 70                  	ade
(1)  265/    9222 : 01                  	xae
(1)  266/    9223 : 90 D0               	jmp 	__GSLoop 											; and go round again.
(1)  267/    9225 :                     ;
(1)  268/    9225 :                     ;	Handle control keys (0x00-0x1F)
 AS V1.42 Beta [Bld 102] - source file minol.asm(screen.asm) - page 12 - 1/12/2016 16:51:50


(1)  269/    9225 :                     ;
(1)  270/    9225 :                     __GSControlKey:
(1)  271/    9225 : C1 80               	ld 		-0x80(p1) 											; get typed in key
(1)  272/    9227 : E4 08               	xri 	8 													; check for backspace.
(1)  273/    9229 : 98 17               	jz 		__GSBackspace 			
(1)  274/    922B : E4 05               	xri 	8!13 												; check for CR
(1)  275/    922D : 9C C6               	jnz 	__GSLoop 											; if not, ignore the key.
(1)  276/    922F :                     ;
(1)  277/    922F :                     ;	Carriage Return, ending input.
(1)  278/    922F :                     ;
(1)  279/    922F : C9 80               	st 		-0x80(p1) 											; replace the CR written with NULL terminator.
(1)  280/    9231 : C4 0D               	ldi 	13 													; print CR
(1)  281/    9233 : 3F                  	xppc 	p3
(1)  282/    9234 : (MACRO)             	pulle 														; restore E,P3,A
(1)  282/    9234 : C6 01                       ld              @1(p2)
(1)  282/    9236 : 01                          xae
(1)  283/    9237 : (MACRO)             	pullp	p3
(1)  283/    9237 : C6 01                       ld              @1(p2)
(1)  283/    9239 : 33                          xpal    P3
(1)  283/    923A : C6 01                       ld              @1(p2)
(1)  283/    923C : 37                          xpah    P3
(1)  284/    923D : (MACRO)             	pulla
(1)  284/    923D : C6 01                       ld              @1(p2)
(1)  285/    923F : 3F                  	xppc 	p3 													; return
(1)  286/    9240 : 90 A5               	jmp 	GetString 											; make re-entrant (probably unneccessary !!)
(1)  287/    9242 :                     ;
(1)  288/    9242 :                     ;	Backspace entered
(1)  289/    9242 :                     ;
(1)  290/    9242 :                     __GSBackspace
(1)  291/    9242 : 40                  	lde 														; if E = 0 we can't backspace any further.
(1)  292/    9243 : 98 B0               	jz 		__GSLoop
(1)  293/    9245 : C4 08               	ldi 	8 													; backspace on screen
(1)  294/    9247 : 3F                  	xppc 	p3
(1)  295/    9248 : C4 FF               	ldi 	0xFF 												; decrement E
(1)  296/    924A : 02                  	ccl
(1)  297/    924B : 70                  	ade
(1)  298/    924C : 01                  	xae
(1)  299/    924D : 90 A6               	jmp 	__GSLoop 											; and go round again.
(1)  300/    924F :                     
(1)  301/    924F :                     	endsection GetString
(1)  302/    924F :                     
      77/    924F :                     	include source\execute.asm 									; statement exec main loop
(1)    1/    924F :                     ; ****************************************************************************************************************
(1)    2/    924F :                     ; ****************************************************************************************************************
(1)    3/    924F :                     ;
(1)    4/    924F :                     ;										Instruction Execution
(1)    5/    924F :                     ;	
(1)    6/    924F :                     ; ****************************************************************************************************************
(1)    7/    924F :                     ; ****************************************************************************************************************
(1)    8/    924F :                     
(1)    9/    924F :                     ; ****************************************************************************************************************
(1)   10/    924F :                     ;							Source codes for execution, with skip-over go here
(1)   11/    924F :                     ; ****************************************************************************************************************
(1)   12/    924F :                     
(1)   13/    924F :                     	include source\commands\os.asm 								; OS
(2)    1/    924F :                     ; ****************************************************************************************************************
(2)    2/    924F :                     ; ****************************************************************************************************************
(2)    3/    924F :                     ;
(2)    4/    924F :                     ;												OS command
(2)    5/    924F :                     ;	
 AS V1.42 Beta [Bld 102] - source file minol.asm(os.asm) - page 13 - 1/12/2016 16:51:50


(2)    6/    924F :                     ; ****************************************************************************************************************
(2)    7/    924F :                     ; ****************************************************************************************************************
(2)    8/    924F :                     
(2)    9/    924F : 90 07               	jmp 	COS_Over
(2)   10/    9251 :                     
(2)   11/    9251 :                     CMD_OS:
(2)   12/    9251 : (MACRO)             	lpi 	p3,BootMonitor-1 									; monitor re-entry point
(2)   12/    9251 : C4 02                       ldi     (BOOTMONITOR-1) / 256
(2)   12/    9253 : 37                          xpah    P3
(2)   12/    9254 : C4 0F                       ldi     (BOOTMONITOR-1) & 255
(2)   12/    9256 : 33                          xpal    P3
(2)   13/    9257 : 3F                  	xppc 	p3													; go there.
(2)   14/    9258 :                     
(2)   15/    9258 :                     COS_Over:
(1)   14/    9258 :                     	include source\commands\list.asm 							; LIST
(2)    1/    9258 :                     ; ****************************************************************************************************************
(2)    2/    9258 :                     ; ****************************************************************************************************************
(2)    3/    9258 :                     ;
(2)    4/    9258 :                     ;												LIST command
(2)    5/    9258 :                     ;	
(2)    6/    9258 :                     ; ****************************************************************************************************************
(2)    7/    9258 :                     ; ****************************************************************************************************************
(2)    8/    9258 :                     
(2)    9/    9258 : 90 3E               	jmp		CLI_Over
(2)   10/    925A :                     
(2)   11/    925A :                     CMD_List:
(2)   12/    925A : (MACRO)             	lpi 	p1,ProgramBase 										; point P1 to first line.
(2)   12/    925A : C4 10                       ldi     (PROGRAMBASE) / 256
(2)   12/    925C : 35                          xpah    P1
(2)   12/    925D : C4 00                       ldi     (PROGRAMBASE) & 255
(2)   12/    925F : 31                          xpal    P1
(2)   13/    9260 : C4 00               	ldi 	0 													; clear counter. used for Speccy style list.
(2)   14/    9262 : CE FF               	st 		@-1(p2)
(2)   15/    9264 :                     CLI_Loop:
(2)   16/    9264 : C5 01               	ld 		@1(p1) 												; check if finished
(2)   17/    9266 : D4 80               	ani 	0x80
(2)   18/    9268 : 9C 28               	jnz 	CLI_End
(2)   19/    926A : C5 01               	ld 		@1(p1) 												; get line number into E
(2)   20/    926C : 01                  	xae 
(2)   21/    926D : (MACRO)             	lpi 	p3,PrintInteger-1 									; and print it.
(2)   21/    926D : C4 90                       ldi     (PRINTINTEGER-1) / 256
(2)   21/    926F : 37                          xpah    P3
(2)   21/    9270 : C4 7C                       ldi     (PRINTINTEGER-1) & 255
(2)   21/    9272 : 33                          xpal    P3
(2)   22/    9273 : 3F                  	xppc 	p3
(2)   23/    9274 : C4 20               	ldi 	' '													; print space
(2)   24/    9276 : 3F                  	xppc 	p3
(2)   25/    9277 :                     ;
(2)   26/    9277 :                     CLI_Line:
(2)   27/    9277 : C5 01               	ld 		@1(p1) 												; get character
(2)   28/    9279 : 98 03               	jz 		CLI_EndLine											; if zero, do next line.
(2)   29/    927B : 3F                  	xppc 	p3 													; print it
(2)   30/    927C : 90 F9               	jmp 	CLI_Line
(2)   31/    927E :                     ;
(2)   32/    927E :                     CLI_EndLine:
(2)   33/    927E : C4 0D               	ldi 	13													; new line
(2)   34/    9280 : 3F                  	xppc 	p3
(2)   35/    9281 : AA 00               	ild 	(p2) 												; bump counter
(2)   36/    9283 : D4 03               	ani 	0x03 												; stop every 3 lines
(2)   37/    9285 : 9C DD               	jnz 	CLI_Loop 											; keep going.
 AS V1.42 Beta [Bld 102] - source file minol.asm(list.asm) - page 14 - 1/12/2016 16:51:50


(2)   38/    9287 : (MACRO)             	lpi 	p3,GetChar-1 										; get a keystroke
(2)   38/    9287 : C4 91                       ldi     (GETCHAR-1) / 256
(2)   38/    9289 : 37                          xpah    P3
(2)   38/    928A : C4 C2                       ldi     (GETCHAR-1) & 255
(2)   38/    928C : 33                          xpal    P3
(2)   39/    928D : 3F                  	xppc 	p3
(2)   40/    928E : E4 20               	xri 	' '													; if space pressed
(2)   41/    9290 : 98 D2               	jz 		CLI_Loop 											; and do next line.
(2)   42/    9292 :                     
(2)   43/    9292 :                     CLI_End:
(2)   44/    9292 : C6 01               	ld 		@1(p2) 												; drop counter
(2)   45/    9294 : C4 FF               	ldi 	ERRC_End											; fake error to end after LIST as destroys P1.
(2)   46/    9296 : 01                  	xae
(2)   47/    9297 : 02                  	ccl
(2)   48/    9298 :                     
(2)   49/    9298 :                     CLI_Over:
(2)   50/    9298 :                     
(2)   51/    9298 :                     
(1)   15/    9298 :                     	include source\commands\new_end.asm 						; NEW and END
(2)    1/    9298 :                     ; ****************************************************************************************************************
(2)    2/    9298 :                     ; ****************************************************************************************************************
(2)    3/    9298 :                     ;
(2)    4/    9298 :                     ;												NEW and END
(2)    5/    9298 :                     ;	
(2)    6/    9298 :                     ; ****************************************************************************************************************
(2)    7/    9298 :                     ; ****************************************************************************************************************
(2)    8/    9298 :                     
(2)    9/    9298 : 90 0E               	jmp 	CNE_Over
(2)   10/    929A :                     
(2)   11/    929A :                     ; ****************************************************************************************************************
(2)   12/    929A :                     ;						NEW (Erase program) also executes END in case in running program
(2)   13/    929A :                     ; ****************************************************************************************************************
(2)   14/    929A :                     
(2)   15/    929A :                     CMD_New:
(2)   16/    929A : (MACRO)             	lpi 	p3,ProgramBase 										; write $FF at program base
(2)   16/    929A : C4 10                       ldi     (PROGRAMBASE) / 256
(2)   16/    929C : 37                          xpah    P3
(2)   16/    929D : C4 00                       ldi     (PROGRAMBASE) & 255
(2)   16/    929F : 33                          xpal    P3
(2)   17/    92A0 : C4 FF               	ldi 	0xFF
(2)   18/    92A2 : CB 00               	st 		0(p3) 												; this erases the program
(2)   19/    92A4 :                     
(2)   20/    92A4 :                     ; ****************************************************************************************************************
(2)   21/    92A4 :                     ;													END program
(2)   22/    92A4 :                     ; ****************************************************************************************************************
(2)   23/    92A4 :                     
(2)   24/    92A4 :                     CMD_End:
(2)   25/    92A4 : 02                  	ccl 														; we cause an error, but it is ERRC_End which is 
(2)   26/    92A5 : C4 FF               	ldi 	ERRC_End 											; not an error and not reported as such.
(2)   27/    92A7 : 01                  	xae
(2)   28/    92A8 :                     
(2)   29/    92A8 :                     CNE_Over:
(1)   16/    92A8 :                     	include source\commands\input.asm 							; IN<put>
(2)    1/    92A8 :                     ; ****************************************************************************************************************
(2)    2/    92A8 :                     ; ****************************************************************************************************************
(2)    3/    92A8 :                     ;
(2)    4/    92A8 :                     ;												IN command
(2)    5/    92A8 :                     ;	
(2)    6/    92A8 :                     ; ****************************************************************************************************************
(2)    7/    92A8 :                     ; ****************************************************************************************************************
 AS V1.42 Beta [Bld 102] - source file minol.asm(input.asm) - page 15 - 1/12/2016 16:51:50


(2)    8/    92A8 :                     
(2)    9/    92A8 : 90 30               	jmp		CIN_Over2
(2)   10/    92AA :                     
(2)   11/    92AA :                     CMD_In:
(2)   12/    92AA : (MACRO)             	lpi 	p3,EvaluateAddressPair-1 							; set P3 to call evaluate pair (H,L)
(2)   12/    92AA : C4 96                       ldi     (EVALUATEADDRESSPAIR-1) / 256
(2)   12/    92AC : 37                          xpah    P3
(2)   12/    92AD : C4 A5                       ldi     (EVALUATEADDRESSPAIR-1) & 255
(2)   12/    92AF : 33                          xpal    P3
(2)   13/    92B0 : 03                  	scl 														; indicates no error
(2)   14/    92B1 : C1 00               	ld	 	(p1) 												; look at first character
(2)   15/    92B3 : 98 25               	jz 		CIN_Over2 											; if zero or ':' then end of IN
(2)   16/    92B5 : E4 3A               	xri 	':'
(2)   17/    92B7 : 98 21               	jz 		CIN_Over2
(2)   18/    92B9 : C5 01               	ld 		@1(p1) 												; fetch and bump
(2)   19/    92BB : E4 2C               	xri 	','													; ignora commas
(2)   20/    92BD : 98 EB               	jz 		CMD_In
(2)   21/    92BF : E4 0C               	xri 	' '!','												; ignore spaces.
(2)   22/    92C1 : 98 E7               	jz 		CMD_In
(2)   23/    92C3 : E4 08               	xri 	'('!' '												; open bracket is Input to (H,L)
(2)   24/    92C5 : 98 22               	jz 		CIN_Memory 
(2)   25/    92C7 : E4 0C               	xri 	'$'!'('												; $(H,L) is input to memory.
(2)   26/    92C9 : 98 59               	jz 		CIN_String
(2)   27/    92CB :                     
(2)   28/    92CB :                     ; ****************************************************************************************************************
(2)   29/    92CB :                     ;											Check for A-Z input.
(2)   30/    92CB :                     ; ****************************************************************************************************************
(2)   31/    92CB :                     
(2)   32/    92CB : C1 FF               	ld 		-1(p1)												; get letter of variable
(2)   33/    92CD : 02                  	ccl
(2)   34/    92CE : F4 A5               	adi 	255-'Z'												; check if > 'Z'
(2)   35/    92D0 : 94 04               	jp 		CIN_Syntax 				
(2)   36/    92D2 : F4 1A               	adi 	26 													; will be +ve if A..Z now
(2)   37/    92D4 : 94 06               	jp 		CIN_Variable
(2)   38/    92D6 :                     
(2)   39/    92D6 :                     ; ****************************************************************************************************************
(2)   40/    92D6 :                     ;									Syntax error - not (x,x) $(x,x) or A..Z
(2)   41/    92D6 :                     ; ****************************************************************************************************************
(2)   42/    92D6 :                     
(2)   43/    92D6 :                     CIN_Syntax:
(2)   44/    92D6 : C4 05               	ldi 	ERRC_Syntax
(2)   45/    92D8 : 01                  	xae
(2)   46/    92D9 : 02                  	ccl
(2)   47/    92DA :                     CIN_Over2:
(2)   48/    92DA : 90 6C               	jmp 	CIN_Over
(2)   49/    92DC :                     
(2)   50/    92DC :                     ; ****************************************************************************************************************
(2)   51/    92DC :                     ;										Input to variable in A (0-25)
(2)   52/    92DC :                     ; ****************************************************************************************************************
(2)   53/    92DC :                     
(2)   54/    92DC :                     CIN_Variable:
(2)   55/    92DC : 02                  	ccl 														; add variable number 0-25 to Variables to get an address
(2)   56/    92DD : F4 90               	adi 	Variables & 255
(2)   57/    92DF : CA FE               	st 		-2(p2)
(2)   58/    92E1 : C4 0C               	ldi 	Variables / 256
(2)   59/    92E3 : F4 00               	adi 	0
(2)   60/    92E5 : CA FF               	st 		-1(p2)
(2)   61/    92E7 : 90 05               	jmp 	CIN_InputVariableOrMemory
(2)   62/    92E9 :                     
(2)   63/    92E9 :                     ; ****************************************************************************************************************
 AS V1.42 Beta [Bld 102] - source file minol.asm(input.asm) - page 16 - 1/12/2016 16:51:50


(2)   64/    92E9 :                     ;											Input to (<expr>,<expr>)
(2)   65/    92E9 :                     ; ****************************************************************************************************************
(2)   66/    92E9 :                     
(2)   67/    92E9 :                     CIN_Memory:
(2)   68/    92E9 : C5 FF               	ld 		@-1(p1)												; point to the bracket.
(2)   69/    92EB : 3F                  	xppc 	p3 													; push the H,L on the stack, without the stack being changed
(2)   70/    92EC : 94 5A               	jp 		CIN_Over 											; exit on error.
(2)   71/    92EE :                     
(2)   72/    92EE :                     ; ****************************************************************************************************************
(2)   73/    92EE :                     ;								Input to variable or memory address is hidden on TOS.
(2)   74/    92EE :                     ; ****************************************************************************************************************
(2)   75/    92EE :                     
(2)   76/    92EE :                     CIN_InputVariableOrMemory:
(2)   77/    92EE : C6 FE               	ld 		@-2(p2) 											; save the storage address as TOS "Make it visible"
(2)   78/    92F0 : (MACRO)             	pushp 	p1 													; save P1 on stack
(2)   78/    92F0 : 35                          xpah    P1
(2)   78/    92F1 : CE FF                       st              @-1(p2)
(2)   78/    92F3 : 31                          xpal    P1
(2)   78/    92F4 : CE FF                       st              @-1(p2)
(2)   79/    92F6 : (MACRO)             	lpi 	p3,GetString-1 										; read keyboard
(2)   79/    92F6 : C4 91                       ldi     (GETSTRING-1) / 256
(2)   79/    92F8 : 37                          xpah    P3
(2)   79/    92F9 : C4 E6                       ldi     (GETSTRING-1) & 255
(2)   79/    92FB : 33                          xpal    P3
(2)   80/    92FC : (MACRO)             	lpi 	p1,KeyboardBuffer 									; point P1 to keyboard buffer.
(2)   80/    92FC : C4 0C                       ldi     (KEYBOARDBUFFER) / 256
(2)   80/    92FE : 35                          xpah    P1
(2)   80/    92FF : C4 B0                       ldi     (KEYBOARDBUFFER) & 255
(2)   80/    9301 : 31                          xpal    P1
(2)   81/    9302 : C4 48               	ldi 	KeyboardBufferSize 									; buffer size
(2)   82/    9304 : 3F                  	xppc 	p3 													; read it in.
(2)   83/    9305 :                     
(2)   84/    9305 : (MACRO)             	lpi 	p3,GetConstant-1 									; extract constant to E if any
(2)   84/    9305 : C4 90                       ldi     (GETCONSTANT-1) / 256
(2)   84/    9307 : 37                          xpah    P3
(2)   84/    9308 : C4 D8                       ldi     (GETCONSTANT-1) & 255
(2)   84/    930A : 33                          xpal    P3
(2)   85/    930B : 3F                  	xppc 	p3
(2)   86/    930C : D4 80               	ani 	0x80 												; if CY/L set, e.g. is it legal 
(2)   87/    930E : 9C 03               	jnz 	CIN_StoreValue										; if so, store E at the address.
(2)   88/    9310 : C1 00               	ld 		(p1) 												; get the character code of the first letter
(2)   89/    9312 : 01                  	xae 														; into E
(2)   90/    9313 :                     CIN_StoreValue:
(2)   91/    9313 : (MACRO)             	pullp 	p1 													; restore P1
(2)   91/    9313 : C6 01                       ld              @1(p2)
(2)   91/    9315 : 31                          xpal    P1
(2)   91/    9316 : C6 01                       ld              @1(p2)
(2)   91/    9318 : 35                          xpah    P1
(2)   92/    9319 : C6 01               	ld 		@1(p2) 												; get low byte to P3.L
(2)   93/    931B : 33                  	xpal 	p3 												
(2)   94/    931C : C6 01               	ld 		@1(p2)												; get high byte to P3.H
(2)   95/    931E : 37                  	xpah 	p3
(2)   96/    931F : 40                  	lde 														; get E, value to store
(2)   97/    9320 : CB 00               	st 		(p3)												; and write it.
(2)   98/    9322 :                     CMD_In2:
(2)   99/    9322 : 90 86               	jmp 	CMD_In 												; and see if there is more to input
(2)  100/    9324 :                     
(2)  101/    9324 :                     ; ****************************************************************************************************************
(2)  102/    9324 :                     ;												Input String to Memory
(2)  103/    9324 :                     ; ****************************************************************************************************************
 AS V1.42 Beta [Bld 102] - source file minol.asm(input.asm) - page 17 - 1/12/2016 16:51:50


(2)  104/    9324 :                     
(2)  105/    9324 :                     CIN_String:
(2)  106/    9324 : 3F                  	xppc 	p3 													; evaluate (H,L)
(2)  107/    9325 : 94 21               	jp 		CIN_Over 											; exit on error.
(2)  108/    9327 : C2 FF               	ld 		-1(p2) 												; read High
(2)  109/    9329 : 35                  	xpah 	p1 													; put into P1.H
(2)  110/    932A : CA FF               	st 		-1(p2)
(2)  111/    932C : C2 FE               	ld 		-2(p2)												; read Low
(2)  112/    932E : 31                  	xpal 	p1 													; put into P1.L
(2)  113/    932F : CE FE               	st 		@-2(p2) 											; save on stack
(2)  114/    9331 : (MACRO)             	lpi 	p3,GetString-1 										; read keyboard
(2)  114/    9331 : C4 91                       ldi     (GETSTRING-1) / 256
(2)  114/    9333 : 37                          xpah    P3
(2)  114/    9334 : C4 E6                       ldi     (GETSTRING-1) & 255
(2)  114/    9336 : 33                          xpal    P3
(2)  115/    9337 : C4 48               	ldi 	KeyboardBufferSize 									; max size of input
(2)  116/    9339 : 3F                  	xppc 	p3 													; read keyboard into address
(2)  117/    933A :                     
(2)  118/    933A :                     CIN_FindEnd:													; look for EOS (NULL)
(2)  119/    933A : C5 01               	ld 		@1(p1)
(2)  120/    933C : 9C FC               	jnz 	CIN_FindEnd
(2)  121/    933E : B9 FF               	dld 	-1(p1) 												; convert $00 to $FF
(2)  122/    9340 :                     
(2)  123/    9340 : C6 01               	ld 		@1(p2) 												; pop P1
(2)  124/    9342 : 31                  	xpal 	p1
(2)  125/    9343 : C6 01               	ld 		@1(p2)
(2)  126/    9345 : 35                  	xpah 	p1
(2)  127/    9346 : 90 DA               	jmp 	CMD_In2												; see if more input 
(2)  128/    9348 :                     
(2)  129/    9348 :                     CIN_Over:
(2)  130/    9348 :                     
(2)  131/    9348 :                     
(2)  132/    9348 :                     
(1)   17/    9348 :                     	include source\commands\clear.asm							; CLEAR
(2)    1/    9348 :                     ; ****************************************************************************************************************
(2)    2/    9348 :                     ; ****************************************************************************************************************
(2)    3/    9348 :                     ;
(2)    4/    9348 :                     ;													CLEAR
(2)    5/    9348 :                     ;	
(2)    6/    9348 :                     ; ****************************************************************************************************************
(2)    7/    9348 :                     ; ****************************************************************************************************************
(2)    8/    9348 :                     
(2)    9/    9348 : 90 13               	jmp	CCL_Over
(2)   10/    934A :                     
(2)   11/    934A :                     ; ****************************************************************************************************************
(2)   12/    934A :                     ;												CLEAR command
(2)   13/    934A :                     ; ****************************************************************************************************************
(2)   14/    934A :                     
(2)   15/    934A :                     CMD_Clear:
(2)   16/    934A : (MACRO)             	lpi 	p3,Variables 										; point P3 to variables
(2)   16/    934A : C4 0C                       ldi     (VARIABLES) / 256
(2)   16/    934C : 37                          xpah    P3
(2)   16/    934D : C4 90                       ldi     (VARIABLES) & 255
(2)   16/    934F : 33                          xpal    P3
(2)   17/    9350 : C4 1A               	ldi 	26 													; loop counter to 26
(2)   18/    9352 : CA FF               	st 		-1(p2)
(2)   19/    9354 :                     CCL_Loop:
(2)   20/    9354 : C4 00               	ldi 	0x00												; clear a variable
(2)   21/    9356 : CF 01               	st 		@1(p3)
(2)   22/    9358 : BA FF               	dld 	-1(p2) 												; done all
 AS V1.42 Beta [Bld 102] - source file minol.asm(clear.asm) - page 18 - 1/12/2016 16:51:50


(2)   23/    935A : 9C F8               	jnz 	CCL_Loop											; loop back
(2)   24/    935C : 03                  	scl 														; no error
(2)   25/    935D :                     
(2)   26/    935D :                     CCL_Over:
(1)   18/    935D :                     	include source\commands\print.asm 							; PR<int>
(2)    1/    935D :                     ; ****************************************************************************************************************
(2)    2/    935D :                     ; ****************************************************************************************************************
(2)    3/    935D :                     ;
(2)    4/    935D :                     ;												PR command
(2)    5/    935D :                     ;	
(2)    6/    935D :                     ; ****************************************************************************************************************
(2)    7/    935D :                     ; ****************************************************************************************************************
(2)    8/    935D :                     
(2)    9/    935D : 90 7B               	jmp 	CPR_Over2
(2)   10/    935F :                     
(2)   11/    935F :                     ; ****************************************************************************************************************
(2)   12/    935F :                     ;												Main printing loop
(2)   13/    935F :                     ; ****************************************************************************************************************
(2)   14/    935F :                     
(2)   15/    935F :                     CMD_Print:
(2)   16/    935F : (MACRO)             	lpi 	p3,Print-1 											; set up P3 for printing.
(2)   16/    935F : C4 91                       ldi     (PRINT-1) / 256
(2)   16/    9361 : 37                          xpah    P3
(2)   16/    9362 : C4 02                       ldi     (PRINT-1) & 255
(2)   16/    9364 : 33                          xpal    P3
(2)   17/    9365 : C1 00               	ld 		(p1)												; reached end of command, print RETURN and exit.
(2)   18/    9367 : 98 73               	jz 		CPR_EndReturn
(2)   19/    9369 : E4 3A               	xri 	':'
(2)   20/    936B : 98 6F               	jz 		CPR_EndReturn
(2)   21/    936D : C5 01               	ld 		@1(p1)												; re-read with a bump
(2)   22/    936F : E4 20               	xri 	' '													; if space, skip it
(2)   23/    9371 : 98 EC               	jz 		CMD_Print
(2)   24/    9373 : E4 0C               	xri 	','!' '												; if comma, skip it.
(2)   25/    9375 : 98 E8               	jz 		CMD_Print
(2)   26/    9377 : E4 17               	xri 	';'!','												; if semicolon exit without a return
(2)   27/    9379 : 98 64               	jz 		CPR_EndOk 
(2)   28/    937B : E4 19               	xri 	'"'!';'												; if quote mark print as quoted string
(2)   29/    937D : 98 1E               	jz 		CPR_QuotedString
(2)   30/    937F : E4 06               	xri 	'$'!'"'												; if $ print string at address.
(2)   31/    9381 : 98 27               	jz 		CPR_StringAtAddress
(2)   32/    9383 :                     
(2)   33/    9383 :                     ; ****************************************************************************************************************
(2)   34/    9383 :                     ;												numerical expression
(2)   35/    9383 :                     ; ****************************************************************************************************************
(2)   36/    9383 :                     
(2)   37/    9383 : C4 20               	ldi 	' '													; preceding space
(2)   38/    9385 : 3F                  	xppc 	p3
(2)   39/    9386 : C5 FF               	ld 		@-1(p1)												; unpick the get, first character of expression.
(2)   40/    9388 : (MACRO)             	lpi 	p3,EvaluateExpression-1 							; evaluate expression
(2)   40/    9388 : C4 95                       ldi     (EVALUATEEXPRESSION-1) / 256
(2)   40/    938A : 37                          xpah    P3
(2)   40/    938B : C4 52                       ldi     (EVALUATEEXPRESSION-1) & 255
(2)   40/    938D : 33                          xpal    P3
(2)   41/    938E : 3F                  	xppc 	p3
(2)   42/    938F : 94 4F               	jp 		CPR_Over 											; exit on error.
(2)   43/    9391 : (MACRO)             	lpi 	p3,PrintInteger-1 									; and print it
(2)   43/    9391 : C4 90                       ldi     (PRINTINTEGER-1) / 256
(2)   43/    9393 : 37                          xpah    P3
(2)   43/    9394 : C4 7C                       ldi     (PRINTINTEGER-1) & 255
(2)   43/    9396 : 33                          xpal    P3
 AS V1.42 Beta [Bld 102] - source file minol.asm(print.asm) - page 19 - 1/12/2016 16:51:50


(2)   44/    9397 : 3F                  	xppc 	p3
(2)   45/    9398 : C4 20               	ldi 	' '													; trailing space
(2)   46/    939A : 3F                  	xppc 	p3
(2)   47/    939B : 90 C2               	jmp 	CMD_Print
(2)   48/    939D :                     
(2)   49/    939D :                     ; ****************************************************************************************************************
(2)   50/    939D :                     ;												"<quoted string>"
(2)   51/    939D :                     ; ****************************************************************************************************************
(2)   52/    939D :                     
(2)   53/    939D :                     CPR_QuotedString:
(2)   54/    939D : C5 01               	ld 		@1(p1) 												; get character
(2)   55/    939F : 98 35               	jz 		CPR_Syntax 											; if NULL, syntax error.
(2)   56/    93A1 : E4 22               	xri 	'"'													; if closing quote
(2)   57/    93A3 : 98 BA               	jz 		CMD_Print
(2)   58/    93A5 : C1 FF               	ld 		-1(p1)												; re-get it
(2)   59/    93A7 : 3F                  	xppc 	p3 													; print it
(2)   60/    93A8 : 90 F3               	jmp 	CPR_QuotedString
(2)   61/    93AA :                     
(2)   62/    93AA :                     ; ****************************************************************************************************************
(2)   63/    93AA :                     ;									$(H,L) print string at address, ended by -ve or 0.
(2)   64/    93AA :                     ; ****************************************************************************************************************
(2)   65/    93AA :                     
(2)   66/    93AA :                     CPR_StringAtAddress:
(2)   67/    93AA : (MACRO)             	lpi 	p3,EvaluateAddressPair-1 							; evaluate (H,L)
(2)   67/    93AA : C4 96                       ldi     (EVALUATEADDRESSPAIR-1) / 256
(2)   67/    93AC : 37                          xpah    P3
(2)   67/    93AD : C4 A5                       ldi     (EVALUATEADDRESSPAIR-1) & 255
(2)   67/    93AF : 33                          xpal    P3
(2)   68/    93B0 : 3F                  	xppc 	p3	
(2)   69/    93B1 : 94 2D               	jp 		CPR_Over											; exit on error
(2)   70/    93B3 :                     
(2)   71/    93B3 : C6 FF               	ld 		@-1(p2) 											; retrieve H to P1.H
(2)   72/    93B5 : 35                  	xpah 	p1
(2)   73/    93B6 : CA 00               	st 		(p2)												; and save P1.H there
(2)   74/    93B8 : C6 FF               	ld 		@-1(p2) 											; retrieve L to P1.L
(2)   75/    93BA : 31                  	xpal 	p1
(2)   76/    93BB : CA 00               	st 		(p2)
(2)   77/    93BD : (MACRO)             	lpi 	p3,Print-1 											; set up P3 to print.
(2)   77/    93BD : C4 91                       ldi     (PRINT-1) / 256
(2)   77/    93BF : 37                          xpah    P3
(2)   77/    93C0 : C4 02                       ldi     (PRINT-1) & 255
(2)   77/    93C2 : 33                          xpal    P3
(2)   78/    93C3 :                     CPR_StringLoop:
(2)   79/    93C3 : C5 01               	ld 		@1(p1) 												; fetch and bump character
(2)   80/    93C5 : 98 02               	jz 		CPR_StringExit 										; if zero end of string
(2)   81/    93C7 : 94 08               	jp 		CPR_StringPrint 									; if +ve printable character
(2)   82/    93C9 :                     ;
(2)   83/    93C9 :                     CPR_StringExit:
(2)   84/    93C9 : C6 01               	ld 		@1(p2)												; restore P1.
(2)   85/    93CB : 31                  	xpal 	p1
(2)   86/    93CC : C6 01               	ld 		@1(p2)
(2)   87/    93CE : 35                  	xpah 	p1
(2)   88/    93CF : 90 8E               	jmp 	CMD_Print 											; and print the next thing.
(2)   89/    93D1 :                     ;
(2)   90/    93D1 :                     CPR_StringPrint:
(2)   91/    93D1 : C1 FF               	ld 		-1(p1) 												; retrieve, print and loop
(2)   92/    93D3 : 3F                  	xppc 	p3
(2)   93/    93D4 : 90 ED               	jmp 	CPR_StringLoop
(2)   94/    93D6 :                     
(2)   95/    93D6 :                     ; ****************************************************************************************************************
 AS V1.42 Beta [Bld 102] - source file minol.asm(print.asm) - page 20 - 1/12/2016 16:51:50


(2)   96/    93D6 :                     ;												Syntax Error
(2)   97/    93D6 :                     ; ****************************************************************************************************************
(2)   98/    93D6 :                     
(2)   99/    93D6 :                     CPR_Syntax:
(2)  100/    93D6 : C4 05               	ldi 	ERRC_Syntax 										; set up for syntax error and exit
(2)  101/    93D8 : 01                  	xae
(2)  102/    93D9 : 02                  	ccl
(2)  103/    93DA :                     CPR_Over2:
(2)  104/    93DA : 90 04               	jmp 	CPR_Over
(2)  105/    93DC :                     
(2)  106/    93DC :                     ; ****************************************************************************************************************
(2)  107/    93DC :                     ;										Print return and end okay.
(2)  108/    93DC :                     ; ****************************************************************************************************************
(2)  109/    93DC :                     
(2)  110/    93DC :                     CPR_EndReturn:
(2)  111/    93DC : C4 0D               	ldi 	13													; print a carriage return.
(2)  112/    93DE : 3F                  	xppc 	p3
(2)  113/    93DF :                     CPR_EndOk:														; end successfully.
(2)  114/    93DF : 03                  	scl 														; set carry flag (no error)
(2)  115/    93E0 :                     
(2)  116/    93E0 :                     CPR_Over:
(2)  117/    93E0 :                     	
(1)   19/    93E0 :                     	include source\commands\call.asm 							; CALL
(2)    1/    93E0 :                     ; ****************************************************************************************************************
(2)    2/    93E0 :                     ; ****************************************************************************************************************
(2)    3/    93E0 :                     ;
(2)    4/    93E0 :                     ;												CALL command
(2)    5/    93E0 :                     ;	
(2)    6/    93E0 :                     ; ****************************************************************************************************************
(2)    7/    93E0 :                     ; ****************************************************************************************************************
(2)    8/    93E0 :                     
(2)    9/    93E0 : 90 27               	jmp		CCA_Over
(2)   10/    93E2 :                     
(2)   11/    93E2 :                     CMD_Call:
(2)   12/    93E2 : (MACRO)             	lpi 	p3,EvaluateAddressPair-1 							; evaluate the address pair (e.g. (H,L))
(2)   12/    93E2 : C4 96                       ldi     (EVALUATEADDRESSPAIR-1) / 256
(2)   12/    93E4 : 37                          xpah    P3
(2)   12/    93E5 : C4 A5                       ldi     (EVALUATEADDRESSPAIR-1) & 255
(2)   12/    93E7 : 33                          xpal    P3
(2)   13/    93E8 : 3F                  	xppc 	p3
(2)   14/    93E9 : 94 1E               	jp 		CCA_Over 											; exit on error.
(2)   15/    93EB : C2 FE               	ld 		-2(p2) 												; retrieve the L value to E
(2)   16/    93ED : 01                  	xae 	
(2)   17/    93EE : C2 FF               	ld 		-1(p2)												; retrieve the H value to P3.H
(2)   18/    93F0 : 37                  	xpah 	p3
(2)   19/    93F1 : 40                  	lde	 														; copy L value to P3.L
(2)   20/    93F2 : 33                  	xpal 	p3
(2)   21/    93F3 : C7 FF               	ld 		@-1(p3) 											; fix up for pre-increment
(2)   22/    93F5 : (MACRO)             	pushp 	p1 													; save P1
(2)   22/    93F5 : 35                          xpah    P1
(2)   22/    93F6 : CE FF                       st              @-1(p2)
(2)   22/    93F8 : 31                          xpal    P1
(2)   22/    93F9 : CE FF                       st              @-1(p2)
(2)   23/    93FB : (MACRO)             	lpi 	p1,Variables 										; and point P1 to the variables
(2)   23/    93FB : C4 0C                       ldi     (VARIABLES) / 256
(2)   23/    93FD : 35                          xpah    P1
(2)   23/    93FE : C4 90                       ldi     (VARIABLES) & 255
(2)   23/    9400 : 31                          xpal    P1
(2)   24/    9401 : 03                  	scl 														; set CY/L flag, so the call can return an error.
(2)   25/    9402 : 3F                  	xppc 	p3 													; call the routine
 AS V1.42 Beta [Bld 102] - source file minol.asm(call.asm) - page 21 - 1/12/2016 16:51:50


(2)   26/    9403 : (MACRO)             	pullp	p1 													; restore P1
(2)   26/    9403 : C6 01                       ld              @1(p2)
(2)   26/    9405 : 31                          xpal    P1
(2)   26/    9406 : C6 01                       ld              @1(p2)
(2)   26/    9408 : 35                          xpah    P1
(2)   27/    9409 :                     	
(2)   28/    9409 :                     CCA_Over:
(1)   20/    9409 :                     	include source\commands\let.asm 							; LET (optional, but slower if not present)
(2)    1/    9409 :                     ; ****************************************************************************************************************
(2)    2/    9409 :                     ; ****************************************************************************************************************
(2)    3/    9409 :                     ;
(2)    4/    9409 :                     ;												LET command
(2)    5/    9409 :                     ;	
(2)    6/    9409 :                     ; ****************************************************************************************************************
(2)    7/    9409 :                     ; ****************************************************************************************************************
(2)    8/    9409 :                     
(2)    9/    9409 : 90 51               	jmp 	CLE_Over
(2)   10/    940B :                     
(2)   11/    940B :                     CMD_Let:
(2)   12/    940B : C1 00               	ld 		(p1) 												; look at character
(2)   13/    940D : E4 28               	xri 	'('													; is it let (h,l) ?
(2)   14/    940F : 98 20               	jz 		CLE_IsHL 											; if so, go to the (H,L) code
(2)   15/    9411 : C1 00               	ld 		(p1) 												; re-read it.
(2)   16/    9413 : 02                  	ccl
(2)   17/    9414 : F4 A5               	adi 	255-'Z' 											; will be +ve on error
(2)   18/    9416 : 94 04               	jp 		CLE_Syntax 											; e.g. > Z
(2)   19/    9418 : F4 1A               	adi 	26 													; will be 0-25 if A..Z
(2)   20/    941A : 94 06               	jp 		CLE_SingleVariable
(2)   21/    941C :                     ;
(2)   22/    941C :                     ;	Syntax Error
(2)   23/    941C :                     ;
(2)   24/    941C :                     CLE_Syntax:
(2)   25/    941C : C4 05               	ldi 	ERRC_Syntax 										; set E to error code.
(2)   26/    941E : 01                  	xae
(2)   27/    941F : 02                  	ccl 														; CY/L = 0 = Error
(2)   28/    9420 : 90 3A               	jmp 	CLE_Over 											; and exit
(2)   29/    9422 :                     ;
(2)   30/    9422 :                     ;	A-Z. AC contains 0-25
(2)   31/    9422 :                     ;
(2)   32/    9422 :                     CLE_SingleVariable:
(2)   33/    9422 : 02                  	ccl  														; work out variable address, and put on stack.
(2)   34/    9423 : F4 90               	adi 	Variables & 255
(2)   35/    9425 : CE FE               	st 		@-2(p2) 
(2)   36/    9427 : C4 0C               	ldi 	Variables / 256
(2)   37/    9429 : F4 00               	adi 	0
(2)   38/    942B : CA 01               	st 		1(p2)
(2)   39/    942D : C5 01               	ld 		@1(p1) 												; skip over the variable.
(2)   40/    942F : 90 0B               	jmp 	CLE_EvaluateAndWrite
(2)   41/    9431 :                     ;
(2)   42/    9431 :                     ;	LET is (H,L) = <expr>
(2)   43/    9431 :                     ;
(2)   44/    9431 :                     CLE_IsHL:
(2)   45/    9431 : (MACRO)             	lpi 	p3,EvaluateAddressPair-1 							; evaluate the (H,L)
(2)   45/    9431 : C4 96                       ldi     (EVALUATEADDRESSPAIR-1) / 256
(2)   45/    9433 : 37                          xpah    P3
(2)   45/    9434 : C4 A5                       ldi     (EVALUATEADDRESSPAIR-1) & 255
(2)   45/    9436 : 33                          xpal    P3
(2)   46/    9437 : 3F                  	xppc 	p3
(2)   47/    9438 : 94 22               	jp 		CLE_Over 											; exit on error
(2)   48/    943A : C6 FE               	ld 		@-2(p2) 											; the address to write to is now on TOS.
 AS V1.42 Beta [Bld 102] - source file minol.asm(let.asm) - page 22 - 1/12/2016 16:51:50


(2)   49/    943C :                     ;
(2)   50/    943C :                     ;	Evaluate and write.
(2)   51/    943C :                     ;
(2)   52/    943C :                     CLE_EvaluateAndWrite:
(2)   53/    943C : C5 01               	ld 		@1(p1) 												; skip over spaces
(2)   54/    943E : E4 20               	xri 	' '
(2)   55/    9440 : 98 FA               	jz 		CLE_EvaluateAndWrite
(2)   56/    9442 : E4 1D               	xri 	' '!'='												; check first non space character is =
(2)   57/    9444 : 9C D6               	jnz 	CLE_Syntax 											; if not, a syntax error.
(2)   58/    9446 :                     
(2)   59/    9446 : (MACRO)             	lpi 	p3,EvaluateExpression-1 							; set up to evaluate the RHS
(2)   59/    9446 : C4 95                       ldi     (EVALUATEEXPRESSION-1) / 256
(2)   59/    9448 : 37                          xpah    P3
(2)   59/    9449 : C4 52                       ldi     (EVALUATEEXPRESSION-1) & 255
(2)   59/    944B : 33                          xpal    P3
(2)   60/    944C : 3F                  	xppc 	p3													; do it
(2)   61/    944D : C6 02               	ld 		@2(p2) 												; remove target from TOS but leave data there
(2)   62/    944F : 06                  	csa 														; did that evaluate cause an error ?
(2)   63/    9450 : 94 0A               	jp 		CLE_Over 											; if so, exit with that error.
(2)   64/    9452 :                     
(2)   65/    9452 : C2 FE               	ld 		-2(p2) 												; load address into P3
(2)   66/    9454 : 33                  	xpal 	p3
(2)   67/    9455 : C2 FF               	ld 		-1(p2)
(2)   68/    9457 : 37                  	xpah 	p3
(2)   69/    9458 : 40                  	lde 														; get value
(2)   70/    9459 : CB 00               	st 		(p3) 												; store there
(2)   71/    945B : 03                  	scl 														; no error and exit.
(2)   72/    945C :                     
(2)   73/    945C :                     CLE_Over:
(1)   21/    945C :                     	include source\commands\if.asm								; IF
(2)    1/    945C :                     ; ****************************************************************************************************************
(2)    2/    945C :                     ; ****************************************************************************************************************
(2)    3/    945C :                     ;
(2)    4/    945C :                     ;												IF command
(2)    5/    945C :                     ;	
(2)    6/    945C :                     ; ****************************************************************************************************************
(2)    7/    945C :                     ; ****************************************************************************************************************
(2)    8/    945C :                     
(2)    9/    945C : 90 4D               	jmp		CIF_Over
(2)   10/    945E :                     
(2)   11/    945E :                     CMD_If:
(2)   12/    945E : 3F                  	xppc 	p3 													; calculate LHS of expr.
(2)   13/    945F : 94 4A               	jp 		CIF_Over											; exit on error.
(2)   14/    9461 : C1 00               	ld 		(p1)												; get the relative operator.
(2)   15/    9463 : E4 3D               	xri 	'='													; check it is =, < or #
(2)   16/    9465 : 98 0E               	jz 		CIF_Continue
(2)   17/    9467 : E4 1E               	xri 	'='!'#'
(2)   18/    9469 : 98 0A               	jz 		CIF_Continue
(2)   19/    946B : E4 1F               	xri 	'#'!'<'
(2)   20/    946D : 98 06               	jz 		CIF_Continue
(2)   21/    946F :                     ;
(2)   22/    946F :                     ;	Syntax error - bad relative operation.
(2)   23/    946F :                     ;
(2)   24/    946F :                     CIF_Syntax:
(2)   25/    946F : C4 05               	ldi	 	ERRC_Syntax											; report syntax error
(2)   26/    9471 : 01                  	xae
(2)   27/    9472 : 02                  	ccl
(2)   28/    9473 : 90 36               	jmp 	CIF_Over
(2)   29/    9475 :                     ;
(2)   30/    9475 :                     ;	Continue IF - have LHS in E.
 AS V1.42 Beta [Bld 102] - source file minol.asm(if.asm) - page 23 - 1/12/2016 16:51:50


(2)   31/    9475 :                     ;
(2)   32/    9475 :                     CIF_Continue:
(2)   33/    9475 : C5 01               	ld 		@1(p1) 												; reget operator, and save on stack
(2)   34/    9477 : CE FF               	st 		@-1(p2)
(2)   35/    9479 : 40                  	lde 														; save LHS on stack.
(2)   36/    947A : CE FF               	st 		@-1(p2)
(2)   37/    947C : 3F                  	xppc 	p3 													; evaluate the RHS of the expression
(2)   38/    947D : C6 02               	ld 		@2(p2) 												; drop operator and LHS but the values still there.
(2)   39/    947F : 06                  	csa 														; check for RHS error
(2)   40/    9480 : 94 29               	jp 		CIF_Over 											; and exit on error
(2)   41/    9482 : C2 FF               	ld 		-1(p2) 												; get operator
(2)   42/    9484 : E4 3C               	xri 	'<'
(2)   43/    9486 : 9C 09               	jnz 	CIF_Equality 										; if not less than it's an equality test e.g. # or =
(2)   44/    9488 :                     
(2)   45/    9488 :                     ; ****************************************************************************************************************
(2)   46/    9488 :                     ;												Less than test.
(2)   47/    9488 :                     ; ****************************************************************************************************************
(2)   48/    9488 :                     
(2)   49/    9488 : C2 FE               	ld 		-2(p2) 												; get LHS
(2)   50/    948A : 03                  	scl
(2)   51/    948B : 78                  	cae 														; subtract RHS.
(2)   52/    948C : 06                  	csa 														; get CY/L flag
(2)   53/    948D : D4 80               	ani 	0x80 												; now it is AC = 0 if < true.
(2)   54/    948F : 90 0D               	jmp 	CIF_TestIfZero
(2)   55/    9491 :                     
(2)   56/    9491 :                     ; ****************************************************************************************************************
(2)   57/    9491 :                     ;											Equal/Not Equal Test.
(2)   58/    9491 :                     ; ****************************************************************************************************************
(2)   59/    9491 :                     	
(2)   60/    9491 :                     CIF_Equality:
(2)   61/    9491 : C2 FE               	ld 		-2(p2) 												; get LHS
(2)   62/    9493 : 60                  	xre 														; compare to RHS. AC = 0 if *equal*
(2)   63/    9494 : 98 02               	jz 		CIF_Equality2
(2)   64/    9496 : C4 02               	ldi 	2 													; AC = 0 if *equal* 2 if *different*
(2)   65/    9498 :                     CIF_Equality2:
(2)   66/    9498 : 01                  	xae 														; save in E
(2)   67/    9499 : C2 FF               	ld 		-1(p2) 												; get operator.
(2)   68/    949B : D4 02               	ani 	2 													; is now 0 if '=' ($3D) 2 if '#' ($23)
(2)   69/    949D : 60                  	xre 														; XOR with the result. Now 0 if passes test.
(2)   70/    949E :                     
(2)   71/    949E :                     ; ****************************************************************************************************************
(2)   72/    949E :                     ;							Pass Test (e.g. execute statement following ;) if AC = 0
(2)   73/    949E :                     ; ****************************************************************************************************************
(2)   74/    949E :                     
(2)   75/    949E :                     CIF_TestIfZero:
(2)   76/    949E : 03                  	scl 														; set CY/L = No Error.
(2)   77/    949F : 9C 0A               	jnz 	CIF_Over 											; if non-zero then do next command as normal.
(2)   78/    94A1 :                     	
(2)   79/    94A1 : C1 00               	ld 		(p1) 												; get next character
(2)   80/    94A3 : E4 3B               	xri 	';'													; should be a semicolon
(2)   81/    94A5 : 9C C8               	jnz 	CIF_Syntax 											; if not error
(2)   82/    94A7 : C5 01               	ld 		@1(p1) 												; step over it.
(2)   83/    94A9 : 90 54               	jmp 	ExecuteFromAddressDirect 							; and run from here.
(2)   84/    94AB :                     
(2)   85/    94AB :                     CIF_Over:
(2)   86/    94AB :                     
(2)   87/    94AB :                     
(1)   22/    94AB :                     	include source\commands\goto_run.asm						; GOTO and RUN (has to be last, probably !)
(2)    1/    94AB :                     ; ****************************************************************************************************************
(2)    2/    94AB :                     ; ****************************************************************************************************************
 AS V1.42 Beta [Bld 102] - source file minol.asm(goto_run.asm) - page 24 - 1/12/2016 16:51:50


(2)    3/    94AB :                     ;
(2)    4/    94AB :                     ;												GOTO and RUN
(2)    5/    94AB :                     ;	
(2)    6/    94AB :                     ; ****************************************************************************************************************
(2)    7/    94AB :                     ; ****************************************************************************************************************
(2)    8/    94AB :                     
(2)    9/    94AB : 90 29               	jmp 	CRG_Over											; Skip over this command.
(2)   10/    94AD :                     
(2)   11/    94AD :                     ; ****************************************************************************************************************
(2)   12/    94AD :                     ;												GOTO command
(2)   13/    94AD :                     ; ****************************************************************************************************************
(2)   14/    94AD :                     
(2)   15/    94AD :                     CMD_Goto:	
(2)   16/    94AD : 3F                  	xppc 	p3 													; evaluate the line number to GOTO, in E
(2)   17/    94AE : 94 26               	jp 		CRG_Over 											; exit if error occurred
(2)   18/    94B0 : 40                  	lde 														; get line number
(2)   19/    94B1 : CA FF               	st 		-1(p2) 												; save below TOS.
(2)   20/    94B3 : (MACRO)             	lpi 	p1,ProgramBase 										; point P1 to program Base.
(2)   20/    94B3 : C4 10                       ldi     (PROGRAMBASE) / 256
(2)   20/    94B5 : 35                          xpah    P1
(2)   20/    94B6 : C4 00                       ldi     (PROGRAMBASE) & 255
(2)   20/    94B8 : 31                          xpal    P1
(2)   21/    94B9 :                     CRG_Find:
(2)   22/    94B9 : C1 00               	ld 		0(p1) 												; look at offset
(2)   23/    94BB : 94 06               	jp 		CRG_NotEnd											; if -ve then end of program.
(2)   24/    94BD : C4 01               	ldi 	ERRC_Label 											; return label error
(2)   25/    94BF : 01                  	xae
(2)   26/    94C0 : 02                  	ccl 														; set error flag
(2)   27/    94C1 : 90 13               	jmp 	CRG_Over
(2)   28/    94C3 :                     ;
(2)   29/    94C3 :                     CRG_NotEnd:
(2)   30/    94C3 : 01                  	xae 														; offset in E
(2)   31/    94C4 : C1 01               	ld 		1(p1) 												; get line number
(2)   32/    94C6 : E2 FF               	xor 	-1(p2) 												; go back if not required one.
(2)   33/    94C8 : 98 0A               	jz 		CRG_ExecuteFromP1									; if found, run from P1.
(2)   34/    94CA : C5 80               	ld 		@-0x80(p1) 											; go to next line
(2)   35/    94CC : 90 EB               	jmp 	CRG_Find 											; keep trying.
(2)   36/    94CE :                     ;
(2)   37/    94CE :                     ; ****************************************************************************************************************
(2)   38/    94CE :                     ;												RUN command
(2)   39/    94CE :                     ; ****************************************************************************************************************
(2)   40/    94CE :                     
(2)   41/    94CE :                     CMD_Run:	
(2)   42/    94CE : (MACRO)             	lpi 	p1,ProgramBase 										; start from first line of program
(2)   42/    94CE : C4 10                       ldi     (PROGRAMBASE) / 256
(2)   42/    94D0 : 35                          xpah    P1
(2)   42/    94D1 : C4 00                       ldi     (PROGRAMBASE) & 255
(2)   42/    94D3 : 31                          xpal    P1
(2)   43/    94D4 :                     CRG_ExecuteFromP1:
(2)   44/    94D4 : 90 0D               	jmp 	CheckLastCommandThenExecute 						; check if the last command and if not execute.
(2)   45/    94D6 :                     
(2)   46/    94D6 :                     CRG_Over:
(2)   47/    94D6 :                     
(1)   23/    94D6 :                     
(1)   24/    94D6 :                     ; ****************************************************************************************************************
(1)   25/    94D6 :                     ;								Command execution complete, check for error
(1)   26/    94D6 :                     ; ****************************************************************************************************************
(1)   27/    94D6 :                     
(1)   28/    94D6 :                     EndOfCommandExecution:
(1)   29/    94D6 : 06                  	csa 														; check CY/L error flag
 AS V1.42 Beta [Bld 102] - source file minol.asm(execute.asm) - page 25 - 1/12/2016 16:51:50


(1)   30/    94D7 : 94 12               	jp 		GotoCommandLine 									; if CY/L = 0 error so go to command line.
(1)   31/    94D9 :                     
(1)   32/    94D9 :                     ; ****************************************************************************************************************
(1)   33/    94D9 :                     ;	Come here to execute the instruction P1 points to, after having executed, e.g. skips forward to : or NULL
(1)   34/    94D9 :                     ; ****************************************************************************************************************
(1)   35/    94D9 :                     
(1)   36/    94D9 :                     ExecuteNextInstruction:
(1)   37/    94D9 : C5 01               	ld 		@1(p1) 												; get next and skip
(1)   38/    94DB : 98 06               	jz 		CheckLastCommandThenExecute							; if NULL, check if running mode and continue if so.
(1)   39/    94DD : E4 3A               	xri 	':'
(1)   40/    94DF : 9C F8               	jnz 	ExecuteNextInstruction 								; keep going until colon read.
(1)   41/    94E1 : 90 1C               	jmp 	ExecuteFromAddressDirect 							; run code from the address given.
(1)   42/    94E3 :                     ;
(1)   43/    94E3 :                     ;	Test to see if the line is not the last one (e.g. offset is +ve) and if so, execute its code.
(1)   44/    94E3 :                     ;
(1)   45/    94E3 :                     CheckLastCommandThenExecute:
(1)   46/    94E3 : C1 00               	ld 		(p1) 												; look at the offset to next.
(1)   47/    94E5 : 94 0C               	jp 		ExecuteFromCommandStart 							; if +ve value, execute the line here.
(1)   48/    94E7 :                     ;
(1)   49/    94E7 :                     ;	Have reached the end of the program. The buffer with typed commands has $FF on the end to 'fake' this.
(1)   50/    94E7 :                     ; 	e.g. when it reaches the end of that command it thinks it's dropped off the top of the program
(1)   51/    94E7 :                     ;
(1)   52/    94E7 : 03                  	scl 														; there is no error.
(1)   53/    94E8 : C4 FF               	ldi 	ERRC_End 											; set the error code to "End"
(1)   54/    94EA : 01                  	xae
(1)   55/    94EB :                     GotoCommandLine: 												; return to Command Line with CY/L = error and E = code
(1)   56/    94EB : 90 FE               	jmp 	GotoCommandLine										; if CY/L = 1 (no error) E not used.
(1)   57/    94ED :                     ;
(1)   58/    94ED :                     ;	Syntax error comes here.
(1)   59/    94ED :                     ;
(1)   60/    94ED :                     SyntaxError:
(1)   61/    94ED : C4 05               	ldi 	ERRC_Syntax
(1)   62/    94EF : 01                  	xae
(1)   63/    94F0 : 02                  	ccl
(1)   64/    94F1 : 90 F8               	jmp 	GotoCommandLine
(1)   65/    94F3 :                     
(1)   66/    94F3 :                     ; ****************************************************************************************************************
(1)   67/    94F3 :                     ;	  Execute from the instruction at P1 (preceded by offset, line number), which is known to be a valid line.
(1)   68/    94F3 :                     ; ****************************************************************************************************************
(1)   69/    94F3 :                     
(1)   70/    94F3 :                     ExecuteFromCommandStart:
(1)   71/    94F3 : (MACRO)             	lpi 	p3,CurrentLine 										; point P3 to the current line
(1)   71/    94F3 : C4 0C                       ldi     (CURRENTLINE) / 256
(1)   71/    94F5 : 37                          xpah    P3
(1)   71/    94F6 : C4 8D                       ldi     (CURRENTLINE) & 255
(1)   71/    94F8 : 33                          xpal    P3
(1)   72/    94F9 : C1 01               	ld 		1(p1) 												; read the line number 
(1)   73/    94FB : CB 00               	st 		(p3)												; and save it - current line # updated.
(1)   74/    94FD : C5 02               	ld 		@2(p1) 												; skip over offset (+0) line number (+1)
(1)   75/    94FF :                     
(1)   76/    94FF :                     ; ****************************************************************************************************************
(1)   77/    94FF :                     ;				Run command where the instruction is at P1 (e.g. it is an ASCIIZ string)
(1)   78/    94FF :                     ; ****************************************************************************************************************
(1)   79/    94FF :                     
(1)   80/    94FF :                     ExecuteFromAddressDirect:
(1)   81/    94FF : C5 01               	ld 		@1(p1) 												; read next character
(1)   82/    9501 : 98 E0               	jz 		CheckLastCommandThenExecute 						; if \0 then check for the next line.
(1)   83/    9503 : E4 20               	xri	 	' '
(1)   84/    9505 : 98 F8               	jz 		ExecuteFromAddressDirect 							; skip over spaces.
(1)   85/    9507 : E4 1A               	xri 	' '!':'												
 AS V1.42 Beta [Bld 102] - source file minol.asm(execute.asm) - page 26 - 1/12/2016 16:51:50


(1)   86/    9509 : 98 F4               	jz 		ExecuteFromAddressDirect 							; skip over colons.
(1)   87/    950B : E4 18               	xri 	':'!'"'					
(1)   88/    950D : 98 CA               	jz 		ExecuteNextInstruction 								; if double quote (comment) found go to next instruction.
(1)   89/    950F :                     ;
(1)   90/    950F :                     ;	Now look the command up in the command list.
(1)   91/    950F :                     ;
(1)   92/    950F : C1 FF               	ld 		-1(p1) 												; read first character of command again
(1)   93/    9511 : 01                  	xae 														; put in E.
(1)   94/    9512 : (MACRO)             	lpi 	p3,CommandList
(1)   94/    9512 : C4 96                       ldi     (COMMANDLIST) / 256
(1)   94/    9514 : 37                          xpah    P3
(1)   94/    9515 : C4 F0                       ldi     (COMMANDLIST) & 255
(1)   94/    9517 : 33                          xpal    P3
(1)   95/    9518 :                     EAFD_Search:
(1)   96/    9518 : C7 05               	ld 		@5(p3) 												; read first character and bump to next.
(1)   97/    951A : 98 2C               	jz 		EAFD_LETCode 										; if zero then give up.
(1)   98/    951C : 60                  	xre 														; same as first character ?
(1)   99/    951D : 9C F9               	jnz		EAFD_Search 										; no, keep looking.
(1)  100/    951F :                     
(1)  101/    951F : C3 FC               	ld 		-4(p3) 												; read 2nd character
(1)  102/    9521 : E1 00               	xor 	(p1) 												; compare against actual second character
(1)  103/    9523 : 9C F3               	jnz 	EAFD_Search
(1)  104/    9525 :                     ;
(1)  105/    9525 :                     ;	Skip over characters in the command, checking for NULL and : which would be syntax errors.
(1)  106/    9525 :                     ;
(1)  107/    9525 : C3 FD               	ld 		-3(p3) 												; number of characters to skip (one less than total as one skipped)
(1)  108/    9527 : CA FF               	st 		-1(p2) 												; temporary count.
(1)  109/    9529 :                     EAFD_Skip:
(1)  110/    9529 : C5 01               	ld 		@1(p1) 												; read a character and skip
(1)  111/    952B : 98 C0               	jz 		SyntaxError 										; if zero, then syntax error
(1)  112/    952D : E4 3A               	xri 	':'
(1)  113/    952F : 98 BC               	jz 		SyntaxError 										; if colon, then syntax error.
(1)  114/    9531 : BA FF               	dld 	-1(p2) 												; do it the requisite number of times.
(1)  115/    9533 : 9C F4               	jnz 	EAFD_Skip
(1)  116/    9535 :                     ;
(1)  117/    9535 :                     ;	Skip over any subsequent spaces
(1)  118/    9535 :                     ;
(1)  119/    9535 :                     EAFD_SkipSpaces:
(1)  120/    9535 : C5 01               	ld 		@1(p1) 												; check for spaces
(1)  121/    9537 : E4 20               	xri 	' '													; space found
(1)  122/    9539 : 98 FA               	jz 		EAFD_SkipSpaces
(1)  123/    953B : C5 FF               	ld 		@-1(p1) 											; undo last fetch so first character of next bit.
(1)  124/    953D :                     ;
(1)  125/    953D :                     ;	P1 is set up so execute the handler.
(1)  126/    953D :                     ;
(1)  127/    953D : C3 FE               	ld 		-2(p3)												; get execute LSB
(1)  128/    953F : 01                  	xae 														; save in E
(1)  129/    9540 : C3 FF               	ld 		-1(p3) 												; get execute MSB
(1)  130/    9542 : 37                  	xpah 	p3 													; put in P3.H
(1)  131/    9543 : 40                  	lde 														; copy E to P3.L
(1)  132/    9544 : 33                  	xpal 	p3
(1)  133/    9545 : 3F                  	xppc 	p3
(1)  134/    9546 : 90 0B               	jmp 	EvaluateExpression 									; is set up to have immediate evaluate call.
(1)  135/    9548 :                     ;
(1)  136/    9548 :                     ;	Couldn't find a command, so point P1 to first character, then call the LET code.
(1)  137/    9548 :                     ;
(1)  138/    9548 :                     EAFD_LETCode:
(1)  139/    9548 : C5 FF               	ld 		@-1(p1) 											; point P1 to first character of command.
(1)  140/    954A : (MACRO)             	lpi 	p3,CMD_Let-1 										; go execute LET with evaluate re-entrancy
(1)  140/    954A : C4 94                       ldi     (CMD_LET-1) / 256
 AS V1.42 Beta [Bld 102] - source file minol.asm(execute.asm) - page 27 - 1/12/2016 16:51:50


(1)  140/    954C : 37                          xpah    P3
(1)  140/    954D : C4 0A                       ldi     (CMD_LET-1) & 255
(1)  140/    954F : 33                          xpal    P3
(1)  141/    9550 : 3F                  	xppc 	p3
(1)  142/    9551 : 90 00               	jmp 	EvaluateExpression
(1)  143/    9553 :                     
(1)  144/    9553 :                     	include source\expression.asm 								; expression evaluator.
(2)    1/    9553 :                     ; ****************************************************************************************************************
(2)    2/    9553 :                     ; ****************************************************************************************************************
(2)    3/    9553 :                     ;
(2)    4/    9553 :                     ;												Expression Evaluation
(2)    5/    9553 :                     ;
(2)    6/    9553 :                     ; ****************************************************************************************************************
(2)    7/    9553 :                     ; ****************************************************************************************************************
(2)    8/    9553 :                     
(2)    9/    9553 :                     ; ****************************************************************************************************************
(2)   10/    9553 :                     ; ****************************************************************************************************************
(2)   11/    9553 :                     ;
(2)   12/    9553 :                     ;		Evaluate expression at P1. Return 	CY/L = 0 : Error 	E = Error Code
(2)   13/    9553 :                     ;											CY/L = 1 : Okay 	E = Result
(2)   14/    9553 :                     ;
(2)   15/    9553 :                     ;		Terms are : 	A-Z 			Variables
(2)   16/    9553 :                     ;						[0-9]+			Constants
(2)   17/    9553 :                     ;						! 				Random byte
(2)   18/    9553 :                     ;						'?'				Character constant
(2)   19/    9553 :                     ;						(<expr>,<expr>)	Read Memory location
(2)   20/    9553 :                     ;
(2)   21/    9553 :                     ; ****************************************************************************************************************
(2)   22/    9553 :                     ; ****************************************************************************************************************
(2)   23/    9553 :                     
(2)   24/    9553 : =0x1                EEX_PendingOp = 1 												; offset to pending operation
(2)   25/    9553 : =0x0                EEX_Value = 0 													; offset to value
(2)   26/    9553 :                     
(2)   27/    9553 :                     EvaluateExpression:
(2)   28/    9553 : (MACRO)             	pushp 	p3 													; save P3 on stack
(2)   28/    9553 : 37                          xpah    P3
(2)   28/    9554 : CE FF                       st              @-1(p2)
(2)   28/    9556 : 33                          xpal    P3
(2)   28/    9557 : CE FF                       st              @-1(p2)
(2)   29/    9559 : C4 2B               	ldi 	'+'													; push pending operation on stack
(2)   30/    955B : CE FF               	st 		@-1(p2)
(2)   31/    955D : C4 00               	ldi 	0 													; push current value on stack
(2)   32/    955F : CE FF               	st 		@-1(p2)												; effectively this puts 0+ on the front of the expression.
(2)   33/    9561 :                     
(2)   34/    9561 :                     ; ****************************************************************************************************************
(2)   35/    9561 :                     ;													Get Next Term
(2)   36/    9561 :                     ; ****************************************************************************************************************
(2)   37/    9561 :                     
(2)   38/    9561 :                     EEX_Term:
(2)   39/    9561 : (MACRO)             	lpi 	p3,Variables 										; point P3 to variables
(2)   39/    9561 : C4 0C                       ldi     (VARIABLES) / 256
(2)   39/    9563 : 37                          xpah    P3
(2)   39/    9564 : C4 90                       ldi     (VARIABLES) & 255
(2)   39/    9566 : 33                          xpal    P3
(2)   40/    9567 :                     EEX_NextChar:
(2)   41/    9567 : C1 00               	ld 		(p1) 												; look at character
(2)   42/    9569 : 98 4F               	jz 		EEX_TermError
(2)   43/    956B : C5 01               	ld 		@1(p1) 												; fetch and skip over.
(2)   44/    956D : E4 20               	xri 	' '													; is it space ?
(2)   45/    956F : 98 F6               	jz 		EEX_NextChar
 AS V1.42 Beta [Bld 102] - source file minol.asm(expression.asm) - page 28 - 1/12/2016 16:51:50


(2)   46/    9571 : E4 08               	xri 	' '!'('												; is it memory access ?
(2)   47/    9573 : 98 55               	jz 		EEX_MemoryAccess
(2)   48/    9575 : E4 09               	xri 	'('!'!'												; is it a random value ?
(2)   49/    9577 : 9C 1B               	jnz 	EEX_NotRandom
(2)   50/    9579 :                     
(2)   51/    9579 :                     ; ****************************************************************************************************************
(2)   52/    9579 :                     ;												Term is ! (random byte)
(2)   53/    9579 :                     ; ****************************************************************************************************************
(2)   54/    9579 :                     
(2)   55/    9579 :                     EEX_Random:
(2)   56/    9579 : 02                  	ccl 	
(2)   57/    957A : C3 FF               	ld 		RandomSeed+1-Variables(p3) 							; shift the seed right
(2)   58/    957C : 1F                  	rrl
(2)   59/    957D : CB FF               	st 		RandomSeed+1-Variables(p3)
(2)   60/    957F : 01                  	xae 														; put MSB in E
(2)   61/    9580 : C3 FE               	ld 		RandomSeed-Variables(p3)
(2)   62/    9582 : 1F                  	rrl
(2)   63/    9583 : CB FE               	st 		RandomSeed-Variables(p3)
(2)   64/    9585 : 60                  	xre 														; XOR E into LSB
(2)   65/    9586 : 01                  	xae
(2)   66/    9587 : 06                  	csa 														; if CY/L is zero
(2)   67/    9588 : D4 80               	ani 	0x80
(2)   68/    958A : 9C 06               	jnz 	EEX_NoTap 
(2)   69/    958C : C3 FF               	ld 		RandomSeed+1-Variables(p3) 							; XOR MSB with $B4
(2)   70/    958E : E4 B4               	xri 	0xB4
(2)   71/    9590 : CB FF               	st 		RandomSeed+1-Variables(p3)
(2)   72/    9592 :                     EEX_NoTap:
(2)   73/    9592 : 90 64               	jmp 	EEX_HaveTerm
(2)   74/    9594 :                     
(2)   75/    9594 :                     EEX_NotRandom:
(2)   76/    9594 : E4 06               	xri 	'!'!0x27											; is it a quote ?
(2)   77/    9596 : 9C 0F               	jnz 	EEX_NotQuote
(2)   78/    9598 :                     
(2)   79/    9598 :                     ; ****************************************************************************************************************
(2)   80/    9598 :                     ;													Term is '<char>'
(2)   81/    9598 :                     ; ****************************************************************************************************************
(2)   82/    9598 :                     
(2)   83/    9598 : C1 00               	ld 		(p1) 												; get character that is quoted
(2)   84/    959A : 98 1E               	jz 		EEX_TermError 										; if zero, error.
(2)   85/    959C : 01                  	xae 														; save in E if okay character.
(2)   86/    959D : C1 01               	ld 		1(p1) 												; get character after that
(2)   87/    959F : E4 27               	xri 	0x27 												; is it a quote ?
(2)   88/    95A1 : 9C 17               	jnz 	EEX_TermError
(2)   89/    95A3 : C5 02               	ld 		@2(p1) 												; skip over character and quote
(2)   90/    95A5 : 90 51               	jmp 	EEX_HaveTerm 										; and execute as if a legal term
(2)   91/    95A7 :                     
(2)   92/    95A7 :                     ; ****************************************************************************************************************
(2)   93/    95A7 :                     ;									Not 'x' or !, so test for 0-9 and A-Z
(2)   94/    95A7 :                     ; ****************************************************************************************************************
(2)   95/    95A7 :                     
(2)   96/    95A7 :                     EEX_NotQuote:
(2)   97/    95A7 : C1 FF               	ld 		-1(p1)												; get old character.
(2)   98/    95A9 : 02                  	ccl
(2)   99/    95AA : F4 A5               	adi 	255-'Z'												; if >= 'Z' then error.										
(2)  100/    95AC : 94 0C               	jp 		EEX_TermError
(2)  101/    95AE : F4 1A               	adi 	26 													; will be 0..25 if A..Z
(2)  102/    95B0 : 94 42               	jp 		EEX_Variable 										; so do as a variable.
(2)  103/    95B2 : F4 07               	adi 	'A'-1-'9'											; check if > 9
(2)  104/    95B4 : 94 04               	jp 		EEX_TermError
(2)  105/    95B6 : F4 0A               	adi 	10 													; if 0-9
 AS V1.42 Beta [Bld 102] - source file minol.asm(expression.asm) - page 29 - 1/12/2016 16:51:50


(2)  106/    95B8 : 94 1D               	jp 		EEX_Constant
(2)  107/    95BA :                     
(2)  108/    95BA :                     ; ****************************************************************************************************************
(2)  109/    95BA :                     ;													 Error Exit.
(2)  110/    95BA :                     ; ****************************************************************************************************************
(2)  111/    95BA :                     
(2)  112/    95BA :                     EEX_TermError:
(2)  113/    95BA : C4 04               	ldi 	ERRC_Term 											; put term error in A
(2)  114/    95BC :                     EEX_Error:
(2)  115/    95BC : 01                  	xae 														; put error code in E
(2)  116/    95BD : 02                  	ccl 														; clear CY/L indicating error
(2)  117/    95BE :                     EEX_Exit:
(2)  118/    95BE : C6 02               	ld 		@2(p2) 												; throw the pending operation and value
(2)  119/    95C0 : (MACRO)             	pullp 	p3 													; restore P3
(2)  119/    95C0 : C6 01                       ld              @1(p2)
(2)  119/    95C2 : 33                          xpal    P3
(2)  119/    95C3 : C6 01                       ld              @1(p2)
(2)  119/    95C5 : 37                          xpah    P3
(2)  120/    95C6 : 06                  	csa 														; put CY/L in A bit 7
(2)  121/    95C7 : 3F                  	xppc 	p3 													; and exit
(2)  122/    95C8 : 90 89               	jmp 	EvaluateExpression 									; make re-entrant
(2)  123/    95CA :                     
(2)  124/    95CA :                     ; ****************************************************************************************************************
(2)  125/    95CA :                     ;										Handle (<expr>,<expr>)
(2)  126/    95CA :                     ; ****************************************************************************************************************
(2)  127/    95CA :                     
(2)  128/    95CA :                     EEX_MemoryAccess:
(2)  129/    95CA : C5 FF               	ld 		@-1(p1) 											; point to the (
(2)  130/    95CC : (MACRO)             	lpi 	p3,EvaluateAddressPair-1 							; call the evaluate/read of (h,l)
(2)  130/    95CC : C4 96                       ldi     (EVALUATEADDRESSPAIR-1) / 256
(2)  130/    95CE : 37                          xpah    P3
(2)  130/    95CF : C4 A5                       ldi     (EVALUATEADDRESSPAIR-1) & 255
(2)  130/    95D1 : 33                          xpal    P3
(2)  131/    95D2 : 3F                  	xppc 	p3
(2)  132/    95D3 : 94 E9               	jp 		EEX_Exit 											; error occurred, so exit with it.
(2)  133/    95D5 : 90 21               	jmp 	EEX_HaveTerm
(2)  134/    95D7 :                     
(2)  135/    95D7 :                     ; ****************************************************************************************************************
(2)  136/    95D7 :                     ;								Handle constant, first digit value is in A
(2)  137/    95D7 :                     ; ****************************************************************************************************************
(2)  138/    95D7 :                     
(2)  139/    95D7 :                     EEX_Constant:
(2)  140/    95D7 : 01                  	xae 														; put first digit value in E
(2)  141/    95D8 :                     EEX_ConstantLoop:
(2)  142/    95D8 : C1 00               	ld 		(p1) 												; get next character.
(2)  143/    95DA : 02                  	ccl
(2)  144/    95DB : F4 C6               	adi 	255-'9' 											; if >= 9 term is too large.
(2)  145/    95DD : 94 19               	jp 		EEX_HaveTerm
(2)  146/    95DF : F4 8A               	adi 	10+128
(2)  147/    95E1 : 94 15               	jp 		EEX_HaveTerm
(2)  148/    95E3 : 02                  	ccl
(2)  149/    95E4 : 40                  	lde 														; A = n
(2)  150/    95E5 : 70                  	ade 														; A = n * 2
(2)  151/    95E6 : 70                  	ade 														; A = n * 3
(2)  152/    95E7 : 70                  	ade 														; A = n * 4
(2)  153/    95E8 : 70                  	ade 														; A = n * 5
(2)  154/    95E9 : 01                  	xae 														; E = n * 5
(2)  155/    95EA : C5 01               	ld 		@1(p1) 												; read character convert to number
(2)  156/    95EC : D4 0F               	ani 	0x0F
(2)  157/    95EE : 02                  	ccl
 AS V1.42 Beta [Bld 102] - source file minol.asm(expression.asm) - page 30 - 1/12/2016 16:51:50


(2)  158/    95EF : 70                  	ade 														; Add n*5 twice
(2)  159/    95F0 : 70                  	ade 
(2)  160/    95F1 : 01                  	xae
(2)  161/    95F2 : 90 E4               	jmp 	EEX_ConstantLoop
(2)  162/    95F4 :                     
(2)  163/    95F4 :                     
(2)  164/    95F4 :                     ; ****************************************************************************************************************
(2)  165/    95F4 :                     ;									Access variable, variable id (0-25) in A
(2)  166/    95F4 :                     ; ****************************************************************************************************************
(2)  167/    95F4 :                     
(2)  168/    95F4 :                     EEX_Variable:
(2)  169/    95F4 : 01                  	xae 														; put value 0-25 in E
(2)  170/    95F5 : C3 80               	ld 		-0x80(p3) 											; load using E as index
(2)  171/    95F7 : 01                  	xae 														; put in E
(2)  172/    95F8 :                     
(2)  173/    95F8 :                     ; ****************************************************************************************************************
(2)  174/    95F8 :                     ;										Have the right term in E, process it
(2)  175/    95F8 :                     ; ****************************************************************************************************************
(2)  176/    95F8 :                     
(2)  177/    95F8 :                     EEX_HaveTerm:
(2)  178/    95F8 : C2 01               	ld 		EEX_PendingOp(p2) 									; get pending operation.
(2)  179/    95FA : E4 2B               	xri 	'+'
(2)  180/    95FC : 9C 06               	jnz 	EEX_NotAdd
(2)  181/    95FE :                     
(2)  182/    95FE :                     ; ****************************************************************************************************************
(2)  183/    95FE :                     ;												Add Right Term to Value
(2)  184/    95FE :                     ; ****************************************************************************************************************
(2)  185/    95FE : 02                  	ccl
(2)  186/    95FF : C2 00               	ld 		EEX_Value(p2)										; get value
(2)  187/    9601 : 70                  	ade 														; add right
(2)  188/    9602 : 90 08               	jmp 	EEX_SaveAndExit 									; save and exit
(2)  189/    9604 :                     
(2)  190/    9604 :                     EEX_NotAdd:
(2)  191/    9604 : E4 06               	xri 	'+'!'-'
(2)  192/    9606 : 9C 12               	jnz		EEX_NotSubtract
(2)  193/    9608 :                     
(2)  194/    9608 :                     ; ****************************************************************************************************************
(2)  195/    9608 :                     ;											 Subtract Right Term from Value
(2)  196/    9608 :                     ; ****************************************************************************************************************
(2)  197/    9608 : 03                  	scl
(2)  198/    9609 : C2 00               	ld 		EEX_Value(p2)										; get value
(2)  199/    960B : 78                  	cae 														; subtract right
(2)  200/    960C :                     EEX_SaveAndExit:
(2)  201/    960C : CA 00               	st 		EEX_Value(p2) 										; save value back
(2)  202/    960E : 90 30               	jmp 	EEX_CheckNextOperation 								; and exit, look for next operator.
(2)  203/    9610 :                     
(2)  204/    9610 :                     EEX_Divide_Zero:												; handle divide by zero error.
(2)  205/    9610 : C4 07               	ldi 	ERRC_DivZero
(2)  206/    9612 : 90 A8               	jmp 	EEX_Error
(2)  207/    9614 :                     
(2)  208/    9614 :                     EEX_EndExpression:
(2)  209/    9614 : C2 00               	ld 		EEX_Value(p2) 										; get current value
(2)  210/    9616 : 01                  	xae 														; put in E
(2)  211/    9617 : 03                  	scl 														; set CY/L indicating expression okay.
(2)  212/    9618 : 90 A4               	jmp 	EEX_Exit 											; and exit.
(2)  213/    961A :                     
(2)  214/    961A :                     EEX_NotSubtract:
(2)  215/    961A : E4 07               	xri 	'-'!'*'
(2)  216/    961C : 9C 45               	jnz 	EEX_Divide
(2)  217/    961E :                     
 AS V1.42 Beta [Bld 102] - source file minol.asm(expression.asm) - page 31 - 1/12/2016 16:51:50


(2)  218/    961E :                     ; ****************************************************************************************************************
(2)  219/    961E :                     ;											 Multiply Right Term into Value
(2)  220/    961E :                     ; ****************************************************************************************************************
(2)  221/    961E :                     
(2)  222/    961E : C2 00               	ld 		EEX_Value(p2) 										; a = left value
(2)  223/    9620 : CA 01               	st 		1(p2)
(2)  224/    9622 : C4 00               	ldi 	0													; res = 0(p2)
(2)  225/    9624 : CA 00               	st 		0(p2) 												; clear it.
(2)  226/    9626 :                     EEX_MultiplyLoop:
(2)  227/    9626 : 40                  	lde  														; if B == 0 then we are done.
(2)  228/    9627 : 98 17               	jz 		EEX_CheckNextOperation
(2)  229/    9629 : D4 01               	ani 	1 													; if B LSB is non zero.
(2)  230/    962B : 98 07               	jz 		EEX_Multiply_B0IsZero
(2)  231/    962D : C2 00               	ld 		0(p2) 												; add A to Result
(2)  232/    962F : 02                  	ccl
(2)  233/    9630 : F2 01               	add 	1(p2)
(2)  234/    9632 : CA 00               	st 		0(p2)
(2)  235/    9634 :                     EEX_Multiply_B0IsZero:
(2)  236/    9634 : 40                  	lde 														; shift B right
(2)  237/    9635 : 1C                  	sr
(2)  238/    9636 : 01                  	xae
(2)  239/    9637 : C2 01               	ld 		1(p2) 												; shift A left
(2)  240/    9639 : 02                  	ccl
(2)  241/    963A : F2 01               	add 	1(p2)
(2)  242/    963C : CA 01               	st 		1(p2)
(2)  243/    963E : 90 E6               	jmp 	EEX_MultiplyLoop
(2)  244/    9640 :                     
(2)  245/    9640 :                     ; ****************************************************************************************************************
(2)  246/    9640 :                     ;											Check next operation
(2)  247/    9640 :                     ; ****************************************************************************************************************
(2)  248/    9640 :                     
(2)  249/    9640 :                     EEX_CheckNextOperation:
(2)  250/    9640 : C5 01               	ld 		@1(p1)												; skip over spaces
(2)  251/    9642 : E4 20               	xri 	' '
(2)  252/    9644 : 98 FA               	jz 		EEX_CheckNextOperation
(2)  253/    9646 : C5 FF               	ld 		@-1(p1)												; get operator
(2)  254/    9648 : E4 2B               	xri 	'+'													; check if + - * /
(2)  255/    964A : 98 0C               	jz 		EEX_FoundOperator
(2)  256/    964C : E4 06               	xri 	'+'!'-'
(2)  257/    964E : 98 08               	jz 		EEX_FoundOperator
(2)  258/    9650 : E4 07               	xri 	'-'!'*'
(2)  259/    9652 : 98 04               	jz 		EEX_FoundOperator
(2)  260/    9654 : E4 05               	xri 	'*'!'/'
(2)  261/    9656 : 9C BC               	jnz 	EEX_EndExpression
(2)  262/    9658 :                     
(2)  263/    9658 :                     EEX_FoundOperator:
(2)  264/    9658 : C5 01               	ld  	@1(p1) 												; get and skip operator
(2)  265/    965A : CA 01               	st 		EEX_PendingOp(p2)									; save then pending operator
(2)  266/    965C : (MACRO)             	lpi 	p3,EEX_Term-1
(2)  266/    965C : C4 95                       ldi     (EEX_TERM-1) / 256
(2)  266/    965E : 37                          xpah    P3
(2)  266/    965F : C4 60                       ldi     (EEX_TERM-1) & 255
(2)  266/    9661 : 33                          xpal    P3
(2)  267/    9662 : 3F                  	xppc 	p3
(2)  268/    9663 :                     
(2)  269/    9663 :                     ; ****************************************************************************************************************
(2)  270/    9663 :                     ;											 Divide Right Term into Value
(2)  271/    9663 :                     ; ****************************************************************************************************************
(2)  272/    9663 :                     
(2)  273/    9663 :                     EEX_Divide:
 AS V1.42 Beta [Bld 102] - source file minol.asm(expression.asm) - page 32 - 1/12/2016 16:51:50


(2)  274/    9663 : 40                  	lde 														; if denominator zero, error 2.
(2)  275/    9664 : 98 AA               	jz 		EEX_Divide_Zero
(2)  276/    9666 : C2 00               	ld 		0(p2) 												; numerator into 1(p2)
(2)  277/    9668 : CA 01               	st 		1(p2) 												; denominator is in E
(2)  278/    966A : C4 00               	ldi 	0
(2)  279/    966C : CA 00               	st 		0(p2)												; quotient in 0(p2)
(2)  280/    966E : CA FF               	st 		-1(p2) 												; remainder in -1(p2)
(2)  281/    9670 : C4 80               	ldi 	0x80 									
(2)  282/    9672 : CA FE               	st 		-2(p2) 												; bit in -2(p2)
(2)  283/    9674 :                     
(2)  284/    9674 :                     EEX_Divide_Loop:
(2)  285/    9674 : C2 FE               	ld 		-2(p2) 												; exit if bit = 0,we've finished.
(2)  286/    9676 : 98 C8               	jz 		EEX_CheckNextOperation
(2)  287/    9678 :                     
(2)  288/    9678 : 02                  	ccl 	 													; shift remainder left.
(2)  289/    9679 : C2 FF               	ld 		-1(p2)
(2)  290/    967B : F2 FF               	add 	-1(p2)
(2)  291/    967D : CA FF               	st 		-1(p2)
(2)  292/    967F :                     
(2)  293/    967F : C2 01               	ld 		1(p2)												; get numerator.
(2)  294/    9681 : 94 02               	jp 		EEX_Divide_Numerator_Positive
(2)  295/    9683 : AA FF               	ild 	-1(p2)  											; if numerator -ve, increment remainder.
(2)  296/    9685 :                     EEX_Divide_Numerator_Positive:
(2)  297/    9685 :                     
(2)  298/    9685 : C2 FF               	ld 		-1(p2) 												; calculate remainder - denominator
(2)  299/    9687 : 03                  	scl
(2)  300/    9688 : 78                  	cae 
(2)  301/    9689 : CA FD               	st 		-3(p2) 												; save in temp -3(p2)
(2)  302/    968B : 06                  	csa 														; if temp >= 0, CY/L is set
(2)  303/    968C : 94 0A               	jp 		EEX_Divide_Temp_Positive
(2)  304/    968E :                     
(2)  305/    968E : C2 FD               	ld 		-3(p2) 												; copy temp to remainder
(2)  306/    9690 : CA FF               	st 		-1(p2)
(2)  307/    9692 : C2 FE               	ld 		-2(p2) 												; or bit into quotient
(2)  308/    9694 : DA 00               	or 		0(p2)
(2)  309/    9696 : CA 00               	st 		0(p2)
(2)  310/    9698 :                     EEX_Divide_Temp_Positive:
(2)  311/    9698 : C2 FE               	ld 		-2(p2) 												; shift bit right
(2)  312/    969A : 1C                  	sr
(2)  313/    969B : CA FE               	st 		-2(p2)
(2)  314/    969D :                     
(2)  315/    969D : C2 01               	ld 		1(p2)												; shift numerator positive
(2)  316/    969F : 02                  	ccl
(2)  317/    96A0 : F2 01               	add 	1(p2)
(2)  318/    96A2 : CA 01               	st 		1(p2)
(2)  319/    96A4 : 90 CE               	jmp 	EEX_Divide_Loop
(2)  320/    96A6 :                     
(2)  321/    96A6 :                     ; ****************************************************************************************************************
(2)  322/    96A6 :                     ; ****************************************************************************************************************
(2)  323/    96A6 :                     ;
(2)  324/    96A6 :                     ;	Evaluate an address pair at P1 e.g. (<expr>,<expr>).  Returns as for expression, but stack-2, stack-1 are
(2)  325/    96A6 :                     ;	the address (the data at that address is in E if no error occurs). Used for reading and writing.
(2)  326/    96A6 :                     ;
(2)  327/    96A6 :                     ; ****************************************************************************************************************
(2)  328/    96A6 :                     ; ****************************************************************************************************************
(2)  329/    96A6 :                     
(2)  330/    96A6 :                     EvaluateAddressPair:
(2)  331/    96A6 : C6 FE               	ld 		@-2(p2)												; make space to store HL
(2)  332/    96A8 : (MACRO)             	pushp 	p3 													; save return address.
(2)  332/    96A8 : 37                          xpah    P3
 AS V1.42 Beta [Bld 102] - source file minol.asm(expression.asm) - page 33 - 1/12/2016 16:51:50


(2)  332/    96A9 : CE FF                       st              @-1(p2)
(2)  332/    96AB : 33                          xpal    P3
(2)  332/    96AC : CE FF                       st              @-1(p2)
(2)  333/    96AE : C1 00               	ld 		(p1) 												; check first is '(', exit with term error if not
(2)  334/    96B0 : E4 28               	xri 	'('
(2)  335/    96B2 : 9C 2E               	jnz 	EAP_Error
(2)  336/    96B4 : C5 01               	ld 		@1(p1)												; skip over it.
(2)  337/    96B6 : (MACRO)             	lpi 	p3,EvaluateExpression-1 							; evaluate H
(2)  337/    96B6 : C4 95                       ldi     (EVALUATEEXPRESSION-1) / 256
(2)  337/    96B8 : 37                          xpah    P3
(2)  337/    96B9 : C4 52                       ldi     (EVALUATEEXPRESSION-1) & 255
(2)  337/    96BB : 33                          xpal    P3
(2)  338/    96BC : 3F                  	xppc 	p3
(2)  339/    96BD : 94 27               	jp 		EAP_Exit 											; exit if failed
(2)  340/    96BF : 40                  	lde 														; store H at 3(P2)
(2)  341/    96C0 : CA 03               	st 		3(p2)
(2)  342/    96C2 : C1 00               	ld 		(p1) 												; check for ','
(2)  343/    96C4 : E4 2C               	xri 	','
(2)  344/    96C6 : 9C 1A               	jnz 	EAP_Error											; fail if not present
(2)  345/    96C8 : C5 01               	ld 		@1(p1)												; skip over comma
(2)  346/    96CA : 3F                  	xppc 	p3 													; evaluate L
(2)  347/    96CB : 94 19               	jp 		EAP_Exit 											; exit on error
(2)  348/    96CD : 40                  	lde 														; store L at 2(P2)
(2)  349/    96CE : CA 02               	st 		2(p2)
(2)  350/    96D0 : 33                  	xpal 	p3 													; and put in P3.L for later
(2)  351/    96D1 : C1 00               	ld 		(p1) 												; check for ')'
(2)  352/    96D3 : E4 29               	xri 	')'
(2)  353/    96D5 : 9C 0B               	jnz 	EAP_Error
(2)  354/    96D7 : C5 01               	ld 		@1(p1) 												; skip over close bracket
(2)  355/    96D9 : C2 03               	ld 		3(p2) 												; put 3(P2) in P3.H
(2)  356/    96DB : 37                  	xpah 	p3
(2)  357/    96DC : C3 00               	ld 		(p3) 												; read address
(2)  358/    96DE : 01                  	xae 														; put in E
(2)  359/    96DF : 03                  	scl 														; set carry to indicate okay
(2)  360/    96E0 : 90 04               	jmp 	EAP_Exit 											; and exit.
(2)  361/    96E2 :                     ;
(2)  362/    96E2 :                     EAP_Error:
(2)  363/    96E2 : C4 04               	ldi 	ERRC_TERM 											; set error up
(2)  364/    96E4 : 01                  	xae
(2)  365/    96E5 : 02                  	ccl
(2)  366/    96E6 :                     ;
(2)  367/    96E6 :                     EAP_Exit:														; exit
(2)  368/    96E6 : (MACRO)             	pullp 	p3 													; restore P3
(2)  368/    96E6 : C6 01                       ld              @1(p2)
(2)  368/    96E8 : 33                          xpal    P3
(2)  368/    96E9 : C6 01                       ld              @1(p2)
(2)  368/    96EB : 37                          xpah    P3
(2)  369/    96EC : C6 02               	ld 		@2(p2) 												; drop the H L address store
(2)  370/    96EE : 06                  	csa 														; A bit 7 = CY/L
(2)  371/    96EF : 3F                  	xppc 	p3
(2)  372/    96F0 :                     
(2)  373/    96F0 :                     
(1)  145/    96F0 :                     
(1)  146/    96F0 :                     ; ****************************************************************************************************************
(1)  147/    96F0 :                     ;		Command look up table - should be ordered by degree of usage, and OS things (e.g. LIST) at the end
(1)  148/    96F0 :                     ; ****************************************************************************************************************
(1)  149/    96F0 :                     
(1)  150/    96F0 :                     CommandList:
(1)  151/    96F0 : (MACRO)             	cmd 	'L','E',3,CMD_Let 									; LET var|(h,l) = <expr>
(1)  151/    96F0 : 4C 45                       db              'L','E'                                                                                           ; first and second characters
 AS V1.42 Beta [Bld 102] - source file minol.asm(execute.asm) - page 34 - 1/12/2016 16:51:50


(1)  151/    96F2 : 02                          db              (3)-1                                                                                      ; 3 -1 (first char already skipped)
(1)  151/    96F3 : 0A 94                       dw              (CMD_LET)-1                                                                                        ; execution point for prefetch.
(1)  152/    96F5 : (MACRO)             	cmd 	'I','F',2,CMD_If 									; If [expr][=|#|<][expr]; [statement]
(1)  152/    96F5 : 49 46                       db              'I','F'                                                                                           ; first and second characters
(1)  152/    96F7 : 01                          db              (2)-1                                                                                      ; 2 -1 (first char already skipped)
(1)  152/    96F8 : 5D 94                       dw              (CMD_IF)-1                                                                                        ; execution point for prefetch.
(1)  153/    96FA : (MACRO)             	cmd 	'G','O',4,CMD_Goto									; GOTO [line number]
(1)  153/    96FA : 47 4F                       db              'G','O'                                                                                           ; first and second characters
(1)  153/    96FC : 03                          db              (4)-1                                                                                      ; 4 -1 (first char already skipped)
(1)  153/    96FD : AC 94                       dw              (CMD_GOTO)-1                                                                                        ; execution point for prefetch.
(1)  154/    96FF : (MACRO)             	cmd 	'C','A',4,CMD_Call									; CALL (high,low)
(1)  154/    96FF : 43 41                       db              'C','A'                                                                                           ; first and second characters
(1)  154/    9701 : 03                          db              (4)-1                                                                                      ; 4 -1 (first char already skipped)
(1)  154/    9702 : E1 93                       dw              (CMD_CALL)-1                                                                                        ; execution point for prefetch.
(1)  155/    9704 : (MACRO)             	cmd 	'P','R',2,CMD_Print 								; PRINT ["<text>"|<expr>|$(h,l)][,....][;]
(1)  155/    9704 : 50 52                       db              'P','R'                                                                                           ; first and second characters
(1)  155/    9706 : 01                          db              (2)-1                                                                                      ; 2 -1 (first char already skipped)
(1)  155/    9707 : 5E 93                       dw              (CMD_PRINT)-1                                                                                        ; execution point for prefetch.
(1)  156/    9709 : (MACRO)             	cmd 	'C','L',5,CMD_Clear									; CLEAR
(1)  156/    9709 : 43 4C                       db              'C','L'                                                                                           ; first and second characters
(1)  156/    970B : 04                          db              (5)-1                                                                                      ; 5 -1 (first char already skipped)
(1)  156/    970C : 49 93                       dw              (CMD_CLEAR)-1                                                                                        ; execution point for prefetch.
(1)  157/    970E : (MACRO)             	cmd 	'I','N',2,CMD_In 									; IN [l-expr],$(H,L)
(1)  157/    970E : 49 4E                       db              'I','N'                                                                                           ; first and second characters
(1)  157/    9710 : 01                          db              (2)-1                                                                                      ; 2 -1 (first char already skipped)
(1)  157/    9711 : A9 92                       dw              (CMD_IN)-1                                                                                        ; execution point for prefetch.
(1)  158/    9713 : (MACRO)             	cmd 	'E','N',3,CMD_End 									; END
(1)  158/    9713 : 45 4E                       db              'E','N'                                                                                           ; first and second characters
(1)  158/    9715 : 02                          db              (3)-1                                                                                      ; 3 -1 (first char already skipped)
(1)  158/    9716 : A3 92                       dw              (CMD_END)-1                                                                                        ; execution point for prefetch.
(1)  159/    9718 : (MACRO)             	cmd 	'N','E',3,CMD_New 									; NEW
(1)  159/    9718 : 4E 45                       db              'N','E'                                                                                           ; first and second characters
(1)  159/    971A : 02                          db              (3)-1                                                                                      ; 3 -1 (first char already skipped)
(1)  159/    971B : 99 92                       dw              (CMD_NEW)-1                                                                                        ; execution point for prefetch.
(1)  160/    971D : (MACRO)             	cmd 	'R','U',3,CMD_Run									; RUN
(1)  160/    971D : 52 55                       db              'R','U'                                                                                           ; first and second characters
(1)  160/    971F : 02                          db              (3)-1                                                                                      ; 3 -1 (first char already skipped)
(1)  160/    9720 : CD 94                       dw              (CMD_RUN)-1                                                                                        ; execution point for prefetch.
(1)  161/    9722 : (MACRO)             	cmd 	'L','I',4,CMD_List 									; LIST
(1)  161/    9722 : 4C 49                       db              'L','I'                                                                                           ; first and second characters
(1)  161/    9724 : 03                          db              (4)-1                                                                                      ; 4 -1 (first char already skipped)
(1)  161/    9725 : 59 92                       dw              (CMD_LIST)-1                                                                                        ; execution point for prefetch.
(1)  162/    9727 : (MACRO)             	cmd 	'O','S',2,CMD_OS 									; OS
(1)  162/    9727 : 4F 53                       db              'O','S'                                                                                           ; first and second characters
(1)  162/    9729 : 01                          db              (2)-1                                                                                      ; 2 -1 (first char already skipped)
(1)  162/    972A : 50 92                       dw              (CMD_OS)-1                                                                                        ; execution point for prefetch.
(1)  163/    972C : 00                  	db 		0
(1)  164/    972D :                     
(1)  165/    972D :                     ; Done:	GOTO, RUN, CLEAR, NEW, END, OS, CALL, LET (and optional version),IF, LIST., PR
(1)  166/    972D :                     ; Not Done: IN
      78/    972D :                     	include source\manager.asm 									; manage program lines.
(1)    1/    972D :                     ; ****************************************************************************************************************
(1)    2/    972D :                     ; ****************************************************************************************************************
(1)    3/    972D :                     ;
(1)    4/    972D :                     ;										Insert / Delete Program Line
(1)    5/    972D :                     ;
(1)    6/    972D :                     ; ****************************************************************************************************************
(1)    7/    972D :                     ; ****************************************************************************************************************
(1)    8/    972D :                     
(1)    9/    972D :                     ; ****************************************************************************************************************
 AS V1.42 Beta [Bld 102] - source file minol.asm(manager.asm) - page 35 - 1/12/2016 16:51:50


(1)   10/    972D :                     ; ****************************************************************************************************************
(1)   11/    972D :                     ;
(1)   12/    972D :                     ;						Delete program line 'E'. If program line does not exist, has no effect.
(1)   13/    972D :                     ;
(1)   14/    972D :                     ;	Sets up P3 to call insert program line next.
(1)   15/    972D :                     ; ****************************************************************************************************************
(1)   16/    972D :                     ; ****************************************************************************************************************
(1)   17/    972D :                     
(1)   18/    972D :                     DeleteLine:
(1)   19/    972D : (MACRO)             	pushp	p3 													; save P3
(1)   19/    972D : 37                          xpah    P3
(1)   19/    972E : CE FF                       st              @-1(p2)
(1)   19/    9730 : 33                          xpal    P3
(1)   19/    9731 : CE FF                       st              @-1(p2)
(1)   20/    9733 : 40                  	lde 														; push E on stack
(1)   21/    9734 : CE FF               	st 		@-1(p2)
(1)   22/    9736 :                     ;
(1)   23/    9736 :                     ;	First find the line in question.
(1)   24/    9736 :                     ;
(1)   25/    9736 : (MACRO)             	lpi 	p3,ProgramBase 										; first, look for the line.
(1)   25/    9736 : C4 10                       ldi     (PROGRAMBASE) / 256
(1)   25/    9738 : 37                          xpah    P3
(1)   25/    9739 : C4 00                       ldi     (PROGRAMBASE) & 255
(1)   25/    973B : 33                          xpal    P3
(1)   26/    973C :                     DLN_Search:
(1)   27/    973C : C3 00               	ld 		(p3)												; look at offset
(1)   28/    973E : D4 80               	ani 	0x80
(1)   29/    9740 : 9C 15               	jnz 	DLN_Exit 											; if -ve then end of program so exit.
(1)   30/    9742 :                     
(1)   31/    9742 : C3 00               	ld 		(p3) 												; reload offset to next.
(1)   32/    9744 : 01                  	xae 														; put offset in E
(1)   33/    9745 : C3 01               	ld 		1(p3) 												; read line number
(1)   34/    9747 : E2 00               	xor 	(p2)												; is it the required line number
(1)   35/    9749 : 98 04               	jz 		DLN_Delete  										; if so, delete line.
(1)   36/    974B : C7 80               	ld 		@-0x80(p3) 											; use E as offset to next.
(1)   37/    974D : 90 ED               	jmp 	DLN_Search 											; and try next one.
(1)   38/    974F :                     ;
(1)   39/    974F :                     DLN_Delete:
(1)   40/    974F : C3 80               	ld 		-0x80(p3) 											; read ahead
(1)   41/    9751 : CF 01               	st 		@1(p3) 												; save here and bump
(1)   42/    9753 : E4 FF               	xri 	0xFF 												; until 0xFF is copied, which is end of program.
(1)   43/    9755 : 9C F8               	jnz 	DLN_Delete
(1)   44/    9757 :                     ;
(1)   45/    9757 :                     DLN_Exit:
(1)   46/    9757 : C6 01               	ld 		@1(p2)												; pop E
(1)   47/    9759 : 01                  	xae
(1)   48/    975A : (MACRO)             	pullp	p3													; pop P3
(1)   48/    975A : C6 01                       ld              @1(p2)
(1)   48/    975C : 33                          xpal    P3
(1)   48/    975D : C6 01                       ld              @1(p2)
(1)   48/    975F : 37                          xpah    P3
(1)   49/    9760 : 3F                  	xppc 	p3 													; and return.
(1)   50/    9761 :                     
(1)   51/    9761 :                     ; ****************************************************************************************************************
(1)   52/    9761 :                     ; ****************************************************************************************************************
(1)   53/    9761 :                     ;
(1)   54/    9761 :                     ;									Insert line at line E, text at P1
(1)   55/    9761 :                     ;
(1)   56/    9761 :                     ; ****************************************************************************************************************
(1)   57/    9761 :                     ; ****************************************************************************************************************
 AS V1.42 Beta [Bld 102] - source file minol.asm(manager.asm) - page 36 - 1/12/2016 16:51:50


(1)   58/    9761 :                     
(1)   59/    9761 :                     InsertLine:
(1)   60/    9761 : (MACRO)             	pushp 	p3 													; save P3
(1)   60/    9761 : 37                          xpah    P3
(1)   60/    9762 : CE FF                       st              @-1(p2)
(1)   60/    9764 : 33                          xpal    P3
(1)   60/    9765 : CE FF                       st              @-1(p2)
(1)   61/    9767 : (MACRO)             	pushe 														; save E , line number.
(1)   61/    9767 : 40                          lde
(1)   61/    9768 : CE FF                       st              @-1(p2)
(1)   62/    976A :                     
(1)   63/    976A : 35                  	xpah 	p1													; save P1 on stack without changing it.
(1)   64/    976B : CE FF               	st 		@-1(p2)
(1)   65/    976D : 35                  	xpah 	p1
(1)   66/    976E : 31                  	xpal 	p1
(1)   67/    976F : CE FF               	st 		@-1(p2)
(1)   68/    9771 : 31                  	xpal 	p1
(1)   69/    9772 : C4 00               	ldi 	0 													; this is the length of the string
(1)   70/    9774 : CE FF               	st 		@-1(p2) 											; including the terminating zero.
(1)   71/    9776 :                     
(1)   72/    9776 :                     ILI_FindLength:
(1)   73/    9776 : AA 00               	ild 	(p2)												; increment length
(1)   74/    9778 : C5 01               	ld 		@1(p1) 												; fetch and bump
(1)   75/    977A : 9C FA               	jnz 	ILI_FindLength
(1)   76/    977C :                     
(1)   77/    977C : (MACRO)             	lpi 	p3,ProgramBase 
(1)   77/    977C : C4 10                       ldi     (PROGRAMBASE) / 256
(1)   77/    977E : 37                          xpah    P3
(1)   77/    977F : C4 00                       ldi     (PROGRAMBASE) & 255
(1)   77/    9781 : 33                          xpal    P3
(1)   78/    9782 :                     ILI_FindPosition:
(1)   79/    9782 : C3 00               	ld 		(p3) 												; read offset
(1)   80/    9784 : D4 80               	ani 	0x80 												; if negative, insert here.
(1)   81/    9786 : 9C 11               	jnz 	ILI_InsertHere
(1)   82/    9788 : C3 00               	ld 		(p3)												; put offset to next in E.
(1)   83/    978A : 01                  	xae
(1)   84/    978B : C2 03               	ld 		3(p2) 												; calculate line# - this#
(1)   85/    978D : 03                  	scl
(1)   86/    978E : FB 01               	cad 	1(p3)
(1)   87/    9790 :                     ILI_Failed: 													; error here. If line# found, we haven't deleted it !
(1)   88/    9790 : 98 FE               	jz 		ILI_Failed
(1)   89/    9792 : 06                  	csa 														; if CY/L = 0 then insert here
(1)   90/    9793 : 94 04               	jp 		ILI_InsertHere
(1)   91/    9795 : C7 80               	ld 		@-0x80(p3)											; go to next line.
(1)   92/    9797 : 90 E9               	jmp 	ILI_FindPosition
(1)   93/    9799 :                     
(1)   94/    9799 :                     ILI_InsertHere:
(1)   95/    9799 : C4 00               	ldi 	0 													; these are used to count how many bytes from here to the end.
(1)   96/    979B : CA FF               	st 		-1(p2)
(1)   97/    979D : CA FE               	st 		-2(p2)
(1)   98/    979F :                     ILI_CountBytes:
(1)   99/    979F : AA FE               	ild 	-2(p2)
(1)  100/    97A1 : 9C 02               	jnz 	ILI_NoCarry
(1)  101/    97A3 : AA FF               	ild 	-1(p2)
(1)  102/    97A5 :                     ILI_NoCarry:
(1)  103/    97A5 : C7 01               	ld 		@1(p3)												; fetch and bump
(1)  104/    97A7 : E4 FF               	xri 	0xFF 												; until $FF found.
(1)  105/    97A9 : 9C F4               	jnz 	ILI_CountBytes
(1)  106/    97AB : C2 00               	ld 		0(p2) 												; get length of string into E
(1)  107/    97AD : 01                  	xae
 AS V1.42 Beta [Bld 102] - source file minol.asm(manager.asm) - page 37 - 1/12/2016 16:51:50


(1)  108/    97AE :                     
(1)  109/    97AE :                     ILI_Move:
(1)  110/    97AE : C3 00               	ld 		(p3)												; move byte
(1)  111/    97B0 : CB 80               	st 		-0x80(p3)
(1)  112/    97B2 : C7 FF               	ld 		@-1(p3) 											; point to previous byte
(1)  113/    97B4 :                     
(1)  114/    97B4 : C2 FE               	ld 		-2(p2) 												; decrement the counter
(1)  115/    97B6 : 9C 06               	jnz 	ILI_NoBorrow
(1)  116/    97B8 : BA FF               	dld 	-1(p2) 
(1)  117/    97BA : D4 80               	ani 	0x80
(1)  118/    97BC : 9C 04               	jnz 	ILI_GotSpace 										; if counter out, then got the space.
(1)  119/    97BE :                     ILI_NoBorrow:
(1)  120/    97BE : BA FE               	dld 	-2(p2)
(1)  121/    97C0 : 90 EC               	jmp 	ILI_Move
(1)  122/    97C2 :                     
(1)  123/    97C2 :                     ILI_GotSpace:
(1)  124/    97C2 : C7 01               	ld 		@1(p3) 												; this is where the new data goes
(1)  125/    97C4 : C2 01               	ld 		1(p2)												; restore the original P1.
(1)  126/    97C6 : 31                  	xpal 	p1
(1)  127/    97C7 : C2 02               	ld 		2(p2)
(1)  128/    97C9 : 35                  	xpah 	p1
(1)  129/    97CA :                     
(1)  130/    97CA :                     ILI_Copy:														; copy the new line in.
(1)  131/    97CA : C5 01               	ld 		@1(p1)
(1)  132/    97CC : CF 01               	st 		@1(p3)
(1)  133/    97CE : 9C FA               	jnz 	ILI_Copy
(1)  134/    97D0 :                     
(1)  135/    97D0 : C6 01               	ld 		@1(p2) 												; dump string length
(1)  136/    97D2 : (MACRO)             	pullp 	p1													; restore registers
(1)  136/    97D2 : C6 01                       ld              @1(p2)
(1)  136/    97D4 : 31                          xpal    P1
(1)  136/    97D5 : C6 01                       ld              @1(p2)
(1)  136/    97D7 : 35                          xpah    P1
(1)  137/    97D8 : (MACRO)             	pulle
(1)  137/    97D8 : C6 01                       ld              @1(p2)
(1)  137/    97DA : 01                          xae
(1)  138/    97DB : (MACRO)             	pullp 	p3
(1)  138/    97DB : C6 01                       ld              @1(p2)
(1)  138/    97DD : 33                          xpal    P3
(1)  138/    97DE : C6 01                       ld              @1(p2)
(1)  138/    97E0 : 37                          xpah    P3
(1)  139/    97E1 : 3F                  	xppc 	p3
(1)  140/    97E2 :                     
 AS V1.42 Beta [Bld 102] - source file minol.asm - page 38 - 1/12/2016 16:51:50


  symbol table (* = unused):
  ------------------------

*ARCHITECTURE :  i386-unknown-win32 - | *BIGENDIAN :                      0 - |
 BOOTMONITOR :                  210 - | *BRANCHEXT :                      0 - |
*CASESENSITIVE :                  0 - |  CCA_OVER :                    9409 C |
 CCL_LOOP :                    9354 C |  CCL_OVER :                    935D C |
 CHECKLASTCOMMANDTHENEXECUTE : 94E3 C |  CIF_CONTINUE :                9475 C |
 CIF_EQUALITY :                9491 C |  CIF_EQUALITY2 :               9498 C |
 CIF_OVER :                    94AB C |  CIF_SYNTAX :                  946F C |
 CIF_TESTIFZERO :              949E C |  CIN_FINDEND :                 933A C |
 CIN_INPUTVARIABLEORMEMORY :   92EE C |  CIN_MEMORY :                  92E9 C |
 CIN_OVER :                    9348 C |  CIN_OVER2 :                   92DA C |
 CIN_STOREVALUE :              9313 C |  CIN_STRING :                  9324 C |
 CIN_SYNTAX :                  92D6 C |  CIN_VARIABLE :                92DC C |
 CLE_EVALUATEANDWRITE :        943C C |  CLE_ISHL :                    9431 C |
 CLE_OVER :                    945C C |  CLE_SINGLEVARIABLE :          9422 C |
 CLE_SYNTAX :                  941C C |  CLI_END :                     9292 C |
 CLI_ENDLINE :                 927E C |  CLI_LINE :                    9277 C |
 CLI_LOOP :                    9264 C |  CLI_OVER :                    9298 C |
 CMD_CALL :                    93E2 C |  CMD_CLEAR :                   934A C |
 CMD_END :                     92A4 C |  CMD_GOTO :                    94AD C |
 CMD_IF :                      945E C |  CMD_IN :                      92AA C |
 CMD_IN2 :                     9322 C |  CMD_LET :                     940B C |
 CMD_LIST :                    925A C |  CMD_NEW :                     929A C |
 CMD_OS :                      9251 C |  CMD_PRINT :                   935F C |
 CMD_RUN :                     94CE C |  CNE_OVER :                    92A8 C |
 COMMANDLIST :                 96F0 C | *CONSTPI :        3.141592653589793 - |
 COPY1 :                       901C C |  COS_OVER :                    9258 C |
 CPR_ENDOK :                   93DF C |  CPR_ENDRETURN :               93DC C |
 CPR_OVER :                    93E0 C |  CPR_OVER2 :                   93DA C |
 CPR_QUOTEDSTRING :            939D C |  CPR_STRINGATADDRESS :         93AA C |
 CPR_STRINGEXIT :              93C9 C |  CPR_STRINGLOOP :              93C3 C |
 CPR_STRINGPRINT :             93D1 C |  CPR_SYNTAX :                  93D6 C |
 CRG_EXECUTEFROMP1 :           94D4 C |  CRG_FIND :                    94B9 C |
 CRG_NOTEND :                  94C3 C |  CRG_OVER :                    94D6 C |
 CURRENTLINE :                  C8D - | *DATE :                   1/12/2016 - |
 DELETELINE :                  972D C |  DLN_DELETE :                  974F C |
 DLN_EXIT :                    9757 C |  DLN_SEARCH :                  973C C |
 EAFD_LETCODE :                9548 C |  EAFD_SEARCH :                 9518 C |
 EAFD_SKIP :                   9529 C |  EAFD_SKIPSPACES :             9535 C |
 EAP_ERROR :                   96E2 C |  EAP_EXIT :                    96E6 C |
 EEX_CHECKNEXTOPERATION :      9640 C |  EEX_CONSTANT :                95D7 C |
 EEX_CONSTANTLOOP :            95D8 C |  EEX_DIVIDE :                  9663 C |
 EEX_DIVIDE_LOOP :             9674 C |
 EEX_DIVIDE_NUMERATOR_POSITIVE :                                       9685 C |
 EEX_DIVIDE_TEMP_POSITIVE :    9698 C |  EEX_DIVIDE_ZERO :             9610 C |
 EEX_ENDEXPRESSION :           9614 C |  EEX_ERROR :                   95BC C |
 EEX_EXIT :                    95BE C |  EEX_FOUNDOPERATOR :           9658 C |
 EEX_HAVETERM :                95F8 C |  EEX_MEMORYACCESS :            95CA C |
 EEX_MULTIPLYLOOP :            9626 C |  EEX_MULTIPLY_B0ISZERO :       9634 C |
 EEX_NEXTCHAR :                9567 C |  EEX_NOTADD :                  9604 C |
 EEX_NOTAP :                   9592 C |  EEX_NOTQUOTE :                95A7 C |
 EEX_NOTRANDOM :               9594 C |  EEX_NOTSUBTRACT :             961A C |
 EEX_PENDINGOP :                  1 - | *EEX_RANDOM :                  9579 C |
 EEX_SAVEANDEXIT :             960C C |  EEX_TERM :                    9561 C |
 EEX_TERMERROR :               95BA C |  EEX_VALUE :                      0 - |
 EEX_VARIABLE :                95F4 C | *ENDOFCOMMANDEXECUTION :       94D6 C |
 ERRC_DIVZERO :                   7 - |  ERRC_END :                      FF - |
 ERRC_LABEL :                     1 - | *ERRC_MEMORY :                    6 - |
 AS V1.42 Beta [Bld 102] - source file minol.asm - page 39 - 1/12/2016 16:51:50


 ERRC_SYNTAX :                    5 - |  ERRC_TERM :                      4 - |
*ERRC_UNKNOWN :                   2 - |  EVALUATEADDRESSPAIR :         96A6 C |
 EVALUATEEXPRESSION :          9553 C |  EXECUTEFROMADDRESSDIRECT :    94FF C |
 EXECUTEFROMCOMMANDSTART :     94F3 C |  EXECUTENEXTINSTRUCTION :      94D9 C |
*FALSE :                          0 - | *FULLPMMU :                       1 - |
 GCO_EXIT :                    90FC C |  GCO_LOOP :                    90DE C |
 GETCHAR :                     91C3 C |  GETCONSTANT :                 90D9 C |
 GETSTRING :                   91E7 C |  GOTOCOMMANDLINE :             94EB C |
*HAS64 :                          1 - | *HASDSP :                         0 - |
*HASFPU :                         0 - | *HASPMMU :                        0 - |
 ILI_COPY :                    97CA C |  ILI_COUNTBYTES :              979F C |
 ILI_FAILED :                  9790 C |  ILI_FINDLENGTH :              9776 C |
 ILI_FINDPOSITION :            9782 C |  ILI_GOTSPACE :                97C2 C |
 ILI_INSERTHERE :              9799 C |  ILI_MOVE :                    97AE C |
 ILI_NOBORROW :                97BE C |  ILI_NOCARRY :                 97A5 C |
*INEXTMODE :                      0 - | *INLWORDMODE :                    0 - |
*INMAXMODE :                      0 - | *INSERTLINE :                  9761 C |
*INSRCMODE :                      0 - | *INSUPMODE :                      0 - |
 KEYBOARDBUFFER :               CB0 - |  KEYBOARDBUFFERSIZE :            48 - |
*LISTON :                         1 - | *MACEXP :                         1 - |
*MOMCPU :                         C - | *MOMCPUNAME :                 SC/MP - |
*NESTMAX :                      100 - | *OSMATHLIBRARY :                  3 - |
*PACKING :                        0 - | *PADDING :                        1 - |
 PRINT :                       9103 C |  PRINTINTEGER :                907D C |
 PROGRAMBASE :                 1000 - |  PROGRAMCODE :                 904F C |
 RANDOMSEED :                   C8E - | *RELAXED :                        0 - |
 SCREENCURSOR :                 C80 - |  SCREENMIRROR :                 C00 - |
 SYNTAXERROR :                 94ED C |  SYSTEMMEMORY :                 C90 - |
*TIME :                    16:51:50 - | *TRUE :                           1 - |
 VARIABLES :                    C90 - | *VERSION :                     142F - |
 WAIT1 :                       9045 C |  __GCNOTLOWER [GETCHAR] :      91E2 C |
 __GCWAITKEY [GETCHAR] :       91C8 C |  __GCWAITRELEASE [GETCHAR] :   91D0 C |
 __GSBACKSPACE [GETSTRING] :   9242 C |  __GSCONTROLKEY [GETSTRING] :  9225 C |
 __GSLOOP [GETSTRING] :        91F5 C |  __INSERTLINEEXAMPLE :         9047 C |
 __PIDIVIDEEND :               90AE C |  __PIDIVIDELOOP :              9091 C |
 __PIDIVIDEOUTER :             908B C |  __PIEXIT :                    90D0 C |
 __PIPRINT :                   90C3 C |  __PRCLEARFROMMOVETO [PRINT] : 91A3 C |
 __PRCLEARLOOP [PRINT] :       91A5 C |  __PRCLEARSCREEN [PRINT] :     91A1 C |
 __PRCOPY [PRINT] :            91AF C |  __PREXIT [PRINT] :            9166 C |
 __PREXITNOCHECK [PRINT] :     916A C |  __PRISCONTROLCHAR [PRINT] :   9178 C |
 __PRISRETURN [PRINT] :        9198 C |  __PRNOTASCII [PRINT] :        9140 C |
 __PRPRINTCHARACTERA [PRINT] : 9124 C |  __PRPRINTSTRING [PRINT] :     9112 C |
 __PRSCROLLLOOP [PRINT] :      9158 C |  __PRUPDATECURSOR [PRINT] :    9149 C |

    198 symbols
     34 unused symbols

 AS V1.42 Beta [Bld 102] - source file minol.asm - page 40 - 1/12/2016 16:51:50


  defined macros:
  ---------------

CMD                                   | CODE                                 
LPI                                   | PULLA                                
PULLE                                 | PULLP                                
PUSHA                                 | PUSHE                                
PUSHP                                 | SETV                                 

     10 macros

 AS V1.42 Beta [Bld 102] - source file minol.asm - page 41 - 1/12/2016 16:51:50


  codepages:
  ----------

STANDARD (0 changed characters)


0.03 seconds assembly time

   1885 lines source file
   2200 lines incl. macro expansions
      2 passes
      0 errors
      0 warnings
