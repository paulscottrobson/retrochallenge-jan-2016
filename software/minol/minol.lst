 AS V1.42 Beta [Bld 102] - source file minol.asm - page 1 - 12/10/2015 15:47:25


       1/       0 :                     ; ****************************************************************************************************************
       2/       0 :                     ; ****************************************************************************************************************
       3/       0 :                     ;
       4/       0 :                     ;												MINOL Intepreter
       5/       0 :                     ;
       6/       0 :                     ; ****************************************************************************************************************
       7/       0 :                     ; ****************************************************************************************************************
       8/       0 :                     
       9/       0 :                     ; ****************************************************************************************************************
      10/       0 :                     ;												 Memory Allocation
      11/       0 :                     ; ****************************************************************************************************************
      12/       0 :                     
      13/       0 :                     	cpu 	sc/mp
      14/       0 :                     	
      15/       0 : =0xC00              ScreenMirror = 0xC00 											; Screen mirror, 128 bytes, 256 byte page boundary.
      16/       0 : =0xC80              ScreenCursor = ScreenMirror+0x80  								; Position on that screen (00..7F)
      17/       0 :                     
      18/       0 : =0xC82              Variables = ScreenCursor+2 										; uses 32 bytes for expression evaluation
      19/       0 :                     
      20/       0 : =0xCA2              MinolVars = Variables + 32 										; MINOL variables start here.
      21/       0 :                     
      22/       0 : =0xCA2              CurrentLine = MinolVars + 0 									; current line number (0 = not running)
      23/       0 : =0xCA3              CurrentAddr = MinolVars + 1 									; position in current line (Low,High)
      24/       0 :                     
      25/       0 : =0x210              MonitorBoot = 0x210 											; go here to boot monitor
      26/       0 :                     
      27/       0 : =0x1                ERROR_Label = 1 												; Undefined GOTO.
      28/       0 :                     
      29/       0 :                     ; ****************************************************************************************************************
      30/       0 :                     ;														Macros
      31/       0 :                     ; ****************************************************************************************************************
      32/       0 :                     
      33/       0 :                     lpi	macro	ptr,addr
      34/       0 :                     	ldi 	(addr) / 256
      35/       0 :                     	xpah 	ptr
      36/       0 :                     	ldi 	(addr) & 255
      37/       0 :                     	xpal 	ptr
      38/       0 :                     	endm
      39/       0 :                     
      40/       0 :                     ; ****************************************************************************************************************
      41/       0 :                     ;													Main Program
      42/       0 :                     ; ****************************************************************************************************************
      43/       0 :                     
      44/    9000 :                     	org 	0x9000 												; the ROM starts here
      45/    9000 :                     
      46/    9000 : 68                  	db 		0x68												; this makes it boot straight into this ROM.
      47/    9001 : (MACRO)             	lpi 	p2,0xFFF											; set up stack
      47/    9001 : C4 0F                       ldi     (0XFFF) / 256
      47/    9003 : 36                          xpah    P2
      47/    9004 : C4 FF                       ldi     (0XFFF) & 255
      47/    9006 : 32                          xpal    P2
      48/    9007 :                     
      49/    9007 : (MACRO)             	lpi 	p3,Print-1 											; clear screen
      49/    9007 : C4 92                       ldi     (PRINT-1) / 256
      49/    9009 : 37                          xpah    P3
      49/    900A : C4 45                       ldi     (PRINT-1) & 255
      49/    900C : 33                          xpal    P3
      50/    900D : C4 0C               	ldi 	12
      51/    900F : 3F                  	xppc 	p3
      52/    9010 : C4 5D               	ldi 	']'													; Prompt
 AS V1.42 Beta [Bld 102] - source file minol.asm - page 2 - 12/10/2015 15:47:25


      53/    9012 : 3F                  	xppc 	p3
      54/    9013 : (MACRO)             	lpi 	p1,test
      54/    9013 : C4 90                       ldi     (TEST) / 256
      54/    9015 : 35                          xpah    P1
      54/    9016 : C4 22                       ldi     (TEST) & 255
      54/    9018 : 31                          xpal    P1
      55/    9019 : (MACRO)             	lpi 	p3,ExecuteCommand-1
      55/    9019 : C4 90                       ldi     (EXECUTECOMMAND-1) / 256
      55/    901B : 37                          xpah    P3
      55/    901C : C4 38                       ldi     (EXECUTECOMMAND-1) & 255
      55/    901E : 33                          xpal    P3
      56/    901F : 3F                  	xppc 	p3
      57/    9020 :                     
      58/    9020 :                     stop:
      59/    9020 : 90 FE               	jmp 	stop
      60/    9022 :                     
      61/    9022 :                     ; ****************************************************************************************************************
      62/    9022 :                     ;										Routines in source subdirectory
      63/    9022 :                     ; ****************************************************************************************************************
      64/    9022 :                     	
      65/    9022 :                     	include source\execute.asm									; command execution
(1)    1/    9022 :                     ; ****************************************************************************************************************
(1)    2/    9022 :                     ; ****************************************************************************************************************
(1)    3/    9022 :                     ;
(1)    4/    9022 :                     ;											Execute MINOL ommand
(1)    5/    9022 :                     ;
(1)    6/    9022 :                     ;		Command at P1, Stack at P2. Preserves A,E except in Error (CY/L = 0 where A is error code).
(1)    7/    9022 :                     ;
(1)    8/    9022 :                     ; ****************************************************************************************************************
(1)    9/    9022 :                     ; ****************************************************************************************************************
(1)   10/    9022 :                     
(1)   11/    9022 : 28 34 2C 36 29 20   test:db 	"(4,6) = 1",0
                    3D 20 31 00 
(1)   12/    902C :                     
(1)   13/    902C :                     __EXExit:
(1)   14/    902C : 03                  	scl 														; is okay.
(1)   15/    902D :                     __EXExitNoSC:
(1)   16/    902D : C6 01               	ld 		@1(p2) 												; restore P3
(1)   17/    902F : 33                  	xpal 	p3
(1)   18/    9030 : C6 01               	ld 		@1(p2)
(1)   19/    9032 : 37                  	xpah 	p3
(1)   20/    9033 : C6 01               	ld 		@1(p2)												; restore E
(1)   21/    9035 : 01                  	xae
(1)   22/    9036 : C6 01               	ld 		@1(p2) 												; restore A
(1)   23/    9038 : 3F                  	xppc 	p3
(1)   24/    9039 :                     
(1)   25/    9039 :                     ExecuteCommand:
(1)   26/    9039 : CE FF               	st 		@-1(p2) 											; push A
(1)   27/    903B : 40                  	lde 														; push E
(1)   28/    903C : CE FF               	st 		@-1(p2)
(1)   29/    903E : 37                  	xpah 	p3 													; push P3.
(1)   30/    903F : CE FF               	st 		@-1(p2)
(1)   31/    9041 : 33                  	xpal 	p3
(1)   32/    9042 : CE FF               	st 		@-1(p2)
(1)   33/    9044 :                     
(1)   34/    9044 :                     __EXFirst:
(1)   35/    9044 : C1 00               	ld 		0(p1) 												; found EOS 
(1)   36/    9046 : 98 E4               	jz 		__EXExit 											; exit, empty string.
(1)   37/    9048 : C5 01               	ld 		@1(p1) 												; fetch and skip over
(1)   38/    904A : E4 20               	xri 	' ' 												; is it space ?
 AS V1.42 Beta [Bld 102] - source file minol.asm(execute.asm) - page 3 - 12/10/2015 15:47:25


(1)   39/    904C : 98 F6               	jz 		__EXFirst 											; keep going.
(1)   40/    904E : E4 1A               	xri 	' '!':'												; if it is colon, then exit.
(1)   41/    9050 : 98 DA               	jz 		__EXExit
(1)   42/    9052 : E4 18               	xri 	':'!'"'												; if it is quote (comment )
(1)   43/    9054 : 9C 1B               	jnz 	__EXCode 											; try it as a command.
(1)   44/    9056 :                     ;
(1)   45/    9056 :                     ;	Go to next command, skip forward to ':' (skip over) or End of String (\0)
(1)   46/    9056 :                     ;
(1)   47/    9056 :                     __EXNextCommand:
(1)   48/    9056 : C1 00               	ld 		(p1)												; if 0 then end of command
(1)   49/    9058 : 98 D2               	jz 		__EXExit
(1)   50/    905A : C5 01               	ld 		@1(p1) 												; fetch and bump
(1)   51/    905C : E4 3A               	xri 	':'
(1)   52/    905E : 9C F6               	jnz 	__EXNextCommand 									; until found a colon.
(1)   53/    9060 : 90 CA               	jmp 	__EXExit
(1)   54/    9062 :                     ;
(1)   55/    9062 :                     ;	Report Error in E.
(1)   56/    9062 :                     ;
(1)   57/    9062 :                     __EX_ReportError:
(1)   58/    9062 : 40                  	lde 														; get error code
(1)   59/    9063 : CA 03               	st 		3(p2) 												; save so returned as A
(1)   60/    9065 : 02                  	ccl 														; clear carry
(1)   61/    9066 : 90 C5               	jmp 	__EXExitNoSC 										; exit without setting CY/L
(1)   62/    9068 :                     
(1)   63/    9068 :                     ; ****************************************************************************************************************
(1)   64/    9068 :                     ;
(1)   65/    9068 :                     ;	Instructions: 
(1)   66/    9068 :                     ;
(1)   67/    9068 :                     ;		CALL 	(h,l)
(1)   68/    9068 :                     ;		CLEAR
(1)   69/    9068 :                     ;		END
(1)   70/    9068 :                     ;		GOTO	<expr>												[TODO: FindProgramLine()]
(1)   71/    9068 :                     ;		NEW 	(stops running program as well)						[TODO: NewProgram()]
(1)   72/    9068 :                     ;		IN 		string|var,... (no spaces ???? check source)		[TODO: InCommand()]
(1)   73/    9068 :                     ;		IF 		<expr> [#<=] <expr> ; instruction
(1)   74/    9068 :                     ;		[LET]	var|(h,l) = <expr>									[TODO: Code incomplete.]
(1)   75/    9068 :                     ;		LIST 														[TODO: ListProgram()]
(1)   76/    9068 :                     ;		OS 		Boots to Monitor (JMP $210)
(1)   77/    9068 :                     ;		PR 		string|number|string const,....[;]					[TODO: OutCommand()]
(1)   78/    9068 :                     ;		RUN 														[TODO: RunProgram()]
(1)   79/    9068 :                     ;
(1)   80/    9068 :                     ;	Unimplemented:
(1)   81/    9068 :                     ;
(1)   82/    9068 :                     ;
(1)   83/    9068 :                     ; ****************************************************************************************************************
(1)   84/    9068 :                     
(1)   85/    9068 :                     __EXDefaultLET:
(1)   86/    9068 : C5 FF               	ld 		@-1(p1) 											; point back to start of command
(1)   87/    906A : (MACRO)             	lpi 	p3,__EX_Command_LET_Optional-1						; and go to the LET code.
(1)   87/    906A : C4 91                       ldi     (__EX_COMMAND_LET_OPTIONAL-1) / 256
(1)   87/    906C : 37                          xpah    P3
(1)   87/    906D : C4 FD                       ldi     (__EX_COMMAND_LET_OPTIONAL-1) & 255
(1)   87/    906F : 33                          xpal    P3
(1)   88/    9070 : 3F                  	xppc 	p3
(1)   89/    9071 :                     
(1)   90/    9071 :                     __EXCode:
(1)   91/    9071 : C1 FF               	ld 		-1(p1) 												; if first character is '('
(1)   92/    9073 : E4 28               	xri 	'('
(1)   93/    9075 : 98 F1               	jz 		__EXDefaultLET
(1)   94/    9077 : C1 00               	ld 		0(p1) 												; check 2nd character is alphabetic
 AS V1.42 Beta [Bld 102] - source file minol.asm(execute.asm) - page 4 - 12/10/2015 15:47:25


(1)   95/    9079 : D4 40               	ani 	64 													; if it 
(1)   96/    907B : 98 EB               	jz 		__EXDefaultLET 										; if it isn't try for a default LET.
(1)   97/    907D :                     
(1)   98/    907D : (MACRO)             	lpi 	p3, JumpTable 										; P3 points to jump table (at end of file)
(1)   98/    907D : C4 92                       ldi     (JUMPTABLE) / 256
(1)   98/    907F : 37                          xpah    P3
(1)   98/    9080 : C4 04                       ldi     (JUMPTABLE) & 255
(1)   98/    9082 : 33                          xpal    P3
(1)   99/    9083 : C4 05               	ldi 	ERROR_Syntax 										; syntax error in E ready for failure.
(1)  100/    9085 : 01                  	xae
(1)  101/    9086 :                     __EXSearch:
(1)  102/    9086 : C7 03               	ld 		@3(p3)												; read token to match against
(1)  103/    9088 : 98 D8               	jz 		__EX_ReportError 									; end of table.
(1)  104/    908A : E1 FF               	xor 	-1(p1)												; compare against first character
(1)  105/    908C : 9C F8               	jnz 	__EXSearch 											; failed, keep searching.
(1)  106/    908E : C3 FE               	ld 		-2(p3)												; LSB of address
(1)  107/    9090 : 01                  	xae
(1)  108/    9091 : C3 FF               	ld 		-1(p3) 												; MSB of address
(1)  109/    9093 : 37                  	xpah 	p3 													; put into P3
(1)  110/    9094 : 40                  	lde 														; put low address into P3
(1)  111/    9095 : 33                  	xpal 	p3
(1)  112/    9096 : 3F                  	xppc 	p3 													; and go there.
(1)  113/    9097 :                     
(1)  114/    9097 :                     ; ****************************************************************************************************************
(1)  115/    9097 :                     ;											RUN Run Program
(1)  116/    9097 :                     ; ****************************************************************************************************************
(1)  117/    9097 :                     
(1)  118/    9097 :                     __EX_Command_RUN:
(1)  119/    9097 : (MACRO)             	lpi 	p3,RunProgram-1 									; run program, set everything up
(1)  119/    9097 : C4 92                       ldi     (RUNPROGRAM-1) / 256
(1)  119/    9099 : 37                          xpah    P3
(1)  119/    909A : C4 3B                       ldi     (RUNPROGRAM-1) & 255
(1)  119/    909C : 33                          xpal    P3
(1)  120/    909D : 3F                  	xppc 	p3
(1)  121/    909E :                     __EXExit2:
(1)  122/    909E : 90 8C               	jmp 	__EXExit
(1)  123/    90A0 :                     
(1)  124/    90A0 :                     ; ****************************************************************************************************************
(1)  125/    90A0 :                     ;											C (ALL or LEAR)
(1)  126/    90A0 :                     ; ****************************************************************************************************************
(1)  127/    90A0 :                     
(1)  128/    90A0 :                     __EX_Decode_C:
(1)  129/    90A0 : C1 00               	ld 		0(p1) 												; get next character
(1)  130/    90A2 : E4 41               	xri 	'A'
(1)  131/    90A4 : 98 2A               	jz 		__EX_Command_CALL
(1)  132/    90A6 :                     
(1)  133/    90A6 :                     ; ****************************************************************************************************************
(1)  134/    90A6 :                     ;									CLEAR command. Clear all variables.
(1)  135/    90A6 :                     ; ****************************************************************************************************************
(1)  136/    90A6 :                     
(1)  137/    90A6 :                     __EX_Command_CLEAR:
(1)  138/    90A6 : (MACRO)             	lpi 	p3,Variables 										; point P3 to variables
(1)  138/    90A6 : C4 0C                       ldi     (VARIABLES) / 256
(1)  138/    90A8 : 37                          xpah    P3
(1)  138/    90A9 : C4 82                       ldi     (VARIABLES) & 255
(1)  138/    90AB : 33                          xpal    P3
(1)  139/    90AC : C4 1A               	ldi 	26 													; clear 26 (28 to clear RNG Seed ????)
(1)  140/    90AE : CA FF               	st 		-1(p2)
(1)  141/    90B0 :                     __EX_CLEAR_Loop:
(1)  142/    90B0 : C4 00               	ldi 	0 													; clear and bump pointer
 AS V1.42 Beta [Bld 102] - source file minol.asm(execute.asm) - page 5 - 12/10/2015 15:47:25


(1)  143/    90B2 : CF 01               	st 		@1(p3)
(1)  144/    90B4 : BA FF               	dld 	-1(p2) 												; do it 26 times.
(1)  145/    90B6 : 9C F8               	jnz 	__EX_CLEAR_Loop
(1)  146/    90B8 : 90 9C               	jmp 	__EXNextCommand 									; next command.
(1)  147/    90BA :                     
(1)  148/    90BA :                     ; ****************************************************************************************************************
(1)  149/    90BA :                     ;										PR items .... [;] Print
(1)  150/    90BA :                     ; ****************************************************************************************************************
(1)  151/    90BA :                     
(1)  152/    90BA :                     __EX_Command_PR:
(1)  153/    90BA : (MACRO)             	lpi 	p3,__EXSkipCharacters-1
(1)  153/    90BA : C4 92                       ldi     (__EXSKIPCHARACTERS-1) / 256
(1)  153/    90BC : 37                          xpah    P3
(1)  153/    90BD : C4 1F                       ldi     (__EXSKIPCHARACTERS-1) & 255
(1)  153/    90BF : 33                          xpal    P3
(1)  154/    90C0 : C4 01               	ldi 	1 													; skip R
(1)  155/    90C2 : 3F                  	xppc 	p3
(1)  156/    90C3 : (MACRO)             	lpi 	p3,OutCommand-1 									; handled via another source file.
(1)  156/    90C3 : C4 92                       ldi     (OUTCOMMAND-1) / 256
(1)  156/    90C5 : 37                          xpah    P3
(1)  156/    90C6 : C4 41                       ldi     (OUTCOMMAND-1) & 255
(1)  156/    90C8 : 33                          xpal    P3
(1)  157/    90C9 : 3F                  	xppc 	p3
(1)  158/    90CA : 01                  	xae 														; save error code.
(1)  159/    90CB : 06                  	csa 														; check for error.
(1)  160/    90CC :                     __EX_ReportErrorIfPositive:
(1)  161/    90CC : 94 94               	jp 		__EX_ReportError 									; if occurred, report it.
(1)  162/    90CE :                     __EXNextCommand2:
(1)  163/    90CE : 90 86               	jmp 	__EXNextCommand										; otherwise, try again.
(1)  164/    90D0 :                     
(1)  165/    90D0 :                     ; ****************************************************************************************************************
(1)  166/    90D0 :                     ;				CALL (h,l) Calls machine code routine at (H,L) where h,l are any two expressions.
(1)  167/    90D0 :                     ; ****************************************************************************************************************
(1)  168/    90D0 :                     
(1)  169/    90D0 :                     __EX_Command_CALL:
(1)  170/    90D0 : (MACRO)             	lpi 	p3,__EXSkipCharacters-1
(1)  170/    90D0 : C4 92                       ldi     (__EXSKIPCHARACTERS-1) / 256
(1)  170/    90D2 : 37                          xpah    P3
(1)  170/    90D3 : C4 1F                       ldi     (__EXSKIPCHARACTERS-1) & 255
(1)  170/    90D5 : 33                          xpal    P3
(1)  171/    90D6 : C4 03               	ldi 	3 													; skip 'A' 'L' 'L' and spaces.
(1)  172/    90D8 : 3F                  	xppc 	p3
(1)  173/    90D9 : (MACRO)             	lpi 	p3,ReadHLMemoryFull-1 								; read the (h,l)
(1)  173/    90D9 : C4 95                       ldi     (READHLMEMORYFULL-1) / 256
(1)  173/    90DB : 37                          xpah    P3
(1)  173/    90DC : C4 0D                       ldi     (READHLMEMORYFULL-1) & 255
(1)  173/    90DE : 33                          xpal    P3
(1)  174/    90DF : 3F                  	xppc 	p3 
(1)  175/    90E0 : 01                  	xae
(1)  176/    90E1 : 06                  	csa 
(1)  177/    90E2 : 94 E8               	jp 		__EX_ReportErrorIfPositive 							; if CY/L = 0 then error.
(1)  178/    90E4 : C2 FE               	ld 		-2(p2) 												; read L
(1)  179/    90E6 : 33                  	xpal 	p3
(1)  180/    90E7 : C2 FF               	ld 		-1(p2) 												; read H
(1)  181/    90E9 : 37                  	xpah 	p3
(1)  182/    90EA : C7 FF               	ld 		@-1(p3) 											; fix up for pre-increment
(1)  183/    90EC : 3F                  	xppc 	p3
(1)  184/    90ED : 90 DF               	jmp 	__EXNextCommand2									; next command.
(1)  185/    90EF :                     
(1)  186/    90EF :                     ; ****************************************************************************************************************
 AS V1.42 Beta [Bld 102] - source file minol.asm(execute.asm) - page 6 - 12/10/2015 15:47:25


(1)  187/    90EF :                     ;											END end running program
(1)  188/    90EF :                     ; ****************************************************************************************************************
(1)  189/    90EF :                     
(1)  190/    90EF :                     __EX_Command_END:
(1)  191/    90EF : (MACRO)             	lpi 	p3,CurrentLine 										; set current line to zero.
(1)  191/    90EF : C4 0C                       ldi     (CURRENTLINE) / 256
(1)  191/    90F1 : 37                          xpah    P3
(1)  191/    90F2 : C4 A2                       ldi     (CURRENTLINE) & 255
(1)  191/    90F4 : 33                          xpal    P3
(1)  192/    90F5 : C4 00               	ldi 	0
(1)  193/    90F7 : CB 00               	st 		(p3)
(1)  194/    90F9 :                     __EX_END_EndOfLine:
(1)  195/    90F9 : C5 01               	ld 		@1(p1) 												; keep going till find NULL EOL marker
(1)  196/    90FB : 9C FC               	jnz 	__EX_END_EndOfLine
(1)  197/    90FD : C5 FF               	ld 		@-1(p1) 											; point back to the EOS
(1)  198/    90FF :                     __EXNextCommand3:
(1)  199/    90FF : 90 CD               	jmp 	__EXNextCommand2 									; and do next command, in this case will be input :)
(1)  200/    9101 :                     
(1)  201/    9101 :                     ; ****************************************************************************************************************
(1)  202/    9101 :                     ;								NEW Erase current program, and stop if running
(1)  203/    9101 :                     ; ****************************************************************************************************************
(1)  204/    9101 :                     
(1)  205/    9101 :                     __EX_Command_NEW:
(1)  206/    9101 : C1 00               	ld 		0(p1) 												; check actually NEW as this is important !
(1)  207/    9103 : E4 45               	xri 	'E' 												; check E
(1)  208/    9105 : 9C 0F               	jnz 	__EX_NEW_Syntax
(1)  209/    9107 : C1 01               	ld 		1(p1)	
(1)  210/    9109 : E4 57               	xri 	'W'													; check W
(1)  211/    910B : 9C 09               	jnz 	__EX_NEW_Syntax
(1)  212/    910D : (MACRO)             	lpi 	p3,NewProgram-1 									; call the NEW routine.
(1)  212/    910D : C4 92                       ldi     (NEWPROGRAM-1) / 256
(1)  212/    910F : 37                          xpah    P3
(1)  212/    9110 : C4 3A                       ldi     (NEWPROGRAM-1) & 255
(1)  212/    9112 : 33                          xpal    P3
(1)  213/    9113 : 3F                  	xppc 	p3
(1)  214/    9114 : 90 D9               	jmp 	__EX_Command_END 									; END program.
(1)  215/    9116 :                     
(1)  216/    9116 :                     __EX_NEW_Syntax:												; come here if test for NEW fails, report syntax
(1)  217/    9116 : C4 05               	ldi 	ERROR_Syntax										; error - only this command is fully decoded.
(1)  218/    9118 : 90 68               	jmp 	__EX_ReportErrorA
(1)  219/    911A :                     
(1)  220/    911A :                     __EXExit3:
(1)  221/    911A : 90 82               	jmp 	__EXExit2
(1)  222/    911C :                     
(1)  223/    911C :                     ; ****************************************************************************************************************
(1)  224/    911C :                     ;												I(N or F)
(1)  225/    911C :                     ; ****************************************************************************************************************
(1)  226/    911C :                     
(1)  227/    911C :                     __EX_Decode_I
(1)  228/    911C : C1 00               	ld 		0(p1)												; look at next.
(1)  229/    911E : E4 4E               	xri 	'N'
(1)  230/    9120 : 98 68               	jz 		__EX_Command_IN
(1)  231/    9122 :                     
(1)  232/    9122 :                     ; ****************************************************************************************************************
(1)  233/    9122 :                     ;									IF <expr> [#<=] <expr> ; conditional
(1)  234/    9122 :                     ; ****************************************************************************************************************
(1)  235/    9122 :                     
(1)  236/    9122 :                     __EX_Command_IF:
(1)  237/    9122 : (MACRO)             	lpi 	p3,__EXSkipCharacters-1
(1)  237/    9122 : C4 92                       ldi     (__EXSKIPCHARACTERS-1) / 256
 AS V1.42 Beta [Bld 102] - source file minol.asm(execute.asm) - page 7 - 12/10/2015 15:47:25


(1)  237/    9124 : 37                          xpah    P3
(1)  237/    9125 : C4 1F                       ldi     (__EXSKIPCHARACTERS-1) & 255
(1)  237/    9127 : 33                          xpal    P3
(1)  238/    9128 : C4 01               	ldi 	1 													; skip over 1 character (F) and spaces
(1)  239/    912A : 3F                  	xppc 	p3
(1)  240/    912B : (MACRO)             	lpi 	p3,EvaluateExpression-1 							; get LHS of expression
(1)  240/    912B : C4 93                       ldi     (EVALUATEEXPRESSION-1) / 256
(1)  240/    912D : 37                          xpah    P3
(1)  240/    912E : C4 91                       ldi     (EVALUATEEXPRESSION-1) & 255
(1)  240/    9130 : 33                          xpal    P3
(1)  241/    9131 : 3F                  	xppc	p3
(1)  242/    9132 : 01                  	xae 														; save in E
(1)  243/    9133 : 06                  	csa 														; if error occured, report it.
(1)  244/    9134 : 94 4D               	jp 		__EX_ReportErrorE
(1)  245/    9136 : C1 00               	ld 		(p1) 												; get the condition
(1)  246/    9138 : E4 23               	xri 	'#'
(1)  247/    913A : 98 08               	jz 		__EX_IF_LegalTest
(1)  248/    913C : E4 1F               	xri 	'#'!'<'
(1)  249/    913E : 98 04               	jz 		__EX_IF_LegalTest
(1)  250/    9140 : E4 01               	xri 	'<'!'='
(1)  251/    9142 :                     __EX_NEW_Syntax_NZ2:
(1)  252/    9142 : 9C D2               	jnz 	__EX_NEW_Syntax 									; this reports a syntax error
(1)  253/    9144 :                     ;
(1)  254/    9144 :                     ;	Now we have a legal left side, and a valid comparison =,#,or <
(1)  255/    9144 :                     ;
(1)  256/    9144 :                     __EX_IF_LegalTest:
(1)  257/    9144 : C5 01               	ld 		@1(p1) 												; re-read condition and bump pointer
(1)  258/    9146 : CE FF               	st 		@-1(p2) 											; save on stack
(1)  259/    9148 : 40                  	lde 														; save left hand side of comparison on stack
(1)  260/    9149 : CE FF               	st 		@-1(p2) 	
(1)  261/    914B : (MACRO)             	lpi 	p3,EvaluateExpression-1 							; and evaluate the RHS.
(1)  261/    914B : C4 93                       ldi     (EVALUATEEXPRESSION-1) / 256
(1)  261/    914D : 37                          xpah    P3
(1)  261/    914E : C4 91                       ldi     (EVALUATEEXPRESSION-1) & 255
(1)  261/    9150 : 33                          xpal    P3
(1)  262/    9151 : 3F                  	xppc 	p3
(1)  263/    9152 : 01                  	xae 														; result in E
(1)  264/    9153 : C6 02               	ld 		@2(p2) 												; fix the stack back up.
(1)  265/    9155 : 06                  	csa 														; check for error
(1)  266/    9156 : 94 2B               	jp 		__EX_ReportErrorE 									; we have got Left -2(p2) and operator -1(p2) and right (E)
(1)  267/    9158 : C2 FF               	ld 		-1(p2) 												; check if operator is <
(1)  268/    915A : E4 3C               	xri 	'<'
(1)  269/    915C : 98 19               	jz 		__EX_IF_LessThan
(1)  270/    915E : C2 FE               	ld 		-2(p2) 												; XOR the two values together
(1)  271/    9160 : 60                  	xre 			
(1)  272/    9161 : 98 02               	jz 		__EX_IsEqual
(1)  273/    9163 : C4 08               	ldi 	0x08
(1)  274/    9165 :                     __EX_IsEqual:													; at this point, A = 8 (different) A = 0 (equal)
(1)  275/    9165 : 01                  	xae 														; put in E (8 different, 0 same)
(1)  276/    9166 : C2 FF               	ld 		-1(p2) 												; get operator.
(1)  277/    9168 : D4 08               	ani 	0x08 												; # => $23 : = => $3D so A = 0 (for #) 8 (for =)
(1)  278/    916A : 60                  	xre 														; if A = 0, E = 8 equal and = test and vice versa
(1)  279/    916B :                     __EXNextCommand3IfZero:
(1)  280/    916B : 98 92               	jz 		__EXNextCommand3 									; so the XOR will be non zero, so this is pass
(1)  281/    916D :                     __EX_IF_Succeed:
(1)  282/    916D : C1 00               	ld 		0(p1)												; look at next character
(1)  283/    916F : E4 3B               	xri 	';'													; error if not semicolon.
(1)  284/    9171 : 9C A3               	jnz 	__EX_NEW_Syntax
(1)  285/    9173 : C5 01               	ld 		@1(p1)												; skip over it.
(1)  286/    9175 :                     __EXExit4:
 AS V1.42 Beta [Bld 102] - source file minol.asm(execute.asm) - page 8 - 12/10/2015 15:47:25


(1)  287/    9175 : 90 A3               	jmp 	__EXExit3 											; just exit , ready to do the 'success' code.
(1)  288/    9177 :                     
(1)  289/    9177 :                     __EX_IF_LessThan:
(1)  290/    9177 : C2 FE               	ld 		-2(p2) 												; get left
(1)  291/    9179 : 03                  	scl 														; subtract right
(1)  292/    917A : 78                  	cae
(1)  293/    917B : 06                  	csa 														; CY/L = 0 if succeeded.
(1)  294/    917C : 94 EF               	jp 		__EX_IF_Succeed
(1)  295/    917E :                     __EXNextCommand4:
(1)  296/    917E : C4 00               	ldi 	0 													; clear A so can use the JZ above.
(1)  297/    9180 : 90 E9               	jmp 	__EXNextCommand3IfZero 								; failed.
(1)  298/    9182 :                     
(1)  299/    9182 :                     __EX_ReportErrorA:
(1)  300/    9182 : 01                  	xae
(1)  301/    9183 :                     __EX_ReportErrorE:
(1)  302/    9183 : (MACRO)             	lpi 	p3,__EX_ReportError-1 								; long jump
(1)  302/    9183 : C4 90                       ldi     (__EX_REPORTERROR-1) / 256
(1)  302/    9185 : 37                          xpah    P3
(1)  302/    9186 : C4 61                       ldi     (__EX_REPORTERROR-1) & 255
(1)  302/    9188 : 33                          xpal    P3
(1)  303/    9189 : 3F                  	xppc 	p3
(1)  304/    918A :                     
(1)  305/    918A :                     ; ****************************************************************************************************************
(1)  306/    918A :                     ;										IN <variable>.... ; input
(1)  307/    918A :                     ; ****************************************************************************************************************
(1)  308/    918A :                     
(1)  309/    918A :                     __EX_Command_IN:
(1)  310/    918A : (MACRO)             	lpi 	p3,__EXSkipCharacters-1
(1)  310/    918A : C4 92                       ldi     (__EXSKIPCHARACTERS-1) / 256
(1)  310/    918C : 37                          xpah    P3
(1)  310/    918D : C4 1F                       ldi     (__EXSKIPCHARACTERS-1) & 255
(1)  310/    918F : 33                          xpal    P3
(1)  311/    9190 : C4 01               	ldi 	1 													; skip over 1 character (N) and spaces
(1)  312/    9192 : 3F                  	xppc 	p3
(1)  313/    9193 : (MACRO)             	lpi 	p3,InCommand-1 										; handled via another source file.
(1)  313/    9193 : C4 92                       ldi     (INCOMMAND-1) / 256
(1)  313/    9195 : 37                          xpah    P3
(1)  313/    9196 : C4 3D                       ldi     (INCOMMAND-1) & 255
(1)  313/    9198 : 33                          xpal    P3
(1)  314/    9199 : 3F                  	xppc 	p3
(1)  315/    919A : 01                  	xae 														; save error code.
(1)  316/    919B : 06                  	csa 														; check for error.
(1)  317/    919C : 94 E5               	jp 		__EX_ReportErrorE 									; if occurred, report it.
(1)  318/    919E : 90 DE               	jmp 	__EXNextCommand4
(1)  319/    91A0 :                     
(1)  320/    91A0 :                     ; ****************************************************************************************************************
(1)  321/    91A0 :                     ;										 GOTO <expr> transfer control
(1)  322/    91A0 :                     ; ****************************************************************************************************************
(1)  323/    91A0 :                     
(1)  324/    91A0 :                     __EX_Command_GOTO:
(1)  325/    91A0 : (MACRO)             	lpi 	p3,__EXSkipCharacters-1
(1)  325/    91A0 : C4 92                       ldi     (__EXSKIPCHARACTERS-1) / 256
(1)  325/    91A2 : 37                          xpah    P3
(1)  325/    91A3 : C4 1F                       ldi     (__EXSKIPCHARACTERS-1) & 255
(1)  325/    91A5 : 33                          xpal    P3
(1)  326/    91A6 : C4 03               	ldi 	3 													; skip O T O
(1)  327/    91A8 : 3F                  	xppc 	p3
(1)  328/    91A9 : (MACRO)             	lpi 	p3,EvaluateExpression-1 							; get line number to GOTO ... to :)
(1)  328/    91A9 : C4 93                       ldi     (EVALUATEEXPRESSION-1) / 256
(1)  328/    91AB : 37                          xpah    P3
 AS V1.42 Beta [Bld 102] - source file minol.asm(execute.asm) - page 9 - 12/10/2015 15:47:25


(1)  328/    91AC : C4 91                       ldi     (EVALUATEEXPRESSION-1) & 255
(1)  328/    91AE : 33                          xpal    P3
(1)  329/    91AF : 3F                  	xppc 	p3
(1)  330/    91B0 : 01                  	xae 														; save in E
(1)  331/    91B1 : 06                  	csa
(1)  332/    91B2 : 94 CF               	jp 		__EX_ReportErrorE									; error in expression.
(1)  333/    91B4 :                     
(1)  334/    91B4 : (MACRO)             	lpi 	p3,FindProgramLine-1 								; Find program line.
(1)  334/    91B4 : C4 92                       ldi     (FINDPROGRAMLINE-1) / 256
(1)  334/    91B6 : 37                          xpah    P3
(1)  334/    91B7 : C4 38                       ldi     (FINDPROGRAMLINE-1) & 255
(1)  334/    91B9 : 33                          xpal    P3
(1)  335/    91BA : 40                  	lde 														; with that number.		
(1)  336/    91BB : 3F                  	xppc 	p3 												
(1)  337/    91BC : 06                  	csa 
(1)  338/    91BD : 94 13               	jp 		__EX_GOTO_NotFound 									; if CY/L = 0 then not found.
(1)  339/    91BF :                     
(1)  340/    91BF : (MACRO)             	lpi 	p3,CurrentLine
(1)  340/    91BF : C4 0C                       ldi     (CURRENTLINE) / 256
(1)  340/    91C1 : 37                          xpah    P3
(1)  340/    91C2 : C4 A2                       ldi     (CURRENTLINE) & 255
(1)  340/    91C4 : 33                          xpal    P3
(1)  341/    91C5 : 40                  	lde  														; save current line number
(1)  342/    91C6 : CB 00               	st 		(p3)
(1)  343/    91C8 : 35                  	xpah 	p1 													; save P1 returned from line find in Current address
(1)  344/    91C9 : CB 01               	st 		CurrentAddr-CurrentLine(p3)
(1)  345/    91CB : 35                  	xpah 	p1
(1)  346/    91CC : 31                  	xpal 	p1
(1)  347/    91CD : CB 01               	st 		CurrentAddr-CurrentLine(p3)
(1)  348/    91CF : 31                  	xpal 	p1
(1)  349/    91D0 : 90 A3               	jmp 	__EXExit4 											; exit, don't skip over.
(1)  350/    91D2 :                     
(1)  351/    91D2 :                     __EX_GOTO_NotFound:
(1)  352/    91D2 : C4 01               	ldi 	ERROR_Label 
(1)  353/    91D4 : 90 AC               	jmp 	__EX_ReportErrorA
(1)  354/    91D6 :                     
(1)  355/    91D6 :                     ; ****************************************************************************************************************
(1)  356/    91D6 :                     ;													L(IST or ET)
(1)  357/    91D6 :                     ; ****************************************************************************************************************
(1)  358/    91D6 :                     
(1)  359/    91D6 :                     __EX_Decode_L:
(1)  360/    91D6 : C1 00               	ld 		0(p1)												; look at next
(1)  361/    91D8 : E4 45               	xri 	'E'													; is it LE
(1)  362/    91DA : 98 19               	jz 		__EX_Command_LET
(1)  363/    91DC :                     
(1)  364/    91DC :                     ; ****************************************************************************************************************
(1)  365/    91DC :                     ;											LIST List Program
(1)  366/    91DC :                     ; ****************************************************************************************************************
(1)  367/    91DC :                     
(1)  368/    91DC :                     __EX_Command_LIST:
(1)  369/    91DC : (MACRO)             	lpi 	p3,ListProgram-1
(1)  369/    91DC : C4 92                       ldi     (LISTPROGRAM-1) / 256
(1)  369/    91DE : 37                          xpah    P3
(1)  369/    91DF : C4 3C                       ldi     (LISTPROGRAM-1) & 255
(1)  369/    91E1 : 33                          xpal    P3
(1)  370/    91E2 : 3F                  	xppc 	p3
(1)  371/    91E3 : 90 99               	jmp 	__EXNextCommand4
(1)  372/    91E5 :                     
(1)  373/    91E5 :                     ; ****************************************************************************************************************
(1)  374/    91E5 :                     ;											OS Boot Monitor
 AS V1.42 Beta [Bld 102] - source file minol.asm(execute.asm) - page 10 - 12/10/2015 15:47:25


(1)  375/    91E5 :                     ; ****************************************************************************************************************
(1)  376/    91E5 :                     
(1)  377/    91E5 :                     __EX_Command_OS:
(1)  378/    91E5 : C4 05               	ldi 	ERROR_Syntax
(1)  379/    91E7 : 01                  	xae
(1)  380/    91E8 : C1 00               	ld 		0(p1) 												; check it is OS
(1)  381/    91EA : E4 53               	xri 	'S'
(1)  382/    91EC : 9C 95               	jnz		__EX_ReportErrorE
(1)  383/    91EE : (MACRO)             	lpi 	p3,MonitorBoot-1 									; boot to monitor
(1)  383/    91EE : C4 02                       ldi     (MONITORBOOT-1) / 256
(1)  383/    91F0 : 37                          xpah    P3
(1)  383/    91F1 : C4 0F                       ldi     (MONITORBOOT-1) & 255
(1)  383/    91F3 : 33                          xpal    P3
(1)  384/    91F4 : 3F                  	xppc 	p3
(1)  385/    91F5 :                     
(1)  386/    91F5 :                     ; ****************************************************************************************************************
(1)  387/    91F5 :                     ;								LET var = expr assignment, LET optional
(1)  388/    91F5 :                     ; ****************************************************************************************************************
(1)  389/    91F5 :                     
(1)  390/    91F5 :                     __EX_Command_LET:
(1)  391/    91F5 : (MACRO)             	lpi 	p3,__EXSkipCharacters-1
(1)  391/    91F5 : C4 92                       ldi     (__EXSKIPCHARACTERS-1) / 256
(1)  391/    91F7 : 37                          xpah    P3
(1)  391/    91F8 : C4 1F                       ldi     (__EXSKIPCHARACTERS-1) & 255
(1)  391/    91FA : 33                          xpal    P3
(1)  392/    91FB : C4 02               	ldi 	2													; skip over E and T
(1)  393/    91FD : 3F                  	xppc 	p3
(1)  394/    91FE :                     __EX_Command_LET_Optional:										; analyse to look for a LET.
(1)  395/    91FE : C1 00               	ld 		(p1) 												; look at first character
(1)  396/    9200 : E4 28               	xri 	'('													; is it open bracket (e.g. (H,L))
(1)  397/    9202 :                     
(1)  398/    9202 :                     	; TODO: push address of var on stack (use left over one from ReadHL)
(1)  399/    9202 :                     	; TODO: Check =
(1)  400/    9202 :                     	; TODO: Do R-Expr
(1)  401/    9202 :                     	; TODO: Do Assignment.
(1)  402/    9202 :                     
(1)  403/    9202 :                     wait4:
(1)  404/    9202 : 90 FE               	jmp 	wait4
(1)  405/    9204 :                     
(1)  406/    9204 :                     ; ****************************************************************************************************************
(1)  407/    9204 :                     ;													Jump Table.
(1)  408/    9204 :                     ; ****************************************************************************************************************
(1)  409/    9204 :                     
(1)  410/    9204 :                     tableEntry macro ch,code
(1)  411/    9204 :                     	db 		ch
(1)  412/    9204 :                     	dw 		code-1
(1)  413/    9204 :                     	endm
(1)  414/    9204 :                     
(1)  415/    9204 :                     JumpTable:
(1)  416/    9204 : (MACRO)             	tableEntry 'C',__EX_Decode_C
(1)  416/    9204 : 43                          db              'C'
(1)  416/    9205 : 9F 90                       dw              __EX_DECODE_C-1
(1)  417/    9207 : (MACRO)             	tableEntry 'E',__EX_Command_END
(1)  417/    9207 : 45                          db              'E'
(1)  417/    9208 : EE 90                       dw              __EX_COMMAND_END-1
(1)  418/    920A : (MACRO)             	tableEntry 'G',__EX_Command_GOTO
(1)  418/    920A : 47                          db              'G'
(1)  418/    920B : 9F 91                       dw              __EX_COMMAND_GOTO-1
(1)  419/    920D : (MACRO)             	tableEntry 'N',__EX_Command_NEW
(1)  419/    920D : 4E                          db              'N'
 AS V1.42 Beta [Bld 102] - source file minol.asm(execute.asm) - page 11 - 12/10/2015 15:47:25


(1)  419/    920E : 00 91                       dw              __EX_COMMAND_NEW-1
(1)  420/    9210 : (MACRO)             	tableEntry 'I',__EX_Decode_I
(1)  420/    9210 : 49                          db              'I'
(1)  420/    9211 : 1B 91                       dw              __EX_DECODE_I-1
(1)  421/    9213 : (MACRO)             	tableEntry 'L',__EX_Decode_L
(1)  421/    9213 : 4C                          db              'L'
(1)  421/    9214 : D5 91                       dw              __EX_DECODE_L-1
(1)  422/    9216 : (MACRO)             	tableEntry 'O',__EX_Command_OS
(1)  422/    9216 : 4F                          db              'O'
(1)  422/    9217 : E4 91                       dw              __EX_COMMAND_OS-1
(1)  423/    9219 : (MACRO)             	tableEntry 'P',__EX_Command_PR
(1)  423/    9219 : 50                          db              'P'
(1)  423/    921A : B9 90                       dw              __EX_COMMAND_PR-1
(1)  424/    921C : (MACRO)             	tableEntry 'R',__EX_Command_RUN
(1)  424/    921C : 52                          db              'R'
(1)  424/    921D : 96 90                       dw              __EX_COMMAND_RUN-1
(1)  425/    921F : 00                  	db 		0
(1)  426/    9220 :                     
(1)  427/    9220 :                     ; ****************************************************************************************************************
(1)  428/    9220 :                     ;							Skip A characters from P1, and any subsequent spaces.
(1)  429/    9220 :                     ; ****************************************************************************************************************
(1)  430/    9220 :                     
(1)  431/    9220 :                     __EXSkipCharacters:
(1)  432/    9220 : CA FF               	st 		-1(p2)												; save number to skip
(1)  433/    9222 :                     __EXSkipOne:
(1)  434/    9222 : C1 00               	ld 		(p1) 												; end skip if ASCIIZ end of string
(1)  435/    9224 : 98 12               	jz 		__EXSkipExit
(1)  436/    9226 : C5 01               	ld 		@1(p1)												; advance by one.
(1)  437/    9228 : BA FF               	dld 	-1(p2)												; done all of them
(1)  438/    922A : 9C F6               	jnz 	__EXSkipOne											; no, keep going
(1)  439/    922C :                     __EXSkipSpace:
(1)  440/    922C : C1 00               	ld 		(p1)												; now skip over any spaces, 
(1)  441/    922E : 98 08               	jz 		__EXSkipExit										; check if end of string
(1)  442/    9230 : C5 01               	ld 		@1(p1)												; get next char
(1)  443/    9232 : E4 20               	xri 	' '													; and loop back if space
(1)  444/    9234 : 98 F6               	jz 		__EXSkipSpace
(1)  445/    9236 : C5 FF               	ld 		@-1(p1)												; unpick final non-space bump.
(1)  446/    9238 :                     __EXSkipExit
(1)  447/    9238 : 3F                  	xppc 	p3
(1)  448/    9239 :                     
(1)  449/    9239 :                     
      66/    9239 :                     	include source\program.asm 									; program space management.
(1)    1/    9239 :                     
(1)    2/    9239 :                     
(1)    3/    9239 :                     ; ****************************************************************************************************************
(1)    4/    9239 :                     ;							Find Program Line A, P1 points to it CY/L = 0 = not found
(1)    5/    9239 :                     ; ****************************************************************************************************************
(1)    6/    9239 :                     
(1)    7/    9239 :                     FindProgramLine:	
(1)    8/    9239 : 02                  	ccl 														; A Line # -> P1 start of line. CY/L = 0 = error.		
(1)    9/    923A : 3F                  	xppc 	p3
(1)   10/    923B :                     
(1)   11/    923B :                     ; ****************************************************************************************************************
(1)   12/    923B :                     ;											Erase the Program Completely
(1)   13/    923B :                     ; ****************************************************************************************************************
(1)   14/    923B :                     
(1)   15/    923B :                     NewProgram:
(1)   16/    923B : 3F                  	xppc 	p3
(1)   17/    923C :                     
(1)   18/    923C :                     ; ****************************************************************************************************************
 AS V1.42 Beta [Bld 102] - source file minol.asm(program.asm) - page 12 - 12/10/2015 15:47:25


(1)   19/    923C :                     ;												Run current program
(1)   20/    923C :                     ; ****************************************************************************************************************
(1)   21/    923C :                     
(1)   22/    923C :                     RunProgram:
(1)   23/    923C : 3F                  	xppc 	p3
(1)   24/    923D :                     
(1)   25/    923D :                     ; ****************************************************************************************************************
(1)   26/    923D :                     ;													List program
(1)   27/    923D :                     ; ****************************************************************************************************************
(1)   28/    923D :                     
(1)   29/    923D :                     ListProgram:
(1)   30/    923D : 3F                  	xppc 	p3
(1)   31/    923E :                     	
      67/    923E :                     	include source\console.asm 									; PR and IN command execution.
(1)    1/    923E :                     
(1)    2/    923E :                     
(1)    3/    923E :                     InCommand:
(1)    4/    923E :                     	; TODO process input, P1 ^ line returns CY/L = 0 if ok, CY/L = 1 and A = Error if not OK.
(1)    5/    923E : 02                  	ccl
(1)    6/    923F : C4 FF               	ldi 	0xFF
(1)    7/    9241 : 3F                  	xppc 	p3
(1)    8/    9242 :                     
(1)    9/    9242 :                     OutCommand:
(1)   10/    9242 :                     	; TODO process output, P1 ^ line returns CY/L = 0 if ok, CY/L = 1 and A = Error if not OK.
(1)   11/    9242 : 02                  	ccl
(1)   12/    9243 : C4 FF               	ldi 	0xFF
(1)   13/    9245 : 3F                  	xppc 	p3
      68/    9246 :                     
      69/    9246 :                     ; ****************************************************************************************************************
      70/    9246 :                     ;						Routines developed and tested seperately in other subdirectories.
      71/    9246 :                     ; ****************************************************************************************************************
      72/    9246 :                     
      73/    9246 :                     	include ..\screen\screen.asm 								; screen I/O stuff.
(1)    1/    9246 :                     ; ****************************************************************************************************************
(1)    2/    9246 :                     ; ****************************************************************************************************************
(1)    3/    9246 :                     ;
(1)    4/    9246 :                     ;											Screen I/O, MINOL ROM
(1)    5/    9246 :                     ;											=====================
(1)    6/    9246 :                     ;
(1)    7/    9246 :                     ;	Provides Character and String Input/Output functionality.
(1)    8/    9246 :                     ;
(1)    9/    9246 :                     ; ****************************************************************************************************************
(1)   10/    9246 :                     ; ****************************************************************************************************************
(1)   11/    9246 :                     
(1)   12/    9246 :                     ; ****************************************************************************************************************
(1)   13/    9246 :                     ; ****************************************************************************************************************
(1)   14/    9246 :                     ;
(1)   15/    9246 :                     ;	Print routine. Prints either character in A, or ASCIIZ string at P1 (if A is zero). Preserves all registers
(1)   16/    9246 :                     ;	except if printing string, P1 points to the character after the NULL terminator.
(1)   17/    9246 :                     ;
(1)   18/    9246 :                     ;	Scrolls automatically. Understands character codes 32-255, 8 (Backspace) 12 (Clear Screen) 13 (Carriage
(1)   19/    9246 :                     ;	Return). Others are currently ignored (except 0, see above). Note L/C values (97....) display those characters
(1)   20/    9246 :                     ;	in the ROM font *not* lower case :)
(1)   21/    9246 :                     ;
(1)   22/    9246 :                     ; ****************************************************************************************************************
(1)   23/    9246 :                     ; ****************************************************************************************************************
(1)   24/    9246 :                     
(1)   25/    9246 :                     Print:
(1)   26/    9246 :                     	section 	Print
(1)   27/    9246 :                     
 AS V1.42 Beta [Bld 102] - source file minol.asm(screen.asm) - page 13 - 12/10/2015 15:47:25


(1)   28/    9246 : CE FF               	st 		@-1(p2) 											; save character on stack.
(1)   29/    9248 : 35                  	xpah 	p1
(1)   30/    9249 : CE FF               	st 		@-1(p2) 											; save P1 on the stack.
(1)   31/    924B : 31                  	xpal 	p1
(1)   32/    924C : CE FF               	st 		@-1(p2)
(1)   33/    924E : 01                  	xae 	
(1)   34/    924F : CE FF               	st 		@-1(p2) 											; save E on the stack.
(1)   35/    9251 :                     
(1)   36/    9251 : C2 03               	ld 		3(p2) 												; read character 
(1)   37/    9253 : 9C 12               	jnz 	__PRPrintCharacterA 								; if non zero print it on its own.
(1)   38/    9255 :                     
(1)   39/    9255 :                     __PRPrintString:
(1)   40/    9255 : C2 01               	ld 		1(p2) 												; restore original P1
(1)   41/    9257 : 31                  	xpal 	p1
(1)   42/    9258 : C2 02               	ld 		2(p2)
(1)   43/    925A : 35                  	xpah 	p1 													; read character at P1.
(1)   44/    925B : C5 01               	ld 		@1(p1)
(1)   45/    925D : 01                  	xae 														; save in E.
(1)   46/    925E : 35                  	xpah 	p1 													; write P1 back.
(1)   47/    925F : CA 02               	st 		2(p2)
(1)   48/    9261 : 31                  	xpal 	p1
(1)   49/    9262 : CA 01               	st 		1(p2)
(1)   50/    9264 : 40                  	lde 														; get character from E
(1)   51/    9265 : 98 46               	jz 		__PRExitNoCheck 									; exit without loop check.
(1)   52/    9267 :                     ;
(1)   53/    9267 :                     ;	Print character in A now ; throughout it is stored in E.
(1)   54/    9267 :                     ;
(1)   55/    9267 :                     __PRPrintCharacterA:
(1)   56/    9267 : 01                  	xae 														; save character in E.
(1)   57/    9268 :                     ;
(1)   58/    9268 :                     ;	Read cursor and set P1 to that address
(1)   59/    9268 :                     ;
(1)   60/    9268 : C4 0C               	ldi 	ScreenCursor/256 									; set P1 to point to screen cursor
(1)   61/    926A : 35                  	xpah 	p1
(1)   62/    926B : C4 80               	ldi 	ScreenCursor&255
(1)   63/    926D : 31                  	xpal 	p1
(1)   64/    926E : C1 00               	ld 		0(p1) 												; put cursor position in P1.L
(1)   65/    9270 : 31                  	xpal 	p1
(1)   66/    9271 :                     ;
(1)   67/    9271 :                     ;	Check for control
(1)   68/    9271 :                     ;
(1)   69/    9271 : 40                  	lde 														; look at character
(1)   70/    9272 : D4 E0               	ani 	0xE0 												; is it code 0-31
(1)   71/    9274 : 98 45               	jz 		__PRIsControlChar
(1)   72/    9276 :                     ;
(1)   73/    9276 :                     ;	Print non-control
(1)   74/    9276 :                     ;
(1)   75/    9276 : 40                  	lde 														; read character
(1)   76/    9277 : 03                  	scl 														; CY/L clear if < 96
(1)   77/    9278 : FC 60               	cai 	96 
(1)   78/    927A : 06                  	csa 	 	 												; skip if carry set
(1)   79/    927B : E4 80               	xri 	0x80													
(1)   80/    927D : 94 04               	jp 		__PRNotASCII
(1)   81/    927F : 40                  	lde 														; if ASCII make 6 bit.
(1)   82/    9280 : D4 3F               	ani 	0x3F
(1)   83/    9282 : 01                  	xae
(1)   84/    9283 :                     __PRNotASCII:
(1)   85/    9283 : 40                  	lde 														; get character.
(1)   86/    9284 : C9 00               	st 		(p1) 												; save in shadow memory
(1)   87/    9286 : 35                  	xpah 	p1 													; switch to VRAM, preserving A.
 AS V1.42 Beta [Bld 102] - source file minol.asm(screen.asm) - page 14 - 12/10/2015 15:47:25


(1)   88/    9287 : C4 00               	ldi 	0 													
(1)   89/    9289 : 35                  	xpah 	p1
(1)   90/    928A : CD 01               	st 		@1(p1) 												; save in screen memory, advance write position.
(1)   91/    928C :                     ;
(1)   92/    928C :                     ;	Write cursor position back from P1.L
(1)   93/    928C :                     ;
(1)   94/    928C :                     __PRUpdateCursor:
(1)   95/    928C : C4 0C               	ldi		ScreenCursor / 256 									; set P1 to point to screen cursor, restore position to P1
(1)   96/    928E : 35                  	xpah 	p1
(1)   97/    928F : C4 80               	ldi 	ScreenCursor & 255 
(1)   98/    9291 : 31                  	xpal 	p1 													; after this, adjusted cursor position is in AC.
(1)   99/    9292 : C9 00               	st 		(p1) 												; write back in cursor position
(1)  100/    9294 : 94 13               	jp 		__PRExit 											; if position is off the bottom then scroll.
(1)  101/    9296 :                     ;
(1)  102/    9296 :                     ;	Scroll display
(1)  103/    9296 :                     ;
(1)  104/    9296 : C4 0C               	ldi 	(ScreenMirror+16) / 256 							; point P1 to 2nd line.
(1)  105/    9298 : 35                  	xpah 	p1
(1)  106/    9299 : C4 10               	ldi 	(ScreenMirror+16) & 255
(1)  107/    929B :                     __PRScrollLoop:
(1)  108/    929B : 31                  	xpal 	p1
(1)  109/    929C : C1 00               	ld 		0(p1) 												; copy char to previous line
(1)  110/    929E : C9 F0               	st 		-16(p1)
(1)  111/    92A0 : C5 01               	ld 		@1(p1) 												; bump pointer.
(1)  112/    92A2 : 31                  	xpal 	p1
(1)  113/    92A3 : 94 F6               	jp 		__PRScrollLoop
(1)  114/    92A5 : C4 70               	ldi 	128-16 												; clear from and move to last line
(1)  115/    92A7 : 90 3D               	jmp 	__PRClearFromMoveTo
(1)  116/    92A9 :                     ;
(1)  117/    92A9 :                     ;	Exit screen drawing routine.
(1)  118/    92A9 :                     ;
(1)  119/    92A9 :                     __PRExit:
(1)  120/    92A9 : C2 03               	ld 		3(p2) 												; if character was zero, loop
(1)  121/    92AB : 98 A8               	jz 		__PRPrintString 									; back as printing string at P1.
(1)  122/    92AD :                     __PRExitNoCheck:
(1)  123/    92AD : C6 01               	ld 		@1(p2) 												; restore E
(1)  124/    92AF : 01                  	xae
(1)  125/    92B0 : C6 01               	ld 		@1(p2) 												; restore P1
(1)  126/    92B2 : 31                  	xpal 	p1
(1)  127/    92B3 : C6 01               	ld 		@1(p2)
(1)  128/    92B5 : 35                  	xpah 	p1
(1)  129/    92B6 : C6 01               	ld 		@1(p2)												; restore A
(1)  130/    92B8 : 3F                  	xppc 	p3 													; return
(1)  131/    92B9 : 90 8B               	jmp 	Print 												; make re-entrant.
(1)  132/    92BB :                     ;
(1)  133/    92BB :                     ;	Check for supported control characters 8 (Backspace) 12 (Clear) 13 (Carriage Return)
(1)  134/    92BB :                     ;
(1)  135/    92BB :                     __PRIsControlChar:
(1)  136/    92BB : 40                  	lde 														; restore character.
(1)  137/    92BC : E4 0D               	xri 	13 													; carriage return ? (13)
(1)  138/    92BE : 98 1B               	jz 		__PRIsReturn
(1)  139/    92C0 : E4 01               	xri 	13!12 												; form feed ? (12)
(1)  140/    92C2 : 98 20               	jz 		__PRClearScreen
(1)  141/    92C4 : E4 04               	xri 	12!8 												; backspace ? (8)
(1)  142/    92C6 : 9C E1               	jnz 	__PRExit 
(1)  143/    92C8 :                     ;
(1)  144/    92C8 :                     ;	Handle backspace (8)
(1)  145/    92C8 :                     ;
(1)  146/    92C8 : 31                  	xpal 	p1 													; check cursor position is zero
(1)  147/    92C9 : 98 DE               	jz 		__PRExit 											; if it is, cannot backspace so exit.
 AS V1.42 Beta [Bld 102] - source file minol.asm(screen.asm) - page 15 - 12/10/2015 15:47:25


(1)  148/    92CB : 31                  	xpal 	p1  												; put it back
(1)  149/    92CC : C5 FF               	ld 		@-1(p1)												; move it back one
(1)  150/    92CE : C4 20               	ldi 	' '	 												; erase in shadow
(1)  151/    92D0 : C9 00               	st 		(p1)
(1)  152/    92D2 : C4 00               	ldi 	0 													; point P1 to VRAM
(1)  153/    92D4 : 35                  	xpah 	p1
(1)  154/    92D5 : C4 20               	ldi 	' '													; erase in VRAM
(1)  155/    92D7 : C9 00               	st 		(p1)
(1)  156/    92D9 : 90 B1               	jmp 	__PRUpdateCursor 									; and exit
(1)  157/    92DB :                     ;
(1)  158/    92DB :                     ;	Handle carriage return (13)
(1)  159/    92DB :                     ;
(1)  160/    92DB :                     __PRIsReturn:
(1)  161/    92DB : 31                  	xpal 	p1 													; cursor position in A
(1)  162/    92DC : D4 F0               	ani 	0xF0 												; start of current line
(1)  163/    92DE : 02                  	ccl 														; down one line
(1)  164/    92DF : F4 10               	adi 	0x10 	
(1)  165/    92E1 : 31                  	xpal 	p1 													; put it back in P1.
(1)  166/    92E2 : 90 A8               	jmp 	__PRUpdateCursor
(1)  167/    92E4 :                     ;
(1)  168/    92E4 :                     ;	Handle clear screen (12)
(1)  169/    92E4 :                     ;
(1)  170/    92E4 :                     __PRClearScreen:
(1)  171/    92E4 : C4 00               	ldi 	0 													; clear shadow memory from here.
(1)  172/    92E6 :                     ;
(1)  173/    92E6 :                     ;	From position A, clear the memory in the shadow screen to the end, copy the shadow screen to VRAM
(1)  174/    92E6 :                     ;	then use position A as the new cursor position.
(1)  175/    92E6 :                     ;
(1)  176/    92E6 :                     __PRClearFromMoveTo:
(1)  177/    92E6 : CE FF               	st 		@-1(p2) 											; save this position, the cursor goes here.
(1)  178/    92E8 :                     __PRClearLoop:
(1)  179/    92E8 : 31                  	xpal 	p1 													; save position in P1.
(1)  180/    92E9 : C4 20               	ldi 	' '													; write space there.
(1)  181/    92EB : CD 01               	st 		@1(p1)
(1)  182/    92ED : 31                  	xpal 	p1
(1)  183/    92EE : 94 F8               	jp 		__PRClearLoop 										; until reached shadow memory start.
(1)  184/    92F0 : C4 00               	ldi 	0 													; now copy shadow memory to screen memory.
(1)  185/    92F2 :                     __PRCopy:
(1)  186/    92F2 : 31                  	xpal 	p1 													; set up P1.L
(1)  187/    92F3 : C4 0C               	ldi 	ScreenMirror/256 									; point to shadow memory.
(1)  188/    92F5 : 35                  	xpah 	p1 													
(1)  189/    92F6 : C1 00               	ld 		(p1) 												; read shadow memory
(1)  190/    92F8 : 35                  	xpah 	p1 													; zero P1.H preserving A
(1)  191/    92F9 : C4 00               	ldi 	0
(1)  192/    92FB : 35                  	xpah 	p1
(1)  193/    92FC : CD 01               	st 		@1(p1) 												; save and increment p1
(1)  194/    92FE : 31                  	xpal 	p1 
(1)  195/    92FF : 94 F1               	jp 		__PRCopy 											; keep doing till all copied.
(1)  196/    9301 : C6 01               	ld 		@1(p2) 												; read cursor position
(1)  197/    9303 : 31                  	xpal 	p1 													; put in P1.L
(1)  198/    9304 : 90 86               	jmp 	__PRUpdateCursor
(1)  199/    9306 :                     
(1)  200/    9306 :                     	endsection 	Print
(1)  201/    9306 :                     
(1)  202/    9306 :                     ; ****************************************************************************************************************
(1)  203/    9306 :                     ; ****************************************************************************************************************
(1)  204/    9306 :                     ;
(1)  205/    9306 :                     ;		Input a single character into A. Case is converted to Upper. All registers preserved except A
(1)  206/    9306 :                     ;
(1)  207/    9306 :                     ; ****************************************************************************************************************
 AS V1.42 Beta [Bld 102] - source file minol.asm(screen.asm) - page 16 - 12/10/2015 15:47:25


(1)  208/    9306 :                     ; ****************************************************************************************************************
(1)  209/    9306 :                     
(1)  210/    9306 :                     GetChar:
(1)  211/    9306 :                     	section 	GetChar
(1)  212/    9306 : C4 08               	ldi 	0x8 												; set P1 to $8xx, and save P1.H
(1)  213/    9308 : 35                  	xpah 	p1
(1)  214/    9309 : CE FF               	st 		@-1(p2)
(1)  215/    930B :                     __GCWaitKey: 													; wait for key press
(1)  216/    930B : C1 00               	ld 		0(p1)
(1)  217/    930D : 94 FC               	jp 		__GCWaitKey
(1)  218/    930F : D4 7F               	ani	 	0x7F 												; throw away the upper bit.
(1)  219/    9311 : CA FF               	st 		-1(p2) 												; save it below stack
(1)  220/    9313 :                     __GCWaitRelease:
(1)  221/    9313 : C1 00               	ld 		0(p1) 												; wait for release
(1)  222/    9315 : D4 80               	ani 	0x80
(1)  223/    9317 : 9C FA               	jnz 	__GCWaitRelease
(1)  224/    9319 : C6 01               	ld 		@1(p2) 												; restore P1.H
(1)  225/    931B : 35                  	xpah 	p1
(1)  226/    931C : C2 FE               	ld 		-2(p2) 												; restore saved value
(1)  227/    931E : 02                  	ccl
(1)  228/    931F : F4 20               	adi 	0x20												; will make lower case -ve
(1)  229/    9321 : 94 02               	jp 		__GCNotLower
(1)  230/    9323 : FC 20               	cai 	0x20 												; capitalise
(1)  231/    9325 :                     __GCNotLower:
(1)  232/    9325 : F4 E0               	adi 	0xE0 												; fix up.
(1)  233/    9327 : 3F                  	xppc 	p3 													; return
(1)  234/    9328 : 90 DC               	jmp 	GetChar 											; make re-entrant
(1)  235/    932A :                     	endsection 	GetChar
(1)  236/    932A :                     
(1)  237/    932A :                     ; ****************************************************************************************************************
(1)  238/    932A :                     ; ****************************************************************************************************************
(1)  239/    932A :                     ;
(1)  240/    932A :                     ;			Read an ASCIIZ string from keyboard into P1 of length A maximum (excludes NULL terminator)
(1)  241/    932A :                     ;
(1)  242/    932A :                     ; ****************************************************************************************************************
(1)  243/    932A :                     ; ****************************************************************************************************************
(1)  244/    932A :                     
(1)  245/    932A :                     GetString:
(1)  246/    932A :                     	section GetString
(1)  247/    932A : CE FF               	st 		@-1(p2) 											; save length on stack.
(1)  248/    932C : 37                  	xpah 	p3 													; save P3 on stack
(1)  249/    932D : CE FF               	st 		@-1(p2)
(1)  250/    932F : 33                  	xpal 	p3
(1)  251/    9330 : CE FF               	st 		@-1(p2)
(1)  252/    9332 : 40                  	lde
(1)  253/    9333 : CE FF               	st 		@-1(p2) 											; save E on stack
(1)  254/    9335 : C4 00               	ldi 	0 													; set E (current position) to A.
(1)  255/    9337 : 01                  	xae
(1)  256/    9338 :                     __GSLoop:
(1)  257/    9338 : (MACRO)             	lpi 	p3,Print-1 											; print the prompt (half coloured square)
(1)  257/    9338 : C4 92                       ldi     (PRINT-1) / 256
(1)  257/    933A : 37                          xpah    P3
(1)  257/    933B : C4 45                       ldi     (PRINT-1) & 255
(1)  257/    933D : 33                          xpal    P3
(1)  258/    933E : C4 9B               	ldi 	155
(1)  259/    9340 : 3F                  	xppc 	p3
(1)  260/    9341 : (MACRO)             	lpi 	p3,GetChar-1 										; get a character
(1)  260/    9341 : C4 93                       ldi     (GETCHAR-1) / 256
(1)  260/    9343 : 37                          xpah    P3
(1)  260/    9344 : C4 05                       ldi     (GETCHAR-1) & 255
 AS V1.42 Beta [Bld 102] - source file minol.asm(screen.asm) - page 17 - 12/10/2015 15:47:25


(1)  260/    9346 : 33                          xpal    P3
(1)  261/    9347 : 3F                  	xppc 	p3
(1)  262/    9348 : C9 80               	st 		-0x80(p1) 											; save it in the current position.
(1)  263/    934A : (MACRO)             	lpi 	p3,Print-1 											; erase the prompt with backspace.
(1)  263/    934A : C4 92                       ldi     (PRINT-1) / 256
(1)  263/    934C : 37                          xpah    P3
(1)  263/    934D : C4 45                       ldi     (PRINT-1) & 255
(1)  263/    934F : 33                          xpal    P3
(1)  264/    9350 : C4 08               	ldi 	8
(1)  265/    9352 : 3F                  	xppc 	p3
(1)  266/    9353 : C1 80               	ld 		-0x80(p1) 											; re-read character
(1)  267/    9355 : D4 E0               	ani 	0xE0 												; check if control key.
(1)  268/    9357 : 98 0F               	jz 		__GSControlKey 
(1)  269/    9359 : 40                  	lde 														; get current position.
(1)  270/    935A : E2 03               	xor 	3(p2) 												; reached maximum length of buffer ?
(1)  271/    935C : 98 DA               	jz 		__GSLoop 											; if so, ignore the key and go round again.
(1)  272/    935E : C1 80               	ld 		-0x80(p1) 											; get character and print it
(1)  273/    9360 : 3F                  	xppc 	p3
(1)  274/    9361 : C4 01               	ldi 	1 													; increment E
(1)  275/    9363 : 02                  	ccl
(1)  276/    9364 : 70                  	ade
(1)  277/    9365 : 01                  	xae
(1)  278/    9366 : 90 D0               	jmp 	__GSLoop 											; and go round again.
(1)  279/    9368 :                     ;
(1)  280/    9368 :                     ;	Handle control keys (0x00-0x1F)
(1)  281/    9368 :                     ;
(1)  282/    9368 :                     __GSControlKey:
(1)  283/    9368 : C1 80               	ld 		-0x80(p1) 											; get typed in key
(1)  284/    936A : E4 08               	xri 	8 													; check for backspace.
(1)  285/    936C : 98 17               	jz 		__GSBackspace 			
(1)  286/    936E : E4 05               	xri 	8!13 												; check for CR
(1)  287/    9370 : 9C C6               	jnz 	__GSLoop 											; if not, ignore the key.
(1)  288/    9372 :                     ;
(1)  289/    9372 :                     ;	Carriage Return, ending input.
(1)  290/    9372 :                     ;
(1)  291/    9372 : C9 80               	st 		-0x80(p1) 											; replace the CR written with NULL terminator.
(1)  292/    9374 : C4 0D               	ldi 	13 													; print CR
(1)  293/    9376 : 3F                  	xppc 	p3
(1)  294/    9377 : C6 01               	ld 		@1(p2) 												; pop E
(1)  295/    9379 : 01                  	xae
(1)  296/    937A : C6 01               	ld 		@1(p2) 												; pop P3
(1)  297/    937C : 33                  	xpal 	p3
(1)  298/    937D : C6 01               	ld 		@1(p2)
(1)  299/    937F : 37                  	xpah 	p3
(1)  300/    9380 : C6 01               	ld 		@1(p2)												; pop A
(1)  301/    9382 : 3F                  	xppc 	p3 													; return
(1)  302/    9383 : 90 A5               	jmp 	GetString 											; make re-entrant (probably unneccessary !!)
(1)  303/    9385 :                     ;
(1)  304/    9385 :                     ;	Backspace entered
(1)  305/    9385 :                     ;
(1)  306/    9385 :                     __GSBackspace
(1)  307/    9385 : 40                  	lde 														; if E = 0 we can't backspace any further.
(1)  308/    9386 : 98 B0               	jz 		__GSLoop
(1)  309/    9388 : C4 08               	ldi 	8 													; backspace on screen
(1)  310/    938A : 3F                  	xppc 	p3
(1)  311/    938B : C4 FF               	ldi 	0xFF 												; decrement E
(1)  312/    938D : 02                  	ccl
(1)  313/    938E : 70                  	ade
(1)  314/    938F : 01                  	xae
(1)  315/    9390 : 90 A6               	jmp 	__GSLoop 											; and go round again.
 AS V1.42 Beta [Bld 102] - source file minol.asm(screen.asm) - page 18 - 12/10/2015 15:47:25


(1)  316/    9392 :                     
(1)  317/    9392 :                     	endsection GetString
(1)  318/    9392 :                     
      74/    9392 :                     	include ..\expression\expression.asm 						; expression stuff.
(1)    1/    9392 :                     ; ****************************************************************************************************************
(1)    2/    9392 :                     ; ****************************************************************************************************************
(1)    3/    9392 :                     ;
(1)    4/    9392 :                     ;											Expression, MINOL
(1)    5/    9392 :                     ;											=================
(1)    6/    9392 :                     ;
(1)    7/    9392 :                     ;	Terms are :
(1)    8/    9392 :                     ;		0-9* 		Numeric constant
(1)    9/    9392 :                     ;		A-Z 		Variables
(1)   10/    9392 :                     ;		'c'			Character ASCII value
(1)   11/    9392 :                     ;		(h,l) 		Memory direct access
(1)   12/    9392 :                     ;		! 			Random number
(1)   13/    9392 :                     ;
(1)   14/    9392 :                     ;	Operators are:	+,-,*,/
(1)   15/    9392 :                     ;
(1)   16/    9392 :                     ; ****************************************************************************************************************
(1)   17/    9392 :                     ; ****************************************************************************************************************
(1)   18/    9392 :                     
(1)   19/    9392 :                     ; ****************************************************************************************************************
(1)   20/    9392 :                     ; ****************************************************************************************************************
(1)   21/    9392 :                     ;
(1)   22/    9392 :                     ;				Evaluate an expression at P1. Returns A = Result, CY/L = 1 or A = Error, CY/L = 0
(1)   23/    9392 :                     ;
(1)   24/    9392 :                     ;	Preserves registers except A and P1, which is advanced to the end of the expression - on exit it points to
(1)   25/    9392 :                     ;	NULL or the next character - so 2+3, will return A = 5, CY/L = 1,P1 pointing to the comma.
(1)   26/    9392 :                     ;
(1)   27/    9392 :                     ;	This isn't re-entrant.
(1)   28/    9392 :                     ;
(1)   29/    9392 :                     ; ****************************************************************************************************************
(1)   30/    9392 :                     ; ****************************************************************************************************************
(1)   31/    9392 :                     
(1)   32/    9392 :                     EvaluateExpression:
(1)   33/    9392 :                     
(1)   34/    9392 : =0x0                __EEValue = 0 													; stack positions of current value & pending
(1)   35/    9392 : =0x1                __EEOperator = 1 												; operator.
(1)   36/    9392 : =0x1A               __EERandomOffset = 26 											; offset to random seed from p3
(1)   37/    9392 :                     
(1)   38/    9392 : =0x4                ERROR_BadTerm = 4
(1)   39/    9392 : =0x5                ERROR_Syntax = 5
(1)   40/    9392 : =0x7                ERROR_DivZero = 7
(1)   41/    9392 :                     
(1)   42/    9392 : 40                  	lde 														; save E on stack
(1)   43/    9393 : CE FF               	st 		@-1(p2)
(1)   44/    9395 : 37                  	xpah 	p3 													; save P3 on stack
(1)   45/    9396 : CE FF               	st 		@-1(p2)
(1)   46/    9398 : 33                  	xpal 	p3
(1)   47/    9399 : CE FF               	st 		@-1(p2)
(1)   48/    939B : C4 2B               	ldi 	'+'													; pending expression (+) at +1(p2)
(1)   49/    939D : CE FF               	st 		@-1(p2)												; set up so done "0+" in theory :)
(1)   50/    939F : C4 00               	ldi 	0 													; current value (0) at +0(p2)
(1)   51/    93A1 : CE FF               	st 		@-1(p2)
(1)   52/    93A3 : 90 4C               	jmp 	__EELoop
(1)   53/    93A5 :                     
(1)   54/    93A5 :                     ; ****************************************************************************************************************
(1)   55/    93A5 :                     ;											'c' term (character constant)
(1)   56/    93A5 :                     ; ****************************************************************************************************************
 AS V1.42 Beta [Bld 102] - source file minol.asm(expression.asm) - page 19 - 12/10/2015 15:47:25


(1)   57/    93A5 :                     
(1)   58/    93A5 :                     __EECharacter:
(1)   59/    93A5 : C1 00               	ld 		(p1) 												; read character following quote
(1)   60/    93A7 : 98 0B               	jz 		__EECharacterError 									; if EOS fail
(1)   61/    93A9 : 01                  	xae 														; save in E
(1)   62/    93AA : C1 01               	ld 		1(p1) 												; read the one after that
(1)   63/    93AC : E4 27               	xri 	0x27												; check if closing quote
(1)   64/    93AE : 9C 04               	jnz 	__EECharacterError 									; should be a quote mark, fail if not.
(1)   65/    93B0 : C5 02               	ld 		@2(p1) 												; skip over 2 characters
(1)   66/    93B2 : 90 2B               	jmp 	__EECalculate4 										; go and complete the calculation
(1)   67/    93B4 :                     
(1)   68/    93B4 :                     __EECharacterError:
(1)   69/    93B4 : C4 04               	ldi 	ERROR_BadTerm	 									; bad character
(1)   70/    93B6 : 90 37               	jmp 	__EEError3	
(1)   71/    93B8 :                     
(1)   72/    93B8 :                     ; ****************************************************************************************************************
(1)   73/    93B8 :                     ;											! term (random number)
(1)   74/    93B8 :                     ; ****************************************************************************************************************
(1)   75/    93B8 :                     
(1)   76/    93B8 :                     __EERandom:
(1)   77/    93B8 : C3 1A               	ld 		__EERandomOffset(p3) 								; does it need initialising
(1)   78/    93BA : DB 1B               	or 		__EERandomOffset+1(p3)
(1)   79/    93BC : 9C 08               	jnz		__EERandom_IsInitialised
(1)   80/    93BE : C4 E1               	ldi 	0xE1												; if so, set to $ACE1
(1)   81/    93C0 : CB 1A               	st 		__EERandomOffset(p3)
(1)   82/    93C2 : C4 AC               	ldi 	0xAC
(1)   83/    93C4 : CB 1B               	st 		__EERandomOffset+1(p3)
(1)   84/    93C6 :                     __EERandom_IsInitialised:
(1)   85/    93C6 : C3 1B               	ld 		__EERandomOffset+1(p3) 								; shift seed right into carry
(1)   86/    93C8 : 02                  	ccl
(1)   87/    93C9 : 1F                  	rrl
(1)   88/    93CA : CB 1B               	st 		__EERandomOffset+1(p3)
(1)   89/    93CC : C3 1A               	ld 		__EERandomOffset(p3)
(1)   90/    93CE : 1F                  	rrl
(1)   91/    93CF : CB 1A               	st 		__EERandomOffset(p3)
(1)   92/    93D1 : 06                  	csa  														; if the LSB was 1
(1)   93/    93D2 : 94 06               	jp 		__EERandomNoToggle
(1)   94/    93D4 : C3 1B               	ld 		__EERandomOffset+1(p3)
(1)   95/    93D6 : E4 B4               	xri 	0xB4
(1)   96/    93D8 : CB 1B               	st 		__EERandomOffset+1(p3)
(1)   97/    93DA :                     __EERandomNoToggle:
(1)   98/    93DA : C3 1A               	ld 		__EERandomOffset(p3) 								; XOR two values together into E.
(1)   99/    93DC : E3 1B               	xor 	__EERandomOffset+1(p3)
(1)  100/    93DE : 01                  	xae
(1)  101/    93DF :                     __EECalculate4:
(1)  102/    93DF : 90 6C               	jmp 	__EECalculate3
(1)  103/    93E1 :                     
(1)  104/    93E1 :                     ; ****************************************************************************************************************
(1)  105/    93E1 :                     ;												  Read data (h,l)
(1)  106/    93E1 :                     ; ****************************************************************************************************************
(1)  107/    93E1 :                     
(1)  108/    93E1 :                     __EEDataAccess:
(1)  109/    93E1 : (MACRO)             	lpi 	p3,ReadHLMemory-1 									; read HL memory into A
(1)  109/    93E1 : C4 95                       ldi     (READHLMEMORY-1) / 256
(1)  109/    93E3 : 37                          xpah    P3
(1)  109/    93E4 : C4 1D                       ldi     (READHLMEMORY-1) & 255
(1)  109/    93E6 : 33                          xpal    P3
(1)  110/    93E7 : 3F                  	xppc 	p3
(1)  111/    93E8 : 01                  	xae 														; save in E
(1)  112/    93E9 : 06                  	csa 														; if carry is set then calculate as normal.
 AS V1.42 Beta [Bld 102] - source file minol.asm(expression.asm) - page 20 - 12/10/2015 15:47:25


(1)  113/    93EA : D4 80               	ani 	0x80
(1)  114/    93EC : 9C 5F               	jnz 	__EECalculate3
(1)  115/    93EE : 40                  	lde 														; get error code
(1)  116/    93EF :                     __EEError3:
(1)  117/    93EF : 90 47               	jmp 	__EEError2
(1)  118/    93F1 :                     
(1)  119/    93F1 :                     ; ****************************************************************************************************************
(1)  120/    93F1 :                     ;
(1)  121/    93F1 :                     ;											Main loop - get another term.
(1)  122/    93F1 :                     ;
(1)  123/    93F1 :                     ; ****************************************************************************************************************
(1)  124/    93F1 :                     __EELoop:
(1)  125/    93F1 : (MACRO)             	lpi 	p3,Variables 										; point P3 to variables
(1)  125/    93F1 : C4 0C                       ldi     (VARIABLES) / 256
(1)  125/    93F3 : 37                          xpah    P3
(1)  125/    93F4 : C4 82                       ldi     (VARIABLES) & 255
(1)  125/    93F6 : 33                          xpal    P3
(1)  126/    93F7 :                     
(1)  127/    93F7 : C1 00               	ld 		(p1) 												; check end of string.
(1)  128/    93F9 : 98 79               	jz 		__EEBadTerm 				
(1)  129/    93FB : C5 01               	ld 		@1(p1) 												; get next character till non-space
(1)  130/    93FD : E4 20               	xri		' '
(1)  131/    93FF : 98 F0               	jz 		__EELoop
(1)  132/    9401 :                     
(1)  133/    9401 : E4 08               	xri 	' ' ! '('											; if ( then (x,y) memory access.
(1)  134/    9403 : 98 DC               	jz 		__EEDataAccess
(1)  135/    9405 : E4 09               	xri 	'(' ! '!' 											; if ! then random number.
(1)  136/    9407 : 98 AF               	jz 		__EERandom
(1)  137/    9409 : E4 06               	xri 	'!' ! 0x27											; if ' then character constant
(1)  138/    940B : 98 98               	jz 		__EECharacter
(1)  139/    940D :                     
(1)  140/    940D : C1 FF               	ld 		-1(p1) 												; get character.
(1)  141/    940F : 02                  	ccl
(1)  142/    9410 : F4 50               	adi 	128-'0' 											; if < '0' then there is an error.
(1)  143/    9412 : 94 60               	jp 		__EEBadTerm
(1)  144/    9414 : F4 76               	adi 	0xFF-0x89 											; if > '9' then it is not a digit.
(1)  145/    9416 : 94 24               	jp 		__EENotDigit 										; so check for A-Z
(1)  146/    9418 :                     
(1)  147/    9418 :                     ; ****************************************************************************************************************
(1)  148/    9418 :                     ;
(1)  149/    9418 :                     ;								We have a constant value 0-255, extract it
(1)  150/    9418 :                     ;
(1)  151/    9418 :                     ; ****************************************************************************************************************
(1)  152/    9418 :                     
(1)  153/    9418 : C1 FF               	ld 		-1(p1) 												; re-read digit
(1)  154/    941A : D4 0F               	ani 	0x0F 												; make number
(1)  155/    941C : 01                  	xae 														; put in E.
(1)  156/    941D :                     __EEConstantLoop:
(1)  157/    941D : C1 00               	ld 		(p1) 												; keep going until non digit found
(1)  158/    941F : 02                  	ccl
(1)  159/    9420 : F4 50               	adi 	128-'0'												; exit if outside range 0-9.
(1)  160/    9422 : 94 67               	jp 		__EECalculate 										; calculate the result.
(1)  161/    9424 : F4 76               	adi 	0xFF-0x89 
(1)  162/    9426 : 94 63               	jp 		__EECalculate 
(1)  163/    9428 : 40                  	lde 														; A = E
(1)  164/    9429 : 02                  	ccl
(1)  165/    942A : 70                  	ade 														; A = E * 2
(1)  166/    942B : 70                  	ade 														; A = E * 3
(1)  167/    942C : 70                  	ade 														; A = E * 4
(1)  168/    942D : 70                  	ade 														; A = E * 5
 AS V1.42 Beta [Bld 102] - source file minol.asm(expression.asm) - page 21 - 12/10/2015 15:47:25


(1)  169/    942E : 01                  	xae 														; E = E * 5
(1)  170/    942F : C5 01               	ld 		@1(p1) 												; read digit and bump pointer.
(1)  171/    9431 : D4 0F               	ani 	0x0F 												; make number
(1)  172/    9433 : 70                  	ade 														; add E * 5 twice, e.g. E * 10
(1)  173/    9434 : 70                  	ade
(1)  174/    9435 : 01                  	xae 														; put into E
(1)  175/    9436 : 90 E5               	jmp 	__EEConstantLoop
(1)  176/    9438 :                     
(1)  177/    9438 :                     __EEError2:
(1)  178/    9438 : 90 3C               	jmp 	__EEError
(1)  179/    943A :                     __EELoop2:
(1)  180/    943A : 90 B5               	jmp 	__EELoop
(1)  181/    943C :                     
(1)  182/    943C :                     ; ****************************************************************************************************************
(1)  183/    943C :                     ;
(1)  184/    943C :                     ;												Check for variable A-Z.
(1)  185/    943C :                     ;
(1)  186/    943C :                     ; ****************************************************************************************************************
(1)  187/    943C :                     __EENotDigit:
(1)  188/    943C : C1 FF               	ld 		-1(p1) 												; read character again.
(1)  189/    943E : 02                  	ccl
(1)  190/    943F : F4 3F               	adi 	128-'A' 											; check in range A-Z.
(1)  191/    9441 : 94 31               	jp 		__EEBadTerm 										; if not in that range, we failed.
(1)  192/    9443 : F4 66               	adi 	0x80-26 
(1)  193/    9445 : 94 2D               	jp 		__EEBadTerm 
(1)  194/    9447 : F4 1A               	adi 	26 													; make it 0-25 (A-Z)
(1)  195/    9449 : 01                  	xae 														; E is variable number 0-25
(1)  196/    944A : C3 80               	ld 		-0x80(p3) 											; read variable value.
(1)  197/    944C : 01                  	xae 														; put in E
(1)  198/    944D :                     __EECalculate3:
(1)  199/    944D : 90 3C               	jmp 	__EECalculate 										; calculate result of delayed operation.
(1)  200/    944F :                     ;
(1)  201/    944F :                     ;	Bump over spaces to find operator.
(1)  202/    944F :                     ;
(1)  203/    944F :                     __EEGetNextOperator:
(1)  204/    944F : 03                  	scl 														; set Carry/Link indicating okay.
(1)  205/    9450 : C1 00               	ld 		0(p1) 												; skip spaces, checking for exit.
(1)  206/    9452 : 98 25               	jz 		__EEExit 											; exit on NULL.
(1)  207/    9454 : E4 20               	xri 	' ' 												
(1)  208/    9456 : 9C 04               	jnz 	__EECheckOperator
(1)  209/    9458 : C5 01               	ld 		@1(p1)
(1)  210/    945A : 90 F3               	jmp 	__EEGetNextOperator
(1)  211/    945C :                     ;
(1)  212/    945C :                     ;	Found something not NULL or space - see if it is an operator + - * /, in which case go round again.
(1)  213/    945C :                     ;
(1)  214/    945C :                     __EECheckOperator:
(1)  215/    945C : C1 00               	ld 		(p1) 												; get operator
(1)  216/    945E : E4 2B               	xri 	'+' 												; check if it is +,-,*,/
(1)  217/    9460 : 98 0C               	jz 		__EEDoOperator
(1)  218/    9462 : E4 06               	xri 	'+'!'-'
(1)  219/    9464 : 98 08               	jz 		__EEDoOperator
(1)  220/    9466 : E4 07               	xri 	'-'!'*'
(1)  221/    9468 : 98 04               	jz 		__EEDoOperator
(1)  222/    946A : E4 05               	xri 	'*'!'/'
(1)  223/    946C : 9C 0B               	jnz 	__EEExit 											; if not any of those, then exit.
(1)  224/    946E :                     __EEDoOperator:
(1)  225/    946E : C5 01               	ld 		@1(p1) 												; get and save operator
(1)  226/    9470 : CA 01               	st 		1(p2)
(1)  227/    9472 : 90 C6               	jmp		__EELoop2 											; go get another term. 			
(1)  228/    9474 :                     ;
 AS V1.42 Beta [Bld 102] - source file minol.asm(expression.asm) - page 22 - 12/10/2015 15:47:25


(1)  229/    9474 :                     ;	Handle Errors (1) Bad Term (2) Divide by zero.
(1)  230/    9474 :                     ;
(1)  231/    9474 :                     __EEBadTerm:
(1)  232/    9474 : C4 04               	ldi 	ERROR_BadTerm 										; syntax in expression
(1)  233/    9476 :                     __EEError:
(1)  234/    9476 : CA 00               	st 		__EEValue(p2) 										; error code as result.
(1)  235/    9478 : 02                  	ccl 														; CY/L clear indicating error
(1)  236/    9479 :                     ;
(1)  237/    9479 :                     ;	Exit with the value in __EEValue(p2) and CY/L set accordingly.
(1)  238/    9479 :                     ;
(1)  239/    9479 :                     __EEExit:
(1)  240/    9479 : C6 02               	ld 		@2(p2) 												; skip over saved values
(1)  241/    947B : C6 01               	ld 		@1(p2) 												; restore P3
(1)  242/    947D : 33                  	xpal 	p3
(1)  243/    947E : C6 01               	ld 		@1(p2)
(1)  244/    9480 : 37                  	xpah 	p3
(1)  245/    9481 : C6 01               	ld 		@1(p2) 												; restore E
(1)  246/    9483 : 01                  	xae 
(1)  247/    9484 : C2 FB               	ld 		-5(p2)												; get answer into A
(1)  248/    9486 : 3F                  	xppc 	p3 													; and exit.
(1)  249/    9487 :                     
(1)  250/    9487 :                     __EE_Divide_Zero:
(1)  251/    9487 : C4 07               	ldi 	ERROR_DivZero 										; come here for divide by zero.	
(1)  252/    9489 : 90 EB               	jmp 	__EEError
(1)  253/    948B :                     
(1)  254/    948B :                     ; ****************************************************************************************************************
(1)  255/    948B :                     ;
(1)  256/    948B :                     ;							Do 0(p2) op E where op is 1(p2) and is a valid operator.
(1)  257/    948B :                     ;	
(1)  258/    948B :                     ; ****************************************************************************************************************
(1)  259/    948B :                     
(1)  260/    948B :                     __EECalculate:
(1)  261/    948B : C2 01               	ld 		__EEOperator(p2) 									; get the operator.
(1)  262/    948D : E4 2D               	xri 	'-'
(1)  263/    948F : 98 10               	jz 		__EE_Subtract
(1)  264/    9491 : E4 07               	xri 	'-'!'*'
(1)  265/    9493 : 98 14               	jz 		__EE_Multiply
(1)  266/    9495 : E4 05               	xri 	'*'!'/'
(1)  267/    9497 : 98 32               	jz 		__EE_Divide
(1)  268/    9499 :                     
(1)  269/    9499 :                     ; ****************************************************************************************************************
(1)  270/    9499 :                     ;														  Add.
(1)  271/    9499 :                     ; ****************************************************************************************************************
(1)  272/    9499 :                     
(1)  273/    9499 :                     __EE_Add:
(1)  274/    9499 : 02                  	ccl
(1)  275/    949A : C2 00               	ld 		__EEValue(p2)
(1)  276/    949C : 70                  	ade
(1)  277/    949D : CA 00               	st 		__EEValue(p2)
(1)  278/    949F : 90 AE               	jmp 	__EEGetNextOperator
(1)  279/    94A1 :                     
(1)  280/    94A1 :                     ; ****************************************************************************************************************
(1)  281/    94A1 :                     ;														Subtract
(1)  282/    94A1 :                     ; ****************************************************************************************************************
(1)  283/    94A1 :                     
(1)  284/    94A1 :                     __EE_Subtract:
(1)  285/    94A1 : 03                  	scl
(1)  286/    94A2 : C2 00               	ld 		__EEValue(p2)
(1)  287/    94A4 : 78                  	cae
(1)  288/    94A5 : CA 00               	st 		__EEValue(p2)
 AS V1.42 Beta [Bld 102] - source file minol.asm(expression.asm) - page 23 - 12/10/2015 15:47:25


(1)  289/    94A7 :                     __EEGetNextOperator2:
(1)  290/    94A7 : 90 A6               	jmp 	__EEGetNextOperator
(1)  291/    94A9 :                     
(1)  292/    94A9 :                     ; ****************************************************************************************************************
(1)  293/    94A9 :                     ;														Multiply
(1)  294/    94A9 :                     ; ****************************************************************************************************************
(1)  295/    94A9 :                     
(1)  296/    94A9 :                     __EE_Multiply:										
(1)  297/    94A9 : C2 00               	ld 		__EEValue(p2) 													; a = __EEOperator(p2)
(1)  298/    94AB : CA 01               	st 		__EEOperator(p2)
(1)  299/    94AD : C4 00               	ldi 	0																; res = __EEValue(p2)
(1)  300/    94AF : CA 00               	st 		__EEValue(p2) 													; clear it.
(1)  301/    94B1 :                     __EE_MultiplyLoop:
(1)  302/    94B1 : 40                  	lde  																	; if B == 0 then we are done.
(1)  303/    94B2 : 98 9B               	jz 		__EEGetNextOperator
(1)  304/    94B4 : D4 01               	ani 	1 																; if B LSB is non zero.
(1)  305/    94B6 : 98 07               	jz 		__EE_Multiply_B0IsZero
(1)  306/    94B8 : C2 01               	ld 		__EEOperator(p2) 												; add A to Result
(1)  307/    94BA : 02                  	ccl
(1)  308/    94BB : F2 00               	add 	__EEValue(p2)
(1)  309/    94BD : CA 00               	st 		__EEValue(p2)
(1)  310/    94BF :                     __EE_Multiply_B0IsZero:
(1)  311/    94BF : 40                  	lde 																	; shift B right
(1)  312/    94C0 : 1C                  	sr
(1)  313/    94C1 : 01                  	xae
(1)  314/    94C2 : C2 01               	ld 		__EEOperator(p2) 												; shift A left
(1)  315/    94C4 : 02                  	ccl
(1)  316/    94C5 : F2 01               	add 	__EEOperator(p2)
(1)  317/    94C7 : CA 01               	st 		__EEOperator(p2)
(1)  318/    94C9 : 90 E6               	jmp 	__EE_MultiplyLoop
(1)  319/    94CB :                     
(1)  320/    94CB :                     ;	res = 0
(1)  321/    94CB :                     ;	while (b != 0):
(1)  322/    94CB :                     ;		if (b & 1) != 0:
(1)  323/    94CB :                     ;		 	res = (res + a) & 0xFF
(1)  324/    94CB :                     ;		a = (a << 1) & 0xFF
(1)  325/    94CB :                     ;		b = (b >> 1) & 0xFF
(1)  326/    94CB :                     
(1)  327/    94CB :                     
(1)  328/    94CB :                     ; ****************************************************************************************************************
(1)  329/    94CB :                     ;														Divide
(1)  330/    94CB :                     ; ****************************************************************************************************************
(1)  331/    94CB :                     
(1)  332/    94CB :                     __EE_Divide:
(1)  333/    94CB : 40                  	lde 																	; if denominator zero, error 2.
(1)  334/    94CC : 98 B9               	jz 		__EE_Divide_Zero
(1)  335/    94CE : C2 00               	ld 		__EEValue(p2) 													; numerator into __EEOperator(p2)
(1)  336/    94D0 : CA 01               	st 		__EEOperator(p2) 												; denominator is in E
(1)  337/    94D2 : C4 00               	ldi 	0
(1)  338/    94D4 : CA 00               	st 		__EEValue(p2)													; quotient in __EEValue(p2)
(1)  339/    94D6 : CA FF               	st 		-1(p2) 															; remainder in -1(p2)
(1)  340/    94D8 : C4 80               	ldi 	0x80 									
(1)  341/    94DA : CA FE               	st 		-2(p2) 															; bit in -2(p2)
(1)  342/    94DC :                     
(1)  343/    94DC :                     __EE_Divide_Loop:
(1)  344/    94DC : C2 FE               	ld 		-2(p2) 															; exit if bit = 0,we've finished.
(1)  345/    94DE : 98 C7               	jz 		__EEGetNextOperator2
(1)  346/    94E0 :                     
(1)  347/    94E0 : 02                  	ccl 	 																; shift remainder left.
(1)  348/    94E1 : C2 FF               	ld 		-1(p2)
 AS V1.42 Beta [Bld 102] - source file minol.asm(expression.asm) - page 24 - 12/10/2015 15:47:25


(1)  349/    94E3 : F2 FF               	add 	-1(p2)
(1)  350/    94E5 : CA FF               	st 		-1(p2)
(1)  351/    94E7 :                     
(1)  352/    94E7 : C2 01               	ld 		__EEOperator(p2)												; get numerator.
(1)  353/    94E9 : 94 02               	jp 		__EE_Divide_Numerator_Positive
(1)  354/    94EB : AA FF               	ild 	-1(p2)  														; if numerator -ve, increment remainder.
(1)  355/    94ED :                     __EE_Divide_Numerator_Positive:
(1)  356/    94ED :                     
(1)  357/    94ED : C2 FF               	ld 		-1(p2) 															; calculate remainder - denominator
(1)  358/    94EF : 03                  	scl
(1)  359/    94F0 : 78                  	cae 
(1)  360/    94F1 : CA FD               	st 		-3(p2) 															; save in temp -3(p2)
(1)  361/    94F3 : 06                  	csa 																	; if temp >= 0, CY/L is set
(1)  362/    94F4 : 94 0A               	jp 		__EE_Divide_Temp_Positive
(1)  363/    94F6 :                     
(1)  364/    94F6 : C2 FD               	ld 		-3(p2) 															; copy temp to remainder
(1)  365/    94F8 : CA FF               	st 		-1(p2)
(1)  366/    94FA : C2 FE               	ld 		-2(p2) 															; or bit into quotient
(1)  367/    94FC : DA 00               	or 		__EEValue(p2)
(1)  368/    94FE : CA 00               	st 		__EEValue(p2)
(1)  369/    9500 :                     __EE_Divide_Temp_Positive:
(1)  370/    9500 :                     
(1)  371/    9500 : C2 FE               	ld 		-2(p2) 															; shift bit right
(1)  372/    9502 : 1C                  	sr
(1)  373/    9503 : CA FE               	st 		-2(p2)
(1)  374/    9505 :                     
(1)  375/    9505 : C2 01               	ld 		__EEOperator(p2)												; shift numerator positive
(1)  376/    9507 : 02                  	ccl
(1)  377/    9508 : F2 01               	add 	__EEOperator(p2)
(1)  378/    950A : CA 01               	st 		__EEOperator(p2)
(1)  379/    950C : 90 CE               	jmp 	__EE_Divide_Loop
(1)  380/    950E :                     
(1)  381/    950E :                     ;	quotient = 0			
(1)  382/    950E :                     ;	remainder = 0 			
(1)  383/    950E :                     ;	bit = 0x80
(1)  384/    950E :                     ;
(1)  385/    950E :                     ;	while (bit != 0):
(1)  386/    950E :                     ;
(1)  387/    950E :                     ;		remainder = remainder << 1
(1)  388/    950E :                     ;		if numerator & 0x80 != 0:
(1)  389/    950E :                     ;			remainder = (remainder + 1) & 0xFF
(1)  390/    950E :                     ;		temp = remainder - denominator
(1)  391/    950E :                     ;		if temp >= 0:
(1)  392/    950E :                     ;			remainder = temp
(1)  393/    950E :                     ;			quotient = quotient | bit
(1)  394/    950E :                     ;		bit = (bit >> 1) & 0xFF
(1)  395/    950E :                     ;		numerator = (numerator << 1) & 0xFF
(1)  396/    950E :                     
(1)  397/    950E :                     
(1)  398/    950E :                     ; ****************************************************************************************************************
(1)  399/    950E :                     ; ****************************************************************************************************************
(1)  400/    950E :                     ;
(1)  401/    950E :                     ;		P1 points to <expr>,<expr>) - parse out the values, read memory location and return in A, 
(1)  402/    950E :                     ;		CY/L = 0 => error A. -2(p2) and -1(p2) should contain the address if we need to read it later.
(1)  403/    950E :                     ;	
(1)  404/    950E :                     ; ****************************************************************************************************************
(1)  405/    950E :                     ; ****************************************************************************************************************
(1)  406/    950E :                     
(1)  407/    950E :                     ReadHLMemoryFull:
(1)  408/    950E : C5 01               	ld 		@1(p1) 												; look at next character and bump.
 AS V1.42 Beta [Bld 102] - source file minol.asm(expression.asm) - page 25 - 12/10/2015 15:47:25


(1)  409/    9510 : E4 20               	xri 	' '													; skip over the spaces.
(1)  410/    9512 : 98 FA               	jz 		ReadHLMemoryFull
(1)  411/    9514 : E4 08               	xri 	' ' ! '(' 											; if it is '(' then evaluate normally.
(1)  412/    9516 : 98 06               	jz 		ReadHLMemory
(1)  413/    9518 : C5 FF               	ld 		@-1(p1) 											; undo the post increment.
(1)  414/    951A : 02                  	ccl 														; return with a syntax error.
(1)  415/    951B : C4 05               	ldi 	ERROR_Syntax 
(1)  416/    951D : 3F                  	xppc 	p3 
(1)  417/    951E :                     
(1)  418/    951E :                     ReadHLMemory:
(1)  419/    951E :                     
(1)  420/    951E : =0x3                RHL_AddrLo = 3
(1)  421/    951E : =0x4                RHL_AddrHi = 4
(1)  422/    951E : =0xFFFFFFFFF..      RHL_Result = -1
(1)  423/    951E :                     
(1)  424/    951E : 40                  	lde 														; save E
(1)  425/    951F : CE FD               	st 		@-3(p2) 											; save leaving room for addr.lo and addr.hi
(1)  426/    9521 : 37                  	xpah 	p3 													; save P3
(1)  427/    9522 : CE FF               	st 		@-1(p2)
(1)  428/    9524 : 33                  	xpal 	p3
(1)  429/    9525 : CE FF               	st 		@-1(p2)
(1)  430/    9527 : C4 2C               	ldi 	',' 												; first seperator is a comma.
(1)  431/    9529 : 01                  	xae
(1)  432/    952A :                     __RHLLoop:	
(1)  433/    952A : C2 03               	ld 		RHL_AddrLo(p2) 										; copy addr lo to addr hi
(1)  434/    952C : CA 04               	st 		RHL_AddrHi(p2)
(1)  435/    952E : (MACRO)             	lpi 	p3,EvaluateExpression-1 							; evaluate the expression.
(1)  435/    952E : C4 93                       ldi     (EVALUATEEXPRESSION-1) / 256
(1)  435/    9530 : 37                          xpah    P3
(1)  435/    9531 : C4 91                       ldi     (EVALUATEEXPRESSION-1) & 255
(1)  435/    9533 : 33                          xpal    P3
(1)  436/    9534 : 3F                  	xppc 	p3
(1)  437/    9535 : CA 03               	st 		RHL_AddrLo(p2) 										; save in addr.lo
(1)  438/    9537 : 06                  	csa  														; if error
(1)  439/    9538 : 94 25               	jp 		__RHLError
(1)  440/    953A :                     __RHLSkip:
(1)  441/    953A : C1 00               	ld 		0(p1) 												; check for end of line
(1)  442/    953C : 98 25               	jz 		__RHLSyntax
(1)  443/    953E : C5 01               	ld 		@1(p1) 												; fetch next character
(1)  444/    9540 : E4 20               	xri 	' ' 												; skip over spaces.
(1)  445/    9542 : 98 F6               	jz 		__RHLSkip 
(1)  446/    9544 : C1 FF               	ld 		-1(p1) 												; get fetched character
(1)  447/    9546 : 60                  	xre 														; is it the one we wanted ?
(1)  448/    9547 : 9C 1A               	jnz 	__RHLSyntax 										; no, so fail.
(1)  449/    9549 : 40                  	lde 														; get character
(1)  450/    954A : E4 05               	xri 	','!')'												; switch from , to )
(1)  451/    954C : 01                  	xae 														; put back in E.
(1)  452/    954D : 40                  	lde 														; if it is ')' , go back.
(1)  453/    954E : E4 29               	xri 	')'
(1)  454/    9550 : 98 D8               	jz 		__RHLLoop 
(1)  455/    9552 :                     
(1)  456/    9552 : C2 03               	ld 		RHL_AddrLo(p2) 										; load address into P3
(1)  457/    9554 : 33                  	xpal 	p3
(1)  458/    9555 : C2 04               	ld 		RHL_AddrHi(p2)
(1)  459/    9557 : 37                  	xpah 	p3
(1)  460/    9558 : C3 00               	ld 		0(p3) 												; read byte there
(1)  461/    955A : CA FF               	st 		-1(p2) 												; save in return value space.
(1)  462/    955C : 03                  	scl 														; set CY/L indicating no error
(1)  463/    955D : 90 09               	jmp 	__RHLExit 											; and exit.
(1)  464/    955F :                     
 AS V1.42 Beta [Bld 102] - source file minol.asm(expression.asm) - page 26 - 12/10/2015 15:47:25


(1)  465/    955F :                     __RHLError:
(1)  466/    955F : C2 03               	ld 		RHL_AddrLo(p2) 										; read error code
(1)  467/    9561 : 90 02               	jmp 	__RHLSaveErrorAndExit
(1)  468/    9563 :                     
(1)  469/    9563 :                     __RHLSyntax:
(1)  470/    9563 : C4 05               	ldi 	ERROR_Syntax 										; syntax error
(1)  471/    9565 :                     __RHLSaveErrorAndExit:
(1)  472/    9565 : CA FF               	st 		RHL_Result(p2)										; save as error code
(1)  473/    9567 : 02                  	ccl 														; return error
(1)  474/    9568 :                     
(1)  475/    9568 :                     __RHLExit:														; exit with result in RHL_AddrLo.
(1)  476/    9568 : C6 01               	ld 		@1(p2) 												; reload P3
(1)  477/    956A : 33                  	xpal 	p3
(1)  478/    956B : C6 01               	ld 		@1(p2)
(1)  479/    956D : 37                  	xpah 	p3
(1)  480/    956E : C6 03               	ld 		@3(p2)
(1)  481/    9570 : 01                  	xae
(1)  482/    9571 : C2 FA               	ld 		-6(p2) 												; get the return value
(1)  483/    9573 : 3F                  	xppc 	p3 													; and exit.
(1)  484/    9574 :                     
      75/    9574 :                     
      76/    9574 :                     
      77/    9574 :                     
 AS V1.42 Beta [Bld 102] - source file minol.asm - page 27 - 12/10/2015 15:47:25


  symbol table (* = unused):
  ------------------------

*ARCHITECTURE :  i386-unknown-win32 - | *BIGENDIAN :                      0 - |
*BRANCHEXT :                      0 - | *CASESENSITIVE :                  0 - |
*CONSTPI :        3.141592653589793 - |  CURRENTADDR :                  CA3 - |
 CURRENTLINE :                  CA2 - | *DATE :                  12/10/2015 - |
 ERROR_BADTERM :                  4 - |  ERROR_DIVZERO :                  7 - |
 ERROR_LABEL :                    1 - |  ERROR_SYNTAX :                   5 - |
 EVALUATEEXPRESSION :          9392 C |  EXECUTECOMMAND :              9039 C |
*FALSE :                          0 - |  FINDPROGRAMLINE :             9239 C |
*FULLPMMU :                       1 - |  GETCHAR :                     9306 C |
 GETSTRING :                   932A C | *HAS64 :                          1 - |
*HASDSP :                         0 - | *HASFPU :                         0 - |
*HASPMMU :                        0 - |  INCOMMAND :                   923E C |
*INEXTMODE :                      0 - | *INLWORDMODE :                    0 - |
*INMAXMODE :                      0 - | *INSRCMODE :                      0 - |
*INSUPMODE :                      0 - |  JUMPTABLE :                   9204 C |
*LISTON :                         1 - |  LISTPROGRAM :                 923D C |
*MACEXP :                         1 - |  MINOLVARS :                    CA2 - |
*MOMCPU :                         C - | *MOMCPUNAME :                 SC/MP - |
 MONITORBOOT :                  210 - | *NESTMAX :                      100 - |
 NEWPROGRAM :                  923B C |  OUTCOMMAND :                  9242 C |
*PACKING :                        0 - | *PADDING :                        1 - |
 PRINT :                       9246 C |  READHLMEMORY :                951E C |
 READHLMEMORYFULL :            950E C | *RELAXED :                        0 - |
 RHL_ADDRHI :                     4 - |  RHL_ADDRLO :                     3 - |
 RHL_RESULT :      FFFFFFFFFFFFFFFF - |  RUNPROGRAM :                  923C C |
 SCREENCURSOR :                 C80 - |  SCREENMIRROR :                 C00 - |
 STOP :                        9020 C |  TEST :                        9022 C |
*TIME :                    15:47:25 - | *TRUE :                           1 - |
 VARIABLES :                    C82 - | *VERSION :                     142F - |
 WAIT4 :                       9202 C |  __EEBADTERM :                 9474 C |
 __EECALCULATE :               948B C |  __EECALCULATE3 :              944D C |
 __EECALCULATE4 :              93DF C |  __EECHARACTER :               93A5 C |
 __EECHARACTERERROR :          93B4 C |  __EECHECKOPERATOR :           945C C |
 __EECONSTANTLOOP :            941D C |  __EEDATAACCESS :              93E1 C |
 __EEDOOPERATOR :              946E C |  __EEERROR :                   9476 C |
 __EEERROR2 :                  9438 C |  __EEERROR3 :                  93EF C |
 __EEEXIT :                    9479 C |  __EEGETNEXTOPERATOR :         944F C |
 __EEGETNEXTOPERATOR2 :        94A7 C |  __EELOOP :                    93F1 C |
 __EELOOP2 :                   943A C |  __EENOTDIGIT :                943C C |
 __EEOPERATOR :                   1 - |  __EERANDOM :                  93B8 C |
 __EERANDOMNOTOGGLE :          93DA C |  __EERANDOMOFFSET :              1A - |
 __EERANDOM_ISINITIALISED :    93C6 C |  __EEVALUE :                      0 - |
*__EE_ADD :                    9499 C |  __EE_DIVIDE :                 94CB C |
 __EE_DIVIDE_LOOP :            94DC C |
 __EE_DIVIDE_NUMERATOR_POSITIVE :                                      94ED C |
 __EE_DIVIDE_TEMP_POSITIVE :   9500 C |  __EE_DIVIDE_ZERO :            9487 C |
 __EE_MULTIPLY :               94A9 C |  __EE_MULTIPLYLOOP :           94B1 C |
 __EE_MULTIPLY_B0ISZERO :      94BF C |  __EE_SUBTRACT :               94A1 C |
 __EXCODE :                    9071 C |  __EXDEFAULTLET :              9068 C |
 __EXEXIT :                    902C C |  __EXEXIT2 :                   909E C |
 __EXEXIT3 :                   911A C |  __EXEXIT4 :                   9175 C |
 __EXEXITNOSC :                902D C |  __EXFIRST :                   9044 C |
 __EXNEXTCOMMAND :             9056 C |  __EXNEXTCOMMAND2 :            90CE C |
 __EXNEXTCOMMAND3 :            90FF C |  __EXNEXTCOMMAND3IFZERO :      916B C |
 __EXNEXTCOMMAND4 :            917E C |  __EXSEARCH :                  9086 C |
 __EXSKIPCHARACTERS :          9220 C |  __EXSKIPEXIT :                9238 C |
 __EXSKIPONE :                 9222 C |  __EXSKIPSPACE :               922C C |
 AS V1.42 Beta [Bld 102] - source file minol.asm - page 28 - 12/10/2015 15:47:25


 __EX_CLEAR_LOOP :             90B0 C |  __EX_COMMAND_CALL :           90D0 C |
*__EX_COMMAND_CLEAR :          90A6 C |  __EX_COMMAND_END :            90EF C |
 __EX_COMMAND_GOTO :           91A0 C | *__EX_COMMAND_IF :             9122 C |
 __EX_COMMAND_IN :             918A C |  __EX_COMMAND_LET :            91F5 C |
 __EX_COMMAND_LET_OPTIONAL :   91FE C | *__EX_COMMAND_LIST :           91DC C |
 __EX_COMMAND_NEW :            9101 C |  __EX_COMMAND_OS :             91E5 C |
 __EX_COMMAND_PR :             90BA C |  __EX_COMMAND_RUN :            9097 C |
 __EX_DECODE_C :               90A0 C |  __EX_DECODE_I :               911C C |
 __EX_DECODE_L :               91D6 C |  __EX_END_ENDOFLINE :          90F9 C |
 __EX_GOTO_NOTFOUND :          91D2 C |  __EX_IF_LEGALTEST :           9144 C |
 __EX_IF_LESSTHAN :            9177 C |  __EX_IF_SUCCEED :             916D C |
 __EX_ISEQUAL :                9165 C |  __EX_NEW_SYNTAX :             9116 C |
*__EX_NEW_SYNTAX_NZ2 :         9142 C |  __EX_REPORTERROR :            9062 C |
 __EX_REPORTERRORA :           9182 C |  __EX_REPORTERRORE :           9183 C |
 __EX_REPORTERRORIFPOSITIVE :  90CC C |  __GCNOTLOWER [GETCHAR] :      9325 C |
 __GCWAITKEY [GETCHAR] :       930B C |  __GCWAITRELEASE [GETCHAR] :   9313 C |
 __GSBACKSPACE [GETSTRING] :   9385 C |  __GSCONTROLKEY [GETSTRING] :  9368 C |
 __GSLOOP [GETSTRING] :        9338 C |  __PRCLEARFROMMOVETO [PRINT] : 92E6 C |
 __PRCLEARLOOP [PRINT] :       92E8 C |  __PRCLEARSCREEN [PRINT] :     92E4 C |
 __PRCOPY [PRINT] :            92F2 C |  __PREXIT [PRINT] :            92A9 C |
 __PREXITNOCHECK [PRINT] :     92AD C |  __PRISCONTROLCHAR [PRINT] :   92BB C |
 __PRISRETURN [PRINT] :        92DB C |  __PRNOTASCII [PRINT] :        9283 C |
 __PRPRINTCHARACTERA [PRINT] : 9267 C |  __PRPRINTSTRING [PRINT] :     9255 C |
 __PRSCROLLLOOP [PRINT] :      929B C |  __PRUPDATECURSOR [PRINT] :    928C C |
 __RHLERROR :                  955F C |  __RHLEXIT :                   9568 C |
 __RHLLOOP :                   952A C |  __RHLSAVEERRORANDEXIT :       9565 C |
 __RHLSKIP :                   953A C |  __RHLSYNTAX :                 9563 C |

    166 symbols
     33 unused symbols

 AS V1.42 Beta [Bld 102] - source file minol.asm - page 29 - 12/10/2015 15:47:25


  defined macros:
  ---------------

LPI                                   | TABLEENTRY                           

      2 macros

 AS V1.42 Beta [Bld 102] - source file minol.asm - page 30 - 12/10/2015 15:47:25


  codepages:
  ----------

STANDARD (0 changed characters)


0.02 seconds assembly time

   1372 lines source file
   1522 lines incl. macro expansions
      2 passes
      0 errors
      0 warnings
