 AS V1.42 Beta [Bld 102] - source file minol.asm - page 1 - 1/5/2016 20:05:28


       1/       0 :                     ; ****************************************************************************************************************
       2/       0 :                     ; ****************************************************************************************************************
       3/       0 :                     ;
       4/       0 :                     ;												Minol ROM Image
       5/       0 :                     ;
       6/       0 :                     ; ****************************************************************************************************************
       7/       0 :                     ; ****************************************************************************************************************
       8/       0 :                     
       9/       0 :                     	cpu 	sc/mp
      10/       0 :                     
      11/       0 :                     	include source\memorymacros.asm 							; Memory allocation and Macro definition.	
(1)    1/       0 :                     ; ****************************************************************************************************************
(1)    2/       0 :                     ; ****************************************************************************************************************
(1)    3/       0 :                     ;
(1)    4/       0 :                     ;										Memory and Macro Allocation.
(1)    5/       0 :                     ;	
(1)    6/       0 :                     ; ****************************************************************************************************************
(1)    7/       0 :                     ; ****************************************************************************************************************
(1)    8/       0 :                     
(1)    9/       0 : =0x3                OSMathLibrary = 0x0003 											; the Maths library is here.
(1)   10/       0 : =0x210              BootMonitor = 0x210 											; address to boot monitor
(1)   11/       0 :                     
(1)   12/       0 :                     ; ****************************************************************************************************************
(1)   13/       0 :                     ;												 Memory Allocation
(1)   14/       0 :                     ; ****************************************************************************************************************
(1)   15/       0 :                     
(1)   16/       0 : =0xC00              ScreenMirror = 0xC00 											; Screen mirror, 128 bytes, 256 byte page boundary.
(1)   17/       0 : =0xC80              ScreenCursor = ScreenMirror+0x80  								; Position on that screen (00..7F)
(1)   18/       0 :                     
(1)   19/       0 : =0xC90              System = 0xC90 													; System Memory
(1)   20/       0 :                     
(1)   21/       0 : =0xC8E              RandomSeed = System-2											; Random Seed Value (2 bytes)
(1)   22/       0 : =0xC90              Variables = System 												; Variables (26 bytes)
(1)   23/       0 :                     
(1)   24/       0 :                     ; ****************************************************************************************************************
(1)   25/       0 :                     ;														Macros
(1)   26/       0 :                     ; ****************************************************************************************************************
(1)   27/       0 :                     
(1)   28/       0 :                     lpi	macro	ptr,addr											; load pointer register with constant
(1)   29/       0 :                     	ldi 	(addr) / 256
(1)   30/       0 :                     	xpah 	ptr
(1)   31/       0 :                     	ldi 	(addr) & 255
(1)   32/       0 :                     	xpal 	ptr
(1)   33/       0 :                     	endm
(1)   34/       0 :                     
(1)   35/       0 :                     pushp macro ptr 												; push pointer register on stack
(1)   36/       0 :                     	xpah 	ptr
(1)   37/       0 :                     	st 		@-1(p2)
(1)   38/       0 :                     	xpal 	ptr
(1)   39/       0 :                     	st 		@-1(p2)
(1)   40/       0 :                     	endm
(1)   41/       0 :                     
(1)   42/       0 :                     pullp macro ptr 												; pull pointer register off stack
(1)   43/       0 :                     	ld 		@1(p2)
(1)   44/       0 :                     	xpal 	ptr
(1)   45/       0 :                     	ld 		@1(p2)
(1)   46/       0 :                     	xpah 	ptr
(1)   47/       0 :                     	endm
(1)   48/       0 :                     
(1)   49/       0 :                     pushe macro 													; push E on stack
 AS V1.42 Beta [Bld 102] - source file minol.asm(memorymacros.asm) - page 2 - 1/5/2016 20:05:28


(1)   50/       0 :                     	lde
(1)   51/       0 :                     	st 		@-1(p2)
(1)   52/       0 :                     	endm
(1)   53/       0 :                     
(1)   54/       0 :                     pulle macro 													; pull E off stack
(1)   55/       0 :                     	ld 		@1(p2)
(1)   56/       0 :                     	xae
(1)   57/       0 :                     	endm
(1)   58/       0 :                     
(1)   59/       0 :                     pusha macro 													; push A on stack
(1)   60/       0 :                     	st 		@-1(p2)
(1)   61/       0 :                     	endm
(1)   62/       0 :                     
(1)   63/       0 :                     pulla macro
(1)   64/       0 :                     	ld 		@1(p2)
(1)   65/       0 :                     	endm
(1)   66/       0 :                     
(1)   67/       0 :                     ;setv macro ch,value 											; sets a variable to a value, assumes P3 = Variables.
(1)   68/       0 :                     ;	ldi 	(value) & 255
(1)   69/       0 :                     ;	st 		((ch) & 0x3F)*2(p3)
(1)   70/       0 :                     ;	ldi 	(value) / 256
(1)   71/       0 :                     ;	st 		((ch) & 0x3F)*2+1(p3)
(1)   72/       0 :                     ;	endm
(1)   73/       0 :                     ;
(1)   74/       0 :                     ;code macro lineNo,code 											; a debugging macro, which fakes up a line of code.
(1)   75/       0 :                     ;	db 		strlen(code)+4 										; one byte offset to next (0 = End of code)
(1)   76/       0 :                     ;	dw 		lineNo 												; two byte line number (low byte first)
(1)   77/       0 :                     ;	db 		code,0 												; ASCIIZ string
(1)   78/       0 :                     ;	endm
(1)   79/       0 :                     ;
(1)   80/       0 :                     ;special macro ch,method
(1)   81/       0 :                     ;	db 		ch
(1)   82/       0 :                     ;	dw 		(method)-1
(1)   83/       0 :                     ;	endm
(1)   84/       0 :                     
      12/       0 :                     	include source\errors.asm 									; Error Codes
(1)    1/       0 :                     ; ****************************************************************************************************************
(1)    2/       0 :                     ; ****************************************************************************************************************
(1)    3/       0 :                     ;
(1)    4/       0 :                     ;												Error Codes
(1)    5/       0 :                     ;
(1)    6/       0 :                     ; ****************************************************************************************************************
(1)    7/       0 :                     ; ****************************************************************************************************************
(1)    8/       0 :                     
(1)    9/       0 : =0x1                ERRC_LABEL = 1 													; Label does not exist (e.g. GOTO)
(1)   10/       0 : =0x2                ERRC_UNKNOWN = 2												; Unknown instruction
(1)   11/       0 : =0x4                ERRC_TERM = 4 													; Illegal term/expression
(1)   12/       0 : =0x5                ERRC_SYNTAX = 5													; Syntax Error
(1)   13/       0 : =0x6                ERRC_MEMORY = 6 												; Out of memory
(1)   14/       0 : =0x7                ERRC_DIVZERO = 7 												; Division by Zero Error.
(1)   15/       0 :                     
(1)   16/       0 :                     
(1)   17/       0 :                     
      13/       0 :                     
      14/       0 :                     ; ****************************************************************************************************************
      15/       0 :                     ;													Main Program
      16/       0 :                     ; ****************************************************************************************************************
      17/       0 :                     
      18/    9000 :                     	org 	0x9000 												; the ROM starts here
      19/    9000 :                     
 AS V1.42 Beta [Bld 102] - source file minol.asm - page 3 - 1/5/2016 20:05:28


      20/    9000 : 68                  	db 		0x68												; this makes it boot straight into this ROM.
      21/    9001 : (MACRO)             	lpi 	p2,0xFF8											; set up stack default value
      21/    9001 : C4 0F                       ldi     (0XFF8) / 256
      21/    9003 : 36                          xpah    P2
      21/    9004 : C4 F8                       ldi     (0XFF8) & 255
      21/    9006 : 32                          xpal    P2
      22/    9007 :                     
      23/    9007 : (MACRO)             	lpi 	p3,EvaluateExpression-1
      23/    9007 : C4 91                       ldi     (EVALUATEEXPRESSION-1) / 256
      23/    9009 : 37                          xpah    P3
      23/    900A : C4 6C                       ldi     (EVALUATEEXPRESSION-1) & 255
      23/    900C : 33                          xpal    P3
      24/    900D : (MACRO)             	lpi 	p1,expr
      24/    900D : C4 90                       ldi     (EXPR) / 256
      24/    900F : 35                          xpah    P1
      24/    9010 : C4 16                       ldi     (EXPR) & 255
      24/    9012 : 31                          xpal    P1
      25/    9013 : 3F                  	xppc	p3
      26/    9014 :                     wait1:	
      27/    9014 : 90 FE               	jmp 	wait1
      28/    9016 :                     expr:
      29/    9016 : 31 32 2A 31 31 2D   	db 		"12*11-32/2",0
                    33 32 2F 32 00 
      30/    9021 :                     
      31/    9021 :                     
      32/    9021 :                     ; ****************************************************************************************************************
      33/    9021 :                     ;													Source Files
      34/    9021 :                     ; *********************************12*******************************************************************************
      35/    9021 :                     
      36/    9021 :                     	include source\screen.asm 									; screen I/O stuff.
(1)    1/    9021 :                     ; ****************************************************************************************************************
(1)    2/    9021 :                     ; ****************************************************************************************************************
(1)    3/    9021 :                     ;
(1)    4/    9021 :                     ;											Screen I/O, VTL-2 ROM
(1)    5/    9021 :                     ;											=====================
(1)    6/    9021 :                     ;
(1)    7/    9021 :                     ;	Provides Character and String Input/Output functionality.
(1)    8/    9021 :                     ;
(1)    9/    9021 :                     ; ****************************************************************************************************************
(1)   10/    9021 :                     ; ****************************************************************************************************************
(1)   11/    9021 :                     
(1)   12/    9021 :                     ; ****************************************************************************************************************
(1)   13/    9021 :                     ; ****************************************************************************************************************
(1)   14/    9021 :                     ;
(1)   15/    9021 :                     ;	Print routine. Prints either character in A, or ASCIIZ string at P1 (if A is zero). Preserves all registers
(1)   16/    9021 :                     ;	except if printing string, P1 points to the character after the NULL terminator.
(1)   17/    9021 :                     ;
(1)   18/    9021 :                     ;	Scrolls automatically. Understands character codes 32-255, 8 (Backspace) 12 (Clear Screen) 13 (Carriage
(1)   19/    9021 :                     ;	Return). Others are currently ignored (except 0, see above). Note L/C values (97....) display those characters
(1)   20/    9021 :                     ;	in the ROM font *not* lower case :)
(1)   21/    9021 :                     ;
(1)   22/    9021 :                     ; ****************************************************************************************************************
(1)   23/    9021 :                     ; ****************************************************************************************************************
(1)   24/    9021 :                     
(1)   25/    9021 :                     Print:
(1)   26/    9021 :                     	section 	Print
(1)   27/    9021 :                     
(1)   28/    9021 : (MACRO)             	pusha														; push registers on stack
(1)   28/    9021 : CE FF                       st              @-1(p2)
(1)   29/    9023 : (MACRO)             	pushp 	p1
 AS V1.42 Beta [Bld 102] - source file minol.asm(screen.asm) - page 4 - 1/5/2016 20:05:28


(1)   29/    9023 : 35                          xpah    P1
(1)   29/    9024 : CE FF                       st              @-1(p2)
(1)   29/    9026 : 31                          xpal    P1
(1)   29/    9027 : CE FF                       st              @-1(p2)
(1)   30/    9029 : (MACRO)             	pushe
(1)   30/    9029 : 40                          lde
(1)   30/    902A : CE FF                       st              @-1(p2)
(1)   31/    902C :                     
(1)   32/    902C : C2 03               	ld 		3(p2) 												; read character 
(1)   33/    902E : 9C 12               	jnz 	__PRPrintCharacterA 								; if non zero print it on its own.
(1)   34/    9030 :                     
(1)   35/    9030 :                     __PRPrintString:
(1)   36/    9030 : C2 01               	ld 		1(p2) 												; restore original P1
(1)   37/    9032 : 31                  	xpal 	p1
(1)   38/    9033 : C2 02               	ld 		2(p2)
(1)   39/    9035 : 35                  	xpah 	p1 													; read character at P1.
(1)   40/    9036 : C5 01               	ld 		@1(p1)
(1)   41/    9038 : 01                  	xae 														; save in E.
(1)   42/    9039 : 35                  	xpah 	p1 													; write P1 back.
(1)   43/    903A : CA 02               	st 		2(p2)
(1)   44/    903C : 31                  	xpal 	p1
(1)   45/    903D : CA 01               	st 		1(p2)
(1)   46/    903F : 40                  	lde 														; get character from E
(1)   47/    9040 : 98 46               	jz 		__PRExitNoCheck 									; exit without loop check.
(1)   48/    9042 :                     ;
(1)   49/    9042 :                     ;	Print character in A now ; throughout it is stored in E.
(1)   50/    9042 :                     ;
(1)   51/    9042 :                     __PRPrintCharacterA:
(1)   52/    9042 : 01                  	xae 														; save character in E.
(1)   53/    9043 :                     ;
(1)   54/    9043 :                     ;	Read cursor and set P1 to that address
(1)   55/    9043 :                     ;
(1)   56/    9043 : C4 0C               	ldi 	ScreenCursor/256 									; set P1 to point to screen cursor
(1)   57/    9045 : 35                  	xpah 	p1
(1)   58/    9046 : C4 80               	ldi 	ScreenCursor&255
(1)   59/    9048 : 31                  	xpal 	p1
(1)   60/    9049 : C1 00               	ld 		0(p1) 												; put cursor position in P1.L
(1)   61/    904B : 31                  	xpal 	p1
(1)   62/    904C :                     ;
(1)   63/    904C :                     ;	Check for control
(1)   64/    904C :                     ;
(1)   65/    904C : 40                  	lde 														; look at character
(1)   66/    904D : D4 E0               	ani 	0xE0 												; is it code 0-31
(1)   67/    904F : 98 45               	jz 		__PRIsControlChar
(1)   68/    9051 :                     ;
(1)   69/    9051 :                     ;	Print non-control
(1)   70/    9051 :                     ;
(1)   71/    9051 : 40                  	lde 														; read character
(1)   72/    9052 : 03                  	scl 														; CY/L clear if < 96
(1)   73/    9053 : FC 60               	cai 	96 
(1)   74/    9055 : 06                  	csa 	 	 												; skip if carry set
(1)   75/    9056 : E4 80               	xri 	0x80													
(1)   76/    9058 : 94 04               	jp 		__PRNotASCII
(1)   77/    905A : 40                  	lde 														; if ASCII make 6 bit.
(1)   78/    905B : D4 3F               	ani 	0x3F
(1)   79/    905D : 01                  	xae
(1)   80/    905E :                     __PRNotASCII:
(1)   81/    905E : 40                  	lde 														; get character.
(1)   82/    905F : C9 00               	st 		(p1) 												; save in shadow memory
(1)   83/    9061 : 35                  	xpah 	p1 													; switch to VRAM, preserving A.
 AS V1.42 Beta [Bld 102] - source file minol.asm(screen.asm) - page 5 - 1/5/2016 20:05:28


(1)   84/    9062 : C4 00               	ldi 	0 													
(1)   85/    9064 : 35                  	xpah 	p1
(1)   86/    9065 : CD 01               	st 		@1(p1) 												; save in screen memory, advance write position.
(1)   87/    9067 :                     ;
(1)   88/    9067 :                     ;	Write cursor position back from P1.L
(1)   89/    9067 :                     ;
(1)   90/    9067 :                     __PRUpdateCursor:
(1)   91/    9067 : C4 0C               	ldi		ScreenCursor / 256 									; set P1 to point to screen cursor, restore position to P1
(1)   92/    9069 : 35                  	xpah 	p1
(1)   93/    906A : C4 80               	ldi 	ScreenCursor & 255 
(1)   94/    906C : 31                  	xpal 	p1 													; after this, adjusted cursor position is in AC.
(1)   95/    906D : C9 00               	st 		(p1) 												; write back in cursor position
(1)   96/    906F : 94 13               	jp 		__PRExit 											; if position is off the bottom then scroll.
(1)   97/    9071 :                     ;
(1)   98/    9071 :                     ;	Scroll display
(1)   99/    9071 :                     ;
(1)  100/    9071 : C4 0C               	ldi 	(ScreenMirror+16) / 256 							; point P1 to 2nd line.
(1)  101/    9073 : 35                  	xpah 	p1
(1)  102/    9074 : C4 10               	ldi 	(ScreenMirror+16) & 255
(1)  103/    9076 :                     __PRScrollLoop:
(1)  104/    9076 : 31                  	xpal 	p1
(1)  105/    9077 : C1 00               	ld 		0(p1) 												; copy char to previous line
(1)  106/    9079 : C9 F0               	st 		-16(p1)
(1)  107/    907B : C5 01               	ld 		@1(p1) 												; bump pointer.
(1)  108/    907D : 31                  	xpal 	p1
(1)  109/    907E : 94 F6               	jp 		__PRScrollLoop
(1)  110/    9080 : C4 70               	ldi 	128-16 												; clear from and move to last line
(1)  111/    9082 : 90 3D               	jmp 	__PRClearFromMoveTo
(1)  112/    9084 :                     ;
(1)  113/    9084 :                     ;	Exit screen drawing routine.
(1)  114/    9084 :                     ;
(1)  115/    9084 :                     __PRExit:
(1)  116/    9084 : C2 03               	ld 		3(p2) 												; if character was zero, loop
(1)  117/    9086 : 98 A8               	jz 		__PRPrintString 									; back as printing string at P1.
(1)  118/    9088 :                     __PRExitNoCheck:
(1)  119/    9088 : (MACRO)             	pulle 														; restore registers
(1)  119/    9088 : C6 01                       ld              @1(p2)
(1)  119/    908A : 01                          xae
(1)  120/    908B : (MACRO)             	pullp 	p1
(1)  120/    908B : C6 01                       ld              @1(p2)
(1)  120/    908D : 31                          xpal    P1
(1)  120/    908E : C6 01                       ld              @1(p2)
(1)  120/    9090 : 35                          xpah    P1
(1)  121/    9091 : (MACRO)             	pulla
(1)  121/    9091 : C6 01                       ld              @1(p2)
(1)  122/    9093 : 3F                  	xppc 	p3 													; return
(1)  123/    9094 : 90 8B               	jmp 	Print 												; make re-entrant.
(1)  124/    9096 :                     ;
(1)  125/    9096 :                     ;	Check for supported control characters 8 (Backspace) 12 (Clear) 13 (Carriage Return)
(1)  126/    9096 :                     ;
(1)  127/    9096 :                     __PRIsControlChar:
(1)  128/    9096 : 40                  	lde 														; restore character.
(1)  129/    9097 : E4 0D               	xri 	13 													; carriage return ? (13)
(1)  130/    9099 : 98 1B               	jz 		__PRIsReturn
(1)  131/    909B : E4 01               	xri 	13!12 												; form feed ? (12)
(1)  132/    909D : 98 20               	jz 		__PRClearScreen
(1)  133/    909F : E4 04               	xri 	12!8 												; backspace ? (8)
(1)  134/    90A1 : 9C E1               	jnz 	__PRExit 
(1)  135/    90A3 :                     ;
(1)  136/    90A3 :                     ;	Handle backspace (8)
 AS V1.42 Beta [Bld 102] - source file minol.asm(screen.asm) - page 6 - 1/5/2016 20:05:28


(1)  137/    90A3 :                     ;
(1)  138/    90A3 : 31                  	xpal 	p1 													; check cursor position is zero
(1)  139/    90A4 : 98 DE               	jz 		__PRExit 											; if it is, cannot backspace so exit.
(1)  140/    90A6 : 31                  	xpal 	p1  												; put it back
(1)  141/    90A7 : C5 FF               	ld 		@-1(p1)												; move it back one
(1)  142/    90A9 : C4 20               	ldi 	' '	 												; erase in shadow
(1)  143/    90AB : C9 00               	st 		(p1)
(1)  144/    90AD : C4 00               	ldi 	0 													; point P1 to VRAM
(1)  145/    90AF : 35                  	xpah 	p1
(1)  146/    90B0 : C4 20               	ldi 	' '													; erase in VRAM
(1)  147/    90B2 : C9 00               	st 		(p1)
(1)  148/    90B4 : 90 B1               	jmp 	__PRUpdateCursor 									; and exit
(1)  149/    90B6 :                     ;
(1)  150/    90B6 :                     ;	Handle carriage return (13)
(1)  151/    90B6 :                     ;
(1)  152/    90B6 :                     __PRIsReturn:
(1)  153/    90B6 : 31                  	xpal 	p1 													; cursor position in A
(1)  154/    90B7 : D4 F0               	ani 	0xF0 												; start of current line
(1)  155/    90B9 : 02                  	ccl 														; down one line
(1)  156/    90BA : F4 10               	adi 	0x10 	
(1)  157/    90BC : 31                  	xpal 	p1 													; put it back in P1.
(1)  158/    90BD : 90 A8               	jmp 	__PRUpdateCursor
(1)  159/    90BF :                     ;
(1)  160/    90BF :                     ;	Handle clear screen (12)
(1)  161/    90BF :                     ;
(1)  162/    90BF :                     __PRClearScreen:
(1)  163/    90BF : C4 00               	ldi 	0 													; clear shadow memory from here.
(1)  164/    90C1 :                     ;
(1)  165/    90C1 :                     ;	From position A, clear the memory in the shadow screen to the end, copy the shadow screen to VRAM
(1)  166/    90C1 :                     ;	then use position A as the new cursor position.
(1)  167/    90C1 :                     ;
(1)  168/    90C1 :                     __PRClearFromMoveTo:
(1)  169/    90C1 : CE FF               	st 		@-1(p2) 											; save this position, the cursor goes here.
(1)  170/    90C3 :                     __PRClearLoop:
(1)  171/    90C3 : 31                  	xpal 	p1 													; save position in P1.
(1)  172/    90C4 : C4 20               	ldi 	' '													; write space there.
(1)  173/    90C6 : CD 01               	st 		@1(p1)
(1)  174/    90C8 : 31                  	xpal 	p1
(1)  175/    90C9 : 94 F8               	jp 		__PRClearLoop 										; until reached shadow memory start.
(1)  176/    90CB : C4 00               	ldi 	0 													; now copy shadow memory to screen memory.
(1)  177/    90CD :                     __PRCopy:
(1)  178/    90CD : 31                  	xpal 	p1 													; set up P1.L
(1)  179/    90CE : C4 0C               	ldi 	ScreenMirror/256 									; point to shadow memory.
(1)  180/    90D0 : 35                  	xpah 	p1 													
(1)  181/    90D1 : C1 00               	ld 		(p1) 												; read shadow memory
(1)  182/    90D3 : 35                  	xpah 	p1 													; zero P1.H preserving A
(1)  183/    90D4 : C4 00               	ldi 	0
(1)  184/    90D6 : 35                  	xpah 	p1
(1)  185/    90D7 : CD 01               	st 		@1(p1) 												; save and increment p1
(1)  186/    90D9 : 31                  	xpal 	p1 
(1)  187/    90DA : 94 F1               	jp 		__PRCopy 											; keep doing till all copied.
(1)  188/    90DC : C6 01               	ld 		@1(p2) 												; read cursor position
(1)  189/    90DE : 31                  	xpal 	p1 													; put in P1.L
(1)  190/    90DF : 90 86               	jmp 	__PRUpdateCursor
(1)  191/    90E1 :                     
(1)  192/    90E1 :                     	endsection 	Print
(1)  193/    90E1 :                     
(1)  194/    90E1 :                     ; ****************************************************************************************************************
(1)  195/    90E1 :                     ; ****************************************************************************************************************
(1)  196/    90E1 :                     ;
 AS V1.42 Beta [Bld 102] - source file minol.asm(screen.asm) - page 7 - 1/5/2016 20:05:28


(1)  197/    90E1 :                     ;		Input a single character into A. Case is converted to Upper. All registers preserved except A
(1)  198/    90E1 :                     ;
(1)  199/    90E1 :                     ; ****************************************************************************************************************
(1)  200/    90E1 :                     ; ****************************************************************************************************************
(1)  201/    90E1 :                     
(1)  202/    90E1 :                     GetChar:
(1)  203/    90E1 :                     	section 	GetChar
(1)  204/    90E1 : C4 08               	ldi 	0x8 												; set P1 to $8xx, and save P1.H
(1)  205/    90E3 : 35                  	xpah 	p1
(1)  206/    90E4 : CE FF               	st 		@-1(p2)
(1)  207/    90E6 :                     __GCWaitKey: 													; wait for key press
(1)  208/    90E6 : C1 00               	ld 		0(p1)
(1)  209/    90E8 : 94 FC               	jp 		__GCWaitKey
(1)  210/    90EA : D4 7F               	ani	 	0x7F 												; throw away the upper bit.
(1)  211/    90EC : CA FF               	st 		-1(p2) 												; save it below stack
(1)  212/    90EE :                     __GCWaitRelease:
(1)  213/    90EE : C1 00               	ld 		0(p1) 												; wait for release
(1)  214/    90F0 : D4 80               	ani 	0x80
(1)  215/    90F2 : 9C FA               	jnz 	__GCWaitRelease
(1)  216/    90F4 : C6 01               	ld 		@1(p2) 												; restore P1.H
(1)  217/    90F6 : 35                  	xpah 	p1
(1)  218/    90F7 : C2 FE               	ld 		-2(p2) 												; restore saved value
(1)  219/    90F9 : 02                  	ccl
(1)  220/    90FA : F4 20               	adi 	0x20												; will make lower case -ve
(1)  221/    90FC : 94 02               	jp 		__GCNotLower
(1)  222/    90FE : FC 20               	cai 	0x20 												; capitalise
(1)  223/    9100 :                     __GCNotLower:
(1)  224/    9100 : F4 E0               	adi 	0xE0 												; fix up.
(1)  225/    9102 : 3F                  	xppc 	p3 													; return
(1)  226/    9103 : 90 DC               	jmp 	GetChar 											; make re-entrant
(1)  227/    9105 :                     	endsection 	GetChar
(1)  228/    9105 :                     
(1)  229/    9105 :                     ; ****************************************************************************************************************
(1)  230/    9105 :                     ; ****************************************************************************************************************
(1)  231/    9105 :                     ;
(1)  232/    9105 :                     ;			Read an ASCIIZ string from keyboard into P1 of length A maximum (excludes NULL terminator)
(1)  233/    9105 :                     ;
(1)  234/    9105 :                     ; ****************************************************************************************************************
(1)  235/    9105 :                     ; ****************************************************************************************************************
(1)  236/    9105 :                     
(1)  237/    9105 :                     GetString:
(1)  238/    9105 :                     	section GetString
(1)  239/    9105 : (MACRO)             	pusha 														; save A,P3,E
(1)  239/    9105 : CE FF                       st              @-1(p2)
(1)  240/    9107 : (MACRO)             	pushp 	p3
(1)  240/    9107 : 37                          xpah    P3
(1)  240/    9108 : CE FF                       st              @-1(p2)
(1)  240/    910A : 33                          xpal    P3
(1)  240/    910B : CE FF                       st              @-1(p2)
(1)  241/    910D : (MACRO)             	pushe 
(1)  241/    910D : 40                          lde
(1)  241/    910E : CE FF                       st              @-1(p2)
(1)  242/    9110 : C4 00               	ldi 	0 													; set E (current position) to A.
(1)  243/    9112 : 01                  	xae
(1)  244/    9113 :                     __GSLoop:
(1)  245/    9113 : (MACRO)             	lpi 	p3,Print-1 											; print the prompt (half coloured square)
(1)  245/    9113 : C4 90                       ldi     (PRINT-1) / 256
(1)  245/    9115 : 37                          xpah    P3
(1)  245/    9116 : C4 20                       ldi     (PRINT-1) & 255
(1)  245/    9118 : 33                          xpal    P3
 AS V1.42 Beta [Bld 102] - source file minol.asm(screen.asm) - page 8 - 1/5/2016 20:05:28


(1)  246/    9119 : C4 9B               	ldi 	155
(1)  247/    911B : 3F                  	xppc 	p3
(1)  248/    911C : (MACRO)             	lpi 	p3,GetChar-1 										; get a character
(1)  248/    911C : C4 90                       ldi     (GETCHAR-1) / 256
(1)  248/    911E : 37                          xpah    P3
(1)  248/    911F : C4 E0                       ldi     (GETCHAR-1) & 255
(1)  248/    9121 : 33                          xpal    P3
(1)  249/    9122 : 3F                  	xppc 	p3
(1)  250/    9123 : C9 80               	st 		-0x80(p1) 											; save it in the current position.
(1)  251/    9125 : (MACRO)             	lpi 	p3,Print-1 											; erase the prompt with backspace.
(1)  251/    9125 : C4 90                       ldi     (PRINT-1) / 256
(1)  251/    9127 : 37                          xpah    P3
(1)  251/    9128 : C4 20                       ldi     (PRINT-1) & 255
(1)  251/    912A : 33                          xpal    P3
(1)  252/    912B : C4 08               	ldi 	8
(1)  253/    912D : 3F                  	xppc 	p3
(1)  254/    912E : C1 80               	ld 		-0x80(p1) 											; re-read character
(1)  255/    9130 : D4 E0               	ani 	0xE0 												; check if control key.
(1)  256/    9132 : 98 0F               	jz 		__GSControlKey 
(1)  257/    9134 : 40                  	lde 														; get current position.
(1)  258/    9135 : E2 03               	xor 	3(p2) 												; reached maximum length of buffer ?
(1)  259/    9137 : 98 DA               	jz 		__GSLoop 											; if so, ignore the key and go round again.
(1)  260/    9139 : C1 80               	ld 		-0x80(p1) 											; get character and print it
(1)  261/    913B : 3F                  	xppc 	p3
(1)  262/    913C : C4 01               	ldi 	1 													; increment E
(1)  263/    913E : 02                  	ccl
(1)  264/    913F : 70                  	ade
(1)  265/    9140 : 01                  	xae
(1)  266/    9141 : 90 D0               	jmp 	__GSLoop 											; and go round again.
(1)  267/    9143 :                     ;
(1)  268/    9143 :                     ;	Handle control keys (0x00-0x1F)
(1)  269/    9143 :                     ;
(1)  270/    9143 :                     __GSControlKey:
(1)  271/    9143 : C1 80               	ld 		-0x80(p1) 											; get typed in key
(1)  272/    9145 : E4 08               	xri 	8 													; check for backspace.
(1)  273/    9147 : 98 17               	jz 		__GSBackspace 			
(1)  274/    9149 : E4 05               	xri 	8!13 												; check for CR
(1)  275/    914B : 9C C6               	jnz 	__GSLoop 											; if not, ignore the key.
(1)  276/    914D :                     ;
(1)  277/    914D :                     ;	Carriage Return, ending input.
(1)  278/    914D :                     ;
(1)  279/    914D : C9 80               	st 		-0x80(p1) 											; replace the CR written with NULL terminator.
(1)  280/    914F : C4 0D               	ldi 	13 													; print CR
(1)  281/    9151 : 3F                  	xppc 	p3
(1)  282/    9152 : (MACRO)             	pulle 														; restore E,P3,A
(1)  282/    9152 : C6 01                       ld              @1(p2)
(1)  282/    9154 : 01                          xae
(1)  283/    9155 : (MACRO)             	pullp	p3
(1)  283/    9155 : C6 01                       ld              @1(p2)
(1)  283/    9157 : 33                          xpal    P3
(1)  283/    9158 : C6 01                       ld              @1(p2)
(1)  283/    915A : 37                          xpah    P3
(1)  284/    915B : (MACRO)             	pulla
(1)  284/    915B : C6 01                       ld              @1(p2)
(1)  285/    915D : 3F                  	xppc 	p3 													; return
(1)  286/    915E : 90 A5               	jmp 	GetString 											; make re-entrant (probably unneccessary !!)
(1)  287/    9160 :                     ;
(1)  288/    9160 :                     ;	Backspace entered
(1)  289/    9160 :                     ;
(1)  290/    9160 :                     __GSBackspace
 AS V1.42 Beta [Bld 102] - source file minol.asm(screen.asm) - page 9 - 1/5/2016 20:05:28


(1)  291/    9160 : 40                  	lde 														; if E = 0 we can't backspace any further.
(1)  292/    9161 : 98 B0               	jz 		__GSLoop
(1)  293/    9163 : C4 08               	ldi 	8 													; backspace on screen
(1)  294/    9165 : 3F                  	xppc 	p3
(1)  295/    9166 : C4 FF               	ldi 	0xFF 												; decrement E
(1)  296/    9168 : 02                  	ccl
(1)  297/    9169 : 70                  	ade
(1)  298/    916A : 01                  	xae
(1)  299/    916B : 90 A6               	jmp 	__GSLoop 											; and go round again.
(1)  300/    916D :                     
(1)  301/    916D :                     	endsection GetString
(1)  302/    916D :                     
      37/    916D :                     	include source\expression.asm 								; expression evaluator.
(1)    1/    916D :                     ; ****************************************************************************************************************
(1)    2/    916D :                     ; ****************************************************************************************************************
(1)    3/    916D :                     ;
(1)    4/    916D :                     ;												Expression Evaluation
(1)    5/    916D :                     ;
(1)    6/    916D :                     ; ****************************************************************************************************************
(1)    7/    916D :                     ; ****************************************************************************************************************
(1)    8/    916D :                     
(1)    9/    916D :                     
(1)   10/    916D :                     ; ****************************************************************************************************************
(1)   11/    916D :                     ; ****************************************************************************************************************
(1)   12/    916D :                     ;
(1)   13/    916D :                     ;		Evaluate expression at P1. Return 	CY/L = 0 : Error 	E = Error Code
(1)   14/    916D :                     ;											CY/L = 1 : Okay 	E = Result
(1)   15/    916D :                     ;
(1)   16/    916D :                     ;		Terms are : 	A-Z 			Variables
(1)   17/    916D :                     ;						[0-9]+			Constants
(1)   18/    916D :                     ;						! 				Random byte
(1)   19/    916D :                     ;						'?'				Character constant
(1)   20/    916D :                     ;						(<expr>,<expr>)	Read Memory location
(1)   21/    916D :                     ;
(1)   22/    916D :                     ; ****************************************************************************************************************
(1)   23/    916D :                     ; ****************************************************************************************************************
(1)   24/    916D :                     
(1)   25/    916D : =0x1                EEX_PendingOp = 1 												; offset to pending operation
(1)   26/    916D : =0x0                EEX_Value = 0 													; offset to value
(1)   27/    916D :                     
(1)   28/    916D :                     EvaluateExpression:
(1)   29/    916D : (MACRO)             	pushp 	p3 													; save P3 on stack
(1)   29/    916D : 37                          xpah    P3
(1)   29/    916E : CE FF                       st              @-1(p2)
(1)   29/    9170 : 33                          xpal    P3
(1)   29/    9171 : CE FF                       st              @-1(p2)
(1)   30/    9173 : C4 2B               	ldi 	'+'													; push pending operation on stack
(1)   31/    9175 : CE FF               	st 		@-1(p2)
(1)   32/    9177 : C4 00               	ldi 	0 													; push current value on stack
(1)   33/    9179 : CE FF               	st 		@-1(p2)												; effectively this puts 0+ on the front of the expression.
(1)   34/    917B :                     
(1)   35/    917B :                     ; ****************************************************************************************************************
(1)   36/    917B :                     ;													Get Next Term
(1)   37/    917B :                     ; ****************************************************************************************************************
(1)   38/    917B :                     
(1)   39/    917B :                     EEX_Term:
(1)   40/    917B : (MACRO)             	lpi 	p3,Variables 										; point P3 to variables
(1)   40/    917B : C4 0C                       ldi     (VARIABLES) / 256
(1)   40/    917D : 37                          xpah    P3
(1)   40/    917E : C4 90                       ldi     (VARIABLES) & 255
 AS V1.42 Beta [Bld 102] - source file minol.asm(expression.asm) - page 10 - 1/5/2016 20:05:28


(1)   40/    9180 : 33                          xpal    P3
(1)   41/    9181 :                     EEX_NextChar:
(1)   42/    9181 : C1 00               	ld 		(p1) 												; look at character
(1)   43/    9183 : 98 4F               	jz 		EEX_TermError
(1)   44/    9185 : C5 01               	ld 		@1(p1) 												; fetch and skip over.
(1)   45/    9187 : E4 20               	xri 	' '													; is it space ?
(1)   46/    9189 : 98 F6               	jz 		EEX_NextChar
(1)   47/    918B : E4 08               	xri 	' '!'('												; is it memory access ?
(1)   48/    918D : 98 54               	jz 		EEX_MemoryAccess
(1)   49/    918F : E4 09               	xri 	'('!'!'												; is it a random value ?
(1)   50/    9191 : 9C 1B               	jnz 	EEX_NotRandom
(1)   51/    9193 :                     
(1)   52/    9193 :                     ; ****************************************************************************************************************
(1)   53/    9193 :                     ;												Term is ! (random byte)
(1)   54/    9193 :                     ; ****************************************************************************************************************
(1)   55/    9193 :                     
(1)   56/    9193 :                     EEX_Random:
(1)   57/    9193 : 02                  	ccl 	
(1)   58/    9194 : C3 FF               	ld 		RandomSeed+1-Variables(p3) 							; shift the seed right
(1)   59/    9196 : 1F                  	rrl
(1)   60/    9197 : CB FF               	st 		RandomSeed+1-Variables(p3)
(1)   61/    9199 : 01                  	xae 														; put MSB in E
(1)   62/    919A : C3 FE               	ld 		RandomSeed-Variables(p3)
(1)   63/    919C : 1F                  	rrl
(1)   64/    919D : CB FE               	st 		RandomSeed-Variables(p3)
(1)   65/    919F : 60                  	xre 														; XOR E into LSB
(1)   66/    91A0 : 01                  	xae
(1)   67/    91A1 : 06                  	csa 														; if CY/L is zero
(1)   68/    91A2 : D4 80               	ani 	0x80
(1)   69/    91A4 : 9C 06               	jnz 	EEX_NoTap 
(1)   70/    91A6 : C3 FF               	ld 		RandomSeed+1-Variables(p3) 							; XOR MSB with $B4
(1)   71/    91A8 : E4 B4               	xri 	0xB4
(1)   72/    91AA : CB FF               	st 		RandomSeed+1-Variables(p3)
(1)   73/    91AC :                     EEX_NoTap:
(1)   74/    91AC : 90 64               	jmp 	EEX_HaveTerm
(1)   75/    91AE :                     
(1)   76/    91AE :                     EEX_NotRandom:
(1)   77/    91AE : E4 06               	xri 	'!'!0x27											; is it a quote ?
(1)   78/    91B0 : 9C 0F               	jnz 	EEX_NotQuote
(1)   79/    91B2 :                     
(1)   80/    91B2 :                     ; ****************************************************************************************************************
(1)   81/    91B2 :                     ;													Term is '<char>'
(1)   82/    91B2 :                     ; ****************************************************************************************************************
(1)   83/    91B2 :                     
(1)   84/    91B2 : C1 00               	ld 		(p1) 												; get character that is quoted
(1)   85/    91B4 : 98 1E               	jz 		EEX_TermError 										; if zero, error.
(1)   86/    91B6 : 01                  	xae 														; save in E if okay character.
(1)   87/    91B7 : C1 01               	ld 		1(p1) 												; get character after that
(1)   88/    91B9 : E4 27               	xri 	0x27 												; is it a quote ?
(1)   89/    91BB : 9C 17               	jnz 	EEX_TermError
(1)   90/    91BD : C5 02               	ld 		@2(p1) 												; skip over character and quote
(1)   91/    91BF : 90 51               	jmp 	EEX_HaveTerm 										; and execute as if a legal term
(1)   92/    91C1 :                     
(1)   93/    91C1 :                     ; ****************************************************************************************************************
(1)   94/    91C1 :                     ;									Not 'x' or !, so test for 0-9 and A-Z
(1)   95/    91C1 :                     ; ****************************************************************************************************************
(1)   96/    91C1 :                     
(1)   97/    91C1 :                     EEX_NotQuote:
(1)   98/    91C1 : C1 FF               	ld 		-1(p1)												; get old character.
(1)   99/    91C3 : 02                  	ccl
 AS V1.42 Beta [Bld 102] - source file minol.asm(expression.asm) - page 11 - 1/5/2016 20:05:28


(1)  100/    91C4 : F4 A5               	adi 	255-'Z'												; if >= 'Z' then error.										
(1)  101/    91C6 : 94 0C               	jp 		EEX_TermError
(1)  102/    91C8 : F4 1A               	adi 	26 													; will be 0..25 if A..Z
(1)  103/    91CA : 94 42               	jp 		EEX_Variable 										; so do as a variable.
(1)  104/    91CC : F4 07               	adi 	'A'-1-'9'											; check if > 9
(1)  105/    91CE : 94 04               	jp 		EEX_TermError
(1)  106/    91D0 : F4 0A               	adi 	10 													; if 0-9
(1)  107/    91D2 : 94 1C               	jp 		EEX_Constant
(1)  108/    91D4 :                     
(1)  109/    91D4 :                     ; ****************************************************************************************************************
(1)  110/    91D4 :                     ;													 Error Exit.
(1)  111/    91D4 :                     ; ****************************************************************************************************************
(1)  112/    91D4 :                     
(1)  113/    91D4 :                     EEX_TermError:
(1)  114/    91D4 : C4 04               	ldi 	ERRC_Term 											; put term error in A
(1)  115/    91D6 :                     EEX_Error:
(1)  116/    91D6 : 01                  	xae 														; put error code in E
(1)  117/    91D7 : 02                  	ccl 														; clear CY/L indicating error
(1)  118/    91D8 :                     EEX_Exit:
(1)  119/    91D8 : C6 02               	ld 		@2(p2) 												; throw the pending operation and value
(1)  120/    91DA : (MACRO)             	pullp 	p3 													; restore P3
(1)  120/    91DA : C6 01                       ld              @1(p2)
(1)  120/    91DC : 33                          xpal    P3
(1)  120/    91DD : C6 01                       ld              @1(p2)
(1)  120/    91DF : 37                          xpah    P3
(1)  121/    91E0 : 3F                  	xppc 	p3 													; and exit
(1)  122/    91E1 : 90 8A               	jmp 	EvaluateExpression 									; make re-entrant
(1)  123/    91E3 :                     
(1)  124/    91E3 :                     ; ****************************************************************************************************************
(1)  125/    91E3 :                     ;										Handle (<expr>,<expr>)
(1)  126/    91E3 :                     ; ****************************************************************************************************************
(1)  127/    91E3 :                     
(1)  128/    91E3 :                     EEX_MemoryAccess:
(1)  129/    91E3 : C5 FF               	ld 		@-1(p1) 											; point to the (
(1)  130/    91E5 : (MACRO)             	lpi 	p3,EvaluateAddressPair-1 							; call the evaluate/read of (h,l)
(1)  130/    91E5 : C4 92                       ldi     (EVALUATEADDRESSPAIR-1) / 256
(1)  130/    91E7 : 37                          xpah    P3
(1)  130/    91E8 : C4 BF                       ldi     (EVALUATEADDRESSPAIR-1) & 255
(1)  130/    91EA : 33                          xpal    P3
(1)  131/    91EB : 3F                  	xppc 	p3
(1)  132/    91EC : 94 EA               	jp 		EEX_Exit 											; error occurred, so exit with it.
(1)  133/    91EE : 90 22               	jmp 	EEX_HaveTerm
(1)  134/    91F0 :                     
(1)  135/    91F0 :                     ; ****************************************************************************************************************
(1)  136/    91F0 :                     ;								Handle constant, first digit value is in A
(1)  137/    91F0 :                     ; ****************************************************************************************************************
(1)  138/    91F0 :                     
(1)  139/    91F0 :                     EEX_Constant:
(1)  140/    91F0 : 01                  	xae 														; put first digit value in E
(1)  141/    91F1 :                     EEX_ConstantLoop:
(1)  142/    91F1 : C1 00               	ld 		(p1) 												; get next character.
(1)  143/    91F3 : 02                  	ccl
(1)  144/    91F4 : F4 C6               	adi 	255-'9' 											; if >= 9 term is too large.
(1)  145/    91F6 : 94 1A               	jp 		EEX_HaveTerm
(1)  146/    91F8 : F4 8A               	adi 	10+128
(1)  147/    91FA : 94 16               	jp 		EEX_HaveTerm
(1)  148/    91FC : 02                  	ccl
(1)  149/    91FD : 40                  	lde 														; A = n
(1)  150/    91FE : 70                  	ade 														; A = n * 2
(1)  151/    91FF : 70                  	ade 														; A = n * 3
 AS V1.42 Beta [Bld 102] - source file minol.asm(expression.asm) - page 12 - 1/5/2016 20:05:28


(1)  152/    9200 : 70                  	ade 														; A = n * 4
(1)  153/    9201 : 70                  	ade 														; A = n * 5
(1)  154/    9202 : 01                  	xae 														; E = n * 5
(1)  155/    9203 : 40                  	lde 														; A = n * 5
(1)  156/    9204 : 70                  	ade 														; A = n * 10
(1)  157/    9205 : 01                  	xae
(1)  158/    9206 : C5 01               	ld 		@1(p1) 												; read character convert to number
(1)  159/    9208 : D4 0F               	ani 	0x0F
(1)  160/    920A : 70                  	ade
(1)  161/    920B : 01                  	xae
(1)  162/    920C : 90 E3               	jmp 	EEX_ConstantLoop
(1)  163/    920E :                     
(1)  164/    920E :                     
(1)  165/    920E :                     ; ****************************************************************************************************************
(1)  166/    920E :                     ;									Access variable, variable id (0-25) in A
(1)  167/    920E :                     ; ****************************************************************************************************************
(1)  168/    920E :                     
(1)  169/    920E :                     EEX_Variable:
(1)  170/    920E : 01                  	xae 														; put value 0-25 in E
(1)  171/    920F : C3 80               	ld 		-0x80(p3) 											; load using E as index
(1)  172/    9211 : 01                  	xae 														; put in E
(1)  173/    9212 :                     
(1)  174/    9212 :                     ; ****************************************************************************************************************
(1)  175/    9212 :                     ;										Have the right term in E, process it
(1)  176/    9212 :                     ; ****************************************************************************************************************
(1)  177/    9212 :                     
(1)  178/    9212 :                     EEX_HaveTerm:
(1)  179/    9212 : C2 01               	ld 		EEX_PendingOp(p2) 									; get pending operation.
(1)  180/    9214 : E4 2B               	xri 	'+'
(1)  181/    9216 : 9C 06               	jnz 	EEX_NotAdd
(1)  182/    9218 :                     
(1)  183/    9218 :                     ; ****************************************************************************************************************
(1)  184/    9218 :                     ;												Add Right Term to Value
(1)  185/    9218 :                     ; ****************************************************************************************************************
(1)  186/    9218 : 02                  	ccl
(1)  187/    9219 : C2 00               	ld 		EEX_Value(p2)										; get value
(1)  188/    921B : 70                  	ade 														; add right
(1)  189/    921C : 90 08               	jmp 	EEX_SaveAndExit 									; save and exit
(1)  190/    921E :                     
(1)  191/    921E :                     EEX_NotAdd:
(1)  192/    921E : E4 06               	xri 	'+'!'-'
(1)  193/    9220 : 9C 12               	jnz		EEX_NotSubtract
(1)  194/    9222 :                     
(1)  195/    9222 :                     ; ****************************************************************************************************************
(1)  196/    9222 :                     ;											 Subtract Right Term from Value
(1)  197/    9222 :                     ; ****************************************************************************************************************
(1)  198/    9222 : 03                  	scl
(1)  199/    9223 : C2 00               	ld 		EEX_Value(p2)										; get value
(1)  200/    9225 : 78                  	cae 														; subtract right
(1)  201/    9226 :                     EEX_SaveAndExit:
(1)  202/    9226 : CA 00               	st 		EEX_Value(p2) 										; save value back
(1)  203/    9228 : 90 30               	jmp 	EEX_CheckNextOperation 								; and exit, look for next operator.
(1)  204/    922A :                     
(1)  205/    922A :                     EEX_Divide_Zero:												; handle divide by zero error.
(1)  206/    922A : C4 07               	ldi 	ERRC_DivZero
(1)  207/    922C : 90 A8               	jmp 	EEX_Error
(1)  208/    922E :                     
(1)  209/    922E :                     EEX_EndExpression:
(1)  210/    922E : C2 00               	ld 		EEX_Value(p2) 										; get current value
(1)  211/    9230 : 01                  	xae 														; put in E
 AS V1.42 Beta [Bld 102] - source file minol.asm(expression.asm) - page 13 - 1/5/2016 20:05:28


(1)  212/    9231 : 03                  	scl 														; set CY/L indicating expression okay.
(1)  213/    9232 : 90 A4               	jmp 	EEX_Exit 											; and exit.
(1)  214/    9234 :                     
(1)  215/    9234 :                     EEX_NotSubtract:
(1)  216/    9234 : E4 07               	xri 	'-'!'*'
(1)  217/    9236 : 9C 45               	jnz 	EEX_Divide
(1)  218/    9238 :                     
(1)  219/    9238 :                     ; ****************************************************************************************************************
(1)  220/    9238 :                     ;											 Multiply Right Term into Value
(1)  221/    9238 :                     ; ****************************************************************************************************************
(1)  222/    9238 :                     
(1)  223/    9238 : C2 00               	ld 		EEX_Value(p2) 										; a = left value
(1)  224/    923A : CA 01               	st 		1(p2)
(1)  225/    923C : C4 00               	ldi 	0													; res = 0(p2)
(1)  226/    923E : CA 00               	st 		0(p2) 												; clear it.
(1)  227/    9240 :                     EEX_MultiplyLoop:
(1)  228/    9240 : 40                  	lde  														; if B == 0 then we are done.
(1)  229/    9241 : 98 17               	jz 		EEX_CheckNextOperation
(1)  230/    9243 : D4 01               	ani 	1 													; if B LSB is non zero.
(1)  231/    9245 : 98 07               	jz 		EEX_Multiply_B0IsZero
(1)  232/    9247 : C2 00               	ld 		0(p2) 												; add A to Result
(1)  233/    9249 : 02                  	ccl
(1)  234/    924A : F2 01               	add 	1(p2)
(1)  235/    924C : CA 00               	st 		0(p2)
(1)  236/    924E :                     EEX_Multiply_B0IsZero:
(1)  237/    924E : 40                  	lde 														; shift B right
(1)  238/    924F : 1C                  	sr
(1)  239/    9250 : 01                  	xae
(1)  240/    9251 : C2 01               	ld 		1(p2) 												; shift A left
(1)  241/    9253 : 02                  	ccl
(1)  242/    9254 : F2 01               	add 	1(p2)
(1)  243/    9256 : CA 01               	st 		1(p2)
(1)  244/    9258 : 90 E6               	jmp 	EEX_MultiplyLoop
(1)  245/    925A :                     
(1)  246/    925A :                     ; ****************************************************************************************************************
(1)  247/    925A :                     ;											Check next operation
(1)  248/    925A :                     ; ****************************************************************************************************************
(1)  249/    925A :                     
(1)  250/    925A :                     EEX_CheckNextOperation:
(1)  251/    925A : C5 01               	ld 		@1(p1)												; skip over spaces
(1)  252/    925C : E4 20               	xri 	' '
(1)  253/    925E : 98 FA               	jz 		EEX_CheckNextOperation
(1)  254/    9260 : C5 FF               	ld 		@-1(p1)												; get operator
(1)  255/    9262 : E4 2B               	xri 	'+'													; check if + - * /
(1)  256/    9264 : 98 0C               	jz 		EEX_FoundOperator
(1)  257/    9266 : E4 06               	xri 	'+'!'-'
(1)  258/    9268 : 98 08               	jz 		EEX_FoundOperator
(1)  259/    926A : E4 07               	xri 	'-'!'*'
(1)  260/    926C : 98 04               	jz 		EEX_FoundOperator
(1)  261/    926E : E4 05               	xri 	'*'!'/'
(1)  262/    9270 : 9C BC               	jnz 	EEX_EndExpression
(1)  263/    9272 :                     
(1)  264/    9272 :                     EEX_FoundOperator:
(1)  265/    9272 : C5 01               	ld  	@1(p1) 												; get and skip operator
(1)  266/    9274 : CA 01               	st 		EEX_PendingOp(p2)									; save then pending operator
(1)  267/    9276 : (MACRO)             	lpi 	p3,EEX_Term-1
(1)  267/    9276 : C4 91                       ldi     (EEX_TERM-1) / 256
(1)  267/    9278 : 37                          xpah    P3
(1)  267/    9279 : C4 7A                       ldi     (EEX_TERM-1) & 255
(1)  267/    927B : 33                          xpal    P3
 AS V1.42 Beta [Bld 102] - source file minol.asm(expression.asm) - page 14 - 1/5/2016 20:05:28


(1)  268/    927C : 3F                  	xppc 	p3
(1)  269/    927D :                     
(1)  270/    927D :                     ; ****************************************************************************************************************
(1)  271/    927D :                     ;											 Divide Right Term into Value
(1)  272/    927D :                     ; ****************************************************************************************************************
(1)  273/    927D :                     
(1)  274/    927D :                     EEX_Divide:
(1)  275/    927D : 40                  	lde 														; if denominator zero, error 2.
(1)  276/    927E : 98 AA               	jz 		EEX_Divide_Zero
(1)  277/    9280 : C2 00               	ld 		0(p2) 												; numerator into 1(p2)
(1)  278/    9282 : CA 01               	st 		1(p2) 												; denominator is in E
(1)  279/    9284 : C4 00               	ldi 	0
(1)  280/    9286 : CA 00               	st 		0(p2)												; quotient in 0(p2)
(1)  281/    9288 : CA FF               	st 		-1(p2) 												; remainder in -1(p2)
(1)  282/    928A : C4 80               	ldi 	0x80 									
(1)  283/    928C : CA FE               	st 		-2(p2) 												; bit in -2(p2)
(1)  284/    928E :                     
(1)  285/    928E :                     EEX_Divide_Loop:
(1)  286/    928E : C2 FE               	ld 		-2(p2) 												; exit if bit = 0,we've finished.
(1)  287/    9290 : 98 C8               	jz 		EEX_CheckNextOperation
(1)  288/    9292 :                     
(1)  289/    9292 : 02                  	ccl 	 													; shift remainder left.
(1)  290/    9293 : C2 FF               	ld 		-1(p2)
(1)  291/    9295 : F2 FF               	add 	-1(p2)
(1)  292/    9297 : CA FF               	st 		-1(p2)
(1)  293/    9299 :                     
(1)  294/    9299 : C2 01               	ld 		1(p2)												; get numerator.
(1)  295/    929B : 94 02               	jp 		EEX_Divide_Numerator_Positive
(1)  296/    929D : AA FF               	ild 	-1(p2)  											; if numerator -ve, increment remainder.
(1)  297/    929F :                     EEX_Divide_Numerator_Positive:
(1)  298/    929F :                     
(1)  299/    929F : C2 FF               	ld 		-1(p2) 												; calculate remainder - denominator
(1)  300/    92A1 : 03                  	scl
(1)  301/    92A2 : 78                  	cae 
(1)  302/    92A3 : CA FD               	st 		-3(p2) 												; save in temp -3(p2)
(1)  303/    92A5 : 06                  	csa 														; if temp >= 0, CY/L is set
(1)  304/    92A6 : 94 0A               	jp 		EEX_Divide_Temp_Positive
(1)  305/    92A8 :                     
(1)  306/    92A8 : C2 FD               	ld 		-3(p2) 												; copy temp to remainder
(1)  307/    92AA : CA FF               	st 		-1(p2)
(1)  308/    92AC : C2 FE               	ld 		-2(p2) 												; or bit into quotient
(1)  309/    92AE : DA 00               	or 		0(p2)
(1)  310/    92B0 : CA 00               	st 		0(p2)
(1)  311/    92B2 :                     EEX_Divide_Temp_Positive:
(1)  312/    92B2 : C2 FE               	ld 		-2(p2) 												; shift bit right
(1)  313/    92B4 : 1C                  	sr
(1)  314/    92B5 : CA FE               	st 		-2(p2)
(1)  315/    92B7 :                     
(1)  316/    92B7 : C2 01               	ld 		1(p2)												; shift numerator positive
(1)  317/    92B9 : 02                  	ccl
(1)  318/    92BA : F2 01               	add 	1(p2)
(1)  319/    92BC : CA 01               	st 		1(p2)
(1)  320/    92BE : 90 CE               	jmp 	EEX_Divide_Loop
(1)  321/    92C0 :                     
(1)  322/    92C0 :                     EvaluateAddressPair:
(1)  323/    92C0 : C4 FF               	ldi 	0xFF
(1)  324/    92C2 : 01                  	xae
(1)  325/    92C3 : 02                  	ccl
(1)  326/    92C4 : 3F                  	xppc 	p3
(1)  327/    92C5 :                     
 AS V1.42 Beta [Bld 102] - source file minol.asm(expression.asm) - page 15 - 1/5/2016 20:05:28


 AS V1.42 Beta [Bld 102] - source file minol.asm - page 16 - 1/5/2016 20:05:28


  symbol table (* = unused):
  ------------------------

*ARCHITECTURE :  i386-unknown-win32 - | *BIGENDIAN :                      0 - |
*BOOTMONITOR :                  210 - | *BRANCHEXT :                      0 - |
*CASESENSITIVE :                  0 - | *CONSTPI :        3.141592653589793 - |
*DATE :                    1/5/2016 - |  EEX_CHECKNEXTOPERATION :      925A C |
 EEX_CONSTANT :                91F0 C |  EEX_CONSTANTLOOP :            91F1 C |
 EEX_DIVIDE :                  927D C |  EEX_DIVIDE_LOOP :             928E C |
 EEX_DIVIDE_NUMERATOR_POSITIVE :                                       929F C |
 EEX_DIVIDE_TEMP_POSITIVE :    92B2 C |  EEX_DIVIDE_ZERO :             922A C |
 EEX_ENDEXPRESSION :           922E C |  EEX_ERROR :                   91D6 C |
 EEX_EXIT :                    91D8 C |  EEX_FOUNDOPERATOR :           9272 C |
 EEX_HAVETERM :                9212 C |  EEX_MEMORYACCESS :            91E3 C |
 EEX_MULTIPLYLOOP :            9240 C |  EEX_MULTIPLY_B0ISZERO :       924E C |
 EEX_NEXTCHAR :                9181 C |  EEX_NOTADD :                  921E C |
 EEX_NOTAP :                   91AC C |  EEX_NOTQUOTE :                91C1 C |
 EEX_NOTRANDOM :               91AE C |  EEX_NOTSUBTRACT :             9234 C |
 EEX_PENDINGOP :                  1 - | *EEX_RANDOM :                  9193 C |
 EEX_SAVEANDEXIT :             9226 C |  EEX_TERM :                    917B C |
 EEX_TERMERROR :               91D4 C |  EEX_VALUE :                      0 - |
 EEX_VARIABLE :                920E C |  ERRC_DIVZERO :                   7 - |
*ERRC_LABEL :                     1 - | *ERRC_MEMORY :                    6 - |
*ERRC_SYNTAX :                    5 - |  ERRC_TERM :                      4 - |
*ERRC_UNKNOWN :                   2 - |  EVALUATEADDRESSPAIR :         92C0 C |
 EVALUATEEXPRESSION :          916D C |  EXPR :                        9016 C |
*FALSE :                          0 - | *FULLPMMU :                       1 - |
 GETCHAR :                     90E1 C |  GETSTRING :                   9105 C |
*HAS64 :                          1 - | *HASDSP :                         0 - |
*HASFPU :                         0 - | *HASPMMU :                        0 - |
*INEXTMODE :                      0 - | *INLWORDMODE :                    0 - |
*INMAXMODE :                      0 - | *INSRCMODE :                      0 - |
*INSUPMODE :                      0 - | *LISTON :                         1 - |
*MACEXP :                         1 - | *MOMCPU :                         C - |
*MOMCPUNAME :                 SC/MP - | *NESTMAX :                      100 - |
*OSMATHLIBRARY :                  3 - | *PACKING :                        0 - |
*PADDING :                        1 - |  PRINT :                       9021 C |
 RANDOMSEED :                   C8E - | *RELAXED :                        0 - |
 SCREENCURSOR :                 C80 - |  SCREENMIRROR :                 C00 - |
 SYSTEM :                       C90 - | *TIME :                    20:05:28 - |
*TRUE :                           1 - |  VARIABLES :                    C90 - |
*VERSION :                     142F - |  WAIT1 :                       9014 C |
 __GCNOTLOWER [GETCHAR] :      9100 C |  __GCWAITKEY [GETCHAR] :       90E6 C |
 __GCWAITRELEASE [GETCHAR] :   90EE C |  __GSBACKSPACE [GETSTRING] :   9160 C |
 __GSCONTROLKEY [GETSTRING] :  9143 C |  __GSLOOP [GETSTRING] :        9113 C |
 __PRCLEARFROMMOVETO [PRINT] : 90C1 C |  __PRCLEARLOOP [PRINT] :       90C3 C |
 __PRCLEARSCREEN [PRINT] :     90BF C |  __PRCOPY [PRINT] :            90CD C |
 __PREXIT [PRINT] :            9084 C |  __PREXITNOCHECK [PRINT] :     9088 C |
 __PRISCONTROLCHAR [PRINT] :   9096 C |  __PRISRETURN [PRINT] :        90B6 C |
 __PRNOTASCII [PRINT] :        905E C |  __PRPRINTCHARACTERA [PRINT] : 9042 C |
 __PRPRINTSTRING [PRINT] :     9030 C |  __PRSCROLLLOOP [PRINT] :      9076 C |
 __PRUPDATECURSOR [PRINT] :    9067 C |

     96 symbols
     35 unused symbols

 AS V1.42 Beta [Bld 102] - source file minol.asm - page 17 - 1/5/2016 20:05:28


  defined macros:
  ---------------

LPI                                   | PULLA                                
PULLE                                 | PULLP                                
PUSHA                                 | PUSHE                                
PUSHP                                 |

      7 macros

 AS V1.42 Beta [Bld 102] - source file minol.asm - page 18 - 1/5/2016 20:05:28


  codepages:
  ----------

STANDARD (0 changed characters)


0.01 seconds assembly time

    767 lines source file
    839 lines incl. macro expansions
      2 passes
      0 errors
      0 warnings
