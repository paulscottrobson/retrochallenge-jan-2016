 AS V1.42 Beta [Bld 102] - source file minol.asm - page 1 - 1/6/2016 14:57:37


       1/       0 :                     ; ****************************************************************************************************************
       2/       0 :                     ; ****************************************************************************************************************
       3/       0 :                     ;
       4/       0 :                     ;												Minol ROM Image
       5/       0 :                     ;
       6/       0 :                     ; ****************************************************************************************************************
       7/       0 :                     ; ****************************************************************************************************************
       8/       0 :                     
       9/       0 :                     	cpu 	sc/mp
      10/       0 :                     
      11/       0 :                     	include source\memorymacros.asm 							; Memory allocation and Macro definition.	
(1)    1/       0 :                     ; ****************************************************************************************************************
(1)    2/       0 :                     ; ****************************************************************************************************************
(1)    3/       0 :                     ;
(1)    4/       0 :                     ;										Memory and Macro Allocation.
(1)    5/       0 :                     ;	
(1)    6/       0 :                     ; ****************************************************************************************************************
(1)    7/       0 :                     ; ****************************************************************************************************************
(1)    8/       0 :                     
(1)    9/       0 : =0x3                OSMathLibrary = 0x0003 											; the Maths library is here.
(1)   10/       0 : =0x210              BootMonitor = 0x210 											; address to boot monitor
(1)   11/       0 :                     
(1)   12/       0 :                     ; ****************************************************************************************************************
(1)   13/       0 :                     ;												 Memory Allocation
(1)   14/       0 :                     ; ****************************************************************************************************************
(1)   15/       0 :                     
(1)   16/       0 : =0xC00              ScreenMirror = 0xC00 											; Screen mirror, 128 bytes, 256 byte page boundary.
(1)   17/       0 : =0xC80              ScreenCursor = ScreenMirror+0x80  								; Position on that screen (00..7F)
(1)   18/       0 :                     
(1)   19/       0 : =0xC90              System = 0xC90 													; System Memory
(1)   20/       0 :                     
(1)   21/       0 : =0xC8E              RandomSeed = System-2											; Random Seed Value (2 bytes)
(1)   22/       0 : =0xC90              Variables = System 												; Variables (26 bytes)
(1)   23/       0 :                     
(1)   24/       0 :                     ; ****************************************************************************************************************
(1)   25/       0 :                     ;														Macros
(1)   26/       0 :                     ; ****************************************************************************************************************
(1)   27/       0 :                     
(1)   28/       0 :                     lpi	macro	ptr,addr											; load pointer register with constant
(1)   29/       0 :                     	ldi 	(addr) / 256
(1)   30/       0 :                     	xpah 	ptr
(1)   31/       0 :                     	ldi 	(addr) & 255
(1)   32/       0 :                     	xpal 	ptr
(1)   33/       0 :                     	endm
(1)   34/       0 :                     
(1)   35/       0 :                     pushp macro ptr 												; push pointer register on stack
(1)   36/       0 :                     	xpah 	ptr
(1)   37/       0 :                     	st 		@-1(p2)
(1)   38/       0 :                     	xpal 	ptr
(1)   39/       0 :                     	st 		@-1(p2)
(1)   40/       0 :                     	endm
(1)   41/       0 :                     
(1)   42/       0 :                     pullp macro ptr 												; pull pointer register off stack
(1)   43/       0 :                     	ld 		@1(p2)
(1)   44/       0 :                     	xpal 	ptr
(1)   45/       0 :                     	ld 		@1(p2)
(1)   46/       0 :                     	xpah 	ptr
(1)   47/       0 :                     	endm
(1)   48/       0 :                     
(1)   49/       0 :                     pushe macro 													; push E on stack
 AS V1.42 Beta [Bld 102] - source file minol.asm(memorymacros.asm) - page 2 - 1/6/2016 14:57:37


(1)   50/       0 :                     	lde
(1)   51/       0 :                     	st 		@-1(p2)
(1)   52/       0 :                     	endm
(1)   53/       0 :                     
(1)   54/       0 :                     pulle macro 													; pull E off stack
(1)   55/       0 :                     	ld 		@1(p2)
(1)   56/       0 :                     	xae
(1)   57/       0 :                     	endm
(1)   58/       0 :                     
(1)   59/       0 :                     pusha macro 													; push A on stack
(1)   60/       0 :                     	st 		@-1(p2)
(1)   61/       0 :                     	endm
(1)   62/       0 :                     
(1)   63/       0 :                     pulla macro
(1)   64/       0 :                     	ld 		@1(p2)
(1)   65/       0 :                     	endm
(1)   66/       0 :                     
(1)   67/       0 :                     setv macro ch,value 											; sets a variable to a value, assumes P3 = Variables.
(1)   68/       0 :                     	ldi 	(value) & 255
(1)   69/       0 :                     	st 		((ch) - 'A')(p3)
(1)   70/       0 :                     	endm
(1)   71/       0 :                     ;
(1)   72/       0 :                     ;code macro lineNo,code 											; a debugging macro, which fakes up a line of code.
(1)   73/       0 :                     ;	db 		strlen(code)+4 										; one byte offset to next (0 = End of code)
(1)   74/       0 :                     ;	dw 		lineNo 												; two byte line number (low byte first)
(1)   75/       0 :                     ;	db 		code,0 												; ASCIIZ string
(1)   76/       0 :                     ;	endm
(1)   77/       0 :                     ;
(1)   78/       0 :                     ;special macro ch,method
(1)   79/       0 :                     ;	db 		ch
(1)   80/       0 :                     ;	dw 		(method)-1
(1)   81/       0 :                     ;	endm
(1)   82/       0 :                     
      12/       0 :                     	include source\errors.asm 									; Error Codes
(1)    1/       0 :                     ; ****************************************************************************************************************
(1)    2/       0 :                     ; ****************************************************************************************************************
(1)    3/       0 :                     ;
(1)    4/       0 :                     ;												Error Codes
(1)    5/       0 :                     ;
(1)    6/       0 :                     ; ****************************************************************************************************************
(1)    7/       0 :                     ; ****************************************************************************************************************
(1)    8/       0 :                     
(1)    9/       0 : =0x1                ERRC_LABEL = 1 													; Label does not exist (e.g. GOTO)
(1)   10/       0 : =0x2                ERRC_UNKNOWN = 2												; Unknown instruction
(1)   11/       0 : =0x4                ERRC_TERM = 4 													; Illegal term/expression
(1)   12/       0 : =0x5                ERRC_SYNTAX = 5													; Syntax Error
(1)   13/       0 : =0x6                ERRC_MEMORY = 6 												; Out of memory
(1)   14/       0 : =0x7                ERRC_DIVZERO = 7 												; Division by Zero Error.
(1)   15/       0 :                     
(1)   16/       0 :                     
(1)   17/       0 :                     
      13/       0 :                     
      14/       0 :                     ; ****************************************************************************************************************
      15/       0 :                     ;													Main Program
      16/       0 :                     ; ****************************************************************************************************************
      17/       0 :                     
      18/    9000 :                     	org 	0x9000 												; the ROM starts here
      19/    9000 :                     
      20/    9000 : 68                  	db 		0x68												; this makes it boot straight into this ROM.
      21/    9001 : (MACRO)             	lpi 	p2,0xFF8											; set up stack default value
 AS V1.42 Beta [Bld 102] - source file minol.asm - page 3 - 1/6/2016 14:57:37


      21/    9001 : C4 0F                       ldi     (0XFF8) / 256
      21/    9003 : 36                          xpah    P2
      21/    9004 : C4 F8                       ldi     (0XFF8) & 255
      21/    9006 : 32                          xpal    P2
      22/    9007 :                     
      23/    9007 : (MACRO)             	lpi 	p3,EvaluateExpression-1
      23/    9007 : C4 91                       ldi     (EVALUATEEXPRESSION-1) / 256
      23/    9009 : 37                          xpah    P3
      23/    900A : C4 67                       ldi     (EVALUATEEXPRESSION-1) & 255
      23/    900C : 33                          xpal    P3
      24/    900D : (MACRO)             	lpi 	p1,expr
      24/    900D : C4 90                       ldi     (EXPR) / 256
      24/    900F : 35                          xpah    P1
      24/    9010 : C4 16                       ldi     (EXPR) & 255
      24/    9012 : 31                          xpal    P1
      25/    9013 : 3F                  	xppc	p3
      26/    9014 :                     wait1:	
      27/    9014 : 90 FE               	jmp 	wait1
      28/    9016 :                     expr:
      29/    9016 : 28 32 2C 33 29 00   	db 		"(2,3)",0
      30/    901C :                     
      31/    901C :                     
      32/    901C :                     ; ****************************************************************************************************************
      33/    901C :                     ;													Source Files
      34/    901C :                     ; *********************************12*******************************************************************************
      35/    901C :                     
      36/    901C :                     	include source\screen.asm 									; screen I/O stuff.
(1)    1/    901C :                     ; ****************************************************************************************************************
(1)    2/    901C :                     ; ****************************************************************************************************************
(1)    3/    901C :                     ;
(1)    4/    901C :                     ;											Screen I/O, VTL-2 ROM
(1)    5/    901C :                     ;											=====================
(1)    6/    901C :                     ;
(1)    7/    901C :                     ;	Provides Character and String Input/Output functionality.
(1)    8/    901C :                     ;
(1)    9/    901C :                     ; ****************************************************************************************************************
(1)   10/    901C :                     ; ****************************************************************************************************************
(1)   11/    901C :                     
(1)   12/    901C :                     ; ****************************************************************************************************************
(1)   13/    901C :                     ; ****************************************************************************************************************
(1)   14/    901C :                     ;
(1)   15/    901C :                     ;	Print routine. Prints either character in A, or ASCIIZ string at P1 (if A is zero). Preserves all registers
(1)   16/    901C :                     ;	except if printing string, P1 points to the character after the NULL terminator.
(1)   17/    901C :                     ;
(1)   18/    901C :                     ;	Scrolls automatically. Understands character codes 32-255, 8 (Backspace) 12 (Clear Screen) 13 (Carriage
(1)   19/    901C :                     ;	Return). Others are currently ignored (except 0, see above). Note L/C values (97....) display those characters
(1)   20/    901C :                     ;	in the ROM font *not* lower case :)
(1)   21/    901C :                     ;
(1)   22/    901C :                     ; ****************************************************************************************************************
(1)   23/    901C :                     ; ****************************************************************************************************************
(1)   24/    901C :                     
(1)   25/    901C :                     Print:
(1)   26/    901C :                     	section 	Print
(1)   27/    901C :                     
(1)   28/    901C : (MACRO)             	pusha														; push registers on stack
(1)   28/    901C : CE FF                       st              @-1(p2)
(1)   29/    901E : (MACRO)             	pushp 	p1
(1)   29/    901E : 35                          xpah    P1
(1)   29/    901F : CE FF                       st              @-1(p2)
(1)   29/    9021 : 31                          xpal    P1
 AS V1.42 Beta [Bld 102] - source file minol.asm(screen.asm) - page 4 - 1/6/2016 14:57:37


(1)   29/    9022 : CE FF                       st              @-1(p2)
(1)   30/    9024 : (MACRO)             	pushe
(1)   30/    9024 : 40                          lde
(1)   30/    9025 : CE FF                       st              @-1(p2)
(1)   31/    9027 :                     
(1)   32/    9027 : C2 03               	ld 		3(p2) 												; read character 
(1)   33/    9029 : 9C 12               	jnz 	__PRPrintCharacterA 								; if non zero print it on its own.
(1)   34/    902B :                     
(1)   35/    902B :                     __PRPrintString:
(1)   36/    902B : C2 01               	ld 		1(p2) 												; restore original P1
(1)   37/    902D : 31                  	xpal 	p1
(1)   38/    902E : C2 02               	ld 		2(p2)
(1)   39/    9030 : 35                  	xpah 	p1 													; read character at P1.
(1)   40/    9031 : C5 01               	ld 		@1(p1)
(1)   41/    9033 : 01                  	xae 														; save in E.
(1)   42/    9034 : 35                  	xpah 	p1 													; write P1 back.
(1)   43/    9035 : CA 02               	st 		2(p2)
(1)   44/    9037 : 31                  	xpal 	p1
(1)   45/    9038 : CA 01               	st 		1(p2)
(1)   46/    903A : 40                  	lde 														; get character from E
(1)   47/    903B : 98 46               	jz 		__PRExitNoCheck 									; exit without loop check.
(1)   48/    903D :                     ;
(1)   49/    903D :                     ;	Print character in A now ; throughout it is stored in E.
(1)   50/    903D :                     ;
(1)   51/    903D :                     __PRPrintCharacterA:
(1)   52/    903D : 01                  	xae 														; save character in E.
(1)   53/    903E :                     ;
(1)   54/    903E :                     ;	Read cursor and set P1 to that address
(1)   55/    903E :                     ;
(1)   56/    903E : C4 0C               	ldi 	ScreenCursor/256 									; set P1 to point to screen cursor
(1)   57/    9040 : 35                  	xpah 	p1
(1)   58/    9041 : C4 80               	ldi 	ScreenCursor&255
(1)   59/    9043 : 31                  	xpal 	p1
(1)   60/    9044 : C1 00               	ld 		0(p1) 												; put cursor position in P1.L
(1)   61/    9046 : 31                  	xpal 	p1
(1)   62/    9047 :                     ;
(1)   63/    9047 :                     ;	Check for control
(1)   64/    9047 :                     ;
(1)   65/    9047 : 40                  	lde 														; look at character
(1)   66/    9048 : D4 E0               	ani 	0xE0 												; is it code 0-31
(1)   67/    904A : 98 45               	jz 		__PRIsControlChar
(1)   68/    904C :                     ;
(1)   69/    904C :                     ;	Print non-control
(1)   70/    904C :                     ;
(1)   71/    904C : 40                  	lde 														; read character
(1)   72/    904D : 03                  	scl 														; CY/L clear if < 96
(1)   73/    904E : FC 60               	cai 	96 
(1)   74/    9050 : 06                  	csa 	 	 												; skip if carry set
(1)   75/    9051 : E4 80               	xri 	0x80													
(1)   76/    9053 : 94 04               	jp 		__PRNotASCII
(1)   77/    9055 : 40                  	lde 														; if ASCII make 6 bit.
(1)   78/    9056 : D4 3F               	ani 	0x3F
(1)   79/    9058 : 01                  	xae
(1)   80/    9059 :                     __PRNotASCII:
(1)   81/    9059 : 40                  	lde 														; get character.
(1)   82/    905A : C9 00               	st 		(p1) 												; save in shadow memory
(1)   83/    905C : 35                  	xpah 	p1 													; switch to VRAM, preserving A.
(1)   84/    905D : C4 00               	ldi 	0 													
(1)   85/    905F : 35                  	xpah 	p1
(1)   86/    9060 : CD 01               	st 		@1(p1) 												; save in screen memory, advance write position.
 AS V1.42 Beta [Bld 102] - source file minol.asm(screen.asm) - page 5 - 1/6/2016 14:57:37


(1)   87/    9062 :                     ;
(1)   88/    9062 :                     ;	Write cursor position back from P1.L
(1)   89/    9062 :                     ;
(1)   90/    9062 :                     __PRUpdateCursor:
(1)   91/    9062 : C4 0C               	ldi		ScreenCursor / 256 									; set P1 to point to screen cursor, restore position to P1
(1)   92/    9064 : 35                  	xpah 	p1
(1)   93/    9065 : C4 80               	ldi 	ScreenCursor & 255 
(1)   94/    9067 : 31                  	xpal 	p1 													; after this, adjusted cursor position is in AC.
(1)   95/    9068 : C9 00               	st 		(p1) 												; write back in cursor position
(1)   96/    906A : 94 13               	jp 		__PRExit 											; if position is off the bottom then scroll.
(1)   97/    906C :                     ;
(1)   98/    906C :                     ;	Scroll display
(1)   99/    906C :                     ;
(1)  100/    906C : C4 0C               	ldi 	(ScreenMirror+16) / 256 							; point P1 to 2nd line.
(1)  101/    906E : 35                  	xpah 	p1
(1)  102/    906F : C4 10               	ldi 	(ScreenMirror+16) & 255
(1)  103/    9071 :                     __PRScrollLoop:
(1)  104/    9071 : 31                  	xpal 	p1
(1)  105/    9072 : C1 00               	ld 		0(p1) 												; copy char to previous line
(1)  106/    9074 : C9 F0               	st 		-16(p1)
(1)  107/    9076 : C5 01               	ld 		@1(p1) 												; bump pointer.
(1)  108/    9078 : 31                  	xpal 	p1
(1)  109/    9079 : 94 F6               	jp 		__PRScrollLoop
(1)  110/    907B : C4 70               	ldi 	128-16 												; clear from and move to last line
(1)  111/    907D : 90 3D               	jmp 	__PRClearFromMoveTo
(1)  112/    907F :                     ;
(1)  113/    907F :                     ;	Exit screen drawing routine.
(1)  114/    907F :                     ;
(1)  115/    907F :                     __PRExit:
(1)  116/    907F : C2 03               	ld 		3(p2) 												; if character was zero, loop
(1)  117/    9081 : 98 A8               	jz 		__PRPrintString 									; back as printing string at P1.
(1)  118/    9083 :                     __PRExitNoCheck:
(1)  119/    9083 : (MACRO)             	pulle 														; restore registers
(1)  119/    9083 : C6 01                       ld              @1(p2)
(1)  119/    9085 : 01                          xae
(1)  120/    9086 : (MACRO)             	pullp 	p1
(1)  120/    9086 : C6 01                       ld              @1(p2)
(1)  120/    9088 : 31                          xpal    P1
(1)  120/    9089 : C6 01                       ld              @1(p2)
(1)  120/    908B : 35                          xpah    P1
(1)  121/    908C : (MACRO)             	pulla
(1)  121/    908C : C6 01                       ld              @1(p2)
(1)  122/    908E : 3F                  	xppc 	p3 													; return
(1)  123/    908F : 90 8B               	jmp 	Print 												; make re-entrant.
(1)  124/    9091 :                     ;
(1)  125/    9091 :                     ;	Check for supported control characters 8 (Backspace) 12 (Clear) 13 (Carriage Return)
(1)  126/    9091 :                     ;
(1)  127/    9091 :                     __PRIsControlChar:
(1)  128/    9091 : 40                  	lde 														; restore character.
(1)  129/    9092 : E4 0D               	xri 	13 													; carriage return ? (13)
(1)  130/    9094 : 98 1B               	jz 		__PRIsReturn
(1)  131/    9096 : E4 01               	xri 	13!12 												; form feed ? (12)
(1)  132/    9098 : 98 20               	jz 		__PRClearScreen
(1)  133/    909A : E4 04               	xri 	12!8 												; backspace ? (8)
(1)  134/    909C : 9C E1               	jnz 	__PRExit 
(1)  135/    909E :                     ;
(1)  136/    909E :                     ;	Handle backspace (8)
(1)  137/    909E :                     ;
(1)  138/    909E : 31                  	xpal 	p1 													; check cursor position is zero
(1)  139/    909F : 98 DE               	jz 		__PRExit 											; if it is, cannot backspace so exit.
 AS V1.42 Beta [Bld 102] - source file minol.asm(screen.asm) - page 6 - 1/6/2016 14:57:37


(1)  140/    90A1 : 31                  	xpal 	p1  												; put it back
(1)  141/    90A2 : C5 FF               	ld 		@-1(p1)												; move it back one
(1)  142/    90A4 : C4 20               	ldi 	' '	 												; erase in shadow
(1)  143/    90A6 : C9 00               	st 		(p1)
(1)  144/    90A8 : C4 00               	ldi 	0 													; point P1 to VRAM
(1)  145/    90AA : 35                  	xpah 	p1
(1)  146/    90AB : C4 20               	ldi 	' '													; erase in VRAM
(1)  147/    90AD : C9 00               	st 		(p1)
(1)  148/    90AF : 90 B1               	jmp 	__PRUpdateCursor 									; and exit
(1)  149/    90B1 :                     ;
(1)  150/    90B1 :                     ;	Handle carriage return (13)
(1)  151/    90B1 :                     ;
(1)  152/    90B1 :                     __PRIsReturn:
(1)  153/    90B1 : 31                  	xpal 	p1 													; cursor position in A
(1)  154/    90B2 : D4 F0               	ani 	0xF0 												; start of current line
(1)  155/    90B4 : 02                  	ccl 														; down one line
(1)  156/    90B5 : F4 10               	adi 	0x10 	
(1)  157/    90B7 : 31                  	xpal 	p1 													; put it back in P1.
(1)  158/    90B8 : 90 A8               	jmp 	__PRUpdateCursor
(1)  159/    90BA :                     ;
(1)  160/    90BA :                     ;	Handle clear screen (12)
(1)  161/    90BA :                     ;
(1)  162/    90BA :                     __PRClearScreen:
(1)  163/    90BA : C4 00               	ldi 	0 													; clear shadow memory from here.
(1)  164/    90BC :                     ;
(1)  165/    90BC :                     ;	From position A, clear the memory in the shadow screen to the end, copy the shadow screen to VRAM
(1)  166/    90BC :                     ;	then use position A as the new cursor position.
(1)  167/    90BC :                     ;
(1)  168/    90BC :                     __PRClearFromMoveTo:
(1)  169/    90BC : CE FF               	st 		@-1(p2) 											; save this position, the cursor goes here.
(1)  170/    90BE :                     __PRClearLoop:
(1)  171/    90BE : 31                  	xpal 	p1 													; save position in P1.
(1)  172/    90BF : C4 20               	ldi 	' '													; write space there.
(1)  173/    90C1 : CD 01               	st 		@1(p1)
(1)  174/    90C3 : 31                  	xpal 	p1
(1)  175/    90C4 : 94 F8               	jp 		__PRClearLoop 										; until reached shadow memory start.
(1)  176/    90C6 : C4 00               	ldi 	0 													; now copy shadow memory to screen memory.
(1)  177/    90C8 :                     __PRCopy:
(1)  178/    90C8 : 31                  	xpal 	p1 													; set up P1.L
(1)  179/    90C9 : C4 0C               	ldi 	ScreenMirror/256 									; point to shadow memory.
(1)  180/    90CB : 35                  	xpah 	p1 													
(1)  181/    90CC : C1 00               	ld 		(p1) 												; read shadow memory
(1)  182/    90CE : 35                  	xpah 	p1 													; zero P1.H preserving A
(1)  183/    90CF : C4 00               	ldi 	0
(1)  184/    90D1 : 35                  	xpah 	p1
(1)  185/    90D2 : CD 01               	st 		@1(p1) 												; save and increment p1
(1)  186/    90D4 : 31                  	xpal 	p1 
(1)  187/    90D5 : 94 F1               	jp 		__PRCopy 											; keep doing till all copied.
(1)  188/    90D7 : C6 01               	ld 		@1(p2) 												; read cursor position
(1)  189/    90D9 : 31                  	xpal 	p1 													; put in P1.L
(1)  190/    90DA : 90 86               	jmp 	__PRUpdateCursor
(1)  191/    90DC :                     
(1)  192/    90DC :                     	endsection 	Print
(1)  193/    90DC :                     
(1)  194/    90DC :                     ; ****************************************************************************************************************
(1)  195/    90DC :                     ; ****************************************************************************************************************
(1)  196/    90DC :                     ;
(1)  197/    90DC :                     ;		Input a single character into A. Case is converted to Upper. All registers preserved except A
(1)  198/    90DC :                     ;
(1)  199/    90DC :                     ; ****************************************************************************************************************
 AS V1.42 Beta [Bld 102] - source file minol.asm(screen.asm) - page 7 - 1/6/2016 14:57:37


(1)  200/    90DC :                     ; ****************************************************************************************************************
(1)  201/    90DC :                     
(1)  202/    90DC :                     GetChar:
(1)  203/    90DC :                     	section 	GetChar
(1)  204/    90DC : C4 08               	ldi 	0x8 												; set P1 to $8xx, and save P1.H
(1)  205/    90DE : 35                  	xpah 	p1
(1)  206/    90DF : CE FF               	st 		@-1(p2)
(1)  207/    90E1 :                     __GCWaitKey: 													; wait for key press
(1)  208/    90E1 : C1 00               	ld 		0(p1)
(1)  209/    90E3 : 94 FC               	jp 		__GCWaitKey
(1)  210/    90E5 : D4 7F               	ani	 	0x7F 												; throw away the upper bit.
(1)  211/    90E7 : CA FF               	st 		-1(p2) 												; save it below stack
(1)  212/    90E9 :                     __GCWaitRelease:
(1)  213/    90E9 : C1 00               	ld 		0(p1) 												; wait for release
(1)  214/    90EB : D4 80               	ani 	0x80
(1)  215/    90ED : 9C FA               	jnz 	__GCWaitRelease
(1)  216/    90EF : C6 01               	ld 		@1(p2) 												; restore P1.H
(1)  217/    90F1 : 35                  	xpah 	p1
(1)  218/    90F2 : C2 FE               	ld 		-2(p2) 												; restore saved value
(1)  219/    90F4 : 02                  	ccl
(1)  220/    90F5 : F4 20               	adi 	0x20												; will make lower case -ve
(1)  221/    90F7 : 94 02               	jp 		__GCNotLower
(1)  222/    90F9 : FC 20               	cai 	0x20 												; capitalise
(1)  223/    90FB :                     __GCNotLower:
(1)  224/    90FB : F4 E0               	adi 	0xE0 												; fix up.
(1)  225/    90FD : 3F                  	xppc 	p3 													; return
(1)  226/    90FE : 90 DC               	jmp 	GetChar 											; make re-entrant
(1)  227/    9100 :                     	endsection 	GetChar
(1)  228/    9100 :                     
(1)  229/    9100 :                     ; ****************************************************************************************************************
(1)  230/    9100 :                     ; ****************************************************************************************************************
(1)  231/    9100 :                     ;
(1)  232/    9100 :                     ;			Read an ASCIIZ string from keyboard into P1 of length A maximum (excludes NULL terminator)
(1)  233/    9100 :                     ;
(1)  234/    9100 :                     ; ****************************************************************************************************************
(1)  235/    9100 :                     ; ****************************************************************************************************************
(1)  236/    9100 :                     
(1)  237/    9100 :                     GetString:
(1)  238/    9100 :                     	section GetString
(1)  239/    9100 : (MACRO)             	pusha 														; save A,P3,E
(1)  239/    9100 : CE FF                       st              @-1(p2)
(1)  240/    9102 : (MACRO)             	pushp 	p3
(1)  240/    9102 : 37                          xpah    P3
(1)  240/    9103 : CE FF                       st              @-1(p2)
(1)  240/    9105 : 33                          xpal    P3
(1)  240/    9106 : CE FF                       st              @-1(p2)
(1)  241/    9108 : (MACRO)             	pushe 
(1)  241/    9108 : 40                          lde
(1)  241/    9109 : CE FF                       st              @-1(p2)
(1)  242/    910B : C4 00               	ldi 	0 													; set E (current position) to A.
(1)  243/    910D : 01                  	xae
(1)  244/    910E :                     __GSLoop:
(1)  245/    910E : (MACRO)             	lpi 	p3,Print-1 											; print the prompt (half coloured square)
(1)  245/    910E : C4 90                       ldi     (PRINT-1) / 256
(1)  245/    9110 : 37                          xpah    P3
(1)  245/    9111 : C4 1B                       ldi     (PRINT-1) & 255
(1)  245/    9113 : 33                          xpal    P3
(1)  246/    9114 : C4 9B               	ldi 	155
(1)  247/    9116 : 3F                  	xppc 	p3
(1)  248/    9117 : (MACRO)             	lpi 	p3,GetChar-1 										; get a character
 AS V1.42 Beta [Bld 102] - source file minol.asm(screen.asm) - page 8 - 1/6/2016 14:57:37


(1)  248/    9117 : C4 90                       ldi     (GETCHAR-1) / 256
(1)  248/    9119 : 37                          xpah    P3
(1)  248/    911A : C4 DB                       ldi     (GETCHAR-1) & 255
(1)  248/    911C : 33                          xpal    P3
(1)  249/    911D : 3F                  	xppc 	p3
(1)  250/    911E : C9 80               	st 		-0x80(p1) 											; save it in the current position.
(1)  251/    9120 : (MACRO)             	lpi 	p3,Print-1 											; erase the prompt with backspace.
(1)  251/    9120 : C4 90                       ldi     (PRINT-1) / 256
(1)  251/    9122 : 37                          xpah    P3
(1)  251/    9123 : C4 1B                       ldi     (PRINT-1) & 255
(1)  251/    9125 : 33                          xpal    P3
(1)  252/    9126 : C4 08               	ldi 	8
(1)  253/    9128 : 3F                  	xppc 	p3
(1)  254/    9129 : C1 80               	ld 		-0x80(p1) 											; re-read character
(1)  255/    912B : D4 E0               	ani 	0xE0 												; check if control key.
(1)  256/    912D : 98 0F               	jz 		__GSControlKey 
(1)  257/    912F : 40                  	lde 														; get current position.
(1)  258/    9130 : E2 03               	xor 	3(p2) 												; reached maximum length of buffer ?
(1)  259/    9132 : 98 DA               	jz 		__GSLoop 											; if so, ignore the key and go round again.
(1)  260/    9134 : C1 80               	ld 		-0x80(p1) 											; get character and print it
(1)  261/    9136 : 3F                  	xppc 	p3
(1)  262/    9137 : C4 01               	ldi 	1 													; increment E
(1)  263/    9139 : 02                  	ccl
(1)  264/    913A : 70                  	ade
(1)  265/    913B : 01                  	xae
(1)  266/    913C : 90 D0               	jmp 	__GSLoop 											; and go round again.
(1)  267/    913E :                     ;
(1)  268/    913E :                     ;	Handle control keys (0x00-0x1F)
(1)  269/    913E :                     ;
(1)  270/    913E :                     __GSControlKey:
(1)  271/    913E : C1 80               	ld 		-0x80(p1) 											; get typed in key
(1)  272/    9140 : E4 08               	xri 	8 													; check for backspace.
(1)  273/    9142 : 98 17               	jz 		__GSBackspace 			
(1)  274/    9144 : E4 05               	xri 	8!13 												; check for CR
(1)  275/    9146 : 9C C6               	jnz 	__GSLoop 											; if not, ignore the key.
(1)  276/    9148 :                     ;
(1)  277/    9148 :                     ;	Carriage Return, ending input.
(1)  278/    9148 :                     ;
(1)  279/    9148 : C9 80               	st 		-0x80(p1) 											; replace the CR written with NULL terminator.
(1)  280/    914A : C4 0D               	ldi 	13 													; print CR
(1)  281/    914C : 3F                  	xppc 	p3
(1)  282/    914D : (MACRO)             	pulle 														; restore E,P3,A
(1)  282/    914D : C6 01                       ld              @1(p2)
(1)  282/    914F : 01                          xae
(1)  283/    9150 : (MACRO)             	pullp	p3
(1)  283/    9150 : C6 01                       ld              @1(p2)
(1)  283/    9152 : 33                          xpal    P3
(1)  283/    9153 : C6 01                       ld              @1(p2)
(1)  283/    9155 : 37                          xpah    P3
(1)  284/    9156 : (MACRO)             	pulla
(1)  284/    9156 : C6 01                       ld              @1(p2)
(1)  285/    9158 : 3F                  	xppc 	p3 													; return
(1)  286/    9159 : 90 A5               	jmp 	GetString 											; make re-entrant (probably unneccessary !!)
(1)  287/    915B :                     ;
(1)  288/    915B :                     ;	Backspace entered
(1)  289/    915B :                     ;
(1)  290/    915B :                     __GSBackspace
(1)  291/    915B : 40                  	lde 														; if E = 0 we can't backspace any further.
(1)  292/    915C : 98 B0               	jz 		__GSLoop
(1)  293/    915E : C4 08               	ldi 	8 													; backspace on screen
 AS V1.42 Beta [Bld 102] - source file minol.asm(screen.asm) - page 9 - 1/6/2016 14:57:37


(1)  294/    9160 : 3F                  	xppc 	p3
(1)  295/    9161 : C4 FF               	ldi 	0xFF 												; decrement E
(1)  296/    9163 : 02                  	ccl
(1)  297/    9164 : 70                  	ade
(1)  298/    9165 : 01                  	xae
(1)  299/    9166 : 90 A6               	jmp 	__GSLoop 											; and go round again.
(1)  300/    9168 :                     
(1)  301/    9168 :                     	endsection GetString
(1)  302/    9168 :                     
      37/    9168 :                     	include source\expression.asm 								; expression evaluator.
(1)    1/    9168 :                     ; ****************************************************************************************************************
(1)    2/    9168 :                     ; ****************************************************************************************************************
(1)    3/    9168 :                     ;
(1)    4/    9168 :                     ;												Expression Evaluation
(1)    5/    9168 :                     ;
(1)    6/    9168 :                     ; ****************************************************************************************************************
(1)    7/    9168 :                     ; ****************************************************************************************************************
(1)    8/    9168 :                     
(1)    9/    9168 :                     
(1)   10/    9168 :                     ; ****************************************************************************************************************
(1)   11/    9168 :                     ; ****************************************************************************************************************
(1)   12/    9168 :                     ;
(1)   13/    9168 :                     ;		Evaluate expression at P1. Return 	CY/L = 0 : Error 	E = Error Code
(1)   14/    9168 :                     ;											CY/L = 1 : Okay 	E = Result
(1)   15/    9168 :                     ;
(1)   16/    9168 :                     ;		Terms are : 	A-Z 			Variables
(1)   17/    9168 :                     ;						[0-9]+			Constants
(1)   18/    9168 :                     ;						! 				Random byte
(1)   19/    9168 :                     ;						'?'				Character constant
(1)   20/    9168 :                     ;						(<expr>,<expr>)	Read Memory location
(1)   21/    9168 :                     ;
(1)   22/    9168 :                     ; ****************************************************************************************************************
(1)   23/    9168 :                     ; ****************************************************************************************************************
(1)   24/    9168 :                     
(1)   25/    9168 : =0x1                EEX_PendingOp = 1 												; offset to pending operation
(1)   26/    9168 : =0x0                EEX_Value = 0 													; offset to value
(1)   27/    9168 :                     
(1)   28/    9168 :                     EvaluateExpression:
(1)   29/    9168 : (MACRO)             	pushp 	p3 													; save P3 on stack
(1)   29/    9168 : 37                          xpah    P3
(1)   29/    9169 : CE FF                       st              @-1(p2)
(1)   29/    916B : 33                          xpal    P3
(1)   29/    916C : CE FF                       st              @-1(p2)
(1)   30/    916E : C4 2B               	ldi 	'+'													; push pending operation on stack
(1)   31/    9170 : CE FF               	st 		@-1(p2)
(1)   32/    9172 : C4 00               	ldi 	0 													; push current value on stack
(1)   33/    9174 : CE FF               	st 		@-1(p2)												; effectively this puts 0+ on the front of the expression.
(1)   34/    9176 :                     
(1)   35/    9176 :                     ; ****************************************************************************************************************
(1)   36/    9176 :                     ;													Get Next Term
(1)   37/    9176 :                     ; ****************************************************************************************************************
(1)   38/    9176 :                     
(1)   39/    9176 :                     EEX_Term:
(1)   40/    9176 : (MACRO)             	lpi 	p3,Variables 										; point P3 to variables
(1)   40/    9176 : C4 0C                       ldi     (VARIABLES) / 256
(1)   40/    9178 : 37                          xpah    P3
(1)   40/    9179 : C4 90                       ldi     (VARIABLES) & 255
(1)   40/    917B : 33                          xpal    P3
(1)   41/    917C :                     EEX_NextChar:
(1)   42/    917C : C1 00               	ld 		(p1) 												; look at character
 AS V1.42 Beta [Bld 102] - source file minol.asm(expression.asm) - page 10 - 1/6/2016 14:57:37


(1)   43/    917E : 98 4F               	jz 		EEX_TermError
(1)   44/    9180 : C5 01               	ld 		@1(p1) 												; fetch and skip over.
(1)   45/    9182 : E4 20               	xri 	' '													; is it space ?
(1)   46/    9184 : 98 F6               	jz 		EEX_NextChar
(1)   47/    9186 : E4 08               	xri 	' '!'('												; is it memory access ?
(1)   48/    9188 : 98 55               	jz 		EEX_MemoryAccess
(1)   49/    918A : E4 09               	xri 	'('!'!'												; is it a random value ?
(1)   50/    918C : 9C 1B               	jnz 	EEX_NotRandom
(1)   51/    918E :                     
(1)   52/    918E :                     ; ****************************************************************************************************************
(1)   53/    918E :                     ;												Term is ! (random byte)
(1)   54/    918E :                     ; ****************************************************************************************************************
(1)   55/    918E :                     
(1)   56/    918E :                     EEX_Random:
(1)   57/    918E : 02                  	ccl 	
(1)   58/    918F : C3 FF               	ld 		RandomSeed+1-Variables(p3) 							; shift the seed right
(1)   59/    9191 : 1F                  	rrl
(1)   60/    9192 : CB FF               	st 		RandomSeed+1-Variables(p3)
(1)   61/    9194 : 01                  	xae 														; put MSB in E
(1)   62/    9195 : C3 FE               	ld 		RandomSeed-Variables(p3)
(1)   63/    9197 : 1F                  	rrl
(1)   64/    9198 : CB FE               	st 		RandomSeed-Variables(p3)
(1)   65/    919A : 60                  	xre 														; XOR E into LSB
(1)   66/    919B : 01                  	xae
(1)   67/    919C : 06                  	csa 														; if CY/L is zero
(1)   68/    919D : D4 80               	ani 	0x80
(1)   69/    919F : 9C 06               	jnz 	EEX_NoTap 
(1)   70/    91A1 : C3 FF               	ld 		RandomSeed+1-Variables(p3) 							; XOR MSB with $B4
(1)   71/    91A3 : E4 B4               	xri 	0xB4
(1)   72/    91A5 : CB FF               	st 		RandomSeed+1-Variables(p3)
(1)   73/    91A7 :                     EEX_NoTap:
(1)   74/    91A7 : 90 65               	jmp 	EEX_HaveTerm
(1)   75/    91A9 :                     
(1)   76/    91A9 :                     EEX_NotRandom:
(1)   77/    91A9 : E4 06               	xri 	'!'!0x27											; is it a quote ?
(1)   78/    91AB : 9C 0F               	jnz 	EEX_NotQuote
(1)   79/    91AD :                     
(1)   80/    91AD :                     ; ****************************************************************************************************************
(1)   81/    91AD :                     ;													Term is '<char>'
(1)   82/    91AD :                     ; ****************************************************************************************************************
(1)   83/    91AD :                     
(1)   84/    91AD : C1 00               	ld 		(p1) 												; get character that is quoted
(1)   85/    91AF : 98 1E               	jz 		EEX_TermError 										; if zero, error.
(1)   86/    91B1 : 01                  	xae 														; save in E if okay character.
(1)   87/    91B2 : C1 01               	ld 		1(p1) 												; get character after that
(1)   88/    91B4 : E4 27               	xri 	0x27 												; is it a quote ?
(1)   89/    91B6 : 9C 17               	jnz 	EEX_TermError
(1)   90/    91B8 : C5 02               	ld 		@2(p1) 												; skip over character and quote
(1)   91/    91BA : 90 52               	jmp 	EEX_HaveTerm 										; and execute as if a legal term
(1)   92/    91BC :                     
(1)   93/    91BC :                     ; ****************************************************************************************************************
(1)   94/    91BC :                     ;									Not 'x' or !, so test for 0-9 and A-Z
(1)   95/    91BC :                     ; ****************************************************************************************************************
(1)   96/    91BC :                     
(1)   97/    91BC :                     EEX_NotQuote:
(1)   98/    91BC : C1 FF               	ld 		-1(p1)												; get old character.
(1)   99/    91BE : 02                  	ccl
(1)  100/    91BF : F4 A5               	adi 	255-'Z'												; if >= 'Z' then error.										
(1)  101/    91C1 : 94 0C               	jp 		EEX_TermError
(1)  102/    91C3 : F4 1A               	adi 	26 													; will be 0..25 if A..Z
 AS V1.42 Beta [Bld 102] - source file minol.asm(expression.asm) - page 11 - 1/6/2016 14:57:37


(1)  103/    91C5 : 94 43               	jp 		EEX_Variable 										; so do as a variable.
(1)  104/    91C7 : F4 07               	adi 	'A'-1-'9'											; check if > 9
(1)  105/    91C9 : 94 04               	jp 		EEX_TermError
(1)  106/    91CB : F4 0A               	adi 	10 													; if 0-9
(1)  107/    91CD : 94 1D               	jp 		EEX_Constant
(1)  108/    91CF :                     
(1)  109/    91CF :                     ; ****************************************************************************************************************
(1)  110/    91CF :                     ;													 Error Exit.
(1)  111/    91CF :                     ; ****************************************************************************************************************
(1)  112/    91CF :                     
(1)  113/    91CF :                     EEX_TermError:
(1)  114/    91CF : C4 04               	ldi 	ERRC_Term 											; put term error in A
(1)  115/    91D1 :                     EEX_Error:
(1)  116/    91D1 : 01                  	xae 														; put error code in E
(1)  117/    91D2 : 02                  	ccl 														; clear CY/L indicating error
(1)  118/    91D3 :                     EEX_Exit:
(1)  119/    91D3 : C6 02               	ld 		@2(p2) 												; throw the pending operation and value
(1)  120/    91D5 : (MACRO)             	pullp 	p3 													; restore P3
(1)  120/    91D5 : C6 01                       ld              @1(p2)
(1)  120/    91D7 : 33                          xpal    P3
(1)  120/    91D8 : C6 01                       ld              @1(p2)
(1)  120/    91DA : 37                          xpah    P3
(1)  121/    91DB : 06                  	csa 														; put CY/L in A bit 7
(1)  122/    91DC : 3F                  	xppc 	p3 													; and exit
(1)  123/    91DD : 90 89               	jmp 	EvaluateExpression 									; make re-entrant
(1)  124/    91DF :                     
(1)  125/    91DF :                     ; ****************************************************************************************************************
(1)  126/    91DF :                     ;										Handle (<expr>,<expr>)
(1)  127/    91DF :                     ; ****************************************************************************************************************
(1)  128/    91DF :                     
(1)  129/    91DF :                     EEX_MemoryAccess:
(1)  130/    91DF : C5 FF               	ld 		@-1(p1) 											; point to the (
(1)  131/    91E1 : (MACRO)             	lpi 	p3,EvaluateAddressPair-1 							; call the evaluate/read of (h,l)
(1)  131/    91E1 : C4 92                       ldi     (EVALUATEADDRESSPAIR-1) / 256
(1)  131/    91E3 : 37                          xpah    P3
(1)  131/    91E4 : C4 BB                       ldi     (EVALUATEADDRESSPAIR-1) & 255
(1)  131/    91E6 : 33                          xpal    P3
(1)  132/    91E7 : 3F                  	xppc 	p3
(1)  133/    91E8 : 94 E9               	jp 		EEX_Exit 											; error occurred, so exit with it.
(1)  134/    91EA : 90 22               	jmp 	EEX_HaveTerm
(1)  135/    91EC :                     
(1)  136/    91EC :                     ; ****************************************************************************************************************
(1)  137/    91EC :                     ;								Handle constant, first digit value is in A
(1)  138/    91EC :                     ; ****************************************************************************************************************
(1)  139/    91EC :                     
(1)  140/    91EC :                     EEX_Constant:
(1)  141/    91EC : 01                  	xae 														; put first digit value in E
(1)  142/    91ED :                     EEX_ConstantLoop:
(1)  143/    91ED : C1 00               	ld 		(p1) 												; get next character.
(1)  144/    91EF : 02                  	ccl
(1)  145/    91F0 : F4 C6               	adi 	255-'9' 											; if >= 9 term is too large.
(1)  146/    91F2 : 94 1A               	jp 		EEX_HaveTerm
(1)  147/    91F4 : F4 8A               	adi 	10+128
(1)  148/    91F6 : 94 16               	jp 		EEX_HaveTerm
(1)  149/    91F8 : 02                  	ccl
(1)  150/    91F9 : 40                  	lde 														; A = n
(1)  151/    91FA : 70                  	ade 														; A = n * 2
(1)  152/    91FB : 70                  	ade 														; A = n * 3
(1)  153/    91FC : 70                  	ade 														; A = n * 4
(1)  154/    91FD : 70                  	ade 														; A = n * 5
 AS V1.42 Beta [Bld 102] - source file minol.asm(expression.asm) - page 12 - 1/6/2016 14:57:37


(1)  155/    91FE : 01                  	xae 														; E = n * 5
(1)  156/    91FF : 40                  	lde 														; A = n * 5
(1)  157/    9200 : 70                  	ade 														; A = n * 10
(1)  158/    9201 : 01                  	xae
(1)  159/    9202 : C5 01               	ld 		@1(p1) 												; read character convert to number
(1)  160/    9204 : D4 0F               	ani 	0x0F
(1)  161/    9206 : 70                  	ade
(1)  162/    9207 : 01                  	xae
(1)  163/    9208 : 90 E3               	jmp 	EEX_ConstantLoop
(1)  164/    920A :                     
(1)  165/    920A :                     
(1)  166/    920A :                     ; ****************************************************************************************************************
(1)  167/    920A :                     ;									Access variable, variable id (0-25) in A
(1)  168/    920A :                     ; ****************************************************************************************************************
(1)  169/    920A :                     
(1)  170/    920A :                     EEX_Variable:
(1)  171/    920A : 01                  	xae 														; put value 0-25 in E
(1)  172/    920B : C3 80               	ld 		-0x80(p3) 											; load using E as index
(1)  173/    920D : 01                  	xae 														; put in E
(1)  174/    920E :                     
(1)  175/    920E :                     ; ****************************************************************************************************************
(1)  176/    920E :                     ;										Have the right term in E, process it
(1)  177/    920E :                     ; ****************************************************************************************************************
(1)  178/    920E :                     
(1)  179/    920E :                     EEX_HaveTerm:
(1)  180/    920E : C2 01               	ld 		EEX_PendingOp(p2) 									; get pending operation.
(1)  181/    9210 : E4 2B               	xri 	'+'
(1)  182/    9212 : 9C 06               	jnz 	EEX_NotAdd
(1)  183/    9214 :                     
(1)  184/    9214 :                     ; ****************************************************************************************************************
(1)  185/    9214 :                     ;												Add Right Term to Value
(1)  186/    9214 :                     ; ****************************************************************************************************************
(1)  187/    9214 : 02                  	ccl
(1)  188/    9215 : C2 00               	ld 		EEX_Value(p2)										; get value
(1)  189/    9217 : 70                  	ade 														; add right
(1)  190/    9218 : 90 08               	jmp 	EEX_SaveAndExit 									; save and exit
(1)  191/    921A :                     
(1)  192/    921A :                     EEX_NotAdd:
(1)  193/    921A : E4 06               	xri 	'+'!'-'
(1)  194/    921C : 9C 12               	jnz		EEX_NotSubtract
(1)  195/    921E :                     
(1)  196/    921E :                     ; ****************************************************************************************************************
(1)  197/    921E :                     ;											 Subtract Right Term from Value
(1)  198/    921E :                     ; ****************************************************************************************************************
(1)  199/    921E : 03                  	scl
(1)  200/    921F : C2 00               	ld 		EEX_Value(p2)										; get value
(1)  201/    9221 : 78                  	cae 														; subtract right
(1)  202/    9222 :                     EEX_SaveAndExit:
(1)  203/    9222 : CA 00               	st 		EEX_Value(p2) 										; save value back
(1)  204/    9224 : 90 30               	jmp 	EEX_CheckNextOperation 								; and exit, look for next operator.
(1)  205/    9226 :                     
(1)  206/    9226 :                     EEX_Divide_Zero:												; handle divide by zero error.
(1)  207/    9226 : C4 07               	ldi 	ERRC_DivZero
(1)  208/    9228 : 90 A7               	jmp 	EEX_Error
(1)  209/    922A :                     
(1)  210/    922A :                     EEX_EndExpression:
(1)  211/    922A : C2 00               	ld 		EEX_Value(p2) 										; get current value
(1)  212/    922C : 01                  	xae 														; put in E
(1)  213/    922D : 03                  	scl 														; set CY/L indicating expression okay.
(1)  214/    922E : 90 A3               	jmp 	EEX_Exit 											; and exit.
 AS V1.42 Beta [Bld 102] - source file minol.asm(expression.asm) - page 13 - 1/6/2016 14:57:37


(1)  215/    9230 :                     
(1)  216/    9230 :                     EEX_NotSubtract:
(1)  217/    9230 : E4 07               	xri 	'-'!'*'
(1)  218/    9232 : 9C 45               	jnz 	EEX_Divide
(1)  219/    9234 :                     
(1)  220/    9234 :                     ; ****************************************************************************************************************
(1)  221/    9234 :                     ;											 Multiply Right Term into Value
(1)  222/    9234 :                     ; ****************************************************************************************************************
(1)  223/    9234 :                     
(1)  224/    9234 : C2 00               	ld 		EEX_Value(p2) 										; a = left value
(1)  225/    9236 : CA 01               	st 		1(p2)
(1)  226/    9238 : C4 00               	ldi 	0													; res = 0(p2)
(1)  227/    923A : CA 00               	st 		0(p2) 												; clear it.
(1)  228/    923C :                     EEX_MultiplyLoop:
(1)  229/    923C : 40                  	lde  														; if B == 0 then we are done.
(1)  230/    923D : 98 17               	jz 		EEX_CheckNextOperation
(1)  231/    923F : D4 01               	ani 	1 													; if B LSB is non zero.
(1)  232/    9241 : 98 07               	jz 		EEX_Multiply_B0IsZero
(1)  233/    9243 : C2 00               	ld 		0(p2) 												; add A to Result
(1)  234/    9245 : 02                  	ccl
(1)  235/    9246 : F2 01               	add 	1(p2)
(1)  236/    9248 : CA 00               	st 		0(p2)
(1)  237/    924A :                     EEX_Multiply_B0IsZero:
(1)  238/    924A : 40                  	lde 														; shift B right
(1)  239/    924B : 1C                  	sr
(1)  240/    924C : 01                  	xae
(1)  241/    924D : C2 01               	ld 		1(p2) 												; shift A left
(1)  242/    924F : 02                  	ccl
(1)  243/    9250 : F2 01               	add 	1(p2)
(1)  244/    9252 : CA 01               	st 		1(p2)
(1)  245/    9254 : 90 E6               	jmp 	EEX_MultiplyLoop
(1)  246/    9256 :                     
(1)  247/    9256 :                     ; ****************************************************************************************************************
(1)  248/    9256 :                     ;											Check next operation
(1)  249/    9256 :                     ; ****************************************************************************************************************
(1)  250/    9256 :                     
(1)  251/    9256 :                     EEX_CheckNextOperation:
(1)  252/    9256 : C5 01               	ld 		@1(p1)												; skip over spaces
(1)  253/    9258 : E4 20               	xri 	' '
(1)  254/    925A : 98 FA               	jz 		EEX_CheckNextOperation
(1)  255/    925C : C5 FF               	ld 		@-1(p1)												; get operator
(1)  256/    925E : E4 2B               	xri 	'+'													; check if + - * /
(1)  257/    9260 : 98 0C               	jz 		EEX_FoundOperator
(1)  258/    9262 : E4 06               	xri 	'+'!'-'
(1)  259/    9264 : 98 08               	jz 		EEX_FoundOperator
(1)  260/    9266 : E4 07               	xri 	'-'!'*'
(1)  261/    9268 : 98 04               	jz 		EEX_FoundOperator
(1)  262/    926A : E4 05               	xri 	'*'!'/'
(1)  263/    926C : 9C BC               	jnz 	EEX_EndExpression
(1)  264/    926E :                     
(1)  265/    926E :                     EEX_FoundOperator:
(1)  266/    926E : C5 01               	ld  	@1(p1) 												; get and skip operator
(1)  267/    9270 : CA 01               	st 		EEX_PendingOp(p2)									; save then pending operator
(1)  268/    9272 : (MACRO)             	lpi 	p3,EEX_Term-1
(1)  268/    9272 : C4 91                       ldi     (EEX_TERM-1) / 256
(1)  268/    9274 : 37                          xpah    P3
(1)  268/    9275 : C4 75                       ldi     (EEX_TERM-1) & 255
(1)  268/    9277 : 33                          xpal    P3
(1)  269/    9278 : 3F                  	xppc 	p3
(1)  270/    9279 :                     
 AS V1.42 Beta [Bld 102] - source file minol.asm(expression.asm) - page 14 - 1/6/2016 14:57:37


(1)  271/    9279 :                     ; ****************************************************************************************************************
(1)  272/    9279 :                     ;											 Divide Right Term into Value
(1)  273/    9279 :                     ; ****************************************************************************************************************
(1)  274/    9279 :                     
(1)  275/    9279 :                     EEX_Divide:
(1)  276/    9279 : 40                  	lde 														; if denominator zero, error 2.
(1)  277/    927A : 98 AA               	jz 		EEX_Divide_Zero
(1)  278/    927C : C2 00               	ld 		0(p2) 												; numerator into 1(p2)
(1)  279/    927E : CA 01               	st 		1(p2) 												; denominator is in E
(1)  280/    9280 : C4 00               	ldi 	0
(1)  281/    9282 : CA 00               	st 		0(p2)												; quotient in 0(p2)
(1)  282/    9284 : CA FF               	st 		-1(p2) 												; remainder in -1(p2)
(1)  283/    9286 : C4 80               	ldi 	0x80 									
(1)  284/    9288 : CA FE               	st 		-2(p2) 												; bit in -2(p2)
(1)  285/    928A :                     
(1)  286/    928A :                     EEX_Divide_Loop:
(1)  287/    928A : C2 FE               	ld 		-2(p2) 												; exit if bit = 0,we've finished.
(1)  288/    928C : 98 C8               	jz 		EEX_CheckNextOperation
(1)  289/    928E :                     
(1)  290/    928E : 02                  	ccl 	 													; shift remainder left.
(1)  291/    928F : C2 FF               	ld 		-1(p2)
(1)  292/    9291 : F2 FF               	add 	-1(p2)
(1)  293/    9293 : CA FF               	st 		-1(p2)
(1)  294/    9295 :                     
(1)  295/    9295 : C2 01               	ld 		1(p2)												; get numerator.
(1)  296/    9297 : 94 02               	jp 		EEX_Divide_Numerator_Positive
(1)  297/    9299 : AA FF               	ild 	-1(p2)  											; if numerator -ve, increment remainder.
(1)  298/    929B :                     EEX_Divide_Numerator_Positive:
(1)  299/    929B :                     
(1)  300/    929B : C2 FF               	ld 		-1(p2) 												; calculate remainder - denominator
(1)  301/    929D : 03                  	scl
(1)  302/    929E : 78                  	cae 
(1)  303/    929F : CA FD               	st 		-3(p2) 												; save in temp -3(p2)
(1)  304/    92A1 : 06                  	csa 														; if temp >= 0, CY/L is set
(1)  305/    92A2 : 94 0A               	jp 		EEX_Divide_Temp_Positive
(1)  306/    92A4 :                     
(1)  307/    92A4 : C2 FD               	ld 		-3(p2) 												; copy temp to remainder
(1)  308/    92A6 : CA FF               	st 		-1(p2)
(1)  309/    92A8 : C2 FE               	ld 		-2(p2) 												; or bit into quotient
(1)  310/    92AA : DA 00               	or 		0(p2)
(1)  311/    92AC : CA 00               	st 		0(p2)
(1)  312/    92AE :                     EEX_Divide_Temp_Positive:
(1)  313/    92AE : C2 FE               	ld 		-2(p2) 												; shift bit right
(1)  314/    92B0 : 1C                  	sr
(1)  315/    92B1 : CA FE               	st 		-2(p2)
(1)  316/    92B3 :                     
(1)  317/    92B3 : C2 01               	ld 		1(p2)												; shift numerator positive
(1)  318/    92B5 : 02                  	ccl
(1)  319/    92B6 : F2 01               	add 	1(p2)
(1)  320/    92B8 : CA 01               	st 		1(p2)
(1)  321/    92BA : 90 CE               	jmp 	EEX_Divide_Loop
(1)  322/    92BC :                     
(1)  323/    92BC :                     ; ****************************************************************************************************************
(1)  324/    92BC :                     ; ****************************************************************************************************************
(1)  325/    92BC :                     ;
(1)  326/    92BC :                     ;	Evaluate an address pair at P1 e.g. (<expr>,<expr>).  Returns as for expression, but stack-2, stack-1 are
(1)  327/    92BC :                     ;	the address (the data at that address is in E if no error occurs)
(1)  328/    92BC :                     ;
(1)  329/    92BC :                     ; ****************************************************************************************************************
(1)  330/    92BC :                     ; ****************************************************************************************************************
 AS V1.42 Beta [Bld 102] - source file minol.asm(expression.asm) - page 15 - 1/6/2016 14:57:37


(1)  331/    92BC :                     
(1)  332/    92BC :                     EvaluateAddressPair:
(1)  333/    92BC : C6 FE               	ld 		@-2(p2)												; make space to store HL
(1)  334/    92BE : (MACRO)             	pushp 	p3 													; save return address.
(1)  334/    92BE : 37                          xpah    P3
(1)  334/    92BF : CE FF                       st              @-1(p2)
(1)  334/    92C1 : 33                          xpal    P3
(1)  334/    92C2 : CE FF                       st              @-1(p2)
(1)  335/    92C4 : C1 00               	ld 		(p1) 												; check first is '(', exit with term error if not
(1)  336/    92C6 : E4 28               	xri 	'('
(1)  337/    92C8 : 9C 2E               	jnz 	EAP_Error
(1)  338/    92CA : C5 01               	ld 		@1(p1)												; skip over it.
(1)  339/    92CC : (MACRO)             	lpi 	p3,EvaluateExpression-1 							; evaluate H
(1)  339/    92CC : C4 91                       ldi     (EVALUATEEXPRESSION-1) / 256
(1)  339/    92CE : 37                          xpah    P3
(1)  339/    92CF : C4 67                       ldi     (EVALUATEEXPRESSION-1) & 255
(1)  339/    92D1 : 33                          xpal    P3
(1)  340/    92D2 : 3F                  	xppc 	p3
(1)  341/    92D3 : 94 27               	jp 		EAP_Exit 											; exit if failed
(1)  342/    92D5 : 40                  	lde 														; store H at 3(P2)
(1)  343/    92D6 : CA 03               	st 		3(p2)
(1)  344/    92D8 : C1 00               	ld 		(p1) 												; check for ','
(1)  345/    92DA : E4 2C               	xri 	','
(1)  346/    92DC : 9C 1A               	jnz 	EAP_Error											; fail if not present
(1)  347/    92DE : C5 01               	ld 		@1(p1)												; skip over comma
(1)  348/    92E0 : 3F                  	xppc 	p3 													; evaluate L
(1)  349/    92E1 : 94 19               	jp 		EAP_Exit 											; exit on error
(1)  350/    92E3 : 40                  	lde 														; store L at 2(P2)
(1)  351/    92E4 : CA 02               	st 		2(p2)
(1)  352/    92E6 : 33                  	xpal 	p3 													; and put in P3.L for later
(1)  353/    92E7 : C1 00               	ld 		(p1) 												; check for ')'
(1)  354/    92E9 : E4 29               	xri 	')'
(1)  355/    92EB : 9C 0B               	jnz 	EAP_Error
(1)  356/    92ED : C5 01               	ld 		@1(p1) 												; skip over close bracket
(1)  357/    92EF : C2 03               	ld 		3(p2) 												; put 3(P2) in P3.H
(1)  358/    92F1 : 37                  	xpah 	p3
(1)  359/    92F2 : C3 00               	ld 		(p3) 												; read address
(1)  360/    92F4 : 01                  	xae 														; put in E
(1)  361/    92F5 : 03                  	scl 														; set carry to indicate okay
(1)  362/    92F6 : 90 04               	jmp 	EAP_Exit 											; and exit.
(1)  363/    92F8 :                     
(1)  364/    92F8 :                     EAP_Error:
(1)  365/    92F8 : C4 04               	ldi 	ERRC_TERM 											; set error up
(1)  366/    92FA : 01                  	xae
(1)  367/    92FB : 02                  	ccl
(1)  368/    92FC :                     EAP_Exit:														; exit
(1)  369/    92FC : (MACRO)             	pullp 	p3 													; restore P3
(1)  369/    92FC : C6 01                       ld              @1(p2)
(1)  369/    92FE : 33                          xpal    P3
(1)  369/    92FF : C6 01                       ld              @1(p2)
(1)  369/    9301 : 37                          xpah    P3
(1)  370/    9302 : C6 02               	ld 		@2(p2) 												; drop the H L address store
(1)  371/    9304 : 06                  	csa 														; A bit 7 = CY/L
(1)  372/    9305 : 3F                  	xppc 	p3
(1)  373/    9306 :                     
(1)  374/    9306 :                     
 AS V1.42 Beta [Bld 102] - source file minol.asm - page 16 - 1/6/2016 14:57:37


  symbol table (* = unused):
  ------------------------

*ARCHITECTURE :  i386-unknown-win32 - | *BIGENDIAN :                      0 - |
*BOOTMONITOR :                  210 - | *BRANCHEXT :                      0 - |
*CASESENSITIVE :                  0 - | *CONSTPI :        3.141592653589793 - |
*DATE :                    1/6/2016 - |  EAP_ERROR :                   92F8 C |
 EAP_EXIT :                    92FC C |  EEX_CHECKNEXTOPERATION :      9256 C |
 EEX_CONSTANT :                91EC C |  EEX_CONSTANTLOOP :            91ED C |
 EEX_DIVIDE :                  9279 C |  EEX_DIVIDE_LOOP :             928A C |
 EEX_DIVIDE_NUMERATOR_POSITIVE :                                       929B C |
 EEX_DIVIDE_TEMP_POSITIVE :    92AE C |  EEX_DIVIDE_ZERO :             9226 C |
 EEX_ENDEXPRESSION :           922A C |  EEX_ERROR :                   91D1 C |
 EEX_EXIT :                    91D3 C |  EEX_FOUNDOPERATOR :           926E C |
 EEX_HAVETERM :                920E C |  EEX_MEMORYACCESS :            91DF C |
 EEX_MULTIPLYLOOP :            923C C |  EEX_MULTIPLY_B0ISZERO :       924A C |
 EEX_NEXTCHAR :                917C C |  EEX_NOTADD :                  921A C |
 EEX_NOTAP :                   91A7 C |  EEX_NOTQUOTE :                91BC C |
 EEX_NOTRANDOM :               91A9 C |  EEX_NOTSUBTRACT :             9230 C |
 EEX_PENDINGOP :                  1 - | *EEX_RANDOM :                  918E C |
 EEX_SAVEANDEXIT :             9222 C |  EEX_TERM :                    9176 C |
 EEX_TERMERROR :               91CF C |  EEX_VALUE :                      0 - |
 EEX_VARIABLE :                920A C |  ERRC_DIVZERO :                   7 - |
*ERRC_LABEL :                     1 - | *ERRC_MEMORY :                    6 - |
*ERRC_SYNTAX :                    5 - |  ERRC_TERM :                      4 - |
*ERRC_UNKNOWN :                   2 - |  EVALUATEADDRESSPAIR :         92BC C |
 EVALUATEEXPRESSION :          9168 C |  EXPR :                        9016 C |
*FALSE :                          0 - | *FULLPMMU :                       1 - |
 GETCHAR :                     90DC C |  GETSTRING :                   9100 C |
*HAS64 :                          1 - | *HASDSP :                         0 - |
*HASFPU :                         0 - | *HASPMMU :                        0 - |
*INEXTMODE :                      0 - | *INLWORDMODE :                    0 - |
*INMAXMODE :                      0 - | *INSRCMODE :                      0 - |
*INSUPMODE :                      0 - | *LISTON :                         1 - |
*MACEXP :                         1 - | *MOMCPU :                         C - |
*MOMCPUNAME :                 SC/MP - | *NESTMAX :                      100 - |
*OSMATHLIBRARY :                  3 - | *PACKING :                        0 - |
*PADDING :                        1 - |  PRINT :                       901C C |
 RANDOMSEED :                   C8E - | *RELAXED :                        0 - |
 SCREENCURSOR :                 C80 - |  SCREENMIRROR :                 C00 - |
 SYSTEM :                       C90 - | *TIME :                    14:57:37 - |
*TRUE :                           1 - |  VARIABLES :                    C90 - |
*VERSION :                     142F - |  WAIT1 :                       9014 C |
 __GCNOTLOWER [GETCHAR] :      90FB C |  __GCWAITKEY [GETCHAR] :       90E1 C |
 __GCWAITRELEASE [GETCHAR] :   90E9 C |  __GSBACKSPACE [GETSTRING] :   915B C |
 __GSCONTROLKEY [GETSTRING] :  913E C |  __GSLOOP [GETSTRING] :        910E C |
 __PRCLEARFROMMOVETO [PRINT] : 90BC C |  __PRCLEARLOOP [PRINT] :       90BE C |
 __PRCLEARSCREEN [PRINT] :     90BA C |  __PRCOPY [PRINT] :            90C8 C |
 __PREXIT [PRINT] :            907F C |  __PREXITNOCHECK [PRINT] :     9083 C |
 __PRISCONTROLCHAR [PRINT] :   9091 C |  __PRISRETURN [PRINT] :        90B1 C |
 __PRNOTASCII [PRINT] :        9059 C |  __PRPRINTCHARACTERA [PRINT] : 903D C |
 __PRPRINTSTRING [PRINT] :     902B C |  __PRSCROLLLOOP [PRINT] :      9071 C |
 __PRUPDATECURSOR [PRINT] :    9062 C |

     98 symbols
     35 unused symbols

 AS V1.42 Beta [Bld 102] - source file minol.asm - page 17 - 1/6/2016 14:57:37


  defined macros:
  ---------------

LPI                                   | PULLA                                
PULLE                                 | PULLP                                
PUSHA                                 | PUSHE                                
PUSHP                                 | SETV                                 

      8 macros

 AS V1.42 Beta [Bld 102] - source file minol.asm - page 18 - 1/6/2016 14:57:37


  codepages:
  ----------

STANDARD (0 changed characters)


0.01 seconds assembly time

    812 lines source file
    896 lines incl. macro expansions
      2 passes
      0 errors
      0 warnings
