 AS V1.42 Beta [Bld 102] - source file minol.asm - page 1 - 1/5/2016 11:51:45


       1/       0 :                     ; ****************************************************************************************************************
       2/       0 :                     ; ****************************************************************************************************************
       3/       0 :                     ;
       4/       0 :                     ;												Minol ROM Image
       5/       0 :                     ;
       6/       0 :                     ; ****************************************************************************************************************
       7/       0 :                     ; ****************************************************************************************************************
       8/       0 :                     
       9/       0 :                     	cpu 	sc/mp
      10/       0 :                     
      11/       0 :                     	include source\memorymacros.asm 							; Memory allocation and Macro definition.	
(1)    1/       0 :                     ; ****************************************************************************************************************
(1)    2/       0 :                     ; ****************************************************************************************************************
(1)    3/       0 :                     ;
(1)    4/       0 :                     ;										Memory and Macro Allocation.
(1)    5/       0 :                     ;	
(1)    6/       0 :                     ; ****************************************************************************************************************
(1)    7/       0 :                     ; ****************************************************************************************************************
(1)    8/       0 :                     
(1)    9/       0 : =0x3                OSMathLibrary = 0x0003 											; the Maths library is here.
(1)   10/       0 : =0x210              BootMonitor = 0x210 											; address to boot monitor
(1)   11/       0 :                     
(1)   12/       0 :                     ; ****************************************************************************************************************
(1)   13/       0 :                     ;												 Memory Allocation
(1)   14/       0 :                     ; ****************************************************************************************************************
(1)   15/       0 :                     
(1)   16/       0 : =0xC00              ScreenMirror = 0xC00 											; Screen mirror, 128 bytes, 256 byte page boundary.
(1)   17/       0 : =0xC80              ScreenCursor = ScreenMirror+0x80  								; Position on that screen (00..7F)
(1)   18/       0 :                     
(1)   19/       0 :                     ; ****************************************************************************************************************
(1)   20/       0 :                     ;														Macros
(1)   21/       0 :                     ; ****************************************************************************************************************
(1)   22/       0 :                     
(1)   23/       0 :                     lpi	macro	ptr,addr											; load pointer register with constant
(1)   24/       0 :                     	ldi 	(addr) / 256
(1)   25/       0 :                     	xpah 	ptr
(1)   26/       0 :                     	ldi 	(addr) & 255
(1)   27/       0 :                     	xpal 	ptr
(1)   28/       0 :                     	endm
(1)   29/       0 :                     
(1)   30/       0 :                     pushp macro ptr 												; push pointer register on stack
(1)   31/       0 :                     	xpah 	ptr
(1)   32/       0 :                     	st 		@-1(p2)
(1)   33/       0 :                     	xpal 	ptr
(1)   34/       0 :                     	st 		@-1(p2)
(1)   35/       0 :                     	endm
(1)   36/       0 :                     
(1)   37/       0 :                     pullp macro ptr 												; pull pointer register off stack
(1)   38/       0 :                     	ld 		@1(p2)
(1)   39/       0 :                     	xpal 	ptr
(1)   40/       0 :                     	ld 		@1(p2)
(1)   41/       0 :                     	xpah 	ptr
(1)   42/       0 :                     	endm
(1)   43/       0 :                     
(1)   44/       0 :                     pushe macro 													; push E on stack
(1)   45/       0 :                     	lde
(1)   46/       0 :                     	st 		@-1(p2)
(1)   47/       0 :                     	endm
(1)   48/       0 :                     
(1)   49/       0 :                     pulle macro 													; pull E off stack
 AS V1.42 Beta [Bld 102] - source file minol.asm(memorymacros.asm) - page 2 - 1/5/2016 11:51:45


(1)   50/       0 :                     	ld 		@1(p2)
(1)   51/       0 :                     	xae
(1)   52/       0 :                     	endm
(1)   53/       0 :                     
(1)   54/       0 :                     pusha macro 													; push A on stack
(1)   55/       0 :                     	st 		@-1(p2)
(1)   56/       0 :                     	endm
(1)   57/       0 :                     
(1)   58/       0 :                     pulla macro
(1)   59/       0 :                     	ld 		@1(p2)
(1)   60/       0 :                     	endm
(1)   61/       0 :                     
(1)   62/       0 :                     ;setv macro ch,value 											; sets a variable to a value, assumes P3 = Variables.
(1)   63/       0 :                     ;	ldi 	(value) & 255
(1)   64/       0 :                     ;	st 		((ch) & 0x3F)*2(p3)
(1)   65/       0 :                     ;	ldi 	(value) / 256
(1)   66/       0 :                     ;	st 		((ch) & 0x3F)*2+1(p3)
(1)   67/       0 :                     ;	endm
(1)   68/       0 :                     ;
(1)   69/       0 :                     ;code macro lineNo,code 											; a debugging macro, which fakes up a line of code.
(1)   70/       0 :                     ;	db 		strlen(code)+4 										; one byte offset to next (0 = End of code)
(1)   71/       0 :                     ;	dw 		lineNo 												; two byte line number (low byte first)
(1)   72/       0 :                     ;	db 		code,0 												; ASCIIZ string
(1)   73/       0 :                     ;	endm
(1)   74/       0 :                     ;
(1)   75/       0 :                     ;special macro ch,method
(1)   76/       0 :                     ;	db 		ch
(1)   77/       0 :                     ;	dw 		(method)-1
(1)   78/       0 :                     ;	endm
(1)   79/       0 :                     
      12/       0 :                     	include source\errors.asm 									; Error Codes
(1)    1/       0 :                     ; ****************************************************************************************************************
(1)    2/       0 :                     ; ****************************************************************************************************************
(1)    3/       0 :                     ;
(1)    4/       0 :                     ;												Error Codes
(1)    5/       0 :                     ;
(1)    6/       0 :                     ; ****************************************************************************************************************
(1)    7/       0 :                     ; ****************************************************************************************************************
(1)    8/       0 :                     
      13/       0 :                     
      14/       0 :                     ; ****************************************************************************************************************
      15/       0 :                     ;													Main Program
      16/       0 :                     ; ****************************************************************************************************************
      17/       0 :                     
      18/    9000 :                     	org 	0x9000 												; the ROM starts here
      19/    9000 :                     
      20/    9000 : 68                  	db 		0x68												; this makes it boot straight into this ROM.
      21/    9001 : (MACRO)             	lpi 	p2,0xFF8											; set up stack default value
      21/    9001 : C4 0F                       ldi     (0XFF8) / 256
      21/    9003 : 36                          xpah    P2
      21/    9004 : C4 F8                       ldi     (0XFF8) & 255
      21/    9006 : 32                          xpal    P2
      22/    9007 : (MACRO)             	lpi 	p3,Print-1 											; clear screen
      22/    9007 : C4 90                       ldi     (PRINT-1) / 256
      22/    9009 : 37                          xpah    P3
      22/    900A : C4 2A                       ldi     (PRINT-1) & 255
      22/    900C : 33                          xpal    P3
      23/    900D : C4 0C               	ldi 	12
      24/    900F : 3F                  	xppc 	p3
      25/    9010 : (MACRO)             	lpi 	p1,msg
 AS V1.42 Beta [Bld 102] - source file minol.asm - page 3 - 1/5/2016 11:51:45


      25/    9010 : C4 90                       ldi     (MSG) / 256
      25/    9012 : 35                          xpah    P1
      25/    9013 : C4 1B                       ldi     (MSG) & 255
      25/    9015 : 31                          xpal    P1
      26/    9016 : C4 00               	ldi 	0
      27/    9018 : 3F                  	xppc 	p3
      28/    9019 :                     
      29/    9019 :                     wait1:	
      30/    9019 : 90 FE               	jmp 	wait1
      31/    901B :                     msg:
      32/    901B : 48 45 4C 4C 4F 20   	db 		"HELLO WORLD !",13,42,0
                    57 4F 52 4C 44 20 
                    21 0D 2A 00 
      33/    902B :                     
      34/    902B :                     ; ****************************************************************************************************************
      35/    902B :                     ;													Source Files
      36/    902B :                     ; ****************************************************************************************************************
      37/    902B :                     
      38/    902B :                     	include source\screen.asm 									; screen I/O stuff.
(1)    1/    902B :                     ; ****************************************************************************************************************
(1)    2/    902B :                     ; ****************************************************************************************************************
(1)    3/    902B :                     ;
(1)    4/    902B :                     ;											Screen I/O, VTL-2 ROM
(1)    5/    902B :                     ;											=====================
(1)    6/    902B :                     ;
(1)    7/    902B :                     ;	Provides Character and String Input/Output functionality.
(1)    8/    902B :                     ;
(1)    9/    902B :                     ; ****************************************************************************************************************
(1)   10/    902B :                     ; ****************************************************************************************************************
(1)   11/    902B :                     
(1)   12/    902B :                     ; ****************************************************************************************************************
(1)   13/    902B :                     ; ****************************************************************************************************************
(1)   14/    902B :                     ;
(1)   15/    902B :                     ;	Print routine. Prints either character in A, or ASCIIZ string at P1 (if A is zero). Preserves all registers
(1)   16/    902B :                     ;	except if printing string, P1 points to the character after the NULL terminator.
(1)   17/    902B :                     ;
(1)   18/    902B :                     ;	Scrolls automatically. Understands character codes 32-255, 8 (Backspace) 12 (Clear Screen) 13 (Carriage
(1)   19/    902B :                     ;	Return). Others are currently ignored (except 0, see above). Note L/C values (97....) display those characters
(1)   20/    902B :                     ;	in the ROM font *not* lower case :)
(1)   21/    902B :                     ;
(1)   22/    902B :                     ; ****************************************************************************************************************
(1)   23/    902B :                     ; ****************************************************************************************************************
(1)   24/    902B :                     
(1)   25/    902B :                     Print:
(1)   26/    902B :                     	section 	Print
(1)   27/    902B :                     
(1)   28/    902B : (MACRO)             	pusha														; push registers on stack
(1)   28/    902B : CE FF                       st              @-1(p2)
(1)   29/    902D : (MACRO)             	pushp 	p1
(1)   29/    902D : 35                          xpah    P1
(1)   29/    902E : CE FF                       st              @-1(p2)
(1)   29/    9030 : 31                          xpal    P1
(1)   29/    9031 : CE FF                       st              @-1(p2)
(1)   30/    9033 : (MACRO)             	pushe
(1)   30/    9033 : 40                          lde
(1)   30/    9034 : CE FF                       st              @-1(p2)
(1)   31/    9036 :                     
(1)   32/    9036 : C2 03               	ld 		3(p2) 												; read character 
(1)   33/    9038 : 9C 12               	jnz 	__PRPrintCharacterA 								; if non zero print it on its own.
(1)   34/    903A :                     
 AS V1.42 Beta [Bld 102] - source file minol.asm(screen.asm) - page 4 - 1/5/2016 11:51:45


(1)   35/    903A :                     __PRPrintString:
(1)   36/    903A : C2 01               	ld 		1(p2) 												; restore original P1
(1)   37/    903C : 31                  	xpal 	p1
(1)   38/    903D : C2 02               	ld 		2(p2)
(1)   39/    903F : 35                  	xpah 	p1 													; read character at P1.
(1)   40/    9040 : C5 01               	ld 		@1(p1)
(1)   41/    9042 : 01                  	xae 														; save in E.
(1)   42/    9043 : 35                  	xpah 	p1 													; write P1 back.
(1)   43/    9044 : CA 02               	st 		2(p2)
(1)   44/    9046 : 31                  	xpal 	p1
(1)   45/    9047 : CA 01               	st 		1(p2)
(1)   46/    9049 : 40                  	lde 														; get character from E
(1)   47/    904A : 98 46               	jz 		__PRExitNoCheck 									; exit without loop check.
(1)   48/    904C :                     ;
(1)   49/    904C :                     ;	Print character in A now ; throughout it is stored in E.
(1)   50/    904C :                     ;
(1)   51/    904C :                     __PRPrintCharacterA:
(1)   52/    904C : 01                  	xae 														; save character in E.
(1)   53/    904D :                     ;
(1)   54/    904D :                     ;	Read cursor and set P1 to that address
(1)   55/    904D :                     ;
(1)   56/    904D : C4 0C               	ldi 	ScreenCursor/256 									; set P1 to point to screen cursor
(1)   57/    904F : 35                  	xpah 	p1
(1)   58/    9050 : C4 80               	ldi 	ScreenCursor&255
(1)   59/    9052 : 31                  	xpal 	p1
(1)   60/    9053 : C1 00               	ld 		0(p1) 												; put cursor position in P1.L
(1)   61/    9055 : 31                  	xpal 	p1
(1)   62/    9056 :                     ;
(1)   63/    9056 :                     ;	Check for control
(1)   64/    9056 :                     ;
(1)   65/    9056 : 40                  	lde 														; look at character
(1)   66/    9057 : D4 E0               	ani 	0xE0 												; is it code 0-31
(1)   67/    9059 : 98 45               	jz 		__PRIsControlChar
(1)   68/    905B :                     ;
(1)   69/    905B :                     ;	Print non-control
(1)   70/    905B :                     ;
(1)   71/    905B : 40                  	lde 														; read character
(1)   72/    905C : 03                  	scl 														; CY/L clear if < 96
(1)   73/    905D : FC 60               	cai 	96 
(1)   74/    905F : 06                  	csa 	 	 												; skip if carry set
(1)   75/    9060 : E4 80               	xri 	0x80													
(1)   76/    9062 : 94 04               	jp 		__PRNotASCII
(1)   77/    9064 : 40                  	lde 														; if ASCII make 6 bit.
(1)   78/    9065 : D4 3F               	ani 	0x3F
(1)   79/    9067 : 01                  	xae
(1)   80/    9068 :                     __PRNotASCII:
(1)   81/    9068 : 40                  	lde 														; get character.
(1)   82/    9069 : C9 00               	st 		(p1) 												; save in shadow memory
(1)   83/    906B : 35                  	xpah 	p1 													; switch to VRAM, preserving A.
(1)   84/    906C : C4 00               	ldi 	0 													
(1)   85/    906E : 35                  	xpah 	p1
(1)   86/    906F : CD 01               	st 		@1(p1) 												; save in screen memory, advance write position.
(1)   87/    9071 :                     ;
(1)   88/    9071 :                     ;	Write cursor position back from P1.L
(1)   89/    9071 :                     ;
(1)   90/    9071 :                     __PRUpdateCursor:
(1)   91/    9071 : C4 0C               	ldi		ScreenCursor / 256 									; set P1 to point to screen cursor, restore position to P1
(1)   92/    9073 : 35                  	xpah 	p1
(1)   93/    9074 : C4 80               	ldi 	ScreenCursor & 255 
(1)   94/    9076 : 31                  	xpal 	p1 													; after this, adjusted cursor position is in AC.
 AS V1.42 Beta [Bld 102] - source file minol.asm(screen.asm) - page 5 - 1/5/2016 11:51:45


(1)   95/    9077 : C9 00               	st 		(p1) 												; write back in cursor position
(1)   96/    9079 : 94 13               	jp 		__PRExit 											; if position is off the bottom then scroll.
(1)   97/    907B :                     ;
(1)   98/    907B :                     ;	Scroll display
(1)   99/    907B :                     ;
(1)  100/    907B : C4 0C               	ldi 	(ScreenMirror+16) / 256 							; point P1 to 2nd line.
(1)  101/    907D : 35                  	xpah 	p1
(1)  102/    907E : C4 10               	ldi 	(ScreenMirror+16) & 255
(1)  103/    9080 :                     __PRScrollLoop:
(1)  104/    9080 : 31                  	xpal 	p1
(1)  105/    9081 : C1 00               	ld 		0(p1) 												; copy char to previous line
(1)  106/    9083 : C9 F0               	st 		-16(p1)
(1)  107/    9085 : C5 01               	ld 		@1(p1) 												; bump pointer.
(1)  108/    9087 : 31                  	xpal 	p1
(1)  109/    9088 : 94 F6               	jp 		__PRScrollLoop
(1)  110/    908A : C4 70               	ldi 	128-16 												; clear from and move to last line
(1)  111/    908C : 90 3D               	jmp 	__PRClearFromMoveTo
(1)  112/    908E :                     ;
(1)  113/    908E :                     ;	Exit screen drawing routine.
(1)  114/    908E :                     ;
(1)  115/    908E :                     __PRExit:
(1)  116/    908E : C2 03               	ld 		3(p2) 												; if character was zero, loop
(1)  117/    9090 : 98 A8               	jz 		__PRPrintString 									; back as printing string at P1.
(1)  118/    9092 :                     __PRExitNoCheck:
(1)  119/    9092 : (MACRO)             	pulle 														; restore registers
(1)  119/    9092 : C6 01                       ld              @1(p2)
(1)  119/    9094 : 01                          xae
(1)  120/    9095 : (MACRO)             	pullp 	p1
(1)  120/    9095 : C6 01                       ld              @1(p2)
(1)  120/    9097 : 31                          xpal    P1
(1)  120/    9098 : C6 01                       ld              @1(p2)
(1)  120/    909A : 35                          xpah    P1
(1)  121/    909B : (MACRO)             	pulla
(1)  121/    909B : C6 01                       ld              @1(p2)
(1)  122/    909D : 3F                  	xppc 	p3 													; return
(1)  123/    909E : 90 8B               	jmp 	Print 												; make re-entrant.
(1)  124/    90A0 :                     ;
(1)  125/    90A0 :                     ;	Check for supported control characters 8 (Backspace) 12 (Clear) 13 (Carriage Return)
(1)  126/    90A0 :                     ;
(1)  127/    90A0 :                     __PRIsControlChar:
(1)  128/    90A0 : 40                  	lde 														; restore character.
(1)  129/    90A1 : E4 0D               	xri 	13 													; carriage return ? (13)
(1)  130/    90A3 : 98 1B               	jz 		__PRIsReturn
(1)  131/    90A5 : E4 01               	xri 	13!12 												; form feed ? (12)
(1)  132/    90A7 : 98 20               	jz 		__PRClearScreen
(1)  133/    90A9 : E4 04               	xri 	12!8 												; backspace ? (8)
(1)  134/    90AB : 9C E1               	jnz 	__PRExit 
(1)  135/    90AD :                     ;
(1)  136/    90AD :                     ;	Handle backspace (8)
(1)  137/    90AD :                     ;
(1)  138/    90AD : 31                  	xpal 	p1 													; check cursor position is zero
(1)  139/    90AE : 98 DE               	jz 		__PRExit 											; if it is, cannot backspace so exit.
(1)  140/    90B0 : 31                  	xpal 	p1  												; put it back
(1)  141/    90B1 : C5 FF               	ld 		@-1(p1)												; move it back one
(1)  142/    90B3 : C4 20               	ldi 	' '	 												; erase in shadow
(1)  143/    90B5 : C9 00               	st 		(p1)
(1)  144/    90B7 : C4 00               	ldi 	0 													; point P1 to VRAM
(1)  145/    90B9 : 35                  	xpah 	p1
(1)  146/    90BA : C4 20               	ldi 	' '													; erase in VRAM
(1)  147/    90BC : C9 00               	st 		(p1)
 AS V1.42 Beta [Bld 102] - source file minol.asm(screen.asm) - page 6 - 1/5/2016 11:51:45


(1)  148/    90BE : 90 B1               	jmp 	__PRUpdateCursor 									; and exit
(1)  149/    90C0 :                     ;
(1)  150/    90C0 :                     ;	Handle carriage return (13)
(1)  151/    90C0 :                     ;
(1)  152/    90C0 :                     __PRIsReturn:
(1)  153/    90C0 : 31                  	xpal 	p1 													; cursor position in A
(1)  154/    90C1 : D4 F0               	ani 	0xF0 												; start of current line
(1)  155/    90C3 : 02                  	ccl 														; down one line
(1)  156/    90C4 : F4 10               	adi 	0x10 	
(1)  157/    90C6 : 31                  	xpal 	p1 													; put it back in P1.
(1)  158/    90C7 : 90 A8               	jmp 	__PRUpdateCursor
(1)  159/    90C9 :                     ;
(1)  160/    90C9 :                     ;	Handle clear screen (12)
(1)  161/    90C9 :                     ;
(1)  162/    90C9 :                     __PRClearScreen:
(1)  163/    90C9 : C4 00               	ldi 	0 													; clear shadow memory from here.
(1)  164/    90CB :                     ;
(1)  165/    90CB :                     ;	From position A, clear the memory in the shadow screen to the end, copy the shadow screen to VRAM
(1)  166/    90CB :                     ;	then use position A as the new cursor position.
(1)  167/    90CB :                     ;
(1)  168/    90CB :                     __PRClearFromMoveTo:
(1)  169/    90CB : CE FF               	st 		@-1(p2) 											; save this position, the cursor goes here.
(1)  170/    90CD :                     __PRClearLoop:
(1)  171/    90CD : 31                  	xpal 	p1 													; save position in P1.
(1)  172/    90CE : C4 20               	ldi 	' '													; write space there.
(1)  173/    90D0 : CD 01               	st 		@1(p1)
(1)  174/    90D2 : 31                  	xpal 	p1
(1)  175/    90D3 : 94 F8               	jp 		__PRClearLoop 										; until reached shadow memory start.
(1)  176/    90D5 : C4 00               	ldi 	0 													; now copy shadow memory to screen memory.
(1)  177/    90D7 :                     __PRCopy:
(1)  178/    90D7 : 31                  	xpal 	p1 													; set up P1.L
(1)  179/    90D8 : C4 0C               	ldi 	ScreenMirror/256 									; point to shadow memory.
(1)  180/    90DA : 35                  	xpah 	p1 													
(1)  181/    90DB : C1 00               	ld 		(p1) 												; read shadow memory
(1)  182/    90DD : 35                  	xpah 	p1 													; zero P1.H preserving A
(1)  183/    90DE : C4 00               	ldi 	0
(1)  184/    90E0 : 35                  	xpah 	p1
(1)  185/    90E1 : CD 01               	st 		@1(p1) 												; save and increment p1
(1)  186/    90E3 : 31                  	xpal 	p1 
(1)  187/    90E4 : 94 F1               	jp 		__PRCopy 											; keep doing till all copied.
(1)  188/    90E6 : C6 01               	ld 		@1(p2) 												; read cursor position
(1)  189/    90E8 : 31                  	xpal 	p1 													; put in P1.L
(1)  190/    90E9 : 90 86               	jmp 	__PRUpdateCursor
(1)  191/    90EB :                     
(1)  192/    90EB :                     	endsection 	Print
(1)  193/    90EB :                     
(1)  194/    90EB :                     ; ****************************************************************************************************************
(1)  195/    90EB :                     ; ****************************************************************************************************************
(1)  196/    90EB :                     ;
(1)  197/    90EB :                     ;		Input a single character into A. Case is converted to Upper. All registers preserved except A
(1)  198/    90EB :                     ;
(1)  199/    90EB :                     ; ****************************************************************************************************************
(1)  200/    90EB :                     ; ****************************************************************************************************************
(1)  201/    90EB :                     
(1)  202/    90EB :                     GetChar:
(1)  203/    90EB :                     	section 	GetChar
(1)  204/    90EB : C4 08               	ldi 	0x8 												; set P1 to $8xx, and save P1.H
(1)  205/    90ED : 35                  	xpah 	p1
(1)  206/    90EE : CE FF               	st 		@-1(p2)
(1)  207/    90F0 :                     __GCWaitKey: 													; wait for key press
 AS V1.42 Beta [Bld 102] - source file minol.asm(screen.asm) - page 7 - 1/5/2016 11:51:45


(1)  208/    90F0 : C1 00               	ld 		0(p1)
(1)  209/    90F2 : 94 FC               	jp 		__GCWaitKey
(1)  210/    90F4 : D4 7F               	ani	 	0x7F 												; throw away the upper bit.
(1)  211/    90F6 : CA FF               	st 		-1(p2) 												; save it below stack
(1)  212/    90F8 :                     __GCWaitRelease:
(1)  213/    90F8 : C1 00               	ld 		0(p1) 												; wait for release
(1)  214/    90FA : D4 80               	ani 	0x80
(1)  215/    90FC : 9C FA               	jnz 	__GCWaitRelease
(1)  216/    90FE : C6 01               	ld 		@1(p2) 												; restore P1.H
(1)  217/    9100 : 35                  	xpah 	p1
(1)  218/    9101 : C2 FE               	ld 		-2(p2) 												; restore saved value
(1)  219/    9103 : 02                  	ccl
(1)  220/    9104 : F4 20               	adi 	0x20												; will make lower case -ve
(1)  221/    9106 : 94 02               	jp 		__GCNotLower
(1)  222/    9108 : FC 20               	cai 	0x20 												; capitalise
(1)  223/    910A :                     __GCNotLower:
(1)  224/    910A : F4 E0               	adi 	0xE0 												; fix up.
(1)  225/    910C : 3F                  	xppc 	p3 													; return
(1)  226/    910D : 90 DC               	jmp 	GetChar 											; make re-entrant
(1)  227/    910F :                     	endsection 	GetChar
(1)  228/    910F :                     
(1)  229/    910F :                     ; ****************************************************************************************************************
(1)  230/    910F :                     ; ****************************************************************************************************************
(1)  231/    910F :                     ;
(1)  232/    910F :                     ;			Read an ASCIIZ string from keyboard into P1 of length A maximum (excludes NULL terminator)
(1)  233/    910F :                     ;
(1)  234/    910F :                     ; ****************************************************************************************************************
(1)  235/    910F :                     ; ****************************************************************************************************************
(1)  236/    910F :                     
(1)  237/    910F :                     GetString:
(1)  238/    910F :                     	section GetString
(1)  239/    910F : (MACRO)             	pusha 														; save A,P3,E
(1)  239/    910F : CE FF                       st              @-1(p2)
(1)  240/    9111 : (MACRO)             	pushp 	p3
(1)  240/    9111 : 37                          xpah    P3
(1)  240/    9112 : CE FF                       st              @-1(p2)
(1)  240/    9114 : 33                          xpal    P3
(1)  240/    9115 : CE FF                       st              @-1(p2)
(1)  241/    9117 : (MACRO)             	pushe 
(1)  241/    9117 : 40                          lde
(1)  241/    9118 : CE FF                       st              @-1(p2)
(1)  242/    911A : C4 00               	ldi 	0 													; set E (current position) to A.
(1)  243/    911C : 01                  	xae
(1)  244/    911D :                     __GSLoop:
(1)  245/    911D : (MACRO)             	lpi 	p3,Print-1 											; print the prompt (half coloured square)
(1)  245/    911D : C4 90                       ldi     (PRINT-1) / 256
(1)  245/    911F : 37                          xpah    P3
(1)  245/    9120 : C4 2A                       ldi     (PRINT-1) & 255
(1)  245/    9122 : 33                          xpal    P3
(1)  246/    9123 : C4 9B               	ldi 	155
(1)  247/    9125 : 3F                  	xppc 	p3
(1)  248/    9126 : (MACRO)             	lpi 	p3,GetChar-1 										; get a character
(1)  248/    9126 : C4 90                       ldi     (GETCHAR-1) / 256
(1)  248/    9128 : 37                          xpah    P3
(1)  248/    9129 : C4 EA                       ldi     (GETCHAR-1) & 255
(1)  248/    912B : 33                          xpal    P3
(1)  249/    912C : 3F                  	xppc 	p3
(1)  250/    912D : C9 80               	st 		-0x80(p1) 											; save it in the current position.
(1)  251/    912F : (MACRO)             	lpi 	p3,Print-1 											; erase the prompt with backspace.
(1)  251/    912F : C4 90                       ldi     (PRINT-1) / 256
 AS V1.42 Beta [Bld 102] - source file minol.asm(screen.asm) - page 8 - 1/5/2016 11:51:45


(1)  251/    9131 : 37                          xpah    P3
(1)  251/    9132 : C4 2A                       ldi     (PRINT-1) & 255
(1)  251/    9134 : 33                          xpal    P3
(1)  252/    9135 : C4 08               	ldi 	8
(1)  253/    9137 : 3F                  	xppc 	p3
(1)  254/    9138 : C1 80               	ld 		-0x80(p1) 											; re-read character
(1)  255/    913A : D4 E0               	ani 	0xE0 												; check if control key.
(1)  256/    913C : 98 0F               	jz 		__GSControlKey 
(1)  257/    913E : 40                  	lde 														; get current position.
(1)  258/    913F : E2 03               	xor 	3(p2) 												; reached maximum length of buffer ?
(1)  259/    9141 : 98 DA               	jz 		__GSLoop 											; if so, ignore the key and go round again.
(1)  260/    9143 : C1 80               	ld 		-0x80(p1) 											; get character and print it
(1)  261/    9145 : 3F                  	xppc 	p3
(1)  262/    9146 : C4 01               	ldi 	1 													; increment E
(1)  263/    9148 : 02                  	ccl
(1)  264/    9149 : 70                  	ade
(1)  265/    914A : 01                  	xae
(1)  266/    914B : 90 D0               	jmp 	__GSLoop 											; and go round again.
(1)  267/    914D :                     ;
(1)  268/    914D :                     ;	Handle control keys (0x00-0x1F)
(1)  269/    914D :                     ;
(1)  270/    914D :                     __GSControlKey:
(1)  271/    914D : C1 80               	ld 		-0x80(p1) 											; get typed in key
(1)  272/    914F : E4 08               	xri 	8 													; check for backspace.
(1)  273/    9151 : 98 17               	jz 		__GSBackspace 			
(1)  274/    9153 : E4 05               	xri 	8!13 												; check for CR
(1)  275/    9155 : 9C C6               	jnz 	__GSLoop 											; if not, ignore the key.
(1)  276/    9157 :                     ;
(1)  277/    9157 :                     ;	Carriage Return, ending input.
(1)  278/    9157 :                     ;
(1)  279/    9157 : C9 80               	st 		-0x80(p1) 											; replace the CR written with NULL terminator.
(1)  280/    9159 : C4 0D               	ldi 	13 													; print CR
(1)  281/    915B : 3F                  	xppc 	p3
(1)  282/    915C : (MACRO)             	pulle 														; restore E,P3,A
(1)  282/    915C : C6 01                       ld              @1(p2)
(1)  282/    915E : 01                          xae
(1)  283/    915F : (MACRO)             	pullp	p3
(1)  283/    915F : C6 01                       ld              @1(p2)
(1)  283/    9161 : 33                          xpal    P3
(1)  283/    9162 : C6 01                       ld              @1(p2)
(1)  283/    9164 : 37                          xpah    P3
(1)  284/    9165 : (MACRO)             	pulla
(1)  284/    9165 : C6 01                       ld              @1(p2)
(1)  285/    9167 : 3F                  	xppc 	p3 													; return
(1)  286/    9168 : 90 A5               	jmp 	GetString 											; make re-entrant (probably unneccessary !!)
(1)  287/    916A :                     ;
(1)  288/    916A :                     ;	Backspace entered
(1)  289/    916A :                     ;
(1)  290/    916A :                     __GSBackspace
(1)  291/    916A : 40                  	lde 														; if E = 0 we can't backspace any further.
(1)  292/    916B : 98 B0               	jz 		__GSLoop
(1)  293/    916D : C4 08               	ldi 	8 													; backspace on screen
(1)  294/    916F : 3F                  	xppc 	p3
(1)  295/    9170 : C4 FF               	ldi 	0xFF 												; decrement E
(1)  296/    9172 : 02                  	ccl
(1)  297/    9173 : 70                  	ade
(1)  298/    9174 : 01                  	xae
(1)  299/    9175 : 90 A6               	jmp 	__GSLoop 											; and go round again.
(1)  300/    9177 :                     
(1)  301/    9177 :                     	endsection GetString
 AS V1.42 Beta [Bld 102] - source file minol.asm(screen.asm) - page 9 - 1/5/2016 11:51:45


(1)  302/    9177 :                     
      39/    9177 :                     
 AS V1.42 Beta [Bld 102] - source file minol.asm - page 10 - 1/5/2016 11:51:45


  symbol table (* = unused):
  ------------------------

*ARCHITECTURE :  i386-unknown-win32 - | *BIGENDIAN :                      0 - |
*BOOTMONITOR :                  210 - | *BRANCHEXT :                      0 - |
*CASESENSITIVE :                  0 - | *CONSTPI :        3.141592653589793 - |
*DATE :                    1/5/2016 - | *FALSE :                          0 - |
*FULLPMMU :                       1 - |  GETCHAR :                     90EB C |
 GETSTRING :                   910F C | *HAS64 :                          1 - |
*HASDSP :                         0 - | *HASFPU :                         0 - |
*HASPMMU :                        0 - | *INEXTMODE :                      0 - |
*INLWORDMODE :                    0 - | *INMAXMODE :                      0 - |
*INSRCMODE :                      0 - | *INSUPMODE :                      0 - |
*LISTON :                         1 - | *MACEXP :                         1 - |
*MOMCPU :                         C - | *MOMCPUNAME :                 SC/MP - |
 MSG :                         901B C | *NESTMAX :                      100 - |
*OSMATHLIBRARY :                  3 - | *PACKING :                        0 - |
*PADDING :                        1 - |  PRINT :                       902B C |
*RELAXED :                        0 - |  SCREENCURSOR :                 C80 - |
 SCREENMIRROR :                 C00 - | *TIME :                    11:51:45 - |
*TRUE :                           1 - | *VERSION :                     142F - |
 WAIT1 :                       9019 C |  __GCNOTLOWER [GETCHAR] :      910A C |
 __GCWAITKEY [GETCHAR] :       90F0 C |  __GCWAITRELEASE [GETCHAR] :   90F8 C |
 __GSBACKSPACE [GETSTRING] :   916A C |  __GSCONTROLKEY [GETSTRING] :  914D C |
 __GSLOOP [GETSTRING] :        911D C |  __PRCLEARFROMMOVETO [PRINT] : 90CB C |
 __PRCLEARLOOP [PRINT] :       90CD C |  __PRCLEARSCREEN [PRINT] :     90C9 C |
 __PRCOPY [PRINT] :            90D7 C |  __PREXIT [PRINT] :            908E C |
 __PREXITNOCHECK [PRINT] :     9092 C |  __PRISCONTROLCHAR [PRINT] :   90A0 C |
 __PRISRETURN [PRINT] :        90C0 C |  __PRNOTASCII [PRINT] :        9068 C |
 __PRPRINTCHARACTERA [PRINT] : 904C C |  __PRPRINTSTRING [PRINT] :     903A C |
 __PRSCROLLLOOP [PRINT] :      9080 C |  __PRUPDATECURSOR [PRINT] :    9071 C |

     56 symbols
     30 unused symbols

 AS V1.42 Beta [Bld 102] - source file minol.asm - page 11 - 1/5/2016 11:51:45


  defined macros:
  ---------------

LPI                                   | PULLA                                
PULLE                                 | PULLP                                
PUSHA                                 | PUSHE                                
PUSHP                                 |

      7 macros

 AS V1.42 Beta [Bld 102] - source file minol.asm - page 12 - 1/5/2016 11:51:45


  codepages:
  ----------

STANDARD (0 changed characters)


0.01 seconds assembly time

    428 lines source file
    480 lines incl. macro expansions
      2 passes
      0 errors
      0 warnings
