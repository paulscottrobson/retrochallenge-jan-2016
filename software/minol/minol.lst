 AS V1.42 Beta [Bld 102] - source file minol.asm - page 1 - 1/12/2016 21:04:25


       1/       0 :                     ; ****************************************************************************************************************
       2/       0 :                     ; ****************************************************************************************************************
       3/       0 :                     ;
       4/       0 :                     ;												Minol ROM Image
       5/       0 :                     ;
       6/       0 :                     ; ****************************************************************************************************************
       7/       0 :                     ; ****************************************************************************************************************
       8/       0 :                     
       9/       0 :                     	cpu 	sc/mp
      10/       0 :                     
      11/       0 :                     	include source\memorymacros.asm 							; Memory allocation and Macro definition.	
(1)    1/       0 :                     ; ****************************************************************************************************************
(1)    2/       0 :                     ; ****************************************************************************************************************
(1)    3/       0 :                     ;
(1)    4/       0 :                     ;										Memory and Macro Allocation.
(1)    5/       0 :                     ;	
(1)    6/       0 :                     ; ****************************************************************************************************************
(1)    7/       0 :                     ; ****************************************************************************************************************
(1)    8/       0 :                     
(1)    9/       0 : =0x3                OSMathLibrary = 0x0003 											; the Maths library is here.
(1)   10/       0 : =0x210              BootMonitor = 0x210 											; address to boot monitor
(1)   11/       0 :                     
(1)   12/       0 :                     ; ****************************************************************************************************************
(1)   13/       0 :                     ;												 Memory Allocation
(1)   14/       0 :                     ; ****************************************************************************************************************
(1)   15/       0 :                     
(1)   16/       0 : =0xC00              ScreenMirror = 0xC00 											; Screen mirror, 128 bytes, 256 byte page boundary.
(1)   17/       0 : =0xC80              ScreenCursor = ScreenMirror+0x80  								; Position on that screen (00..7F)
(1)   18/       0 :                     
(1)   19/       0 : =0xC90              SystemMemory = 0xC90 											; System Memory
(1)   20/       0 :                     
(1)   21/       0 : =0xC8E              RandomSeed = SystemMemory-2										; Random Seed Value (2 bytes)
(1)   22/       0 : =0xC8D              CurrentLine = SystemMemory-3 									; Current Line Number (1 byte)
(1)   23/       0 : =0xC90              Variables = SystemMemory 										; Variables (26 bytes)
(1)   24/       0 :                     
(1)   25/       0 : =0xCB0              KeyboardBuffer = SystemMemory+32 								; Keyboard input buffer
(1)   26/       0 : =0x48               KeyboardBufferSize = 72 										; Number of characters allowed to be typed in.
(1)   27/       0 :                     
(1)   28/       0 : =0x1000             ProgramBase = 0x1000 											; Program memory here.
(1)   29/       0 :                     
(1)   30/       0 :                     ; ****************************************************************************************************************
(1)   31/       0 :                     ;														Macros
(1)   32/       0 :                     ; ****************************************************************************************************************
(1)   33/       0 :                     
(1)   34/       0 :                     lpi	macro	ptr,addr											; load pointer register with constant
(1)   35/       0 :                     	ldi 	(addr) / 256
(1)   36/       0 :                     	xpah 	ptr
(1)   37/       0 :                     	ldi 	(addr) & 255
(1)   38/       0 :                     	xpal 	ptr
(1)   39/       0 :                     	endm
(1)   40/       0 :                     
(1)   41/       0 :                     pushp macro ptr 												; push pointer register on stack
(1)   42/       0 :                     	xpah 	ptr
(1)   43/       0 :                     	st 		@-1(p2)
(1)   44/       0 :                     	xpal 	ptr
(1)   45/       0 :                     	st 		@-1(p2)
(1)   46/       0 :                     	endm
(1)   47/       0 :                     
(1)   48/       0 :                     pullp macro ptr 												; pull pointer register off stack
(1)   49/       0 :                     	ld 		@1(p2)
 AS V1.42 Beta [Bld 102] - source file minol.asm(memorymacros.asm) - page 2 - 1/12/2016 21:04:25


(1)   50/       0 :                     	xpal 	ptr
(1)   51/       0 :                     	ld 		@1(p2)
(1)   52/       0 :                     	xpah 	ptr
(1)   53/       0 :                     	endm
(1)   54/       0 :                     
(1)   55/       0 :                     pushe macro 													; push E on stack
(1)   56/       0 :                     	lde
(1)   57/       0 :                     	st 		@-1(p2)
(1)   58/       0 :                     	endm
(1)   59/       0 :                     
(1)   60/       0 :                     pulle macro 													; pull E off stack
(1)   61/       0 :                     	ld 		@1(p2)
(1)   62/       0 :                     	xae
(1)   63/       0 :                     	endm
(1)   64/       0 :                     
(1)   65/       0 :                     pusha macro 													; push A on stack
(1)   66/       0 :                     	st 		@-1(p2)
(1)   67/       0 :                     	endm
(1)   68/       0 :                     
(1)   69/       0 :                     pulla macro
(1)   70/       0 :                     	ld 		@1(p2)
(1)   71/       0 :                     	endm
(1)   72/       0 :                     
(1)   73/       0 :                     setv macro ch,value 											; sets a variable to a value, assumes P3 = Variables.
(1)   74/       0 :                     	ldi 	(value) & 255
(1)   75/       0 :                     	st 		((ch) - 'A')(p3)
(1)   76/       0 :                     	endm
(1)   77/       0 :                     
(1)   78/       0 :                     code macro lineNo,code 											; a debugging macro, which fakes up a line of code.
(1)   79/       0 :                     	db 		strlen(code)+3 										; one byte offset to next (255 = End of code)
(1)   80/       0 :                     	db 		lineNo 												; one byte line number 
(1)   81/       0 :                     	db 		code,0 												; ASCIIZ string
(1)   82/       0 :                     	endm
(1)   83/       0 :                     
(1)   84/       0 :                     cmd macro 	c1,c2,length,code
(1)   85/       0 :                     	db 		c1,c2 												; first and second characters
(1)   86/       0 :                     	db 		(length)-1											; length -1 (first char already skipped)
(1)   87/       0 :                     	dw 		(code)-1 											; execution point for prefetch.
(1)   88/       0 :                     	endm
      12/       0 :                     	include source\errors.asm 									; Error codes
(1)    1/       0 :                     ; ****************************************************************************************************************
(1)    2/       0 :                     ; ****************************************************************************************************************
(1)    3/       0 :                     ;
(1)    4/       0 :                     ;												Error Codes
(1)    5/       0 :                     ;
(1)    6/       0 :                     ; ****************************************************************************************************************
(1)    7/       0 :                     ; ****************************************************************************************************************
(1)    8/       0 :                     
(1)    9/       0 : =0xFF               ERRC_END = 0xFF													; psuedo error, program stopped. Does "OK" as for no error.
(1)   10/       0 : =0x1                ERRC_LABEL = 1 													; Label does not exist (e.g. GOTO)
(1)   11/       0 : =0x2                ERRC_UNKNOWN = 2												; Unknown instruction
(1)   12/       0 : =0x4                ERRC_TERM = 4 													; Illegal term/expression
(1)   13/       0 : =0x5                ERRC_SYNTAX = 5													; Syntax Error
(1)   14/       0 : =0x6                ERRC_MEMORY = 6 												; Out of memory
(1)   15/       0 : =0x7                ERRC_DIVZERO = 7 												; Division by Zero Error.
(1)   16/       0 :                     
      13/       0 :                     
      14/       0 :                     ; ****************************************************************************************************************
      15/       0 :                     ; ****************************************************************************************************************
      16/       0 :                     ; 	NOTE: When executing line follow the line with $FF so it thinks it has reached the program end.
 AS V1.42 Beta [Bld 102] - source file minol.asm - page 3 - 1/12/2016 21:04:25


      17/       0 :                     ; ****************************************************************************************************************
      18/       0 :                     ; ****************************************************************************************************************
      19/       0 :                     
      20/       0 :                     
      21/       0 :                     ; ****************************************************************************************************************
      22/       0 :                     ;													Main Program
      23/       0 :                     ; ****************************************************************************************************************
      24/       0 :                     
      25/    9000 :                     	org 	0x9000 												; the ROM starts here
      26/    9000 :                     
      27/    9000 : 68                  	db 		0x68												; this makes it boot straight into this ROM.
      28/    9001 : (MACRO)             	lpi 	p2,0xFF8											; set up stack default value
      28/    9001 : C4 0F                       ldi     (0XFF8) / 256
      28/    9003 : 36                          xpah    P2
      28/    9004 : C4 F8                       ldi     (0XFF8) & 255
      28/    9006 : 32                          xpal    P2
      29/    9007 : (MACRO)             	lpi 	p3,Print-1
      29/    9007 : C4 91                       ldi     (PRINT-1) / 256
      29/    9009 : 37                          xpah    P3
      29/    900A : C4 07                       ldi     (PRINT-1) & 255
      29/    900C : 33                          xpal    P3
      30/    900D : C4 0C               	ldi 	12
      31/    900F : 3F                  	xppc	p3
      32/    9010 :                     
      33/    9010 : (MACRO)             	lpi 	p3,ProgramCode 										; copy program default code to memory.
      33/    9010 : C4 90                       ldi     (PROGRAMCODE) / 256
      33/    9012 : 37                          xpah    P3
      33/    9013 : C4 48                       ldi     (PROGRAMCODE) & 255
      33/    9015 : 33                          xpal    P3
      34/    9016 : (MACRO)             	lpi 	p1,ProgramBase
      34/    9016 : C4 10                       ldi     (PROGRAMBASE) / 256
      34/    9018 : 35                          xpah    P1
      34/    9019 : C4 00                       ldi     (PROGRAMBASE) & 255
      34/    901B : 31                          xpal    P1
      35/    901C :                     Copy1:
      36/    901C : C7 01               	ld 		@1(p3)
      37/    901E : CD 01               	st 		@1(p1)
      38/    9020 : E4 FF               	xri 	0xFF
      39/    9022 : 9C F8               	jnz 	Copy1
      40/    9024 :                     
      41/    9024 :                     ;	ldi 	30 													; delete line 30
      42/    9024 :                     ;	xae
      43/    9024 :                     ;	lpi 	p3,DeleteLine-1
      44/    9024 :                     ;	xppc 	p3
      45/    9024 :                     
      46/    9024 :                     ;	ldi 	35													; insert at 30
      47/    9024 :                     ;	xae 
      48/    9024 :                     ;;	lpi 	p3,InsertLine-1
      49/    9024 :                     ;	lpi 	p1,__InsertLineExample
      50/    9024 :                     ;	xppc 	p3
      51/    9024 :                     
      52/    9024 : (MACRO)             	lpi 	p3,Print-1											; Print Boot Message
      52/    9024 : C4 91                       ldi     (PRINT-1) / 256
      52/    9026 : 37                          xpah    P3
      52/    9027 : C4 07                       ldi     (PRINT-1) & 255
      52/    9029 : 33                          xpal    P3
      53/    902A : (MACRO)             	lpi 	p1,BootMessage
      53/    902A : C4 90                       ldi     (BOOTMESSAGE) / 256
      53/    902C : 35                          xpah    P1
      53/    902D : C4 3B                       ldi     (BOOTMESSAGE) & 255
 AS V1.42 Beta [Bld 102] - source file minol.asm - page 4 - 1/12/2016 21:04:25


      53/    902F : 31                          xpal    P1
      54/    9030 : C4 00               	ldi 	0
      55/    9032 : 3F                  	xppc 	p3
      56/    9033 :                     
      57/    9033 : (MACRO)             	lpi 	p3,ConsoleStart-1 									; run the console
      57/    9033 : C4 97                       ldi     (CONSOLESTART-1) / 256
      57/    9035 : 37                          xpah    P3
      57/    9036 : C4 EB                       ldi     (CONSOLESTART-1) & 255
      57/    9038 : 33                          xpal    P3
      58/    9039 : 03                  	scl 														; non-error (so it prints ok)
      59/    903A : 3F                  	xppc	p3
      60/    903B :                     
      61/    903B :                     BootMessage:
      62/    903B : 4D 49 4E 4F 4C 20   	db 		"MINOL V1.0",13,13,0
                    56 31 2E 30 0D 0D 
                    00 
      63/    9048 :                     
      64/    9048 :                     ProgramCode:
      65/    9048 : (MACRO)             	code 	10,"\"TEST PROGRAM\""
      65/    9048 : 11                          db              strlen("\"TEST PROGRAM\"")+3                                                                          ; one byte offset to next (255 = End of "\"TEST PROGRAM\"")
      65/    9049 : 0A                          db              10                                                                                          ; one byte line number 
      65/    904A : 22 54 45 53 54 20           db              "\"TEST PROGRAM\"",0                                                                                          ; ASCIIZ string
                    50 52 4F 47 52 41 
                    4D 22 00 
      66/    9059 : (MACRO)             	code 	20,"PR 4/2"
      66/    9059 : 09                          db              strlen("PR 4/2")+3                                                                          ; one byte offset to next (255 = End of "PR 4/2")
      66/    905A : 14                          db              20                                                                                          ; one byte line number 
      66/    905B : 50 52 20 34 2F 32           db              "PR 4/2",0                                                                                          ; ASCIIZ string
                    00 
      67/    9062 : (MACRO)             	code 	30,"PR 5"
      67/    9062 : 07                          db              strlen("PR 5")+3                                                                          ; one byte offset to next (255 = End of "PR 5")
      67/    9063 : 1E                          db              30                                                                                          ; one byte line number 
      67/    9064 : 50 52 20 35 00              db              "PR 5",0                                                                                          ; ASCIIZ string
      68/    9069 : (MACRO)             	code 	40,"PR 6"
      68/    9069 : 07                          db              strlen("PR 6")+3                                                                          ; one byte offset to next (255 = End of "PR 6")
      68/    906A : 28                          db              40                                                                                          ; one byte line number 
      68/    906B : 50 52 20 36 00              db              "PR 6",0                                                                                          ; ASCIIZ string
      69/    9070 : (MACRO)             	code 	50,"PR 7:END"
      69/    9070 : 0B                          db              strlen("PR 7:END")+3                                                                          ; one byte offset to next (255 = End of "PR 7:END")
      69/    9071 : 32                          db              50                                                                                          ; one byte line number 
      69/    9072 : 50 52 20 37 3A 45           db              "PR 7:END",0                                                                                          ; ASCIIZ string
                    4E 44 00 
      70/    907B : FF                  	db 		255
      71/    907C :                     
      72/    907C :                     ; ****************************************************************************************************************
      73/    907C :                     ;													Source Files
      74/    907C :                     ; ****************************************************************************************************************
      75/    907C :                     
      76/    907C :                     	include source\itoa.asm 									; print integer routine.
(1)    1/    907C :                     ; ****************************************************************************************************************
(1)    2/    907C :                     ; ****************************************************************************************************************
(1)    3/    907C :                     ;
(1)    4/    907C :                     ;											Integer (Byte) Printer
(1)    5/    907C :                     ;											======================
(1)    6/    907C :                     ;	
(1)    7/    907C :                     ;	Print Integer in E as String to output routine. Uses stack space as temporary storage. Changes A/E but not
(1)    8/    907C :                     ;	P1 or P2. Unsigned.
(1)    9/    907C :                     ;	
(1)   10/    907C :                     ;	On exit P3 is set up to Print routine.
(1)   11/    907C :                     ;
 AS V1.42 Beta [Bld 102] - source file minol.asm(itoa.asm) - page 5 - 1/12/2016 21:04:25


(1)   12/    907C :                     ; ****************************************************************************************************************
(1)   13/    907C :                     ; ****************************************************************************************************************
(1)   14/    907C :                     
(1)   15/    907C :                     PrintInteger:
(1)   16/    907C : (MACRO)             	pushp 	p3													; save P3
(1)   16/    907C : 37                          xpah    P3
(1)   16/    907D : CE FF                       st              @-1(p2)
(1)   16/    907F : 33                          xpal    P3
(1)   16/    9080 : CE FF                       st              @-1(p2)
(1)   17/    9082 : C4 FF               	ldi 	0xFF 												; use $FF to mark stack top.
(1)   18/    9084 : CE FF               	st 		@-1(p2)
(1)   19/    9086 : CE FD               	st 		@-3(p2) 											; allocate space for results.
(1)   20/    9088 : C4 64               	ldi 	100 												; start with 100s
(1)   21/    908A :                     __PIDivideOuter:
(1)   22/    908A : CA 01               	st 		1(p2) 												; save subtractor at stack (1)
(1)   23/    908C : C4 FF               	ldi 	0xFF 												; clear stack (0) (count) to -1 because we pre-increment.
(1)   24/    908E : CA 00               	st 		0(p2)
(1)   25/    9090 :                     __PIDivideLoop:
(1)   26/    9090 : AA 00               	ild 	0(p2) 												; bump the counter.
(1)   27/    9092 : 40                  	lde 														; get value
(1)   28/    9093 : 03                  	scl 														; subtract divider
(1)   29/    9094 : FA 01               	cad 	1(p2) 												
(1)   30/    9096 : 01                  	xae 														; put back in E
(1)   31/    9097 : 06                  	csa 														; if no borrow
(1)   32/    9098 : D4 80               	ani 	0x80
(1)   33/    909A : 9C F4               	jnz 	__PIDivideLoop 
(1)   34/    909C : 40                  	lde 														; add the divider.
(1)   35/    909D : 02                  	ccl
(1)   36/    909E : F2 01               	add 	1(p2)
(1)   37/    90A0 : 01                  	xae
(1)   38/    90A1 : C2 01               	ld 		1(p2) 												; get the divider back
(1)   39/    90A3 : E4 0A               	xri 	10 													; is it 10 ?
(1)   40/    90A5 : 98 06               	jz 		__PIDivideEnd 										; we have finished the division bit.
(1)   41/    90A7 : C6 01               	ld 		@1(p2) 												; push stack up one.
(1)   42/    90A9 : C4 0A               	ldi 	10 													; and divide by 10
(1)   43/    90AB : 90 DD               	jmp 	__PIDivideOuter
(1)   44/    90AD :                     ;
(1)   45/    90AD :                     __PIDivideEnd:
(1)   46/    90AD :                     
(1)   47/    90AD : 40                  	lde 														; write out the last digit.
(1)   48/    90AE : CA 01               	st 		1(p2)
(1)   49/    90B0 : (MACRO)             	lpi 	p3,Print-1 											; point P3 to the print routine.
(1)   49/    90B0 : C4 91                       ldi     (PRINT-1) / 256
(1)   49/    90B2 : 37                          xpah    P3
(1)   49/    90B3 : C4 07                       ldi     (PRINT-1) & 255
(1)   49/    90B5 : 33                          xpal    P3
(1)   50/    90B6 :                     ;
(1)   51/    90B6 :                     ;	Remove leading spaces
(1)   52/    90B6 :                     ;
(1)   53/    90B6 : C6 FF               	ld 		@-1(p2) 											; look at first digit, if non-zero go to print
(1)   54/    90B8 : 9C 08               	jnz 	__PIPrint 
(1)   55/    90BA : C6 01               	ld 		@1(p2) 												; skip it, eliminate trailing zeros.
(1)   56/    90BC : C2 00               	ld 		(p2) 												; now look at second digit
(1)   57/    90BE : 9C 02               	jnz 	__PIPrint 											; skip it, eliminate trailing zeros.
(1)   58/    90C0 : C6 01               	ld 		@1(p2)
(1)   59/    90C2 :                     ;
(1)   60/    90C2 :                     __PIPrint:
(1)   61/    90C2 : C6 01               	ld 		@1(p2) 												; read digit
(1)   62/    90C4 : D4 80               	ani 	0x80												; if found -ve value then exit.
(1)   63/    90C6 : 9C 07               	jnz 	__PIExit
 AS V1.42 Beta [Bld 102] - source file minol.asm(itoa.asm) - page 6 - 1/12/2016 21:04:25


(1)   64/    90C8 : C2 FF               	ld 		-1(p2) 												; re-read it.
(1)   65/    90CA : DC 30               	ori 	'0'													; make ASCII
(1)   66/    90CC : 3F                  	xppc 	p3 													; print it
(1)   67/    90CD : 90 F3               	jmp 	__PIPrint 											; and keep printing.
(1)   68/    90CF :                     ;
(1)   69/    90CF :                     __PIExit:
(1)   70/    90CF : (MACRO)             	pullp 	p3 													; restore P3
(1)   70/    90CF : C6 01                       ld              @1(p2)
(1)   70/    90D1 : 33                          xpal    P3
(1)   70/    90D2 : C6 01                       ld              @1(p2)
(1)   70/    90D4 : 37                          xpah    P3
(1)   71/    90D5 : 3F                  	xppc 	p3 													; and exit
(1)   72/    90D6 : 90 30               	jmp 	Print 												; and set up to execute print afterwards.
(1)   73/    90D8 :                     
(1)   74/    90D8 :                     
      77/    90D8 :                     	include source\atoi.asm 									; decode integer routine.
(1)    1/    90D8 :                     ; ****************************************************************************************************************
(1)    2/    90D8 :                     ; ****************************************************************************************************************
(1)    3/    90D8 :                     ;
(1)    4/    90D8 :                     ;								Try to extract integer into E. CY/L = 0 Error, P1 data
(1)    5/    90D8 :                     ;	
(1)    6/    90D8 :                     ; ****************************************************************************************************************
(1)    7/    90D8 :                     ; ****************************************************************************************************************
(1)    8/    90D8 :                     
(1)    9/    90D8 :                     GetConstant:
(1)   10/    90D8 : C4 00               	ldi 	0 													; number of characters read, push on stack.
(1)   11/    90DA : CE FF               	st 		@-1(p2)
(1)   12/    90DC : 01                  	xae 														; reset initial value.
(1)   13/    90DD :                     GCO_Loop:
(1)   14/    90DD : C5 01               	ld 		@1(p1) 												; get and bump
(1)   15/    90DF : E4 20               	xri 	' '													; skipping over spaces
(1)   16/    90E1 : 98 FA               	jz 		GCO_Loop
(1)   17/    90E3 : C5 FF               	ld 		@-1(p1) 											; get character undoing bump.
(1)   18/    90E5 : 02                  	ccl
(1)   19/    90E6 : F4 C6               	adi 	255-'9'												; check range 0-9.
(1)   20/    90E8 : 94 17               	jp 		GCO_Exit
(1)   21/    90EA : F4 8A               	adi 	128+10
(1)   22/    90EC : 94 13               	jp 		GCO_Exit
(1)   23/    90EE :                     
(1)   24/    90EE : 02                  	ccl
(1)   25/    90EF : 40                  	lde 														; A = E 														
(1)   26/    90F0 : 70                  	ade 														; A = E * 2
(1)   27/    90F1 : 70                  	ade 														; A = E * 3
(1)   28/    90F2 : 70                  	ade 														; A = E * 4
(1)   29/    90F3 : 70                  	ade 														; A = E * 5
(1)   30/    90F4 : 01                  	xae 														; E = E * 5
(1)   31/    90F5 : C5 01               	ld 		@1(p1) 												; get character and bump over.
(1)   32/    90F7 : D4 0F               	ani 	0x0F 												; make number
(1)   33/    90F9 : 02                  	ccl
(1)   34/    90FA : 70                  	ade 														; add E * 5 twice.
(1)   35/    90FB : 70                  	ade
(1)   36/    90FC : 01                  	xae 														; back in E
(1)   37/    90FD : AA 00               	ild 	(p2)												; bump count.
(1)   38/    90FF : 90 DC               	jmp 	GCO_Loop											; try next.
(1)   39/    9101 :                     ;
(1)   40/    9101 :                     GCO_Exit:
(1)   41/    9101 : C6 01               	ld 		@1(p2)												; get count.
(1)   42/    9103 : 02                  	ccl
(1)   43/    9104 : F4 FF               	adi 	255 												; CY/L will be set if one or more characters read in
(1)   44/    9106 : 06                  	csa 														; A contains CY/L flag now
 AS V1.42 Beta [Bld 102] - source file minol.asm(atoi.asm) - page 7 - 1/12/2016 21:04:25


(1)   45/    9107 : 3F                  	xppc 	p3 													; return.
(1)   46/    9108 :                     	
      78/    9108 :                     	include source\screen.asm 									; screen I/O stuff.
(1)    1/    9108 :                     ; ****************************************************************************************************************
(1)    2/    9108 :                     ; ****************************************************************************************************************
(1)    3/    9108 :                     ;
(1)    4/    9108 :                     ;											Screen I/O, VTL-2 ROM
(1)    5/    9108 :                     ;											=====================
(1)    6/    9108 :                     ;
(1)    7/    9108 :                     ;	Provides Character and String Input/Output functionality.
(1)    8/    9108 :                     ;
(1)    9/    9108 :                     ; ****************************************************************************************************************
(1)   10/    9108 :                     ; ****************************************************************************************************************
(1)   11/    9108 :                     
(1)   12/    9108 :                     ; ****************************************************************************************************************
(1)   13/    9108 :                     ; ****************************************************************************************************************
(1)   14/    9108 :                     ;
(1)   15/    9108 :                     ;	Print routine. Prints either character in A, or ASCIIZ string at P1 (if A is zero). Preserves all registers
(1)   16/    9108 :                     ;	except if printing string, P1 points to the character after the NULL terminator.
(1)   17/    9108 :                     ;
(1)   18/    9108 :                     ;	Scrolls automatically. Understands character codes 32-255, 8 (Backspace) 12 (Clear Screen) 13 (Carriage
(1)   19/    9108 :                     ;	Return). Others are currently ignored (except 0, see above). Note L/C values (97....) display those characters
(1)   20/    9108 :                     ;	in the ROM font *not* lower case :)
(1)   21/    9108 :                     ;
(1)   22/    9108 :                     ; ****************************************************************************************************************
(1)   23/    9108 :                     ; ****************************************************************************************************************
(1)   24/    9108 :                     
(1)   25/    9108 :                     Print:
(1)   26/    9108 :                     	section 	Print
(1)   27/    9108 :                     
(1)   28/    9108 : (MACRO)             	pusha														; push registers on stack
(1)   28/    9108 : CE FF                       st              @-1(p2)
(1)   29/    910A : (MACRO)             	pushp 	p1
(1)   29/    910A : 35                          xpah    P1
(1)   29/    910B : CE FF                       st              @-1(p2)
(1)   29/    910D : 31                          xpal    P1
(1)   29/    910E : CE FF                       st              @-1(p2)
(1)   30/    9110 : (MACRO)             	pushe
(1)   30/    9110 : 40                          lde
(1)   30/    9111 : CE FF                       st              @-1(p2)
(1)   31/    9113 :                     
(1)   32/    9113 : C2 03               	ld 		3(p2) 												; read character 
(1)   33/    9115 : 9C 12               	jnz 	__PRPrintCharacterA 								; if non zero print it on its own.
(1)   34/    9117 :                     
(1)   35/    9117 :                     __PRPrintString:
(1)   36/    9117 : C2 01               	ld 		1(p2) 												; restore original P1
(1)   37/    9119 : 31                  	xpal 	p1
(1)   38/    911A : C2 02               	ld 		2(p2)
(1)   39/    911C : 35                  	xpah 	p1 													; read character at P1.
(1)   40/    911D : C5 01               	ld 		@1(p1)
(1)   41/    911F : 01                  	xae 														; save in E.
(1)   42/    9120 : 35                  	xpah 	p1 													; write P1 back.
(1)   43/    9121 : CA 02               	st 		2(p2)
(1)   44/    9123 : 31                  	xpal 	p1
(1)   45/    9124 : CA 01               	st 		1(p2)
(1)   46/    9126 : 40                  	lde 														; get character from E
(1)   47/    9127 : 98 46               	jz 		__PRExitNoCheck 									; exit without loop check.
(1)   48/    9129 :                     ;
(1)   49/    9129 :                     ;	Print character in A now ; throughout it is stored in E.
(1)   50/    9129 :                     ;
 AS V1.42 Beta [Bld 102] - source file minol.asm(screen.asm) - page 8 - 1/12/2016 21:04:25


(1)   51/    9129 :                     __PRPrintCharacterA:
(1)   52/    9129 : 01                  	xae 														; save character in E.
(1)   53/    912A :                     ;
(1)   54/    912A :                     ;	Read cursor and set P1 to that address
(1)   55/    912A :                     ;
(1)   56/    912A : C4 0C               	ldi 	ScreenCursor/256 									; set P1 to point to screen cursor
(1)   57/    912C : 35                  	xpah 	p1
(1)   58/    912D : C4 80               	ldi 	ScreenCursor&255
(1)   59/    912F : 31                  	xpal 	p1
(1)   60/    9130 : C1 00               	ld 		0(p1) 												; put cursor position in P1.L
(1)   61/    9132 : 31                  	xpal 	p1
(1)   62/    9133 :                     ;
(1)   63/    9133 :                     ;	Check for control
(1)   64/    9133 :                     ;
(1)   65/    9133 : 40                  	lde 														; look at character
(1)   66/    9134 : D4 E0               	ani 	0xE0 												; is it code 0-31
(1)   67/    9136 : 98 45               	jz 		__PRIsControlChar
(1)   68/    9138 :                     ;
(1)   69/    9138 :                     ;	Print non-control
(1)   70/    9138 :                     ;
(1)   71/    9138 : 40                  	lde 														; read character
(1)   72/    9139 : 03                  	scl 														; CY/L clear if < 96
(1)   73/    913A : FC 60               	cai 	96 
(1)   74/    913C : 06                  	csa 	 	 												; skip if carry set
(1)   75/    913D : E4 80               	xri 	0x80													
(1)   76/    913F : 94 04               	jp 		__PRNotASCII
(1)   77/    9141 : 40                  	lde 														; if ASCII make 6 bit.
(1)   78/    9142 : D4 3F               	ani 	0x3F
(1)   79/    9144 : 01                  	xae
(1)   80/    9145 :                     __PRNotASCII:
(1)   81/    9145 : 40                  	lde 														; get character.
(1)   82/    9146 : C9 00               	st 		(p1) 												; save in shadow memory
(1)   83/    9148 : 35                  	xpah 	p1 													; switch to VRAM, preserving A.
(1)   84/    9149 : C4 00               	ldi 	0 													
(1)   85/    914B : 35                  	xpah 	p1
(1)   86/    914C : CD 01               	st 		@1(p1) 												; save in screen memory, advance write position.
(1)   87/    914E :                     ;
(1)   88/    914E :                     ;	Write cursor position back from P1.L
(1)   89/    914E :                     ;
(1)   90/    914E :                     __PRUpdateCursor:
(1)   91/    914E : C4 0C               	ldi		ScreenCursor / 256 									; set P1 to point to screen cursor, restore position to P1
(1)   92/    9150 : 35                  	xpah 	p1
(1)   93/    9151 : C4 80               	ldi 	ScreenCursor & 255 
(1)   94/    9153 : 31                  	xpal 	p1 													; after this, adjusted cursor position is in AC.
(1)   95/    9154 : C9 00               	st 		(p1) 												; write back in cursor position
(1)   96/    9156 : 94 13               	jp 		__PRExit 											; if position is off the bottom then scroll.
(1)   97/    9158 :                     ;
(1)   98/    9158 :                     ;	Scroll display
(1)   99/    9158 :                     ;
(1)  100/    9158 : C4 0C               	ldi 	(ScreenMirror+16) / 256 							; point P1 to 2nd line.
(1)  101/    915A : 35                  	xpah 	p1
(1)  102/    915B : C4 10               	ldi 	(ScreenMirror+16) & 255
(1)  103/    915D :                     __PRScrollLoop:
(1)  104/    915D : 31                  	xpal 	p1
(1)  105/    915E : C1 00               	ld 		0(p1) 												; copy char to previous line
(1)  106/    9160 : C9 F0               	st 		-16(p1)
(1)  107/    9162 : C5 01               	ld 		@1(p1) 												; bump pointer.
(1)  108/    9164 : 31                  	xpal 	p1
(1)  109/    9165 : 94 F6               	jp 		__PRScrollLoop
(1)  110/    9167 : C4 70               	ldi 	128-16 												; clear from and move to last line
 AS V1.42 Beta [Bld 102] - source file minol.asm(screen.asm) - page 9 - 1/12/2016 21:04:25


(1)  111/    9169 : 90 3D               	jmp 	__PRClearFromMoveTo
(1)  112/    916B :                     ;
(1)  113/    916B :                     ;	Exit screen drawing routine.
(1)  114/    916B :                     ;
(1)  115/    916B :                     __PRExit:
(1)  116/    916B : C2 03               	ld 		3(p2) 												; if character was zero, loop
(1)  117/    916D : 98 A8               	jz 		__PRPrintString 									; back as printing string at P1.
(1)  118/    916F :                     __PRExitNoCheck:
(1)  119/    916F : (MACRO)             	pulle 														; restore registers
(1)  119/    916F : C6 01                       ld              @1(p2)
(1)  119/    9171 : 01                          xae
(1)  120/    9172 : (MACRO)             	pullp 	p1
(1)  120/    9172 : C6 01                       ld              @1(p2)
(1)  120/    9174 : 31                          xpal    P1
(1)  120/    9175 : C6 01                       ld              @1(p2)
(1)  120/    9177 : 35                          xpah    P1
(1)  121/    9178 : (MACRO)             	pulla
(1)  121/    9178 : C6 01                       ld              @1(p2)
(1)  122/    917A : 3F                  	xppc 	p3 													; return
(1)  123/    917B : 90 8B               	jmp 	Print 												; make re-entrant.
(1)  124/    917D :                     ;
(1)  125/    917D :                     ;	Check for supported control characters 8 (Backspace) 12 (Clear) 13 (Carriage Return)
(1)  126/    917D :                     ;
(1)  127/    917D :                     __PRIsControlChar:
(1)  128/    917D : 40                  	lde 														; restore character.
(1)  129/    917E : E4 0D               	xri 	13 													; carriage return ? (13)
(1)  130/    9180 : 98 1B               	jz 		__PRIsReturn
(1)  131/    9182 : E4 01               	xri 	13!12 												; form feed ? (12)
(1)  132/    9184 : 98 20               	jz 		__PRClearScreen
(1)  133/    9186 : E4 04               	xri 	12!8 												; backspace ? (8)
(1)  134/    9188 : 9C E1               	jnz 	__PRExit 
(1)  135/    918A :                     ;
(1)  136/    918A :                     ;	Handle backspace (8)
(1)  137/    918A :                     ;
(1)  138/    918A : 31                  	xpal 	p1 													; check cursor position is zero
(1)  139/    918B : 98 DE               	jz 		__PRExit 											; if it is, cannot backspace so exit.
(1)  140/    918D : 31                  	xpal 	p1  												; put it back
(1)  141/    918E : C5 FF               	ld 		@-1(p1)												; move it back one
(1)  142/    9190 : C4 20               	ldi 	' '	 												; erase in shadow
(1)  143/    9192 : C9 00               	st 		(p1)
(1)  144/    9194 : C4 00               	ldi 	0 													; point P1 to VRAM
(1)  145/    9196 : 35                  	xpah 	p1
(1)  146/    9197 : C4 20               	ldi 	' '													; erase in VRAM
(1)  147/    9199 : C9 00               	st 		(p1)
(1)  148/    919B : 90 B1               	jmp 	__PRUpdateCursor 									; and exit
(1)  149/    919D :                     ;
(1)  150/    919D :                     ;	Handle carriage return (13)
(1)  151/    919D :                     ;
(1)  152/    919D :                     __PRIsReturn:
(1)  153/    919D : 31                  	xpal 	p1 													; cursor position in A
(1)  154/    919E : D4 F0               	ani 	0xF0 												; start of current line
(1)  155/    91A0 : 02                  	ccl 														; down one line
(1)  156/    91A1 : F4 10               	adi 	0x10 	
(1)  157/    91A3 : 31                  	xpal 	p1 													; put it back in P1.
(1)  158/    91A4 : 90 A8               	jmp 	__PRUpdateCursor
(1)  159/    91A6 :                     ;
(1)  160/    91A6 :                     ;	Handle clear screen (12)
(1)  161/    91A6 :                     ;
(1)  162/    91A6 :                     __PRClearScreen:
(1)  163/    91A6 : C4 00               	ldi 	0 													; clear shadow memory from here.
 AS V1.42 Beta [Bld 102] - source file minol.asm(screen.asm) - page 10 - 1/12/2016 21:04:25


(1)  164/    91A8 :                     ;
(1)  165/    91A8 :                     ;	From position A, clear the memory in the shadow screen to the end, copy the shadow screen to VRAM
(1)  166/    91A8 :                     ;	then use position A as the new cursor position.
(1)  167/    91A8 :                     ;
(1)  168/    91A8 :                     __PRClearFromMoveTo:
(1)  169/    91A8 : CE FF               	st 		@-1(p2) 											; save this position, the cursor goes here.
(1)  170/    91AA :                     __PRClearLoop:
(1)  171/    91AA : 31                  	xpal 	p1 													; save position in P1.
(1)  172/    91AB : C4 20               	ldi 	' '													; write space there.
(1)  173/    91AD : CD 01               	st 		@1(p1)
(1)  174/    91AF : 31                  	xpal 	p1
(1)  175/    91B0 : 94 F8               	jp 		__PRClearLoop 										; until reached shadow memory start.
(1)  176/    91B2 : C4 00               	ldi 	0 													; now copy shadow memory to screen memory.
(1)  177/    91B4 :                     __PRCopy:
(1)  178/    91B4 : 31                  	xpal 	p1 													; set up P1.L
(1)  179/    91B5 : C4 0C               	ldi 	ScreenMirror/256 									; point to shadow memory.
(1)  180/    91B7 : 35                  	xpah 	p1 													
(1)  181/    91B8 : C1 00               	ld 		(p1) 												; read shadow memory
(1)  182/    91BA : 35                  	xpah 	p1 													; zero P1.H preserving A
(1)  183/    91BB : C4 00               	ldi 	0
(1)  184/    91BD : 35                  	xpah 	p1
(1)  185/    91BE : CD 01               	st 		@1(p1) 												; save and increment p1
(1)  186/    91C0 : 31                  	xpal 	p1 
(1)  187/    91C1 : 94 F1               	jp 		__PRCopy 											; keep doing till all copied.
(1)  188/    91C3 : C6 01               	ld 		@1(p2) 												; read cursor position
(1)  189/    91C5 : 31                  	xpal 	p1 													; put in P1.L
(1)  190/    91C6 : 90 86               	jmp 	__PRUpdateCursor
(1)  191/    91C8 :                     
(1)  192/    91C8 :                     	endsection 	Print
(1)  193/    91C8 :                     
(1)  194/    91C8 :                     ; ****************************************************************************************************************
(1)  195/    91C8 :                     ; ****************************************************************************************************************
(1)  196/    91C8 :                     ;
(1)  197/    91C8 :                     ;		Input a single character into A. Case is converted to Upper. All registers preserved except A
(1)  198/    91C8 :                     ;
(1)  199/    91C8 :                     ; ****************************************************************************************************************
(1)  200/    91C8 :                     ; ****************************************************************************************************************
(1)  201/    91C8 :                     
(1)  202/    91C8 :                     GetChar:
(1)  203/    91C8 :                     	section 	GetChar
(1)  204/    91C8 : C4 08               	ldi 	0x8 												; set P1 to $8xx, and save P1.H
(1)  205/    91CA : 35                  	xpah 	p1
(1)  206/    91CB : CE FF               	st 		@-1(p2)
(1)  207/    91CD :                     __GCWaitKey: 													; wait for key press
(1)  208/    91CD : C1 00               	ld 		0(p1)
(1)  209/    91CF : 94 FC               	jp 		__GCWaitKey
(1)  210/    91D1 : D4 7F               	ani	 	0x7F 												; throw away the upper bit.
(1)  211/    91D3 : CA FF               	st 		-1(p2) 												; save it below stack
(1)  212/    91D5 :                     __GCWaitRelease:
(1)  213/    91D5 : C1 00               	ld 		0(p1) 												; wait for release
(1)  214/    91D7 : D4 80               	ani 	0x80
(1)  215/    91D9 : 9C FA               	jnz 	__GCWaitRelease
(1)  216/    91DB : C6 01               	ld 		@1(p2) 												; restore P1.H
(1)  217/    91DD : 35                  	xpah 	p1
(1)  218/    91DE : C2 FE               	ld 		-2(p2) 												; restore saved value
(1)  219/    91E0 : 02                  	ccl
(1)  220/    91E1 : F4 20               	adi 	0x20												; will make lower case -ve
(1)  221/    91E3 : 94 02               	jp 		__GCNotLower
(1)  222/    91E5 : FC 20               	cai 	0x20 												; capitalise
(1)  223/    91E7 :                     __GCNotLower:
 AS V1.42 Beta [Bld 102] - source file minol.asm(screen.asm) - page 11 - 1/12/2016 21:04:25


(1)  224/    91E7 : F4 E0               	adi 	0xE0 												; fix up.
(1)  225/    91E9 : 3F                  	xppc 	p3 													; return
(1)  226/    91EA : 90 DC               	jmp 	GetChar 											; make re-entrant
(1)  227/    91EC :                     	endsection 	GetChar
(1)  228/    91EC :                     
(1)  229/    91EC :                     ; ****************************************************************************************************************
(1)  230/    91EC :                     ; ****************************************************************************************************************
(1)  231/    91EC :                     ;
(1)  232/    91EC :                     ;			Read an ASCIIZ string from keyboard into P1 of length A maximum (excludes NULL terminator)
(1)  233/    91EC :                     ;
(1)  234/    91EC :                     ; ****************************************************************************************************************
(1)  235/    91EC :                     ; ****************************************************************************************************************
(1)  236/    91EC :                     
(1)  237/    91EC :                     GetString:
(1)  238/    91EC :                     	section GetString
(1)  239/    91EC : (MACRO)             	pusha 														; save A,P3,E
(1)  239/    91EC : CE FF                       st              @-1(p2)
(1)  240/    91EE : (MACRO)             	pushp 	p3
(1)  240/    91EE : 37                          xpah    P3
(1)  240/    91EF : CE FF                       st              @-1(p2)
(1)  240/    91F1 : 33                          xpal    P3
(1)  240/    91F2 : CE FF                       st              @-1(p2)
(1)  241/    91F4 : (MACRO)             	pushe 
(1)  241/    91F4 : 40                          lde
(1)  241/    91F5 : CE FF                       st              @-1(p2)
(1)  242/    91F7 : C4 00               	ldi 	0 													; set E (current position) to A.
(1)  243/    91F9 : 01                  	xae
(1)  244/    91FA :                     __GSLoop:
(1)  245/    91FA : (MACRO)             	lpi 	p3,Print-1 											; print the prompt (half coloured square)
(1)  245/    91FA : C4 91                       ldi     (PRINT-1) / 256
(1)  245/    91FC : 37                          xpah    P3
(1)  245/    91FD : C4 07                       ldi     (PRINT-1) & 255
(1)  245/    91FF : 33                          xpal    P3
(1)  246/    9200 : C4 9B               	ldi 	155
(1)  247/    9202 : 3F                  	xppc 	p3
(1)  248/    9203 : (MACRO)             	lpi 	p3,GetChar-1 										; get a character
(1)  248/    9203 : C4 91                       ldi     (GETCHAR-1) / 256
(1)  248/    9205 : 37                          xpah    P3
(1)  248/    9206 : C4 C7                       ldi     (GETCHAR-1) & 255
(1)  248/    9208 : 33                          xpal    P3
(1)  249/    9209 : 3F                  	xppc 	p3
(1)  250/    920A : C9 80               	st 		-0x80(p1) 											; save it in the current position.
(1)  251/    920C : (MACRO)             	lpi 	p3,Print-1 											; erase the prompt with backspace.
(1)  251/    920C : C4 91                       ldi     (PRINT-1) / 256
(1)  251/    920E : 37                          xpah    P3
(1)  251/    920F : C4 07                       ldi     (PRINT-1) & 255
(1)  251/    9211 : 33                          xpal    P3
(1)  252/    9212 : C4 08               	ldi 	8
(1)  253/    9214 : 3F                  	xppc 	p3
(1)  254/    9215 : C1 80               	ld 		-0x80(p1) 											; re-read character
(1)  255/    9217 : D4 E0               	ani 	0xE0 												; check if control key.
(1)  256/    9219 : 98 0F               	jz 		__GSControlKey 
(1)  257/    921B : 40                  	lde 														; get current position.
(1)  258/    921C : E2 03               	xor 	3(p2) 												; reached maximum length of buffer ?
(1)  259/    921E : 98 DA               	jz 		__GSLoop 											; if so, ignore the key and go round again.
(1)  260/    9220 : C1 80               	ld 		-0x80(p1) 											; get character and print it
(1)  261/    9222 : 3F                  	xppc 	p3
(1)  262/    9223 : C4 01               	ldi 	1 													; increment E
(1)  263/    9225 : 02                  	ccl
(1)  264/    9226 : 70                  	ade
 AS V1.42 Beta [Bld 102] - source file minol.asm(screen.asm) - page 12 - 1/12/2016 21:04:25


(1)  265/    9227 : 01                  	xae
(1)  266/    9228 : 90 D0               	jmp 	__GSLoop 											; and go round again.
(1)  267/    922A :                     ;
(1)  268/    922A :                     ;	Handle control keys (0x00-0x1F)
(1)  269/    922A :                     ;
(1)  270/    922A :                     __GSControlKey:
(1)  271/    922A : C1 80               	ld 		-0x80(p1) 											; get typed in key
(1)  272/    922C : E4 08               	xri 	8 													; check for backspace.
(1)  273/    922E : 98 17               	jz 		__GSBackspace 			
(1)  274/    9230 : E4 05               	xri 	8!13 												; check for CR
(1)  275/    9232 : 9C C6               	jnz 	__GSLoop 											; if not, ignore the key.
(1)  276/    9234 :                     ;
(1)  277/    9234 :                     ;	Carriage Return, ending input.
(1)  278/    9234 :                     ;
(1)  279/    9234 : C9 80               	st 		-0x80(p1) 											; replace the CR written with NULL terminator.
(1)  280/    9236 : C4 0D               	ldi 	13 													; print CR
(1)  281/    9238 : 3F                  	xppc 	p3
(1)  282/    9239 : (MACRO)             	pulle 														; restore E,P3,A
(1)  282/    9239 : C6 01                       ld              @1(p2)
(1)  282/    923B : 01                          xae
(1)  283/    923C : (MACRO)             	pullp	p3
(1)  283/    923C : C6 01                       ld              @1(p2)
(1)  283/    923E : 33                          xpal    P3
(1)  283/    923F : C6 01                       ld              @1(p2)
(1)  283/    9241 : 37                          xpah    P3
(1)  284/    9242 : (MACRO)             	pulla
(1)  284/    9242 : C6 01                       ld              @1(p2)
(1)  285/    9244 : 3F                  	xppc 	p3 													; return
(1)  286/    9245 : 90 A5               	jmp 	GetString 											; make re-entrant (probably unneccessary !!)
(1)  287/    9247 :                     ;
(1)  288/    9247 :                     ;	Backspace entered
(1)  289/    9247 :                     ;
(1)  290/    9247 :                     __GSBackspace
(1)  291/    9247 : 40                  	lde 														; if E = 0 we can't backspace any further.
(1)  292/    9248 : 98 B0               	jz 		__GSLoop
(1)  293/    924A : C4 08               	ldi 	8 													; backspace on screen
(1)  294/    924C : 3F                  	xppc 	p3
(1)  295/    924D : C4 FF               	ldi 	0xFF 												; decrement E
(1)  296/    924F : 02                  	ccl
(1)  297/    9250 : 70                  	ade
(1)  298/    9251 : 01                  	xae
(1)  299/    9252 : 90 A6               	jmp 	__GSLoop 											; and go round again.
(1)  300/    9254 :                     
(1)  301/    9254 :                     	endsection GetString
(1)  302/    9254 :                     
      79/    9254 :                     	include source\execute.asm 									; statement exec main loop
(1)    1/    9254 :                     ; ****************************************************************************************************************
(1)    2/    9254 :                     ; ****************************************************************************************************************
(1)    3/    9254 :                     ;
(1)    4/    9254 :                     ;										Instruction Execution
(1)    5/    9254 :                     ;	
(1)    6/    9254 :                     ; ****************************************************************************************************************
(1)    7/    9254 :                     ; ****************************************************************************************************************
(1)    8/    9254 :                     
(1)    9/    9254 :                     ; ****************************************************************************************************************
(1)   10/    9254 :                     ;							Source codes for execution, with skip-over go here
(1)   11/    9254 :                     ; ****************************************************************************************************************
(1)   12/    9254 :                     
(1)   13/    9254 :                     	include source\commands\os.asm 								; OS
(2)    1/    9254 :                     ; ****************************************************************************************************************
 AS V1.42 Beta [Bld 102] - source file minol.asm(os.asm) - page 13 - 1/12/2016 21:04:25


(2)    2/    9254 :                     ; ****************************************************************************************************************
(2)    3/    9254 :                     ;
(2)    4/    9254 :                     ;												OS command
(2)    5/    9254 :                     ;	
(2)    6/    9254 :                     ; ****************************************************************************************************************
(2)    7/    9254 :                     ; ****************************************************************************************************************
(2)    8/    9254 :                     
(2)    9/    9254 : 90 07               	jmp 	COS_Over
(2)   10/    9256 :                     
(2)   11/    9256 :                     CMD_OS:
(2)   12/    9256 : (MACRO)             	lpi 	p3,BootMonitor-1 									; monitor re-entry point
(2)   12/    9256 : C4 02                       ldi     (BOOTMONITOR-1) / 256
(2)   12/    9258 : 37                          xpah    P3
(2)   12/    9259 : C4 0F                       ldi     (BOOTMONITOR-1) & 255
(2)   12/    925B : 33                          xpal    P3
(2)   13/    925C : 3F                  	xppc 	p3													; go there.
(2)   14/    925D :                     
(2)   15/    925D :                     COS_Over:
(1)   14/    925D :                     	include source\commands\list.asm 							; LIST
(2)    1/    925D :                     ; ****************************************************************************************************************
(2)    2/    925D :                     ; ****************************************************************************************************************
(2)    3/    925D :                     ;
(2)    4/    925D :                     ;												LIST command
(2)    5/    925D :                     ;	
(2)    6/    925D :                     ; ****************************************************************************************************************
(2)    7/    925D :                     ; ****************************************************************************************************************
(2)    8/    925D :                     
(2)    9/    925D : 90 3E               	jmp		CLI_Over
(2)   10/    925F :                     
(2)   11/    925F :                     CMD_List:
(2)   12/    925F : (MACRO)             	lpi 	p1,ProgramBase 										; point P1 to first line.
(2)   12/    925F : C4 10                       ldi     (PROGRAMBASE) / 256
(2)   12/    9261 : 35                          xpah    P1
(2)   12/    9262 : C4 00                       ldi     (PROGRAMBASE) & 255
(2)   12/    9264 : 31                          xpal    P1
(2)   13/    9265 : C4 00               	ldi 	0 													; clear counter. used for Speccy style list.
(2)   14/    9267 : CE FF               	st 		@-1(p2)
(2)   15/    9269 :                     CLI_Loop:
(2)   16/    9269 : C5 01               	ld 		@1(p1) 												; check if finished
(2)   17/    926B : D4 80               	ani 	0x80
(2)   18/    926D : 9C 28               	jnz 	CLI_End
(2)   19/    926F : C5 01               	ld 		@1(p1) 												; get line number into E
(2)   20/    9271 : 01                  	xae 
(2)   21/    9272 : (MACRO)             	lpi 	p3,PrintInteger-1 									; and print it.
(2)   21/    9272 : C4 90                       ldi     (PRINTINTEGER-1) / 256
(2)   21/    9274 : 37                          xpah    P3
(2)   21/    9275 : C4 7B                       ldi     (PRINTINTEGER-1) & 255
(2)   21/    9277 : 33                          xpal    P3
(2)   22/    9278 : 3F                  	xppc 	p3
(2)   23/    9279 : C4 20               	ldi 	' '													; print space
(2)   24/    927B : 3F                  	xppc 	p3
(2)   25/    927C :                     ;
(2)   26/    927C :                     CLI_Line:
(2)   27/    927C : C5 01               	ld 		@1(p1) 												; get character
(2)   28/    927E : 98 03               	jz 		CLI_EndLine											; if zero, do next line.
(2)   29/    9280 : 3F                  	xppc 	p3 													; print it
(2)   30/    9281 : 90 F9               	jmp 	CLI_Line
(2)   31/    9283 :                     ;
(2)   32/    9283 :                     CLI_EndLine:
(2)   33/    9283 : C4 0D               	ldi 	13													; new line
 AS V1.42 Beta [Bld 102] - source file minol.asm(list.asm) - page 14 - 1/12/2016 21:04:25


(2)   34/    9285 : 3F                  	xppc 	p3
(2)   35/    9286 : AA 00               	ild 	(p2) 												; bump counter
(2)   36/    9288 : D4 03               	ani 	0x03 												; stop every 3 lines
(2)   37/    928A : 9C DD               	jnz 	CLI_Loop 											; keep going.
(2)   38/    928C : (MACRO)             	lpi 	p3,GetChar-1 										; get a keystroke
(2)   38/    928C : C4 91                       ldi     (GETCHAR-1) / 256
(2)   38/    928E : 37                          xpah    P3
(2)   38/    928F : C4 C7                       ldi     (GETCHAR-1) & 255
(2)   38/    9291 : 33                          xpal    P3
(2)   39/    9292 : 3F                  	xppc 	p3
(2)   40/    9293 : E4 20               	xri 	' '													; if space pressed
(2)   41/    9295 : 98 D2               	jz 		CLI_Loop 											; and do next line.
(2)   42/    9297 :                     
(2)   43/    9297 :                     CLI_End:
(2)   44/    9297 : C6 01               	ld 		@1(p2) 												; drop counter
(2)   45/    9299 : C4 FF               	ldi 	ERRC_End											; fake error to end after LIST as destroys P1.
(2)   46/    929B : 01                  	xae
(2)   47/    929C : 02                  	ccl
(2)   48/    929D :                     
(2)   49/    929D :                     CLI_Over:
(2)   50/    929D :                     
(2)   51/    929D :                     
(1)   15/    929D :                     	include source\commands\new_end.asm 						; NEW and END
(2)    1/    929D :                     ; ****************************************************************************************************************
(2)    2/    929D :                     ; ****************************************************************************************************************
(2)    3/    929D :                     ;
(2)    4/    929D :                     ;												NEW and END
(2)    5/    929D :                     ;	
(2)    6/    929D :                     ; ****************************************************************************************************************
(2)    7/    929D :                     ; ****************************************************************************************************************
(2)    8/    929D :                     
(2)    9/    929D : 90 0E               	jmp 	CNE_Over
(2)   10/    929F :                     
(2)   11/    929F :                     ; ****************************************************************************************************************
(2)   12/    929F :                     ;						NEW (Erase program) also executes END in case in running program
(2)   13/    929F :                     ; ****************************************************************************************************************
(2)   14/    929F :                     
(2)   15/    929F :                     CMD_New:
(2)   16/    929F : (MACRO)             	lpi 	p3,ProgramBase 										; write $FF at program base
(2)   16/    929F : C4 10                       ldi     (PROGRAMBASE) / 256
(2)   16/    92A1 : 37                          xpah    P3
(2)   16/    92A2 : C4 00                       ldi     (PROGRAMBASE) & 255
(2)   16/    92A4 : 33                          xpal    P3
(2)   17/    92A5 : C4 FF               	ldi 	0xFF
(2)   18/    92A7 : CB 00               	st 		0(p3) 												; this erases the program
(2)   19/    92A9 :                     
(2)   20/    92A9 :                     ; ****************************************************************************************************************
(2)   21/    92A9 :                     ;													END program
(2)   22/    92A9 :                     ; ****************************************************************************************************************
(2)   23/    92A9 :                     
(2)   24/    92A9 :                     CMD_End:
(2)   25/    92A9 : 02                  	ccl 														; we cause an error, but it is ERRC_End which is 
(2)   26/    92AA : C4 FF               	ldi 	ERRC_End 											; not an error and not reported as such.
(2)   27/    92AC : 01                  	xae
(2)   28/    92AD :                     
(2)   29/    92AD :                     CNE_Over:
(1)   16/    92AD :                     	include source\commands\input.asm 							; IN<put>
(2)    1/    92AD :                     ; ****************************************************************************************************************
(2)    2/    92AD :                     ; ****************************************************************************************************************
(2)    3/    92AD :                     ;
 AS V1.42 Beta [Bld 102] - source file minol.asm(input.asm) - page 15 - 1/12/2016 21:04:25


(2)    4/    92AD :                     ;												IN command
(2)    5/    92AD :                     ;	
(2)    6/    92AD :                     ; ****************************************************************************************************************
(2)    7/    92AD :                     ; ****************************************************************************************************************
(2)    8/    92AD :                     
(2)    9/    92AD : 90 30               	jmp		CIN_Over2
(2)   10/    92AF :                     
(2)   11/    92AF :                     CMD_In:
(2)   12/    92AF : (MACRO)             	lpi 	p3,EvaluateAddressPair-1 							; set P3 to call evaluate pair (H,L)
(2)   12/    92AF : C4 96                       ldi     (EVALUATEADDRESSPAIR-1) / 256
(2)   12/    92B1 : 37                          xpah    P3
(2)   12/    92B2 : C4 AF                       ldi     (EVALUATEADDRESSPAIR-1) & 255
(2)   12/    92B4 : 33                          xpal    P3
(2)   13/    92B5 : 03                  	scl 														; indicates no error
(2)   14/    92B6 : C1 00               	ld	 	(p1) 												; look at first character
(2)   15/    92B8 : 98 25               	jz 		CIN_Over2 											; if zero or ':' then end of IN
(2)   16/    92BA : E4 3A               	xri 	':'
(2)   17/    92BC : 98 21               	jz 		CIN_Over2
(2)   18/    92BE : C5 01               	ld 		@1(p1) 												; fetch and bump
(2)   19/    92C0 : E4 2C               	xri 	','													; ignora commas
(2)   20/    92C2 : 98 EB               	jz 		CMD_In
(2)   21/    92C4 : E4 0C               	xri 	' '!','												; ignore spaces.
(2)   22/    92C6 : 98 E7               	jz 		CMD_In
(2)   23/    92C8 : E4 08               	xri 	'('!' '												; open bracket is Input to (H,L)
(2)   24/    92CA : 98 22               	jz 		CIN_Memory 
(2)   25/    92CC : E4 0C               	xri 	'$'!'('												; $(H,L) is input to memory.
(2)   26/    92CE : 98 59               	jz 		CIN_String
(2)   27/    92D0 :                     
(2)   28/    92D0 :                     ; ****************************************************************************************************************
(2)   29/    92D0 :                     ;											Check for A-Z input.
(2)   30/    92D0 :                     ; ****************************************************************************************************************
(2)   31/    92D0 :                     
(2)   32/    92D0 : C1 FF               	ld 		-1(p1)												; get letter of variable
(2)   33/    92D2 : 02                  	ccl
(2)   34/    92D3 : F4 A5               	adi 	255-'Z'												; check if > 'Z'
(2)   35/    92D5 : 94 04               	jp 		CIN_Syntax 				
(2)   36/    92D7 : F4 1A               	adi 	26 													; will be +ve if A..Z now
(2)   37/    92D9 : 94 06               	jp 		CIN_Variable
(2)   38/    92DB :                     
(2)   39/    92DB :                     ; ****************************************************************************************************************
(2)   40/    92DB :                     ;									Syntax error - not (x,x) $(x,x) or A..Z
(2)   41/    92DB :                     ; ****************************************************************************************************************
(2)   42/    92DB :                     
(2)   43/    92DB :                     CIN_Syntax:
(2)   44/    92DB : C4 05               	ldi 	ERRC_Syntax
(2)   45/    92DD : 01                  	xae
(2)   46/    92DE : 02                  	ccl
(2)   47/    92DF :                     CIN_Over2:
(2)   48/    92DF : 90 6C               	jmp 	CIN_Over
(2)   49/    92E1 :                     
(2)   50/    92E1 :                     ; ****************************************************************************************************************
(2)   51/    92E1 :                     ;										Input to variable in A (0-25)
(2)   52/    92E1 :                     ; ****************************************************************************************************************
(2)   53/    92E1 :                     
(2)   54/    92E1 :                     CIN_Variable:
(2)   55/    92E1 : 02                  	ccl 														; add variable number 0-25 to Variables to get an address
(2)   56/    92E2 : F4 90               	adi 	Variables & 255
(2)   57/    92E4 : CA FE               	st 		-2(p2)
(2)   58/    92E6 : C4 0C               	ldi 	Variables / 256
(2)   59/    92E8 : F4 00               	adi 	0
 AS V1.42 Beta [Bld 102] - source file minol.asm(input.asm) - page 16 - 1/12/2016 21:04:25


(2)   60/    92EA : CA FF               	st 		-1(p2)
(2)   61/    92EC : 90 05               	jmp 	CIN_InputVariableOrMemory
(2)   62/    92EE :                     
(2)   63/    92EE :                     ; ****************************************************************************************************************
(2)   64/    92EE :                     ;											Input to (<expr>,<expr>)
(2)   65/    92EE :                     ; ****************************************************************************************************************
(2)   66/    92EE :                     
(2)   67/    92EE :                     CIN_Memory:
(2)   68/    92EE : C5 FF               	ld 		@-1(p1)												; point to the bracket.
(2)   69/    92F0 : 3F                  	xppc 	p3 													; push the H,L on the stack, without the stack being changed
(2)   70/    92F1 : 94 5A               	jp 		CIN_Over 											; exit on error.
(2)   71/    92F3 :                     
(2)   72/    92F3 :                     ; ****************************************************************************************************************
(2)   73/    92F3 :                     ;								Input to variable or memory address is hidden on TOS.
(2)   74/    92F3 :                     ; ****************************************************************************************************************
(2)   75/    92F3 :                     
(2)   76/    92F3 :                     CIN_InputVariableOrMemory:
(2)   77/    92F3 : C6 FE               	ld 		@-2(p2) 											; save the storage address as TOS "Make it visible"
(2)   78/    92F5 : (MACRO)             	pushp 	p1 													; save P1 on stack
(2)   78/    92F5 : 35                          xpah    P1
(2)   78/    92F6 : CE FF                       st              @-1(p2)
(2)   78/    92F8 : 31                          xpal    P1
(2)   78/    92F9 : CE FF                       st              @-1(p2)
(2)   79/    92FB : (MACRO)             	lpi 	p3,GetString-1 										; read keyboard
(2)   79/    92FB : C4 91                       ldi     (GETSTRING-1) / 256
(2)   79/    92FD : 37                          xpah    P3
(2)   79/    92FE : C4 EB                       ldi     (GETSTRING-1) & 255
(2)   79/    9300 : 33                          xpal    P3
(2)   80/    9301 : (MACRO)             	lpi 	p1,KeyboardBuffer 									; point P1 to keyboard buffer.
(2)   80/    9301 : C4 0C                       ldi     (KEYBOARDBUFFER) / 256
(2)   80/    9303 : 35                          xpah    P1
(2)   80/    9304 : C4 B0                       ldi     (KEYBOARDBUFFER) & 255
(2)   80/    9306 : 31                          xpal    P1
(2)   81/    9307 : C4 48               	ldi 	KeyboardBufferSize 									; buffer size
(2)   82/    9309 : 3F                  	xppc 	p3 													; read it in.
(2)   83/    930A :                     
(2)   84/    930A : (MACRO)             	lpi 	p3,GetConstant-1 									; extract constant to E if any
(2)   84/    930A : C4 90                       ldi     (GETCONSTANT-1) / 256
(2)   84/    930C : 37                          xpah    P3
(2)   84/    930D : C4 D7                       ldi     (GETCONSTANT-1) & 255
(2)   84/    930F : 33                          xpal    P3
(2)   85/    9310 : 3F                  	xppc 	p3
(2)   86/    9311 : D4 80               	ani 	0x80 												; if CY/L set, e.g. is it legal 
(2)   87/    9313 : 9C 03               	jnz 	CIN_StoreValue										; if so, store E at the address.
(2)   88/    9315 : C1 00               	ld 		(p1) 												; get the character code of the first letter
(2)   89/    9317 : 01                  	xae 														; into E
(2)   90/    9318 :                     CIN_StoreValue:
(2)   91/    9318 : (MACRO)             	pullp 	p1 													; restore P1
(2)   91/    9318 : C6 01                       ld              @1(p2)
(2)   91/    931A : 31                          xpal    P1
(2)   91/    931B : C6 01                       ld              @1(p2)
(2)   91/    931D : 35                          xpah    P1
(2)   92/    931E : C6 01               	ld 		@1(p2) 												; get low byte to P3.L
(2)   93/    9320 : 33                  	xpal 	p3 												
(2)   94/    9321 : C6 01               	ld 		@1(p2)												; get high byte to P3.H
(2)   95/    9323 : 37                  	xpah 	p3
(2)   96/    9324 : 40                  	lde 														; get E, value to store
(2)   97/    9325 : CB 00               	st 		(p3)												; and write it.
(2)   98/    9327 :                     CMD_In2:
(2)   99/    9327 : 90 86               	jmp 	CMD_In 												; and see if there is more to input
 AS V1.42 Beta [Bld 102] - source file minol.asm(input.asm) - page 17 - 1/12/2016 21:04:25


(2)  100/    9329 :                     
(2)  101/    9329 :                     ; ****************************************************************************************************************
(2)  102/    9329 :                     ;												Input String to Memory
(2)  103/    9329 :                     ; ****************************************************************************************************************
(2)  104/    9329 :                     
(2)  105/    9329 :                     CIN_String:
(2)  106/    9329 : 3F                  	xppc 	p3 													; evaluate (H,L)
(2)  107/    932A : 94 21               	jp 		CIN_Over 											; exit on error.
(2)  108/    932C : C2 FF               	ld 		-1(p2) 												; read High
(2)  109/    932E : 35                  	xpah 	p1 													; put into P1.H
(2)  110/    932F : CA FF               	st 		-1(p2)
(2)  111/    9331 : C2 FE               	ld 		-2(p2)												; read Low
(2)  112/    9333 : 31                  	xpal 	p1 													; put into P1.L
(2)  113/    9334 : CE FE               	st 		@-2(p2) 											; save on stack
(2)  114/    9336 : (MACRO)             	lpi 	p3,GetString-1 										; read keyboard
(2)  114/    9336 : C4 91                       ldi     (GETSTRING-1) / 256
(2)  114/    9338 : 37                          xpah    P3
(2)  114/    9339 : C4 EB                       ldi     (GETSTRING-1) & 255
(2)  114/    933B : 33                          xpal    P3
(2)  115/    933C : C4 48               	ldi 	KeyboardBufferSize 									; max size of input
(2)  116/    933E : 3F                  	xppc 	p3 													; read keyboard into address
(2)  117/    933F :                     
(2)  118/    933F :                     CIN_FindEnd:													; look for EOS (NULL)
(2)  119/    933F : C5 01               	ld 		@1(p1)
(2)  120/    9341 : 9C FC               	jnz 	CIN_FindEnd
(2)  121/    9343 : B9 FF               	dld 	-1(p1) 												; convert $00 to $FF
(2)  122/    9345 :                     
(2)  123/    9345 : C6 01               	ld 		@1(p2) 												; pop P1
(2)  124/    9347 : 31                  	xpal 	p1
(2)  125/    9348 : C6 01               	ld 		@1(p2)
(2)  126/    934A : 35                  	xpah 	p1
(2)  127/    934B : 90 DA               	jmp 	CMD_In2												; see if more input 
(2)  128/    934D :                     
(2)  129/    934D :                     CIN_Over:
(2)  130/    934D :                     
(2)  131/    934D :                     
(2)  132/    934D :                     
(1)   17/    934D :                     	include source\commands\clear.asm							; CLEAR
(2)    1/    934D :                     ; ****************************************************************************************************************
(2)    2/    934D :                     ; ****************************************************************************************************************
(2)    3/    934D :                     ;
(2)    4/    934D :                     ;													CLEAR
(2)    5/    934D :                     ;	
(2)    6/    934D :                     ; ****************************************************************************************************************
(2)    7/    934D :                     ; ****************************************************************************************************************
(2)    8/    934D :                     
(2)    9/    934D : 90 13               	jmp	CCL_Over
(2)   10/    934F :                     
(2)   11/    934F :                     ; ****************************************************************************************************************
(2)   12/    934F :                     ;												CLEAR command
(2)   13/    934F :                     ; ****************************************************************************************************************
(2)   14/    934F :                     
(2)   15/    934F :                     CMD_Clear:
(2)   16/    934F : (MACRO)             	lpi 	p3,Variables 										; point P3 to variables
(2)   16/    934F : C4 0C                       ldi     (VARIABLES) / 256
(2)   16/    9351 : 37                          xpah    P3
(2)   16/    9352 : C4 90                       ldi     (VARIABLES) & 255
(2)   16/    9354 : 33                          xpal    P3
(2)   17/    9355 : C4 1A               	ldi 	26 													; loop counter to 26
(2)   18/    9357 : CA FF               	st 		-1(p2)
 AS V1.42 Beta [Bld 102] - source file minol.asm(clear.asm) - page 18 - 1/12/2016 21:04:25


(2)   19/    9359 :                     CCL_Loop:
(2)   20/    9359 : C4 00               	ldi 	0x00												; clear a variable
(2)   21/    935B : CF 01               	st 		@1(p3)
(2)   22/    935D : BA FF               	dld 	-1(p2) 												; done all
(2)   23/    935F : 9C F8               	jnz 	CCL_Loop											; loop back
(2)   24/    9361 : 03                  	scl 														; no error
(2)   25/    9362 :                     
(2)   26/    9362 :                     CCL_Over:
(1)   18/    9362 :                     	include source\commands\print.asm 							; PR<int>
(2)    1/    9362 :                     ; ****************************************************************************************************************
(2)    2/    9362 :                     ; ****************************************************************************************************************
(2)    3/    9362 :                     ;
(2)    4/    9362 :                     ;												PR command
(2)    5/    9362 :                     ;	
(2)    6/    9362 :                     ; ****************************************************************************************************************
(2)    7/    9362 :                     ; ****************************************************************************************************************
(2)    8/    9362 :                     
(2)    9/    9362 : 90 7B               	jmp 	CPR_Over2
(2)   10/    9364 :                     
(2)   11/    9364 :                     ; ****************************************************************************************************************
(2)   12/    9364 :                     ;												Main printing loop
(2)   13/    9364 :                     ; ****************************************************************************************************************
(2)   14/    9364 :                     
(2)   15/    9364 :                     CMD_Print:
(2)   16/    9364 : (MACRO)             	lpi 	p3,Print-1 											; set up P3 for printing.
(2)   16/    9364 : C4 91                       ldi     (PRINT-1) / 256
(2)   16/    9366 : 37                          xpah    P3
(2)   16/    9367 : C4 07                       ldi     (PRINT-1) & 255
(2)   16/    9369 : 33                          xpal    P3
(2)   17/    936A : C1 00               	ld 		(p1)												; reached end of command, print RETURN and exit.
(2)   18/    936C : 98 73               	jz 		CPR_EndReturn
(2)   19/    936E : E4 3A               	xri 	':'
(2)   20/    9370 : 98 6F               	jz 		CPR_EndReturn
(2)   21/    9372 : C5 01               	ld 		@1(p1)												; re-read with a bump
(2)   22/    9374 : E4 20               	xri 	' '													; if space, skip it
(2)   23/    9376 : 98 EC               	jz 		CMD_Print
(2)   24/    9378 : E4 0C               	xri 	','!' '												; if comma, skip it.
(2)   25/    937A : 98 E8               	jz 		CMD_Print
(2)   26/    937C : E4 17               	xri 	';'!','												; if semicolon exit without a return
(2)   27/    937E : 98 64               	jz 		CPR_EndOk 
(2)   28/    9380 : E4 19               	xri 	'"'!';'												; if quote mark print as quoted string
(2)   29/    9382 : 98 1E               	jz 		CPR_QuotedString
(2)   30/    9384 : E4 06               	xri 	'$'!'"'												; if $ print string at address.
(2)   31/    9386 : 98 27               	jz 		CPR_StringAtAddress
(2)   32/    9388 :                     
(2)   33/    9388 :                     ; ****************************************************************************************************************
(2)   34/    9388 :                     ;												numerical expression
(2)   35/    9388 :                     ; ****************************************************************************************************************
(2)   36/    9388 :                     
(2)   37/    9388 : C4 20               	ldi 	' '													; preceding space
(2)   38/    938A : 3F                  	xppc 	p3
(2)   39/    938B : C5 FF               	ld 		@-1(p1)												; unpick the get, first character of expression.
(2)   40/    938D : (MACRO)             	lpi 	p3,EvaluateExpression-1 							; evaluate expression
(2)   40/    938D : C4 95                       ldi     (EVALUATEEXPRESSION-1) / 256
(2)   40/    938F : 37                          xpah    P3
(2)   40/    9390 : C4 5C                       ldi     (EVALUATEEXPRESSION-1) & 255
(2)   40/    9392 : 33                          xpal    P3
(2)   41/    9393 : 3F                  	xppc 	p3
(2)   42/    9394 : 94 4F               	jp 		CPR_Over 											; exit on error.
(2)   43/    9396 : (MACRO)             	lpi 	p3,PrintInteger-1 									; and print it
 AS V1.42 Beta [Bld 102] - source file minol.asm(print.asm) - page 19 - 1/12/2016 21:04:25


(2)   43/    9396 : C4 90                       ldi     (PRINTINTEGER-1) / 256
(2)   43/    9398 : 37                          xpah    P3
(2)   43/    9399 : C4 7B                       ldi     (PRINTINTEGER-1) & 255
(2)   43/    939B : 33                          xpal    P3
(2)   44/    939C : 3F                  	xppc 	p3
(2)   45/    939D : C4 20               	ldi 	' '													; trailing space
(2)   46/    939F : 3F                  	xppc 	p3
(2)   47/    93A0 : 90 C2               	jmp 	CMD_Print
(2)   48/    93A2 :                     
(2)   49/    93A2 :                     ; ****************************************************************************************************************
(2)   50/    93A2 :                     ;												"<quoted string>"
(2)   51/    93A2 :                     ; ****************************************************************************************************************
(2)   52/    93A2 :                     
(2)   53/    93A2 :                     CPR_QuotedString:
(2)   54/    93A2 : C5 01               	ld 		@1(p1) 												; get character
(2)   55/    93A4 : 98 35               	jz 		CPR_Syntax 											; if NULL, syntax error.
(2)   56/    93A6 : E4 22               	xri 	'"'													; if closing quote
(2)   57/    93A8 : 98 BA               	jz 		CMD_Print
(2)   58/    93AA : C1 FF               	ld 		-1(p1)												; re-get it
(2)   59/    93AC : 3F                  	xppc 	p3 													; print it
(2)   60/    93AD : 90 F3               	jmp 	CPR_QuotedString
(2)   61/    93AF :                     
(2)   62/    93AF :                     ; ****************************************************************************************************************
(2)   63/    93AF :                     ;									$(H,L) print string at address, ended by -ve or 0.
(2)   64/    93AF :                     ; ****************************************************************************************************************
(2)   65/    93AF :                     
(2)   66/    93AF :                     CPR_StringAtAddress:
(2)   67/    93AF : (MACRO)             	lpi 	p3,EvaluateAddressPair-1 							; evaluate (H,L)
(2)   67/    93AF : C4 96                       ldi     (EVALUATEADDRESSPAIR-1) / 256
(2)   67/    93B1 : 37                          xpah    P3
(2)   67/    93B2 : C4 AF                       ldi     (EVALUATEADDRESSPAIR-1) & 255
(2)   67/    93B4 : 33                          xpal    P3
(2)   68/    93B5 : 3F                  	xppc 	p3	
(2)   69/    93B6 : 94 2D               	jp 		CPR_Over											; exit on error
(2)   70/    93B8 :                     
(2)   71/    93B8 : C6 FF               	ld 		@-1(p2) 											; retrieve H to P1.H
(2)   72/    93BA : 35                  	xpah 	p1
(2)   73/    93BB : CA 00               	st 		(p2)												; and save P1.H there
(2)   74/    93BD : C6 FF               	ld 		@-1(p2) 											; retrieve L to P1.L
(2)   75/    93BF : 31                  	xpal 	p1
(2)   76/    93C0 : CA 00               	st 		(p2)
(2)   77/    93C2 : (MACRO)             	lpi 	p3,Print-1 											; set up P3 to print.
(2)   77/    93C2 : C4 91                       ldi     (PRINT-1) / 256
(2)   77/    93C4 : 37                          xpah    P3
(2)   77/    93C5 : C4 07                       ldi     (PRINT-1) & 255
(2)   77/    93C7 : 33                          xpal    P3
(2)   78/    93C8 :                     CPR_StringLoop:
(2)   79/    93C8 : C5 01               	ld 		@1(p1) 												; fetch and bump character
(2)   80/    93CA : 98 02               	jz 		CPR_StringExit 										; if zero end of string
(2)   81/    93CC : 94 08               	jp 		CPR_StringPrint 									; if +ve printable character
(2)   82/    93CE :                     ;
(2)   83/    93CE :                     CPR_StringExit:
(2)   84/    93CE : C6 01               	ld 		@1(p2)												; restore P1.
(2)   85/    93D0 : 31                  	xpal 	p1
(2)   86/    93D1 : C6 01               	ld 		@1(p2)
(2)   87/    93D3 : 35                  	xpah 	p1
(2)   88/    93D4 : 90 8E               	jmp 	CMD_Print 											; and print the next thing.
(2)   89/    93D6 :                     ;
(2)   90/    93D6 :                     CPR_StringPrint:
(2)   91/    93D6 : C1 FF               	ld 		-1(p1) 												; retrieve, print and loop
 AS V1.42 Beta [Bld 102] - source file minol.asm(print.asm) - page 20 - 1/12/2016 21:04:25


(2)   92/    93D8 : 3F                  	xppc 	p3
(2)   93/    93D9 : 90 ED               	jmp 	CPR_StringLoop
(2)   94/    93DB :                     
(2)   95/    93DB :                     ; ****************************************************************************************************************
(2)   96/    93DB :                     ;												Syntax Error
(2)   97/    93DB :                     ; ****************************************************************************************************************
(2)   98/    93DB :                     
(2)   99/    93DB :                     CPR_Syntax:
(2)  100/    93DB : C4 05               	ldi 	ERRC_Syntax 										; set up for syntax error and exit
(2)  101/    93DD : 01                  	xae
(2)  102/    93DE : 02                  	ccl
(2)  103/    93DF :                     CPR_Over2:
(2)  104/    93DF : 90 04               	jmp 	CPR_Over
(2)  105/    93E1 :                     
(2)  106/    93E1 :                     ; ****************************************************************************************************************
(2)  107/    93E1 :                     ;										Print return and end okay.
(2)  108/    93E1 :                     ; ****************************************************************************************************************
(2)  109/    93E1 :                     
(2)  110/    93E1 :                     CPR_EndReturn:
(2)  111/    93E1 : C4 0D               	ldi 	13													; print a carriage return.
(2)  112/    93E3 : 3F                  	xppc 	p3
(2)  113/    93E4 :                     CPR_EndOk:														; end successfully.
(2)  114/    93E4 : 03                  	scl 														; set carry flag (no error)
(2)  115/    93E5 :                     
(2)  116/    93E5 :                     CPR_Over:
(2)  117/    93E5 :                     	
(1)   19/    93E5 :                     	include source\commands\call.asm 							; CALL
(2)    1/    93E5 :                     ; ****************************************************************************************************************
(2)    2/    93E5 :                     ; ****************************************************************************************************************
(2)    3/    93E5 :                     ;
(2)    4/    93E5 :                     ;												CALL command
(2)    5/    93E5 :                     ;	
(2)    6/    93E5 :                     ; ****************************************************************************************************************
(2)    7/    93E5 :                     ; ****************************************************************************************************************
(2)    8/    93E5 :                     
(2)    9/    93E5 : 90 27               	jmp		CCA_Over
(2)   10/    93E7 :                     
(2)   11/    93E7 :                     CMD_Call:
(2)   12/    93E7 : (MACRO)             	lpi 	p3,EvaluateAddressPair-1 							; evaluate the address pair (e.g. (H,L))
(2)   12/    93E7 : C4 96                       ldi     (EVALUATEADDRESSPAIR-1) / 256
(2)   12/    93E9 : 37                          xpah    P3
(2)   12/    93EA : C4 AF                       ldi     (EVALUATEADDRESSPAIR-1) & 255
(2)   12/    93EC : 33                          xpal    P3
(2)   13/    93ED : 3F                  	xppc 	p3
(2)   14/    93EE : 94 1E               	jp 		CCA_Over 											; exit on error.
(2)   15/    93F0 : C2 FE               	ld 		-2(p2) 												; retrieve the L value to E
(2)   16/    93F2 : 01                  	xae 	
(2)   17/    93F3 : C2 FF               	ld 		-1(p2)												; retrieve the H value to P3.H
(2)   18/    93F5 : 37                  	xpah 	p3
(2)   19/    93F6 : 40                  	lde	 														; copy L value to P3.L
(2)   20/    93F7 : 33                  	xpal 	p3
(2)   21/    93F8 : C7 FF               	ld 		@-1(p3) 											; fix up for pre-increment
(2)   22/    93FA : (MACRO)             	pushp 	p1 													; save P1
(2)   22/    93FA : 35                          xpah    P1
(2)   22/    93FB : CE FF                       st              @-1(p2)
(2)   22/    93FD : 31                          xpal    P1
(2)   22/    93FE : CE FF                       st              @-1(p2)
(2)   23/    9400 : (MACRO)             	lpi 	p1,Variables 										; and point P1 to the variables
(2)   23/    9400 : C4 0C                       ldi     (VARIABLES) / 256
(2)   23/    9402 : 35                          xpah    P1
 AS V1.42 Beta [Bld 102] - source file minol.asm(call.asm) - page 21 - 1/12/2016 21:04:25


(2)   23/    9403 : C4 90                       ldi     (VARIABLES) & 255
(2)   23/    9405 : 31                          xpal    P1
(2)   24/    9406 : 03                  	scl 														; set CY/L flag, so the call can return an error.
(2)   25/    9407 : 3F                  	xppc 	p3 													; call the routine
(2)   26/    9408 : (MACRO)             	pullp	p1 													; restore P1
(2)   26/    9408 : C6 01                       ld              @1(p2)
(2)   26/    940A : 31                          xpal    P1
(2)   26/    940B : C6 01                       ld              @1(p2)
(2)   26/    940D : 35                          xpah    P1
(2)   27/    940E :                     	
(2)   28/    940E :                     CCA_Over:
(1)   20/    940E :                     	include source\commands\let.asm 							; LET (optional, but slower if not present)
(2)    1/    940E :                     ; ****************************************************************************************************************
(2)    2/    940E :                     ; ****************************************************************************************************************
(2)    3/    940E :                     ;
(2)    4/    940E :                     ;												LET command
(2)    5/    940E :                     ;	
(2)    6/    940E :                     ; ****************************************************************************************************************
(2)    7/    940E :                     ; ****************************************************************************************************************
(2)    8/    940E :                     
(2)    9/    940E : 90 51               	jmp 	CLE_Over
(2)   10/    9410 :                     
(2)   11/    9410 :                     CMD_Let:
(2)   12/    9410 : C1 00               	ld 		(p1) 												; look at character
(2)   13/    9412 : E4 28               	xri 	'('													; is it let (h,l) ?
(2)   14/    9414 : 98 20               	jz 		CLE_IsHL 											; if so, go to the (H,L) code
(2)   15/    9416 : C1 00               	ld 		(p1) 												; re-read it.
(2)   16/    9418 : 02                  	ccl
(2)   17/    9419 : F4 A5               	adi 	255-'Z' 											; will be +ve on error
(2)   18/    941B : 94 04               	jp 		CLE_Syntax 											; e.g. > Z
(2)   19/    941D : F4 1A               	adi 	26 													; will be 0-25 if A..Z
(2)   20/    941F : 94 06               	jp 		CLE_SingleVariable
(2)   21/    9421 :                     ;
(2)   22/    9421 :                     ;	Syntax Error
(2)   23/    9421 :                     ;
(2)   24/    9421 :                     CLE_Syntax:
(2)   25/    9421 : C4 05               	ldi 	ERRC_Syntax 										; set E to error code.
(2)   26/    9423 : 01                  	xae
(2)   27/    9424 : 02                  	ccl 														; CY/L = 0 = Error
(2)   28/    9425 : 90 3A               	jmp 	CLE_Over 											; and exit
(2)   29/    9427 :                     ;
(2)   30/    9427 :                     ;	A-Z. AC contains 0-25
(2)   31/    9427 :                     ;
(2)   32/    9427 :                     CLE_SingleVariable:
(2)   33/    9427 : 02                  	ccl  														; work out variable address, and put on stack.
(2)   34/    9428 : F4 90               	adi 	Variables & 255
(2)   35/    942A : CE FE               	st 		@-2(p2) 
(2)   36/    942C : C4 0C               	ldi 	Variables / 256
(2)   37/    942E : F4 00               	adi 	0
(2)   38/    9430 : CA 01               	st 		1(p2)
(2)   39/    9432 : C5 01               	ld 		@1(p1) 												; skip over the variable.
(2)   40/    9434 : 90 0B               	jmp 	CLE_EvaluateAndWrite
(2)   41/    9436 :                     ;
(2)   42/    9436 :                     ;	LET is (H,L) = <expr>
(2)   43/    9436 :                     ;
(2)   44/    9436 :                     CLE_IsHL:
(2)   45/    9436 : (MACRO)             	lpi 	p3,EvaluateAddressPair-1 							; evaluate the (H,L)
(2)   45/    9436 : C4 96                       ldi     (EVALUATEADDRESSPAIR-1) / 256
(2)   45/    9438 : 37                          xpah    P3
(2)   45/    9439 : C4 AF                       ldi     (EVALUATEADDRESSPAIR-1) & 255
 AS V1.42 Beta [Bld 102] - source file minol.asm(let.asm) - page 22 - 1/12/2016 21:04:25


(2)   45/    943B : 33                          xpal    P3
(2)   46/    943C : 3F                  	xppc 	p3
(2)   47/    943D : 94 22               	jp 		CLE_Over 											; exit on error
(2)   48/    943F : C6 FE               	ld 		@-2(p2) 											; the address to write to is now on TOS.
(2)   49/    9441 :                     ;
(2)   50/    9441 :                     ;	Evaluate and write.
(2)   51/    9441 :                     ;
(2)   52/    9441 :                     CLE_EvaluateAndWrite:
(2)   53/    9441 : C5 01               	ld 		@1(p1) 												; skip over spaces
(2)   54/    9443 : E4 20               	xri 	' '
(2)   55/    9445 : 98 FA               	jz 		CLE_EvaluateAndWrite
(2)   56/    9447 : E4 1D               	xri 	' '!'='												; check first non space character is =
(2)   57/    9449 : 9C D6               	jnz 	CLE_Syntax 											; if not, a syntax error.
(2)   58/    944B :                     
(2)   59/    944B : (MACRO)             	lpi 	p3,EvaluateExpression-1 							; set up to evaluate the RHS
(2)   59/    944B : C4 95                       ldi     (EVALUATEEXPRESSION-1) / 256
(2)   59/    944D : 37                          xpah    P3
(2)   59/    944E : C4 5C                       ldi     (EVALUATEEXPRESSION-1) & 255
(2)   59/    9450 : 33                          xpal    P3
(2)   60/    9451 : 3F                  	xppc 	p3													; do it
(2)   61/    9452 : C6 02               	ld 		@2(p2) 												; remove target from TOS but leave data there
(2)   62/    9454 : 06                  	csa 														; did that evaluate cause an error ?
(2)   63/    9455 : 94 0A               	jp 		CLE_Over 											; if so, exit with that error.
(2)   64/    9457 :                     
(2)   65/    9457 : C2 FE               	ld 		-2(p2) 												; load address into P3
(2)   66/    9459 : 33                  	xpal 	p3
(2)   67/    945A : C2 FF               	ld 		-1(p2)
(2)   68/    945C : 37                  	xpah 	p3
(2)   69/    945D : 40                  	lde 														; get value
(2)   70/    945E : CB 00               	st 		(p3) 												; store there
(2)   71/    9460 : 03                  	scl 														; no error and exit.
(2)   72/    9461 :                     
(2)   73/    9461 :                     CLE_Over:
(1)   21/    9461 :                     	include source\commands\if.asm								; IF
(2)    1/    9461 :                     ; ****************************************************************************************************************
(2)    2/    9461 :                     ; ****************************************************************************************************************
(2)    3/    9461 :                     ;
(2)    4/    9461 :                     ;												IF command
(2)    5/    9461 :                     ;	
(2)    6/    9461 :                     ; ****************************************************************************************************************
(2)    7/    9461 :                     ; ****************************************************************************************************************
(2)    8/    9461 :                     
(2)    9/    9461 : 90 4D               	jmp		CIF_Over
(2)   10/    9463 :                     
(2)   11/    9463 :                     CMD_If:
(2)   12/    9463 : 3F                  	xppc 	p3 													; calculate LHS of expr.
(2)   13/    9464 : 94 4A               	jp 		CIF_Over											; exit on error.
(2)   14/    9466 : C1 00               	ld 		(p1)												; get the relative operator.
(2)   15/    9468 : E4 3D               	xri 	'='													; check it is =, < or #
(2)   16/    946A : 98 0E               	jz 		CIF_Continue
(2)   17/    946C : E4 1E               	xri 	'='!'#'
(2)   18/    946E : 98 0A               	jz 		CIF_Continue
(2)   19/    9470 : E4 1F               	xri 	'#'!'<'
(2)   20/    9472 : 98 06               	jz 		CIF_Continue
(2)   21/    9474 :                     ;
(2)   22/    9474 :                     ;	Syntax error - bad relative operation.
(2)   23/    9474 :                     ;
(2)   24/    9474 :                     CIF_Syntax:
(2)   25/    9474 : C4 05               	ldi	 	ERRC_Syntax											; report syntax error
(2)   26/    9476 : 01                  	xae
 AS V1.42 Beta [Bld 102] - source file minol.asm(if.asm) - page 23 - 1/12/2016 21:04:25


(2)   27/    9477 : 02                  	ccl
(2)   28/    9478 : 90 36               	jmp 	CIF_Over
(2)   29/    947A :                     ;
(2)   30/    947A :                     ;	Continue IF - have LHS in E.
(2)   31/    947A :                     ;
(2)   32/    947A :                     CIF_Continue:
(2)   33/    947A : C5 01               	ld 		@1(p1) 												; reget operator, and save on stack
(2)   34/    947C : CE FF               	st 		@-1(p2)
(2)   35/    947E : 40                  	lde 														; save LHS on stack.
(2)   36/    947F : CE FF               	st 		@-1(p2)
(2)   37/    9481 : 3F                  	xppc 	p3 													; evaluate the RHS of the expression
(2)   38/    9482 : C6 02               	ld 		@2(p2) 												; drop operator and LHS but the values still there.
(2)   39/    9484 : 06                  	csa 														; check for RHS error
(2)   40/    9485 : 94 29               	jp 		CIF_Over 											; and exit on error
(2)   41/    9487 : C2 FF               	ld 		-1(p2) 												; get operator
(2)   42/    9489 : E4 3C               	xri 	'<'
(2)   43/    948B : 9C 09               	jnz 	CIF_Equality 										; if not less than it's an equality test e.g. # or =
(2)   44/    948D :                     
(2)   45/    948D :                     ; ****************************************************************************************************************
(2)   46/    948D :                     ;												Less than test.
(2)   47/    948D :                     ; ****************************************************************************************************************
(2)   48/    948D :                     
(2)   49/    948D : C2 FE               	ld 		-2(p2) 												; get LHS
(2)   50/    948F : 03                  	scl
(2)   51/    9490 : 78                  	cae 														; subtract RHS.
(2)   52/    9491 : 06                  	csa 														; get CY/L flag
(2)   53/    9492 : D4 80               	ani 	0x80 												; now it is AC = 0 if < true.
(2)   54/    9494 : 90 0D               	jmp 	CIF_TestIfZero
(2)   55/    9496 :                     
(2)   56/    9496 :                     ; ****************************************************************************************************************
(2)   57/    9496 :                     ;											Equal/Not Equal Test.
(2)   58/    9496 :                     ; ****************************************************************************************************************
(2)   59/    9496 :                     	
(2)   60/    9496 :                     CIF_Equality:
(2)   61/    9496 : C2 FE               	ld 		-2(p2) 												; get LHS
(2)   62/    9498 : 60                  	xre 														; compare to RHS. AC = 0 if *equal*
(2)   63/    9499 : 98 02               	jz 		CIF_Equality2
(2)   64/    949B : C4 02               	ldi 	2 													; AC = 0 if *equal* 2 if *different*
(2)   65/    949D :                     CIF_Equality2:
(2)   66/    949D : 01                  	xae 														; save in E
(2)   67/    949E : C2 FF               	ld 		-1(p2) 												; get operator.
(2)   68/    94A0 : D4 02               	ani 	2 													; is now 0 if '=' ($3D) 2 if '#' ($23)
(2)   69/    94A2 : 60                  	xre 														; XOR with the result. Now 0 if passes test.
(2)   70/    94A3 :                     
(2)   71/    94A3 :                     ; ****************************************************************************************************************
(2)   72/    94A3 :                     ;							Pass Test (e.g. execute statement following ;) if AC = 0
(2)   73/    94A3 :                     ; ****************************************************************************************************************
(2)   74/    94A3 :                     
(2)   75/    94A3 :                     CIF_TestIfZero:
(2)   76/    94A3 : 03                  	scl 														; set CY/L = No Error.
(2)   77/    94A4 : 9C 0A               	jnz 	CIF_Over 											; if non-zero then do next command as normal.
(2)   78/    94A6 :                     	
(2)   79/    94A6 : C1 00               	ld 		(p1) 												; get next character
(2)   80/    94A8 : E4 3B               	xri 	';'													; should be a semicolon
(2)   81/    94AA : 9C C8               	jnz 	CIF_Syntax 											; if not error
(2)   82/    94AC : C5 01               	ld 		@1(p1) 												; step over it.
(2)   83/    94AE : 90 59               	jmp 	ExecuteFromAddressDirect 							; and run from here.
(2)   84/    94B0 :                     
(2)   85/    94B0 :                     CIF_Over:
(2)   86/    94B0 :                     
 AS V1.42 Beta [Bld 102] - source file minol.asm(if.asm) - page 24 - 1/12/2016 21:04:25


(2)   87/    94B0 :                     
(1)   22/    94B0 :                     	include source\commands\goto_run.asm						; GOTO and RUN (has to be last, probably !)
(2)    1/    94B0 :                     ; ****************************************************************************************************************
(2)    2/    94B0 :                     ; ****************************************************************************************************************
(2)    3/    94B0 :                     ;
(2)    4/    94B0 :                     ;												GOTO and RUN
(2)    5/    94B0 :                     ;	
(2)    6/    94B0 :                     ; ****************************************************************************************************************
(2)    7/    94B0 :                     ; ****************************************************************************************************************
(2)    8/    94B0 :                     
(2)    9/    94B0 : 90 29               	jmp 	CRG_Over											; Skip over this command.
(2)   10/    94B2 :                     
(2)   11/    94B2 :                     ; ****************************************************************************************************************
(2)   12/    94B2 :                     ;												GOTO command
(2)   13/    94B2 :                     ; ****************************************************************************************************************
(2)   14/    94B2 :                     
(2)   15/    94B2 :                     CMD_Goto:	
(2)   16/    94B2 : 3F                  	xppc 	p3 													; evaluate the line number to GOTO, in E
(2)   17/    94B3 : 94 26               	jp 		CRG_Over 											; exit if error occurred
(2)   18/    94B5 : 40                  	lde 														; get line number
(2)   19/    94B6 : CA FF               	st 		-1(p2) 												; save below TOS.
(2)   20/    94B8 : (MACRO)             	lpi 	p1,ProgramBase 										; point P1 to program Base.
(2)   20/    94B8 : C4 10                       ldi     (PROGRAMBASE) / 256
(2)   20/    94BA : 35                          xpah    P1
(2)   20/    94BB : C4 00                       ldi     (PROGRAMBASE) & 255
(2)   20/    94BD : 31                          xpal    P1
(2)   21/    94BE :                     CRG_Find:
(2)   22/    94BE : C1 00               	ld 		0(p1) 												; look at offset
(2)   23/    94C0 : 94 06               	jp 		CRG_NotEnd											; if -ve then end of program.
(2)   24/    94C2 : C4 01               	ldi 	ERRC_Label 											; return label error
(2)   25/    94C4 : 01                  	xae
(2)   26/    94C5 : 02                  	ccl 														; set error flag
(2)   27/    94C6 : 90 13               	jmp 	CRG_Over
(2)   28/    94C8 :                     ;
(2)   29/    94C8 :                     CRG_NotEnd:
(2)   30/    94C8 : 01                  	xae 														; offset in E
(2)   31/    94C9 : C1 01               	ld 		1(p1) 												; get line number
(2)   32/    94CB : E2 FF               	xor 	-1(p2) 												; go back if not required one.
(2)   33/    94CD : 98 0A               	jz 		CRG_ExecuteFromP1									; if found, run from P1.
(2)   34/    94CF : C5 80               	ld 		@-0x80(p1) 											; go to next line
(2)   35/    94D1 : 90 EB               	jmp 	CRG_Find 											; keep trying.
(2)   36/    94D3 :                     ;
(2)   37/    94D3 :                     ; ****************************************************************************************************************
(2)   38/    94D3 :                     ;												RUN command
(2)   39/    94D3 :                     ; ****************************************************************************************************************
(2)   40/    94D3 :                     
(2)   41/    94D3 :                     CMD_Run:	
(2)   42/    94D3 : (MACRO)             	lpi 	p1,ProgramBase 										; start from first line of program
(2)   42/    94D3 : C4 10                       ldi     (PROGRAMBASE) / 256
(2)   42/    94D5 : 35                          xpah    P1
(2)   42/    94D6 : C4 00                       ldi     (PROGRAMBASE) & 255
(2)   42/    94D8 : 31                          xpal    P1
(2)   43/    94D9 :                     CRG_ExecuteFromP1:
(2)   44/    94D9 : 90 0D               	jmp 	CheckLastCommandThenExecute 						; check if the last command and if not execute.
(2)   45/    94DB :                     
(2)   46/    94DB :                     CRG_Over:
(2)   47/    94DB :                     
(1)   23/    94DB :                     
(1)   24/    94DB :                     ; ****************************************************************************************************************
(1)   25/    94DB :                     ;								Command execution complete, check for error
 AS V1.42 Beta [Bld 102] - source file minol.asm(execute.asm) - page 25 - 1/12/2016 21:04:25


(1)   26/    94DB :                     ; ****************************************************************************************************************
(1)   27/    94DB :                     
(1)   28/    94DB :                     EndOfCommandExecution:
(1)   29/    94DB : 06                  	csa 														; check CY/L error flag
(1)   30/    94DC : 94 12               	jp 		GotoCommandLine 									; if CY/L = 0 error so go to command line.
(1)   31/    94DE :                     
(1)   32/    94DE :                     ; ****************************************************************************************************************
(1)   33/    94DE :                     ;	Come here to execute the instruction P1 points to, after having executed, e.g. skips forward to : or NULL
(1)   34/    94DE :                     ; ****************************************************************************************************************
(1)   35/    94DE :                     
(1)   36/    94DE :                     ExecuteNextInstruction:
(1)   37/    94DE : C5 01               	ld 		@1(p1) 												; get next and skip
(1)   38/    94E0 : 98 06               	jz 		CheckLastCommandThenExecute							; if NULL, check if running mode and continue if so.
(1)   39/    94E2 : E4 3A               	xri 	':'
(1)   40/    94E4 : 9C F8               	jnz 	ExecuteNextInstruction 								; keep going until colon read.
(1)   41/    94E6 : 90 21               	jmp 	ExecuteFromAddressDirect 							; run code from the address given.
(1)   42/    94E8 :                     ;
(1)   43/    94E8 :                     ;	Test to see if the line is not the last one (e.g. offset is +ve) and if so, execute its code.
(1)   44/    94E8 :                     ;
(1)   45/    94E8 :                     CheckLastCommandThenExecute:
(1)   46/    94E8 : C1 00               	ld 		(p1) 												; look at the offset to next.
(1)   47/    94EA : 94 11               	jp 		ExecuteFromCommandStart 							; if +ve value, execute the line here.
(1)   48/    94EC :                     ;
(1)   49/    94EC :                     ;	Have reached the end of the program. The buffer with typed commands has $FF on the end to 'fake' this.
(1)   50/    94EC :                     ; 	e.g. when it reaches the end of that command it thinks it's dropped off the top of the program
(1)   51/    94EC :                     ;
(1)   52/    94EC : 03                  	scl 														; there is no error.
(1)   53/    94ED : C4 FF               	ldi 	ERRC_End 											; set the error code to "End"
(1)   54/    94EF : 01                  	xae
(1)   55/    94F0 :                     GotoCommandLine: 												; return to Command Line with CY/L = error and E = code
(1)   56/    94F0 : (MACRO)             	lpi 	p3,ConsoleStart-1
(1)   56/    94F0 : C4 97                       ldi     (CONSOLESTART-1) / 256
(1)   56/    94F2 : 37                          xpah    P3
(1)   56/    94F3 : C4 EB                       ldi     (CONSOLESTART-1) & 255
(1)   56/    94F5 : 33                          xpal    P3
(1)   57/    94F6 : 3F                  	xppc 	p3
(1)   58/    94F7 :                     ;
(1)   59/    94F7 :                     ;	Syntax error comes here.
(1)   60/    94F7 :                     ;
(1)   61/    94F7 :                     SyntaxError:
(1)   62/    94F7 : C4 05               	ldi 	ERRC_Syntax
(1)   63/    94F9 : 01                  	xae
(1)   64/    94FA : 02                  	ccl
(1)   65/    94FB : 90 F3               	jmp 	GotoCommandLine
(1)   66/    94FD :                     
(1)   67/    94FD :                     ; ****************************************************************************************************************
(1)   68/    94FD :                     ;	  Execute from the instruction at P1 (preceded by offset, line number), which is known to be a valid line.
(1)   69/    94FD :                     ; ****************************************************************************************************************
(1)   70/    94FD :                     
(1)   71/    94FD :                     ExecuteFromCommandStart:
(1)   72/    94FD : (MACRO)             	lpi 	p3,CurrentLine 										; point P3 to the current line
(1)   72/    94FD : C4 0C                       ldi     (CURRENTLINE) / 256
(1)   72/    94FF : 37                          xpah    P3
(1)   72/    9500 : C4 8D                       ldi     (CURRENTLINE) & 255
(1)   72/    9502 : 33                          xpal    P3
(1)   73/    9503 : C1 01               	ld 		1(p1) 												; read the line number 
(1)   74/    9505 : CB 00               	st 		(p3)												; and save it - current line # updated.
(1)   75/    9507 : C5 02               	ld 		@2(p1) 												; skip over offset (+0) line number (+1)
(1)   76/    9509 :                     
(1)   77/    9509 :                     ; ****************************************************************************************************************
 AS V1.42 Beta [Bld 102] - source file minol.asm(execute.asm) - page 26 - 1/12/2016 21:04:25


(1)   78/    9509 :                     ;				Run command where the instruction is at P1 (e.g. it is an ASCIIZ string)
(1)   79/    9509 :                     ; ****************************************************************************************************************
(1)   80/    9509 :                     
(1)   81/    9509 :                     ExecuteFromAddressDirect:
(1)   82/    9509 : C5 01               	ld 		@1(p1) 												; read next character
(1)   83/    950B : 98 DB               	jz 		CheckLastCommandThenExecute 						; if \0 then check for the next line.
(1)   84/    950D : E4 20               	xri	 	' '
(1)   85/    950F : 98 F8               	jz 		ExecuteFromAddressDirect 							; skip over spaces.
(1)   86/    9511 : E4 1A               	xri 	' '!':'												
(1)   87/    9513 : 98 F4               	jz 		ExecuteFromAddressDirect 							; skip over colons.
(1)   88/    9515 : E4 18               	xri 	':'!'"'					
(1)   89/    9517 : 98 C5               	jz 		ExecuteNextInstruction 								; if double quote (comment) found go to next instruction.
(1)   90/    9519 :                     ;
(1)   91/    9519 :                     ;	Now look the command up in the command list.
(1)   92/    9519 :                     ;
(1)   93/    9519 : C1 FF               	ld 		-1(p1) 												; read first character of command again
(1)   94/    951B : 01                  	xae 														; put in E.
(1)   95/    951C : (MACRO)             	lpi 	p3,CommandList
(1)   95/    951C : C4 96                       ldi     (COMMANDLIST) / 256
(1)   95/    951E : 37                          xpah    P3
(1)   95/    951F : C4 FA                       ldi     (COMMANDLIST) & 255
(1)   95/    9521 : 33                          xpal    P3
(1)   96/    9522 :                     EAFD_Search:
(1)   97/    9522 : C7 05               	ld 		@5(p3) 												; read first character and bump to next.
(1)   98/    9524 : 98 2C               	jz 		EAFD_LETCode 										; if zero then give up.
(1)   99/    9526 : 60                  	xre 														; same as first character ?
(1)  100/    9527 : 9C F9               	jnz		EAFD_Search 										; no, keep looking.
(1)  101/    9529 :                     
(1)  102/    9529 : C3 FC               	ld 		-4(p3) 												; read 2nd character
(1)  103/    952B : E1 00               	xor 	(p1) 												; compare against actual second character
(1)  104/    952D : 9C F3               	jnz 	EAFD_Search
(1)  105/    952F :                     ;
(1)  106/    952F :                     ;	Skip over characters in the command, checking for NULL and : which would be syntax errors.
(1)  107/    952F :                     ;
(1)  108/    952F : C3 FD               	ld 		-3(p3) 												; number of characters to skip (one less than total as one skipped)
(1)  109/    9531 : CA FF               	st 		-1(p2) 												; temporary count.
(1)  110/    9533 :                     EAFD_Skip:
(1)  111/    9533 : C5 01               	ld 		@1(p1) 												; read a character and skip
(1)  112/    9535 : 98 C0               	jz 		SyntaxError 										; if zero, then syntax error
(1)  113/    9537 : E4 3A               	xri 	':'
(1)  114/    9539 : 98 BC               	jz 		SyntaxError 										; if colon, then syntax error.
(1)  115/    953B : BA FF               	dld 	-1(p2) 												; do it the requisite number of times.
(1)  116/    953D : 9C F4               	jnz 	EAFD_Skip
(1)  117/    953F :                     ;
(1)  118/    953F :                     ;	Skip over any subsequent spaces
(1)  119/    953F :                     ;
(1)  120/    953F :                     EAFD_SkipSpaces:
(1)  121/    953F : C5 01               	ld 		@1(p1) 												; check for spaces
(1)  122/    9541 : E4 20               	xri 	' '													; space found
(1)  123/    9543 : 98 FA               	jz 		EAFD_SkipSpaces
(1)  124/    9545 : C5 FF               	ld 		@-1(p1) 											; undo last fetch so first character of next bit.
(1)  125/    9547 :                     ;
(1)  126/    9547 :                     ;	P1 is set up so execute the handler.
(1)  127/    9547 :                     ;
(1)  128/    9547 : C3 FE               	ld 		-2(p3)												; get execute LSB
(1)  129/    9549 : 01                  	xae 														; save in E
(1)  130/    954A : C3 FF               	ld 		-1(p3) 												; get execute MSB
(1)  131/    954C : 37                  	xpah 	p3 													; put in P3.H
(1)  132/    954D : 40                  	lde 														; copy E to P3.L
(1)  133/    954E : 33                  	xpal 	p3
 AS V1.42 Beta [Bld 102] - source file minol.asm(execute.asm) - page 27 - 1/12/2016 21:04:25


(1)  134/    954F : 3F                  	xppc 	p3
(1)  135/    9550 : 90 0B               	jmp 	EvaluateExpression 									; is set up to have immediate evaluate call.
(1)  136/    9552 :                     ;
(1)  137/    9552 :                     ;	Couldn't find a command, so point P1 to first character, then call the LET code.
(1)  138/    9552 :                     ;
(1)  139/    9552 :                     EAFD_LETCode:
(1)  140/    9552 : C5 FF               	ld 		@-1(p1) 											; point P1 to first character of command.
(1)  141/    9554 : (MACRO)             	lpi 	p3,CMD_Let-1 										; go execute LET with evaluate re-entrancy
(1)  141/    9554 : C4 94                       ldi     (CMD_LET-1) / 256
(1)  141/    9556 : 37                          xpah    P3
(1)  141/    9557 : C4 0F                       ldi     (CMD_LET-1) & 255
(1)  141/    9559 : 33                          xpal    P3
(1)  142/    955A : 3F                  	xppc 	p3
(1)  143/    955B : 90 00               	jmp 	EvaluateExpression
(1)  144/    955D :                     
(1)  145/    955D :                     	include source\expression.asm 								; expression evaluator.
(2)    1/    955D :                     ; ****************************************************************************************************************
(2)    2/    955D :                     ; ****************************************************************************************************************
(2)    3/    955D :                     ;
(2)    4/    955D :                     ;												Expression Evaluation
(2)    5/    955D :                     ;
(2)    6/    955D :                     ; ****************************************************************************************************************
(2)    7/    955D :                     ; ****************************************************************************************************************
(2)    8/    955D :                     
(2)    9/    955D :                     ; ****************************************************************************************************************
(2)   10/    955D :                     ; ****************************************************************************************************************
(2)   11/    955D :                     ;
(2)   12/    955D :                     ;		Evaluate expression at P1. Return 	CY/L = 0 : Error 	E = Error Code
(2)   13/    955D :                     ;											CY/L = 1 : Okay 	E = Result
(2)   14/    955D :                     ;
(2)   15/    955D :                     ;		Terms are : 	A-Z 			Variables
(2)   16/    955D :                     ;						[0-9]+			Constants
(2)   17/    955D :                     ;						! 				Random byte
(2)   18/    955D :                     ;						'?'				Character constant
(2)   19/    955D :                     ;						(<expr>,<expr>)	Read Memory location
(2)   20/    955D :                     ;
(2)   21/    955D :                     ; ****************************************************************************************************************
(2)   22/    955D :                     ; ****************************************************************************************************************
(2)   23/    955D :                     
(2)   24/    955D : =0x1                EEX_PendingOp = 1 												; offset to pending operation
(2)   25/    955D : =0x0                EEX_Value = 0 													; offset to value
(2)   26/    955D :                     
(2)   27/    955D :                     EvaluateExpression:
(2)   28/    955D : (MACRO)             	pushp 	p3 													; save P3 on stack
(2)   28/    955D : 37                          xpah    P3
(2)   28/    955E : CE FF                       st              @-1(p2)
(2)   28/    9560 : 33                          xpal    P3
(2)   28/    9561 : CE FF                       st              @-1(p2)
(2)   29/    9563 : C4 2B               	ldi 	'+'													; push pending operation on stack
(2)   30/    9565 : CE FF               	st 		@-1(p2)
(2)   31/    9567 : C4 00               	ldi 	0 													; push current value on stack
(2)   32/    9569 : CE FF               	st 		@-1(p2)												; effectively this puts 0+ on the front of the expression.
(2)   33/    956B :                     
(2)   34/    956B :                     ; ****************************************************************************************************************
(2)   35/    956B :                     ;													Get Next Term
(2)   36/    956B :                     ; ****************************************************************************************************************
(2)   37/    956B :                     
(2)   38/    956B :                     EEX_Term:
(2)   39/    956B : (MACRO)             	lpi 	p3,Variables 										; point P3 to variables
(2)   39/    956B : C4 0C                       ldi     (VARIABLES) / 256
 AS V1.42 Beta [Bld 102] - source file minol.asm(expression.asm) - page 28 - 1/12/2016 21:04:25


(2)   39/    956D : 37                          xpah    P3
(2)   39/    956E : C4 90                       ldi     (VARIABLES) & 255
(2)   39/    9570 : 33                          xpal    P3
(2)   40/    9571 :                     EEX_NextChar:
(2)   41/    9571 : C1 00               	ld 		(p1) 												; look at character
(2)   42/    9573 : 98 4F               	jz 		EEX_TermError
(2)   43/    9575 : C5 01               	ld 		@1(p1) 												; fetch and skip over.
(2)   44/    9577 : E4 20               	xri 	' '													; is it space ?
(2)   45/    9579 : 98 F6               	jz 		EEX_NextChar
(2)   46/    957B : E4 08               	xri 	' '!'('												; is it memory access ?
(2)   47/    957D : 98 55               	jz 		EEX_MemoryAccess
(2)   48/    957F : E4 09               	xri 	'('!'!'												; is it a random value ?
(2)   49/    9581 : 9C 1B               	jnz 	EEX_NotRandom
(2)   50/    9583 :                     
(2)   51/    9583 :                     ; ****************************************************************************************************************
(2)   52/    9583 :                     ;												Term is ! (random byte)
(2)   53/    9583 :                     ; ****************************************************************************************************************
(2)   54/    9583 :                     
(2)   55/    9583 :                     EEX_Random:
(2)   56/    9583 : 02                  	ccl 	
(2)   57/    9584 : C3 FF               	ld 		RandomSeed+1-Variables(p3) 							; shift the seed right
(2)   58/    9586 : 1F                  	rrl
(2)   59/    9587 : CB FF               	st 		RandomSeed+1-Variables(p3)
(2)   60/    9589 : 01                  	xae 														; put MSB in E
(2)   61/    958A : C3 FE               	ld 		RandomSeed-Variables(p3)
(2)   62/    958C : 1F                  	rrl
(2)   63/    958D : CB FE               	st 		RandomSeed-Variables(p3)
(2)   64/    958F : 60                  	xre 														; XOR E into LSB
(2)   65/    9590 : 01                  	xae
(2)   66/    9591 : 06                  	csa 														; if CY/L is zero
(2)   67/    9592 : D4 80               	ani 	0x80
(2)   68/    9594 : 9C 06               	jnz 	EEX_NoTap 
(2)   69/    9596 : C3 FF               	ld 		RandomSeed+1-Variables(p3) 							; XOR MSB with $B4
(2)   70/    9598 : E4 B4               	xri 	0xB4
(2)   71/    959A : CB FF               	st 		RandomSeed+1-Variables(p3)
(2)   72/    959C :                     EEX_NoTap:
(2)   73/    959C : 90 64               	jmp 	EEX_HaveTerm
(2)   74/    959E :                     
(2)   75/    959E :                     EEX_NotRandom:
(2)   76/    959E : E4 06               	xri 	'!'!0x27											; is it a quote ?
(2)   77/    95A0 : 9C 0F               	jnz 	EEX_NotQuote
(2)   78/    95A2 :                     
(2)   79/    95A2 :                     ; ****************************************************************************************************************
(2)   80/    95A2 :                     ;													Term is '<char>'
(2)   81/    95A2 :                     ; ****************************************************************************************************************
(2)   82/    95A2 :                     
(2)   83/    95A2 : C1 00               	ld 		(p1) 												; get character that is quoted
(2)   84/    95A4 : 98 1E               	jz 		EEX_TermError 										; if zero, error.
(2)   85/    95A6 : 01                  	xae 														; save in E if okay character.
(2)   86/    95A7 : C1 01               	ld 		1(p1) 												; get character after that
(2)   87/    95A9 : E4 27               	xri 	0x27 												; is it a quote ?
(2)   88/    95AB : 9C 17               	jnz 	EEX_TermError
(2)   89/    95AD : C5 02               	ld 		@2(p1) 												; skip over character and quote
(2)   90/    95AF : 90 51               	jmp 	EEX_HaveTerm 										; and execute as if a legal term
(2)   91/    95B1 :                     
(2)   92/    95B1 :                     ; ****************************************************************************************************************
(2)   93/    95B1 :                     ;									Not 'x' or !, so test for 0-9 and A-Z
(2)   94/    95B1 :                     ; ****************************************************************************************************************
(2)   95/    95B1 :                     
(2)   96/    95B1 :                     EEX_NotQuote:
 AS V1.42 Beta [Bld 102] - source file minol.asm(expression.asm) - page 29 - 1/12/2016 21:04:25


(2)   97/    95B1 : C1 FF               	ld 		-1(p1)												; get old character.
(2)   98/    95B3 : 02                  	ccl
(2)   99/    95B4 : F4 A5               	adi 	255-'Z'												; if >= 'Z' then error.										
(2)  100/    95B6 : 94 0C               	jp 		EEX_TermError
(2)  101/    95B8 : F4 1A               	adi 	26 													; will be 0..25 if A..Z
(2)  102/    95BA : 94 42               	jp 		EEX_Variable 										; so do as a variable.
(2)  103/    95BC : F4 07               	adi 	'A'-1-'9'											; check if > 9
(2)  104/    95BE : 94 04               	jp 		EEX_TermError
(2)  105/    95C0 : F4 0A               	adi 	10 													; if 0-9
(2)  106/    95C2 : 94 1D               	jp 		EEX_Constant
(2)  107/    95C4 :                     
(2)  108/    95C4 :                     ; ****************************************************************************************************************
(2)  109/    95C4 :                     ;													 Error Exit.
(2)  110/    95C4 :                     ; ****************************************************************************************************************
(2)  111/    95C4 :                     
(2)  112/    95C4 :                     EEX_TermError:
(2)  113/    95C4 : C4 04               	ldi 	ERRC_Term 											; put term error in A
(2)  114/    95C6 :                     EEX_Error:
(2)  115/    95C6 : 01                  	xae 														; put error code in E
(2)  116/    95C7 : 02                  	ccl 														; clear CY/L indicating error
(2)  117/    95C8 :                     EEX_Exit:
(2)  118/    95C8 : C6 02               	ld 		@2(p2) 												; throw the pending operation and value
(2)  119/    95CA : (MACRO)             	pullp 	p3 													; restore P3
(2)  119/    95CA : C6 01                       ld              @1(p2)
(2)  119/    95CC : 33                          xpal    P3
(2)  119/    95CD : C6 01                       ld              @1(p2)
(2)  119/    95CF : 37                          xpah    P3
(2)  120/    95D0 : 06                  	csa 														; put CY/L in A bit 7
(2)  121/    95D1 : 3F                  	xppc 	p3 													; and exit
(2)  122/    95D2 : 90 89               	jmp 	EvaluateExpression 									; make re-entrant
(2)  123/    95D4 :                     
(2)  124/    95D4 :                     ; ****************************************************************************************************************
(2)  125/    95D4 :                     ;										Handle (<expr>,<expr>)
(2)  126/    95D4 :                     ; ****************************************************************************************************************
(2)  127/    95D4 :                     
(2)  128/    95D4 :                     EEX_MemoryAccess:
(2)  129/    95D4 : C5 FF               	ld 		@-1(p1) 											; point to the (
(2)  130/    95D6 : (MACRO)             	lpi 	p3,EvaluateAddressPair-1 							; call the evaluate/read of (h,l)
(2)  130/    95D6 : C4 96                       ldi     (EVALUATEADDRESSPAIR-1) / 256
(2)  130/    95D8 : 37                          xpah    P3
(2)  130/    95D9 : C4 AF                       ldi     (EVALUATEADDRESSPAIR-1) & 255
(2)  130/    95DB : 33                          xpal    P3
(2)  131/    95DC : 3F                  	xppc 	p3
(2)  132/    95DD : 94 E9               	jp 		EEX_Exit 											; error occurred, so exit with it.
(2)  133/    95DF : 90 21               	jmp 	EEX_HaveTerm
(2)  134/    95E1 :                     
(2)  135/    95E1 :                     ; ****************************************************************************************************************
(2)  136/    95E1 :                     ;								Handle constant, first digit value is in A
(2)  137/    95E1 :                     ; ****************************************************************************************************************
(2)  138/    95E1 :                     
(2)  139/    95E1 :                     EEX_Constant:
(2)  140/    95E1 : 01                  	xae 														; put first digit value in E
(2)  141/    95E2 :                     EEX_ConstantLoop:
(2)  142/    95E2 : C1 00               	ld 		(p1) 												; get next character.
(2)  143/    95E4 : 02                  	ccl
(2)  144/    95E5 : F4 C6               	adi 	255-'9' 											; if >= 9 term is too large.
(2)  145/    95E7 : 94 19               	jp 		EEX_HaveTerm
(2)  146/    95E9 : F4 8A               	adi 	10+128
(2)  147/    95EB : 94 15               	jp 		EEX_HaveTerm
(2)  148/    95ED : 02                  	ccl
 AS V1.42 Beta [Bld 102] - source file minol.asm(expression.asm) - page 30 - 1/12/2016 21:04:25


(2)  149/    95EE : 40                  	lde 														; A = n
(2)  150/    95EF : 70                  	ade 														; A = n * 2
(2)  151/    95F0 : 70                  	ade 														; A = n * 3
(2)  152/    95F1 : 70                  	ade 														; A = n * 4
(2)  153/    95F2 : 70                  	ade 														; A = n * 5
(2)  154/    95F3 : 01                  	xae 														; E = n * 5
(2)  155/    95F4 : C5 01               	ld 		@1(p1) 												; read character convert to number
(2)  156/    95F6 : D4 0F               	ani 	0x0F
(2)  157/    95F8 : 02                  	ccl
(2)  158/    95F9 : 70                  	ade 														; Add n*5 twice
(2)  159/    95FA : 70                  	ade 
(2)  160/    95FB : 01                  	xae
(2)  161/    95FC : 90 E4               	jmp 	EEX_ConstantLoop
(2)  162/    95FE :                     
(2)  163/    95FE :                     
(2)  164/    95FE :                     ; ****************************************************************************************************************
(2)  165/    95FE :                     ;									Access variable, variable id (0-25) in A
(2)  166/    95FE :                     ; ****************************************************************************************************************
(2)  167/    95FE :                     
(2)  168/    95FE :                     EEX_Variable:
(2)  169/    95FE : 01                  	xae 														; put value 0-25 in E
(2)  170/    95FF : C3 80               	ld 		-0x80(p3) 											; load using E as index
(2)  171/    9601 : 01                  	xae 														; put in E
(2)  172/    9602 :                     
(2)  173/    9602 :                     ; ****************************************************************************************************************
(2)  174/    9602 :                     ;										Have the right term in E, process it
(2)  175/    9602 :                     ; ****************************************************************************************************************
(2)  176/    9602 :                     
(2)  177/    9602 :                     EEX_HaveTerm:
(2)  178/    9602 : C2 01               	ld 		EEX_PendingOp(p2) 									; get pending operation.
(2)  179/    9604 : E4 2B               	xri 	'+'
(2)  180/    9606 : 9C 06               	jnz 	EEX_NotAdd
(2)  181/    9608 :                     
(2)  182/    9608 :                     ; ****************************************************************************************************************
(2)  183/    9608 :                     ;												Add Right Term to Value
(2)  184/    9608 :                     ; ****************************************************************************************************************
(2)  185/    9608 : 02                  	ccl
(2)  186/    9609 : C2 00               	ld 		EEX_Value(p2)										; get value
(2)  187/    960B : 70                  	ade 														; add right
(2)  188/    960C : 90 08               	jmp 	EEX_SaveAndExit 									; save and exit
(2)  189/    960E :                     
(2)  190/    960E :                     EEX_NotAdd:
(2)  191/    960E : E4 06               	xri 	'+'!'-'
(2)  192/    9610 : 9C 12               	jnz		EEX_NotSubtract
(2)  193/    9612 :                     
(2)  194/    9612 :                     ; ****************************************************************************************************************
(2)  195/    9612 :                     ;											 Subtract Right Term from Value
(2)  196/    9612 :                     ; ****************************************************************************************************************
(2)  197/    9612 : 03                  	scl
(2)  198/    9613 : C2 00               	ld 		EEX_Value(p2)										; get value
(2)  199/    9615 : 78                  	cae 														; subtract right
(2)  200/    9616 :                     EEX_SaveAndExit:
(2)  201/    9616 : CA 00               	st 		EEX_Value(p2) 										; save value back
(2)  202/    9618 : 90 30               	jmp 	EEX_CheckNextOperation 								; and exit, look for next operator.
(2)  203/    961A :                     
(2)  204/    961A :                     EEX_Divide_Zero:												; handle divide by zero error.
(2)  205/    961A : C4 07               	ldi 	ERRC_DivZero
(2)  206/    961C : 90 A8               	jmp 	EEX_Error
(2)  207/    961E :                     
(2)  208/    961E :                     EEX_EndExpression:
 AS V1.42 Beta [Bld 102] - source file minol.asm(expression.asm) - page 31 - 1/12/2016 21:04:25


(2)  209/    961E : C2 00               	ld 		EEX_Value(p2) 										; get current value
(2)  210/    9620 : 01                  	xae 														; put in E
(2)  211/    9621 : 03                  	scl 														; set CY/L indicating expression okay.
(2)  212/    9622 : 90 A4               	jmp 	EEX_Exit 											; and exit.
(2)  213/    9624 :                     
(2)  214/    9624 :                     EEX_NotSubtract:
(2)  215/    9624 : E4 07               	xri 	'-'!'*'
(2)  216/    9626 : 9C 45               	jnz 	EEX_Divide
(2)  217/    9628 :                     
(2)  218/    9628 :                     ; ****************************************************************************************************************
(2)  219/    9628 :                     ;											 Multiply Right Term into Value
(2)  220/    9628 :                     ; ****************************************************************************************************************
(2)  221/    9628 :                     
(2)  222/    9628 : C2 00               	ld 		EEX_Value(p2) 										; a = left value
(2)  223/    962A : CA 01               	st 		1(p2)
(2)  224/    962C : C4 00               	ldi 	0													; res = 0(p2)
(2)  225/    962E : CA 00               	st 		0(p2) 												; clear it.
(2)  226/    9630 :                     EEX_MultiplyLoop:
(2)  227/    9630 : 40                  	lde  														; if B == 0 then we are done.
(2)  228/    9631 : 98 17               	jz 		EEX_CheckNextOperation
(2)  229/    9633 : D4 01               	ani 	1 													; if B LSB is non zero.
(2)  230/    9635 : 98 07               	jz 		EEX_Multiply_B0IsZero
(2)  231/    9637 : C2 00               	ld 		0(p2) 												; add A to Result
(2)  232/    9639 : 02                  	ccl
(2)  233/    963A : F2 01               	add 	1(p2)
(2)  234/    963C : CA 00               	st 		0(p2)
(2)  235/    963E :                     EEX_Multiply_B0IsZero:
(2)  236/    963E : 40                  	lde 														; shift B right
(2)  237/    963F : 1C                  	sr
(2)  238/    9640 : 01                  	xae
(2)  239/    9641 : C2 01               	ld 		1(p2) 												; shift A left
(2)  240/    9643 : 02                  	ccl
(2)  241/    9644 : F2 01               	add 	1(p2)
(2)  242/    9646 : CA 01               	st 		1(p2)
(2)  243/    9648 : 90 E6               	jmp 	EEX_MultiplyLoop
(2)  244/    964A :                     
(2)  245/    964A :                     ; ****************************************************************************************************************
(2)  246/    964A :                     ;											Check next operation
(2)  247/    964A :                     ; ****************************************************************************************************************
(2)  248/    964A :                     
(2)  249/    964A :                     EEX_CheckNextOperation:
(2)  250/    964A : C5 01               	ld 		@1(p1)												; skip over spaces
(2)  251/    964C : E4 20               	xri 	' '
(2)  252/    964E : 98 FA               	jz 		EEX_CheckNextOperation
(2)  253/    9650 : C5 FF               	ld 		@-1(p1)												; get operator
(2)  254/    9652 : E4 2B               	xri 	'+'													; check if + - * /
(2)  255/    9654 : 98 0C               	jz 		EEX_FoundOperator
(2)  256/    9656 : E4 06               	xri 	'+'!'-'
(2)  257/    9658 : 98 08               	jz 		EEX_FoundOperator
(2)  258/    965A : E4 07               	xri 	'-'!'*'
(2)  259/    965C : 98 04               	jz 		EEX_FoundOperator
(2)  260/    965E : E4 05               	xri 	'*'!'/'
(2)  261/    9660 : 9C BC               	jnz 	EEX_EndExpression
(2)  262/    9662 :                     
(2)  263/    9662 :                     EEX_FoundOperator:
(2)  264/    9662 : C5 01               	ld  	@1(p1) 												; get and skip operator
(2)  265/    9664 : CA 01               	st 		EEX_PendingOp(p2)									; save then pending operator
(2)  266/    9666 : (MACRO)             	lpi 	p3,EEX_Term-1
(2)  266/    9666 : C4 95                       ldi     (EEX_TERM-1) / 256
(2)  266/    9668 : 37                          xpah    P3
 AS V1.42 Beta [Bld 102] - source file minol.asm(expression.asm) - page 32 - 1/12/2016 21:04:25


(2)  266/    9669 : C4 6A                       ldi     (EEX_TERM-1) & 255
(2)  266/    966B : 33                          xpal    P3
(2)  267/    966C : 3F                  	xppc 	p3
(2)  268/    966D :                     
(2)  269/    966D :                     ; ****************************************************************************************************************
(2)  270/    966D :                     ;											 Divide Right Term into Value
(2)  271/    966D :                     ; ****************************************************************************************************************
(2)  272/    966D :                     
(2)  273/    966D :                     EEX_Divide:
(2)  274/    966D : 40                  	lde 														; if denominator zero, error 2.
(2)  275/    966E : 98 AA               	jz 		EEX_Divide_Zero
(2)  276/    9670 : C2 00               	ld 		0(p2) 												; numerator into 1(p2)
(2)  277/    9672 : CA 01               	st 		1(p2) 												; denominator is in E
(2)  278/    9674 : C4 00               	ldi 	0
(2)  279/    9676 : CA 00               	st 		0(p2)												; quotient in 0(p2)
(2)  280/    9678 : CA FF               	st 		-1(p2) 												; remainder in -1(p2)
(2)  281/    967A : C4 80               	ldi 	0x80 									
(2)  282/    967C : CA FE               	st 		-2(p2) 												; bit in -2(p2)
(2)  283/    967E :                     
(2)  284/    967E :                     EEX_Divide_Loop:
(2)  285/    967E : C2 FE               	ld 		-2(p2) 												; exit if bit = 0,we've finished.
(2)  286/    9680 : 98 C8               	jz 		EEX_CheckNextOperation
(2)  287/    9682 :                     
(2)  288/    9682 : 02                  	ccl 	 													; shift remainder left.
(2)  289/    9683 : C2 FF               	ld 		-1(p2)
(2)  290/    9685 : F2 FF               	add 	-1(p2)
(2)  291/    9687 : CA FF               	st 		-1(p2)
(2)  292/    9689 :                     
(2)  293/    9689 : C2 01               	ld 		1(p2)												; get numerator.
(2)  294/    968B : 94 02               	jp 		EEX_Divide_Numerator_Positive
(2)  295/    968D : AA FF               	ild 	-1(p2)  											; if numerator -ve, increment remainder.
(2)  296/    968F :                     EEX_Divide_Numerator_Positive:
(2)  297/    968F :                     
(2)  298/    968F : C2 FF               	ld 		-1(p2) 												; calculate remainder - denominator
(2)  299/    9691 : 03                  	scl
(2)  300/    9692 : 78                  	cae 
(2)  301/    9693 : CA FD               	st 		-3(p2) 												; save in temp -3(p2)
(2)  302/    9695 : 06                  	csa 														; if temp >= 0, CY/L is set
(2)  303/    9696 : 94 0A               	jp 		EEX_Divide_Temp_Positive
(2)  304/    9698 :                     
(2)  305/    9698 : C2 FD               	ld 		-3(p2) 												; copy temp to remainder
(2)  306/    969A : CA FF               	st 		-1(p2)
(2)  307/    969C : C2 FE               	ld 		-2(p2) 												; or bit into quotient
(2)  308/    969E : DA 00               	or 		0(p2)
(2)  309/    96A0 : CA 00               	st 		0(p2)
(2)  310/    96A2 :                     EEX_Divide_Temp_Positive:
(2)  311/    96A2 : C2 FE               	ld 		-2(p2) 												; shift bit right
(2)  312/    96A4 : 1C                  	sr
(2)  313/    96A5 : CA FE               	st 		-2(p2)
(2)  314/    96A7 :                     
(2)  315/    96A7 : C2 01               	ld 		1(p2)												; shift numerator positive
(2)  316/    96A9 : 02                  	ccl
(2)  317/    96AA : F2 01               	add 	1(p2)
(2)  318/    96AC : CA 01               	st 		1(p2)
(2)  319/    96AE : 90 CE               	jmp 	EEX_Divide_Loop
(2)  320/    96B0 :                     
(2)  321/    96B0 :                     ; ****************************************************************************************************************
(2)  322/    96B0 :                     ; ****************************************************************************************************************
(2)  323/    96B0 :                     ;
(2)  324/    96B0 :                     ;	Evaluate an address pair at P1 e.g. (<expr>,<expr>).  Returns as for expression, but stack-2, stack-1 are
 AS V1.42 Beta [Bld 102] - source file minol.asm(expression.asm) - page 33 - 1/12/2016 21:04:25


(2)  325/    96B0 :                     ;	the address (the data at that address is in E if no error occurs). Used for reading and writing.
(2)  326/    96B0 :                     ;
(2)  327/    96B0 :                     ; ****************************************************************************************************************
(2)  328/    96B0 :                     ; ****************************************************************************************************************
(2)  329/    96B0 :                     
(2)  330/    96B0 :                     EvaluateAddressPair:
(2)  331/    96B0 : C6 FE               	ld 		@-2(p2)												; make space to store HL
(2)  332/    96B2 : (MACRO)             	pushp 	p3 													; save return address.
(2)  332/    96B2 : 37                          xpah    P3
(2)  332/    96B3 : CE FF                       st              @-1(p2)
(2)  332/    96B5 : 33                          xpal    P3
(2)  332/    96B6 : CE FF                       st              @-1(p2)
(2)  333/    96B8 : C1 00               	ld 		(p1) 												; check first is '(', exit with term error if not
(2)  334/    96BA : E4 28               	xri 	'('
(2)  335/    96BC : 9C 2E               	jnz 	EAP_Error
(2)  336/    96BE : C5 01               	ld 		@1(p1)												; skip over it.
(2)  337/    96C0 : (MACRO)             	lpi 	p3,EvaluateExpression-1 							; evaluate H
(2)  337/    96C0 : C4 95                       ldi     (EVALUATEEXPRESSION-1) / 256
(2)  337/    96C2 : 37                          xpah    P3
(2)  337/    96C3 : C4 5C                       ldi     (EVALUATEEXPRESSION-1) & 255
(2)  337/    96C5 : 33                          xpal    P3
(2)  338/    96C6 : 3F                  	xppc 	p3
(2)  339/    96C7 : 94 27               	jp 		EAP_Exit 											; exit if failed
(2)  340/    96C9 : 40                  	lde 														; store H at 3(P2)
(2)  341/    96CA : CA 03               	st 		3(p2)
(2)  342/    96CC : C1 00               	ld 		(p1) 												; check for ','
(2)  343/    96CE : E4 2C               	xri 	','
(2)  344/    96D0 : 9C 1A               	jnz 	EAP_Error											; fail if not present
(2)  345/    96D2 : C5 01               	ld 		@1(p1)												; skip over comma
(2)  346/    96D4 : 3F                  	xppc 	p3 													; evaluate L
(2)  347/    96D5 : 94 19               	jp 		EAP_Exit 											; exit on error
(2)  348/    96D7 : 40                  	lde 														; store L at 2(P2)
(2)  349/    96D8 : CA 02               	st 		2(p2)
(2)  350/    96DA : 33                  	xpal 	p3 													; and put in P3.L for later
(2)  351/    96DB : C1 00               	ld 		(p1) 												; check for ')'
(2)  352/    96DD : E4 29               	xri 	')'
(2)  353/    96DF : 9C 0B               	jnz 	EAP_Error
(2)  354/    96E1 : C5 01               	ld 		@1(p1) 												; skip over close bracket
(2)  355/    96E3 : C2 03               	ld 		3(p2) 												; put 3(P2) in P3.H
(2)  356/    96E5 : 37                  	xpah 	p3
(2)  357/    96E6 : C3 00               	ld 		(p3) 												; read address
(2)  358/    96E8 : 01                  	xae 														; put in E
(2)  359/    96E9 : 03                  	scl 														; set carry to indicate okay
(2)  360/    96EA : 90 04               	jmp 	EAP_Exit 											; and exit.
(2)  361/    96EC :                     ;
(2)  362/    96EC :                     EAP_Error:
(2)  363/    96EC : C4 04               	ldi 	ERRC_TERM 											; set error up
(2)  364/    96EE : 01                  	xae
(2)  365/    96EF : 02                  	ccl
(2)  366/    96F0 :                     ;
(2)  367/    96F0 :                     EAP_Exit:														; exit
(2)  368/    96F0 : (MACRO)             	pullp 	p3 													; restore P3
(2)  368/    96F0 : C6 01                       ld              @1(p2)
(2)  368/    96F2 : 33                          xpal    P3
(2)  368/    96F3 : C6 01                       ld              @1(p2)
(2)  368/    96F5 : 37                          xpah    P3
(2)  369/    96F6 : C6 02               	ld 		@2(p2) 												; drop the H L address store
(2)  370/    96F8 : 06                  	csa 														; A bit 7 = CY/L
(2)  371/    96F9 : 3F                  	xppc 	p3
(2)  372/    96FA :                     
 AS V1.42 Beta [Bld 102] - source file minol.asm(expression.asm) - page 34 - 1/12/2016 21:04:25


(2)  373/    96FA :                     
(1)  146/    96FA :                     
(1)  147/    96FA :                     ; ****************************************************************************************************************
(1)  148/    96FA :                     ;		Command look up table - should be ordered by degree of usage, and OS things (e.g. LIST) at the end
(1)  149/    96FA :                     ; ****************************************************************************************************************
(1)  150/    96FA :                     
(1)  151/    96FA :                     CommandList:
(1)  152/    96FA : (MACRO)             	cmd 	'L','E',3,CMD_Let 									; LET var|(h,l) = <expr>
(1)  152/    96FA : 4C 45                       db              'L','E'                                                                                           ; first and second characters
(1)  152/    96FC : 02                          db              (3)-1                                                                                      ; 3 -1 (first char already skipped)
(1)  152/    96FD : 0F 94                       dw              (CMD_LET)-1                                                                                        ; execution point for prefetch.
(1)  153/    96FF : (MACRO)             	cmd 	'I','F',2,CMD_If 									; If [expr][=|#|<][expr]; [statement]
(1)  153/    96FF : 49 46                       db              'I','F'                                                                                           ; first and second characters
(1)  153/    9701 : 01                          db              (2)-1                                                                                      ; 2 -1 (first char already skipped)
(1)  153/    9702 : 62 94                       dw              (CMD_IF)-1                                                                                        ; execution point for prefetch.
(1)  154/    9704 : (MACRO)             	cmd 	'G','O',4,CMD_Goto									; GOTO [line number]
(1)  154/    9704 : 47 4F                       db              'G','O'                                                                                           ; first and second characters
(1)  154/    9706 : 03                          db              (4)-1                                                                                      ; 4 -1 (first char already skipped)
(1)  154/    9707 : B1 94                       dw              (CMD_GOTO)-1                                                                                        ; execution point for prefetch.
(1)  155/    9709 : (MACRO)             	cmd 	'C','A',4,CMD_Call									; CALL (high,low)
(1)  155/    9709 : 43 41                       db              'C','A'                                                                                           ; first and second characters
(1)  155/    970B : 03                          db              (4)-1                                                                                      ; 4 -1 (first char already skipped)
(1)  155/    970C : E6 93                       dw              (CMD_CALL)-1                                                                                        ; execution point for prefetch.
(1)  156/    970E : (MACRO)             	cmd 	'P','R',2,CMD_Print 								; PRINT ["<text>"|<expr>|$(h,l)][,....][;]
(1)  156/    970E : 50 52                       db              'P','R'                                                                                           ; first and second characters
(1)  156/    9710 : 01                          db              (2)-1                                                                                      ; 2 -1 (first char already skipped)
(1)  156/    9711 : 63 93                       dw              (CMD_PRINT)-1                                                                                        ; execution point for prefetch.
(1)  157/    9713 : (MACRO)             	cmd 	'C','L',5,CMD_Clear									; CLEAR
(1)  157/    9713 : 43 4C                       db              'C','L'                                                                                           ; first and second characters
(1)  157/    9715 : 04                          db              (5)-1                                                                                      ; 5 -1 (first char already skipped)
(1)  157/    9716 : 4E 93                       dw              (CMD_CLEAR)-1                                                                                        ; execution point for prefetch.
(1)  158/    9718 : (MACRO)             	cmd 	'I','N',2,CMD_In 									; IN [l-expr],$(H,L)
(1)  158/    9718 : 49 4E                       db              'I','N'                                                                                           ; first and second characters
(1)  158/    971A : 01                          db              (2)-1                                                                                      ; 2 -1 (first char already skipped)
(1)  158/    971B : AE 92                       dw              (CMD_IN)-1                                                                                        ; execution point for prefetch.
(1)  159/    971D : (MACRO)             	cmd 	'E','N',3,CMD_End 									; END
(1)  159/    971D : 45 4E                       db              'E','N'                                                                                           ; first and second characters
(1)  159/    971F : 02                          db              (3)-1                                                                                      ; 3 -1 (first char already skipped)
(1)  159/    9720 : A8 92                       dw              (CMD_END)-1                                                                                        ; execution point for prefetch.
(1)  160/    9722 : (MACRO)             	cmd 	'N','E',3,CMD_New 									; NEW
(1)  160/    9722 : 4E 45                       db              'N','E'                                                                                           ; first and second characters
(1)  160/    9724 : 02                          db              (3)-1                                                                                      ; 3 -1 (first char already skipped)
(1)  160/    9725 : 9E 92                       dw              (CMD_NEW)-1                                                                                        ; execution point for prefetch.
(1)  161/    9727 : (MACRO)             	cmd 	'R','U',3,CMD_Run									; RUN
(1)  161/    9727 : 52 55                       db              'R','U'                                                                                           ; first and second characters
(1)  161/    9729 : 02                          db              (3)-1                                                                                      ; 3 -1 (first char already skipped)
(1)  161/    972A : D2 94                       dw              (CMD_RUN)-1                                                                                        ; execution point for prefetch.
(1)  162/    972C : (MACRO)             	cmd 	'L','I',4,CMD_List 									; LIST
(1)  162/    972C : 4C 49                       db              'L','I'                                                                                           ; first and second characters
(1)  162/    972E : 03                          db              (4)-1                                                                                      ; 4 -1 (first char already skipped)
(1)  162/    972F : 5E 92                       dw              (CMD_LIST)-1                                                                                        ; execution point for prefetch.
(1)  163/    9731 : (MACRO)             	cmd 	'O','S',2,CMD_OS 									; OS
(1)  163/    9731 : 4F 53                       db              'O','S'                                                                                           ; first and second characters
(1)  163/    9733 : 01                          db              (2)-1                                                                                      ; 2 -1 (first char already skipped)
(1)  163/    9734 : 55 92                       dw              (CMD_OS)-1                                                                                        ; execution point for prefetch.
(1)  164/    9736 : 00                  	db 		0
(1)  165/    9737 :                     
(1)  166/    9737 :                     ; Done:	GOTO, RUN, CLEAR, NEW, END, OS, CALL, LET (and optional version),IF, LIST., PR
(1)  167/    9737 :                     ; Not Done: IN
      80/    9737 :                     	include source\manager.asm 									; manage program lines.
 AS V1.42 Beta [Bld 102] - source file minol.asm(manager.asm) - page 35 - 1/12/2016 21:04:25


(1)    1/    9737 :                     ; ****************************************************************************************************************
(1)    2/    9737 :                     ; ****************************************************************************************************************
(1)    3/    9737 :                     ;
(1)    4/    9737 :                     ;										Insert / Delete Program Lines
(1)    5/    9737 :                     ;
(1)    6/    9737 :                     ; ****************************************************************************************************************
(1)    7/    9737 :                     ; ****************************************************************************************************************
(1)    8/    9737 :                     
(1)    9/    9737 :                     ; ****************************************************************************************************************
(1)   10/    9737 :                     ; ****************************************************************************************************************
(1)   11/    9737 :                     ;
(1)   12/    9737 :                     ;						Delete program line 'E'. If program line does not exist, has no effect.
(1)   13/    9737 :                     ;
(1)   14/    9737 :                     ;	Sets up P3 to call insert program line next.
(1)   15/    9737 :                     ; ****************************************************************************************************************
(1)   16/    9737 :                     ; ****************************************************************************************************************
(1)   17/    9737 :                     
(1)   18/    9737 :                     DeleteLine:
(1)   19/    9737 : (MACRO)             	pushp	p3 													; save P3
(1)   19/    9737 : 37                          xpah    P3
(1)   19/    9738 : CE FF                       st              @-1(p2)
(1)   19/    973A : 33                          xpal    P3
(1)   19/    973B : CE FF                       st              @-1(p2)
(1)   20/    973D : 40                  	lde 														; push E on stack
(1)   21/    973E : CE FF               	st 		@-1(p2)
(1)   22/    9740 :                     ;
(1)   23/    9740 :                     ;	First find the line in question.
(1)   24/    9740 :                     ;
(1)   25/    9740 : (MACRO)             	lpi 	p3,ProgramBase 										; first, look for the line.
(1)   25/    9740 : C4 10                       ldi     (PROGRAMBASE) / 256
(1)   25/    9742 : 37                          xpah    P3
(1)   25/    9743 : C4 00                       ldi     (PROGRAMBASE) & 255
(1)   25/    9745 : 33                          xpal    P3
(1)   26/    9746 :                     DLN_Search:
(1)   27/    9746 : C3 00               	ld 		(p3)												; look at offset
(1)   28/    9748 : D4 80               	ani 	0x80
(1)   29/    974A : 9C 15               	jnz 	DLN_Exit 											; if -ve then end of program so exit.
(1)   30/    974C :                     
(1)   31/    974C : C3 00               	ld 		(p3) 												; reload offset to next.
(1)   32/    974E : 01                  	xae 														; put offset in E
(1)   33/    974F : C3 01               	ld 		1(p3) 												; read line number
(1)   34/    9751 : E2 00               	xor 	(p2)												; is it the required line number
(1)   35/    9753 : 98 04               	jz 		DLN_Delete  										; if so, delete line.
(1)   36/    9755 : C7 80               	ld 		@-0x80(p3) 											; use E as offset to next.
(1)   37/    9757 : 90 ED               	jmp 	DLN_Search 											; and try next one.
(1)   38/    9759 :                     ;
(1)   39/    9759 :                     DLN_Delete:
(1)   40/    9759 : C3 80               	ld 		-0x80(p3) 											; read ahead
(1)   41/    975B : CF 01               	st 		@1(p3) 												; save here and bump
(1)   42/    975D : E4 FF               	xri 	0xFF 												; until 0xFF is copied, which is end of program.
(1)   43/    975F : 9C F8               	jnz 	DLN_Delete
(1)   44/    9761 :                     ;
(1)   45/    9761 :                     DLN_Exit:
(1)   46/    9761 : C6 01               	ld 		@1(p2)												; pop E
(1)   47/    9763 : 01                  	xae
(1)   48/    9764 : (MACRO)             	pullp	p3													; pop P3
(1)   48/    9764 : C6 01                       ld              @1(p2)
(1)   48/    9766 : 33                          xpal    P3
(1)   48/    9767 : C6 01                       ld              @1(p2)
(1)   48/    9769 : 37                          xpah    P3
 AS V1.42 Beta [Bld 102] - source file minol.asm(manager.asm) - page 36 - 1/12/2016 21:04:25


(1)   49/    976A : 3F                  	xppc 	p3 													; and return.
(1)   50/    976B :                     
(1)   51/    976B :                     ; ****************************************************************************************************************
(1)   52/    976B :                     ; ****************************************************************************************************************
(1)   53/    976B :                     ;
(1)   54/    976B :                     ;									Insert line at line E, text at P1
(1)   55/    976B :                     ;
(1)   56/    976B :                     ;	Jams if line already present.
(1)   57/    976B :                     ; ****************************************************************************************************************
(1)   58/    976B :                     ; ****************************************************************************************************************
(1)   59/    976B :                     
(1)   60/    976B :                     InsertLine:
(1)   61/    976B : (MACRO)             	pushp 	p3 													; save P3
(1)   61/    976B : 37                          xpah    P3
(1)   61/    976C : CE FF                       st              @-1(p2)
(1)   61/    976E : 33                          xpal    P3
(1)   61/    976F : CE FF                       st              @-1(p2)
(1)   62/    9771 : (MACRO)             	pushe 														; save E , line number.
(1)   62/    9771 : 40                          lde
(1)   62/    9772 : CE FF                       st              @-1(p2)
(1)   63/    9774 :                     
(1)   64/    9774 : 35                  	xpah 	p1													; save P1 on stack without changing it.
(1)   65/    9775 : CE FF               	st 		@-1(p2)
(1)   66/    9777 : 35                  	xpah 	p1
(1)   67/    9778 : 31                  	xpal 	p1
(1)   68/    9779 : CE FF               	st 		@-1(p2)
(1)   69/    977B : 31                  	xpal 	p1
(1)   70/    977C : C4 00               	ldi 	0 													; this is the length of the string
(1)   71/    977E : CE FF               	st 		@-1(p2) 											; including the terminating zero.
(1)   72/    9780 :                     
(1)   73/    9780 :                     ILI_FindLength:
(1)   74/    9780 : AA 00               	ild 	(p2)												; increment length
(1)   75/    9782 : C5 01               	ld 		@1(p1) 												; fetch and bump
(1)   76/    9784 : 9C FA               	jnz 	ILI_FindLength
(1)   77/    9786 :                     
(1)   78/    9786 : (MACRO)             	lpi 	p3,ProgramBase 
(1)   78/    9786 : C4 10                       ldi     (PROGRAMBASE) / 256
(1)   78/    9788 : 37                          xpah    P3
(1)   78/    9789 : C4 00                       ldi     (PROGRAMBASE) & 255
(1)   78/    978B : 33                          xpal    P3
(1)   79/    978C :                     ILI_FindPosition:
(1)   80/    978C : C3 00               	ld 		(p3) 												; read offset
(1)   81/    978E : D4 80               	ani 	0x80 												; if negative, insert here.
(1)   82/    9790 : 9C 11               	jnz 	ILI_InsertHere
(1)   83/    9792 : C3 00               	ld 		(p3)												; put offset to next in E.
(1)   84/    9794 : 01                  	xae
(1)   85/    9795 : C2 03               	ld 		3(p2) 												; calculate line# - this#
(1)   86/    9797 : 03                  	scl
(1)   87/    9798 : FB 01               	cad 	1(p3)
(1)   88/    979A :                     ILI_Failed: 													; error here. If line# found, we haven't deleted it !
(1)   89/    979A : 98 FE               	jz 		ILI_Failed
(1)   90/    979C : 06                  	csa 														; if CY/L = 0 then insert here
(1)   91/    979D : 94 04               	jp 		ILI_InsertHere
(1)   92/    979F : C7 80               	ld 		@-0x80(p3)											; go to next line.
(1)   93/    97A1 : 90 E9               	jmp 	ILI_FindPosition
(1)   94/    97A3 :                     
(1)   95/    97A3 :                     ILI_InsertHere:
(1)   96/    97A3 : C4 00               	ldi 	0 													; these are used to count how many bytes from here to the end.
(1)   97/    97A5 : CA FF               	st 		-1(p2)
(1)   98/    97A7 : CA FE               	st 		-2(p2)
 AS V1.42 Beta [Bld 102] - source file minol.asm(manager.asm) - page 37 - 1/12/2016 21:04:25


(1)   99/    97A9 :                     ILI_CountBytes:
(1)  100/    97A9 : AA FE               	ild 	-2(p2)
(1)  101/    97AB : 9C 02               	jnz 	ILI_NoCarry
(1)  102/    97AD : AA FF               	ild 	-1(p2)
(1)  103/    97AF :                     ILI_NoCarry:
(1)  104/    97AF : C7 01               	ld 		@1(p3)												; fetch and bump
(1)  105/    97B1 : E4 FF               	xri 	0xFF 												; until $FF found.
(1)  106/    97B3 : 9C F4               	jnz 	ILI_CountBytes
(1)  107/    97B5 : C2 00               	ld 		0(p2) 												; get length of string into E
(1)  108/    97B7 : 01                  	xae
(1)  109/    97B8 :                     
(1)  110/    97B8 :                     ILI_Move:
(1)  111/    97B8 : C3 00               	ld 		(p3)												; move byte
(1)  112/    97BA : CB 80               	st 		-0x80(p3)
(1)  113/    97BC : C7 FF               	ld 		@-1(p3) 											; point to previous byte
(1)  114/    97BE :                     
(1)  115/    97BE : C2 FE               	ld 		-2(p2) 												; decrement the counter
(1)  116/    97C0 : 9C 06               	jnz 	ILI_NoBorrow
(1)  117/    97C2 : BA FF               	dld 	-1(p2) 
(1)  118/    97C4 : D4 80               	ani 	0x80
(1)  119/    97C6 : 9C 04               	jnz 	ILI_GotSpace 										; if counter out, then got the space.
(1)  120/    97C8 :                     ILI_NoBorrow:
(1)  121/    97C8 : BA FE               	dld 	-2(p2)
(1)  122/    97CA : 90 EC               	jmp 	ILI_Move
(1)  123/    97CC :                     
(1)  124/    97CC :                     ILI_GotSpace:
(1)  125/    97CC : C7 01               	ld 		@1(p3) 												; this is where the new data goes
(1)  126/    97CE : C2 01               	ld 		1(p2)												; restore the original P1.
(1)  127/    97D0 : 31                  	xpal 	p1
(1)  128/    97D1 : C2 02               	ld 		2(p2)
(1)  129/    97D3 : 35                  	xpah 	p1
(1)  130/    97D4 :                     
(1)  131/    97D4 :                     ILI_Copy:														; copy the new line in.
(1)  132/    97D4 : C5 01               	ld 		@1(p1)
(1)  133/    97D6 : CF 01               	st 		@1(p3)
(1)  134/    97D8 : 9C FA               	jnz 	ILI_Copy
(1)  135/    97DA :                     
(1)  136/    97DA : C6 01               	ld 		@1(p2) 												; dump string length
(1)  137/    97DC : (MACRO)             	pullp 	p1													; restore registers
(1)  137/    97DC : C6 01                       ld              @1(p2)
(1)  137/    97DE : 31                          xpal    P1
(1)  137/    97DF : C6 01                       ld              @1(p2)
(1)  137/    97E1 : 35                          xpah    P1
(1)  138/    97E2 : (MACRO)             	pulle
(1)  138/    97E2 : C6 01                       ld              @1(p2)
(1)  138/    97E4 : 01                          xae
(1)  139/    97E5 : (MACRO)             	pullp 	p3
(1)  139/    97E5 : C6 01                       ld              @1(p2)
(1)  139/    97E7 : 33                          xpal    P3
(1)  139/    97E8 : C6 01                       ld              @1(p2)
(1)  139/    97EA : 37                          xpah    P3
(1)  140/    97EB : 3F                  	xppc 	p3
(1)  141/    97EC :                     
      81/    97EC :                     	include source\console.asm 									; console type in etc.
(1)    1/    97EC :                     ; ****************************************************************************************************************
(1)    2/    97EC :                     ; ****************************************************************************************************************
(1)    3/    97EC :                     ;
(1)    4/    97EC :                     ;												Console Handler
(1)    5/    97EC :                     ;
(1)    6/    97EC :                     ; ****************************************************************************************************************
 AS V1.42 Beta [Bld 102] - source file minol.asm(console.asm) - page 38 - 1/12/2016 21:04:25


(1)    7/    97EC :                     ; ****************************************************************************************************************
(1)    8/    97EC :                     
(1)    9/    97EC :                     ConsoleStart:
(1)   10/    97EC : (MACRO)             	lpi 	p3,Print-1 
(1)   10/    97EC : C4 91                       ldi     (PRINT-1) / 256
(1)   10/    97EE : 37                          xpah    P3
(1)   10/    97EF : C4 07                       ldi     (PRINT-1) & 255
(1)   10/    97F1 : 33                          xpal    P3
(1)   11/    97F2 : 06                  	csa 														; see if CY/L is set
(1)   12/    97F3 : D4 80               	ani	 	0x80								
(1)   13/    97F5 : 98 1A               	jz 		CONError 											; if so, there is an error.
(1)   14/    97F7 :                     ;
(1)   15/    97F7 :                     ;	Print OK
(1)   16/    97F7 :                     ;
(1)   17/    97F7 :                     CONOk:
(1)   18/    97F7 : (MACRO)             	lpi 	p1,CONMsgOk 										; print OK.
(1)   18/    97F7 : C4 98                       ldi     (CONMSGOK) / 256
(1)   18/    97F9 : 35                          xpah    P1
(1)   18/    97FA : C4 02                       ldi     (CONMSGOK) & 255
(1)   18/    97FC : 31                          xpal    P1
(1)   19/    97FD : C4 00               	ldi 	0
(1)   20/    97FF : 3F                  	xppc 	p3
(1)   21/    9800 : 90 37               	jmp 	CONEnter
(1)   22/    9802 :                     
(1)   23/    9802 :                     CONMsgOk:														; OK prompt.
(1)   24/    9802 : 4F 4B 0D 00         	db 		"OK",13,0
(1)   25/    9806 :                     CONMsgErr1:														; Error Message
(1)   26/    9806 : 21 45 52 52 20 00   	db 		"!ERR ",0 
(1)   27/    980C : 20 41 54 20 00      	db 		" AT ",0
(1)   28/    9811 :                     ;
(1)   29/    9811 :                     ;	Print Error Message
(1)   30/    9811 :                     ;
(1)   31/    9811 :                     CONError:
(1)   32/    9811 : 40                  	lde 														; check if faux error
(1)   33/    9812 : E4 FF               	xri 	ERRC_End
(1)   34/    9814 : 98 E1               	jz 		CONOk
(1)   35/    9816 : (MACRO)             	lpi 	p1,CONMsgErr1										; print !ERR_ 
(1)   35/    9816 : C4 98                       ldi     (CONMSGERR1) / 256
(1)   35/    9818 : 35                          xpah    P1
(1)   35/    9819 : C4 06                       ldi     (CONMSGERR1) & 255
(1)   35/    981B : 31                          xpal    P1
(1)   36/    981C : C4 00               	ldi 	0
(1)   37/    981E : 3F                  	xppc 	p3
(1)   38/    981F : 40                  	lde 														; get error code
(1)   39/    9820 : DC 30               	ori 	'0'													; make ASCII
(1)   40/    9822 : 3F                  	xppc 	p3
(1)   41/    9823 : C4 00               	ldi 	0 													; print _AT_
(1)   42/    9825 : 3F                  	xppc 	p3
(1)   43/    9826 : (MACRO)             	lpi 	p3,CurrentLine 										; get current line number into E.
(1)   43/    9826 : C4 0C                       ldi     (CURRENTLINE) / 256
(1)   43/    9828 : 37                          xpah    P3
(1)   43/    9829 : C4 8D                       ldi     (CURRENTLINE) & 255
(1)   43/    982B : 33                          xpal    P3
(1)   44/    982C : C3 00               	ld 		(p3)
(1)   45/    982E : 01                  	xae
(1)   46/    982F : (MACRO)             	lpi 	p3,PrintInteger-1 									; print it.
(1)   46/    982F : C4 90                       ldi     (PRINTINTEGER-1) / 256
(1)   46/    9831 : 37                          xpah    P3
(1)   46/    9832 : C4 7B                       ldi     (PRINTINTEGER-1) & 255
(1)   46/    9834 : 33                          xpal    P3
 AS V1.42 Beta [Bld 102] - source file minol.asm(console.asm) - page 39 - 1/12/2016 21:04:25


(1)   47/    9835 : 3F                  	xppc 	p3
(1)   48/    9836 : C4 0D               	ldi 	13 													; print new line
(1)   49/    9838 : 3F                  	xppc 	p3
(1)   50/    9839 :                     ;
(1)   51/    9839 :                     ;	Get next command.
(1)   52/    9839 :                     ;
(1)   53/    9839 :                     CONEnter:
(1)   54/    9839 : (MACRO)             	lpi 	p3,GetString-1 										; get input from keyboard.
(1)   54/    9839 : C4 91                       ldi     (GETSTRING-1) / 256
(1)   54/    983B : 37                          xpah    P3
(1)   54/    983C : C4 EB                       ldi     (GETSTRING-1) & 255
(1)   54/    983E : 33                          xpal    P3
(1)   55/    983F : (MACRO)             	lpi 	p1,KeyboardBuffer
(1)   55/    983F : C4 0C                       ldi     (KEYBOARDBUFFER) / 256
(1)   55/    9841 : 35                          xpah    P1
(1)   55/    9842 : C4 B0                       ldi     (KEYBOARDBUFFER) & 255
(1)   55/    9844 : 31                          xpal    P1
(1)   56/    9845 : C4 48               	ldi 	KeyboardBufferSize
(1)   57/    9847 : 3F                  	xppc 	p3
(1)   58/    9848 :                     
(1)   59/    9848 : (MACRO)             	lpi 	p3,GetConstant-1 									; extract a constant if there is one.
(1)   59/    9848 : C4 90                       ldi     (GETCONSTANT-1) / 256
(1)   59/    984A : 37                          xpah    P3
(1)   59/    984B : C4 D7                       ldi     (GETCONSTANT-1) & 255
(1)   59/    984D : 33                          xpal    P3
(1)   60/    984E : 3F                  	xppc 	p3
(1)   61/    984F : D4 80               	ani 	0x80
(1)   62/    9851 : 9C 15               	jnz 	CONHasLineNumber 									; if okay, has line number.
(1)   63/    9853 :                     ;
(1)   64/    9853 :                     ;	Execute a command from the keyboard.
(1)   65/    9853 :                     ;
(1)   66/    9853 :                     CONEndOfLine:
(1)   67/    9853 : C5 01               	ld 		@1(p1) 												; find end of line
(1)   68/    9855 : 9C FC               	jnz 	CONEndOfLine
(1)   69/    9857 : C4 FF               	ldi 	0xFF												; put end of code marker at end of string.
(1)   70/    9859 : C9 00               	st 		(p1)
(1)   71/    985B : (MACRO)             	lpi 	p1,KeyboardBuffer 	
(1)   71/    985B : C4 0C                       ldi     (KEYBOARDBUFFER) / 256
(1)   71/    985D : 35                          xpah    P1
(1)   71/    985E : C4 B0                       ldi     (KEYBOARDBUFFER) & 255
(1)   71/    9860 : 31                          xpal    P1
(1)   72/    9861 : (MACRO)             	lpi 	p3,ExecuteFromAddressDirect-1
(1)   72/    9861 : C4 95                       ldi     (EXECUTEFROMADDRESSDIRECT-1) / 256
(1)   72/    9863 : 37                          xpah    P3
(1)   72/    9864 : C4 08                       ldi     (EXECUTEFROMADDRESSDIRECT-1) & 255
(1)   72/    9866 : 33                          xpal    P3
(1)   73/    9867 : 3F                  	xppc 	p3
(1)   74/    9868 :                     ;
(1)   75/    9868 :                     ;	Line Number - text is at P1, line number in E.
(1)   76/    9868 :                     ;
(1)   77/    9868 :                     CONHasLineNumber:
(1)   78/    9868 :                     wait8:
(1)   79/    9868 : 90 FE               	jmp 	wait8
(1)   80/    986A :                     
 AS V1.42 Beta [Bld 102] - source file minol.asm - page 40 - 1/12/2016 21:04:25


  symbol table (* = unused):
  ------------------------

*ARCHITECTURE :  i386-unknown-win32 - | *BIGENDIAN :                      0 - |
 BOOTMESSAGE :                 903B C |  BOOTMONITOR :                  210 - |
*BRANCHEXT :                      0 - | *CASESENSITIVE :                  0 - |
 CCA_OVER :                    940E C |  CCL_LOOP :                    9359 C |
 CCL_OVER :                    9362 C |  CHECKLASTCOMMANDTHENEXECUTE : 94E8 C |
 CIF_CONTINUE :                947A C |  CIF_EQUALITY :                9496 C |
 CIF_EQUALITY2 :               949D C |  CIF_OVER :                    94B0 C |
 CIF_SYNTAX :                  9474 C |  CIF_TESTIFZERO :              94A3 C |
 CIN_FINDEND :                 933F C |  CIN_INPUTVARIABLEORMEMORY :   92F3 C |
 CIN_MEMORY :                  92EE C |  CIN_OVER :                    934D C |
 CIN_OVER2 :                   92DF C |  CIN_STOREVALUE :              9318 C |
 CIN_STRING :                  9329 C |  CIN_SYNTAX :                  92DB C |
 CIN_VARIABLE :                92E1 C |  CLE_EVALUATEANDWRITE :        9441 C |
 CLE_ISHL :                    9436 C |  CLE_OVER :                    9461 C |
 CLE_SINGLEVARIABLE :          9427 C |  CLE_SYNTAX :                  9421 C |
 CLI_END :                     9297 C |  CLI_ENDLINE :                 9283 C |
 CLI_LINE :                    927C C |  CLI_LOOP :                    9269 C |
 CLI_OVER :                    929D C |  CMD_CALL :                    93E7 C |
 CMD_CLEAR :                   934F C |  CMD_END :                     92A9 C |
 CMD_GOTO :                    94B2 C |  CMD_IF :                      9463 C |
 CMD_IN :                      92AF C |  CMD_IN2 :                     9327 C |
 CMD_LET :                     9410 C |  CMD_LIST :                    925F C |
 CMD_NEW :                     929F C |  CMD_OS :                      9256 C |
 CMD_PRINT :                   9364 C |  CMD_RUN :                     94D3 C |
 CNE_OVER :                    92AD C |  COMMANDLIST :                 96FA C |
 CONENDOFLINE :                9853 C |  CONENTER :                    9839 C |
 CONERROR :                    9811 C |  CONHASLINENUMBER :            9868 C |
 CONMSGERR1 :                  9806 C |  CONMSGOK :                    9802 C |
 CONOK :                       97F7 C |  CONSOLESTART :                97EC C |
*CONSTPI :        3.141592653589793 - |  COPY1 :                       901C C |
 COS_OVER :                    925D C |  CPR_ENDOK :                   93E4 C |
 CPR_ENDRETURN :               93E1 C |  CPR_OVER :                    93E5 C |
 CPR_OVER2 :                   93DF C |  CPR_QUOTEDSTRING :            93A2 C |
 CPR_STRINGATADDRESS :         93AF C |  CPR_STRINGEXIT :              93CE C |
 CPR_STRINGLOOP :              93C8 C |  CPR_STRINGPRINT :             93D6 C |
 CPR_SYNTAX :                  93DB C |  CRG_EXECUTEFROMP1 :           94D9 C |
 CRG_FIND :                    94BE C |  CRG_NOTEND :                  94C8 C |
 CRG_OVER :                    94DB C |  CURRENTLINE :                  C8D - |
*DATE :                   1/12/2016 - | *DELETELINE :                  9737 C |
 DLN_DELETE :                  9759 C |  DLN_EXIT :                    9761 C |
 DLN_SEARCH :                  9746 C |  EAFD_LETCODE :                9552 C |
 EAFD_SEARCH :                 9522 C |  EAFD_SKIP :                   9533 C |
 EAFD_SKIPSPACES :             953F C |  EAP_ERROR :                   96EC C |
 EAP_EXIT :                    96F0 C |  EEX_CHECKNEXTOPERATION :      964A C |
 EEX_CONSTANT :                95E1 C |  EEX_CONSTANTLOOP :            95E2 C |
 EEX_DIVIDE :                  966D C |  EEX_DIVIDE_LOOP :             967E C |
 EEX_DIVIDE_NUMERATOR_POSITIVE :                                       968F C |
 EEX_DIVIDE_TEMP_POSITIVE :    96A2 C |  EEX_DIVIDE_ZERO :             961A C |
 EEX_ENDEXPRESSION :           961E C |  EEX_ERROR :                   95C6 C |
 EEX_EXIT :                    95C8 C |  EEX_FOUNDOPERATOR :           9662 C |
 EEX_HAVETERM :                9602 C |  EEX_MEMORYACCESS :            95D4 C |
 EEX_MULTIPLYLOOP :            9630 C |  EEX_MULTIPLY_B0ISZERO :       963E C |
 EEX_NEXTCHAR :                9571 C |  EEX_NOTADD :                  960E C |
 EEX_NOTAP :                   959C C |  EEX_NOTQUOTE :                95B1 C |
 EEX_NOTRANDOM :               959E C |  EEX_NOTSUBTRACT :             9624 C |
 EEX_PENDINGOP :                  1 - | *EEX_RANDOM :                  9583 C |
 EEX_SAVEANDEXIT :             9616 C |  EEX_TERM :                    956B C |
 AS V1.42 Beta [Bld 102] - source file minol.asm - page 41 - 1/12/2016 21:04:25


 EEX_TERMERROR :               95C4 C |  EEX_VALUE :                      0 - |
 EEX_VARIABLE :                95FE C | *ENDOFCOMMANDEXECUTION :       94DB C |
 ERRC_DIVZERO :                   7 - |  ERRC_END :                      FF - |
 ERRC_LABEL :                     1 - | *ERRC_MEMORY :                    6 - |
 ERRC_SYNTAX :                    5 - |  ERRC_TERM :                      4 - |
*ERRC_UNKNOWN :                   2 - |  EVALUATEADDRESSPAIR :         96B0 C |
 EVALUATEEXPRESSION :          955D C |  EXECUTEFROMADDRESSDIRECT :    9509 C |
 EXECUTEFROMCOMMANDSTART :     94FD C |  EXECUTENEXTINSTRUCTION :      94DE C |
*FALSE :                          0 - | *FULLPMMU :                       1 - |
 GCO_EXIT :                    9101 C |  GCO_LOOP :                    90DD C |
 GETCHAR :                     91C8 C |  GETCONSTANT :                 90D8 C |
 GETSTRING :                   91EC C |  GOTOCOMMANDLINE :             94F0 C |
*HAS64 :                          1 - | *HASDSP :                         0 - |
*HASFPU :                         0 - | *HASPMMU :                        0 - |
 ILI_COPY :                    97D4 C |  ILI_COUNTBYTES :              97A9 C |
 ILI_FAILED :                  979A C |  ILI_FINDLENGTH :              9780 C |
 ILI_FINDPOSITION :            978C C |  ILI_GOTSPACE :                97CC C |
 ILI_INSERTHERE :              97A3 C |  ILI_MOVE :                    97B8 C |
 ILI_NOBORROW :                97C8 C |  ILI_NOCARRY :                 97AF C |
*INEXTMODE :                      0 - | *INLWORDMODE :                    0 - |
*INMAXMODE :                      0 - | *INSERTLINE :                  976B C |
*INSRCMODE :                      0 - | *INSUPMODE :                      0 - |
 KEYBOARDBUFFER :               CB0 - |  KEYBOARDBUFFERSIZE :            48 - |
*LISTON :                         1 - | *MACEXP :                         1 - |
*MOMCPU :                         C - | *MOMCPUNAME :                 SC/MP - |
*NESTMAX :                      100 - | *OSMATHLIBRARY :                  3 - |
*PACKING :                        0 - | *PADDING :                        1 - |
 PRINT :                       9108 C |  PRINTINTEGER :                907C C |
 PROGRAMBASE :                 1000 - |  PROGRAMCODE :                 9048 C |
 RANDOMSEED :                   C8E - | *RELAXED :                        0 - |
 SCREENCURSOR :                 C80 - |  SCREENMIRROR :                 C00 - |
 SYNTAXERROR :                 94F7 C |  SYSTEMMEMORY :                 C90 - |
*TIME :                    21:04:25 - | *TRUE :                           1 - |
 VARIABLES :                    C90 - | *VERSION :                     142F - |
 WAIT8 :                       9868 C |  __GCNOTLOWER [GETCHAR] :      91E7 C |
 __GCWAITKEY [GETCHAR] :       91CD C |  __GCWAITRELEASE [GETCHAR] :   91D5 C |
 __GSBACKSPACE [GETSTRING] :   9247 C |  __GSCONTROLKEY [GETSTRING] :  922A C |
 __GSLOOP [GETSTRING] :        91FA C |  __PIDIVIDEEND :               90AD C |
 __PIDIVIDELOOP :              9090 C |  __PIDIVIDEOUTER :             908A C |
 __PIEXIT :                    90CF C |  __PIPRINT :                   90C2 C |
 __PRCLEARFROMMOVETO [PRINT] : 91A8 C |  __PRCLEARLOOP [PRINT] :       91AA C |
 __PRCLEARSCREEN [PRINT] :     91A6 C |  __PRCOPY [PRINT] :            91B4 C |
 __PREXIT [PRINT] :            916B C |  __PREXITNOCHECK [PRINT] :     916F C |
 __PRISCONTROLCHAR [PRINT] :   917D C |  __PRISRETURN [PRINT] :        919D C |
 __PRNOTASCII [PRINT] :        9145 C |  __PRPRINTCHARACTERA [PRINT] : 9129 C |
 __PRPRINTSTRING [PRINT] :     9117 C |  __PRSCROLLLOOP [PRINT] :      915D C |
 __PRUPDATECURSOR [PRINT] :    914E C |

    206 symbols
     35 unused symbols

 AS V1.42 Beta [Bld 102] - source file minol.asm - page 42 - 1/12/2016 21:04:25


  defined macros:
  ---------------

CMD                                   | CODE                                 
LPI                                   | PULLA                                
PULLE                                 | PULLP                                
PUSHA                                 | PUSHE                                
PUSHP                                 | SETV                                 

     10 macros

 AS V1.42 Beta [Bld 102] - source file minol.asm - page 43 - 1/12/2016 21:04:25


  codepages:
  ----------

STANDARD (0 changed characters)


0.03 seconds assembly time

   1973 lines source file
   2328 lines incl. macro expansions
      2 passes
      0 errors
      0 warnings
