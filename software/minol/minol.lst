 AS V1.42 Beta [Bld 102] - source file minol.asm - page 1 - 12/10/2015 15:02:01


       1/       0 :                     ; ****************************************************************************************************************
       2/       0 :                     ; ****************************************************************************************************************
       3/       0 :                     ;
       4/       0 :                     ;												MINOL Intepreter
       5/       0 :                     ;
       6/       0 :                     ; ****************************************************************************************************************
       7/       0 :                     ; ****************************************************************************************************************
       8/       0 :                     
       9/       0 :                     ; ****************************************************************************************************************
      10/       0 :                     ;												 Memory Allocation
      11/       0 :                     ; ****************************************************************************************************************
      12/       0 :                     
      13/       0 :                     	cpu 	sc/mp
      14/       0 :                     	
      15/       0 : =0xC00              ScreenMirror = 0xC00 											; Screen mirror, 128 bytes, 256 byte page boundary.
      16/       0 : =0xC80              ScreenCursor = ScreenMirror+0x80  								; Position on that screen (00..7F)
      17/       0 :                     
      18/       0 : =0xC82              Variables = ScreenCursor+2 										; uses 32 bytes for expression evaluation
      19/       0 :                     
      20/       0 : =0xCA2              MinolVars = Variables + 32 										; MINOL variables start here.
      21/       0 :                     
      22/       0 : =0xCA2              CurrentLine = MinolVars + 0 									; current line number (0 = not running)
      23/       0 : =0xCA3              CurrentAddr = MinolVars + 1 									; position in current line (Low,High)
      24/       0 :                     
      25/       0 : =0x210              MonitorBoot = 0x210 											; go here to boot monitor
      26/       0 :                     
      27/       0 : =0x1                ERROR_Label = 1 												; Undefined GOTO.
      28/       0 :                     
      29/       0 :                     ; ****************************************************************************************************************
      30/       0 :                     ;														Macros
      31/       0 :                     ; ****************************************************************************************************************
      32/       0 :                     
      33/       0 :                     lpi	macro	ptr,addr
      34/       0 :                     	ldi 	(addr) / 256
      35/       0 :                     	xpah 	ptr
      36/       0 :                     	ldi 	(addr) & 255
      37/       0 :                     	xpal 	ptr
      38/       0 :                     	endm
      39/       0 :                     
      40/       0 :                     ; ****************************************************************************************************************
      41/       0 :                     ;													Main Program
      42/       0 :                     ; ****************************************************************************************************************
      43/       0 :                     
      44/    9000 :                     	org 	0x9000 												; the ROM starts here
      45/    9000 :                     
      46/    9000 : 68                  	db 		0x68												; this makes it boot straight into this ROM.
      47/    9001 : (MACRO)             	lpi 	p2,0xFFF											; set up stack
      47/    9001 : C4 0F                       ldi     (0XFFF) / 256
      47/    9003 : 36                          xpah    P2
      47/    9004 : C4 FF                       ldi     (0XFFF) & 255
      47/    9006 : 32                          xpal    P2
      48/    9007 :                     
      49/    9007 : (MACRO)             	lpi 	p3,Print-1 											; clear screen
      49/    9007 : C4 92                       ldi     (PRINT-1) / 256
      49/    9009 : 37                          xpah    P3
      49/    900A : C4 3B                       ldi     (PRINT-1) & 255
      49/    900C : 33                          xpal    P3
      50/    900D : C4 0C               	ldi 	12
      51/    900F : 3F                  	xppc 	p3
      52/    9010 : C4 5D               	ldi 	']'													; Prompt
 AS V1.42 Beta [Bld 102] - source file minol.asm - page 2 - 12/10/2015 15:02:01


      53/    9012 : 3F                  	xppc 	p3
      54/    9013 : (MACRO)             	lpi 	p1,test
      54/    9013 : C4 90                       ldi     (TEST) / 256
      54/    9015 : 35                          xpah    P1
      54/    9016 : C4 22                       ldi     (TEST) & 255
      54/    9018 : 31                          xpal    P1
      55/    9019 : (MACRO)             	lpi 	p3,ExecuteCommand-1
      55/    9019 : C4 90                       ldi     (EXECUTECOMMAND-1) / 256
      55/    901B : 37                          xpah    P3
      55/    901C : C4 38                       ldi     (EXECUTECOMMAND-1) & 255
      55/    901E : 33                          xpal    P3
      56/    901F : 3F                  	xppc 	p3
      57/    9020 :                     
      58/    9020 :                     stop:
      59/    9020 : 90 FE               	jmp 	stop
      60/    9022 :                     
      61/    9022 :                     ; ****************************************************************************************************************
      62/    9022 :                     ;										Routines in source subdirectory
      63/    9022 :                     ; ****************************************************************************************************************
      64/    9022 :                     	
      65/    9022 :                     	include source\execute.asm									; command execution
(1)    1/    9022 :                     ; ****************************************************************************************************************
(1)    2/    9022 :                     ; ****************************************************************************************************************
(1)    3/    9022 :                     ;
(1)    4/    9022 :                     ;											Execute MINOL ommand
(1)    5/    9022 :                     ;
(1)    6/    9022 :                     ;		Command at P1, Stack at P2. Preserves A,E except in Error (CY/L = 0 where A is error code).
(1)    7/    9022 :                     ;
(1)    8/    9022 :                     ; ****************************************************************************************************************
(1)    9/    9022 :                     ; ****************************************************************************************************************
(1)   10/    9022 :                     
(1)   11/    9022 : 20 20 20 20 51 20   test:db 	"    Q = 1",0
                    3D 20 31 00 
(1)   12/    902C :                     
(1)   13/    902C :                     __EXExit:
(1)   14/    902C : 03                  	scl 														; is okay.
(1)   15/    902D :                     __EXExitNoSC:
(1)   16/    902D : C6 01               	ld 		@1(p2) 												; restore P3
(1)   17/    902F : 33                  	xpal 	p3
(1)   18/    9030 : C6 01               	ld 		@1(p2)
(1)   19/    9032 : 37                  	xpah 	p3
(1)   20/    9033 : C6 01               	ld 		@1(p2)												; restore E
(1)   21/    9035 : 01                  	xae
(1)   22/    9036 : C6 01               	ld 		@1(p2) 												; restore A
(1)   23/    9038 : 3F                  	xppc 	p3
(1)   24/    9039 :                     
(1)   25/    9039 :                     ExecuteCommand:
(1)   26/    9039 : CE FF               	st 		@-1(p2) 											; push A
(1)   27/    903B : 40                  	lde 														; push E
(1)   28/    903C : CE FF               	st 		@-1(p2)
(1)   29/    903E : 37                  	xpah 	p3 													; push P3.
(1)   30/    903F : CE FF               	st 		@-1(p2)
(1)   31/    9041 : 33                  	xpal 	p3
(1)   32/    9042 : CE FF               	st 		@-1(p2)
(1)   33/    9044 :                     
(1)   34/    9044 :                     __EXFirst:
(1)   35/    9044 : C1 00               	ld 		0(p1) 												; found EOS 
(1)   36/    9046 : 98 E4               	jz 		__EXExit 											; exit, empty string.
(1)   37/    9048 : C5 01               	ld 		@1(p1) 												; fetch and skip over
(1)   38/    904A : E4 20               	xri 	' ' 												; is it space ?
 AS V1.42 Beta [Bld 102] - source file minol.asm(execute.asm) - page 3 - 12/10/2015 15:02:01


(1)   39/    904C : 98 F6               	jz 		__EXFirst 											; keep going.
(1)   40/    904E : E4 1A               	xri 	' '!':'												; if it is colon, then exit.
(1)   41/    9050 : 98 DA               	jz 		__EXExit
(1)   42/    9052 : E4 18               	xri 	':'!'"'												; if it is quote (comment )
(1)   43/    9054 : 9C 1B               	jnz 	__EXCode 											; try it as a command.
(1)   44/    9056 :                     ;
(1)   45/    9056 :                     ;	Go to next command, skip forward to ':' (skip over) or End of String (\0)
(1)   46/    9056 :                     ;
(1)   47/    9056 :                     __EXNextCommand:
(1)   48/    9056 : C1 00               	ld 		(p1)												; if 0 then end of command
(1)   49/    9058 : 98 D2               	jz 		__EXExit
(1)   50/    905A : C5 01               	ld 		@1(p1) 												; fetch and bump
(1)   51/    905C : E4 3A               	xri 	':'
(1)   52/    905E : 9C F6               	jnz 	__EXNextCommand 									; until found a colon.
(1)   53/    9060 : 90 CA               	jmp 	__EXExit
(1)   54/    9062 :                     ;
(1)   55/    9062 :                     ;	Report Error in E.
(1)   56/    9062 :                     ;
(1)   57/    9062 :                     __EX_ReportError:
(1)   58/    9062 : 40                  	lde 														; get error code
(1)   59/    9063 : CA 03               	st 		3(p2) 												; save so returned as A
(1)   60/    9065 : 02                  	ccl 														; clear carry
(1)   61/    9066 : 90 C5               	jmp 	__EXExitNoSC 										; exit without setting CY/L
(1)   62/    9068 :                     
(1)   63/    9068 :                     ; ****************************************************************************************************************
(1)   64/    9068 :                     ;
(1)   65/    9068 :                     ;	Instructions: 
(1)   66/    9068 :                     ;
(1)   67/    9068 :                     ;		CALL 	(h,l)
(1)   68/    9068 :                     ;		CLEAR
(1)   69/    9068 :                     ;		END
(1)   70/    9068 :                     ;		GOTO	<expr>												[TODO: FindProgramLine()]
(1)   71/    9068 :                     ;		NEW 	(stops running program as well)						[TODO: NewProgram()]
(1)   72/    9068 :                     ;		IN 		string|var,... (no spaces ???? check source)		[TODO: InCommand()]
(1)   73/    9068 :                     ;		IF 		<expr> [#<=] <expr> ; instruction
(1)   74/    9068 :                     ;		[LET]	var|(h,l) = <expr>									[TODO: Code incomplete.]
(1)   75/    9068 :                     ;		LIST 														[TODO: ListProgram()]
(1)   76/    9068 :                     ;		OS 		Boots to Monitor (JMP $210)
(1)   77/    9068 :                     ;		PR 		string|number|string const,....[;]					[TODO: OutCommand()]
(1)   78/    9068 :                     ;		RUN 														[TODO: RunProgram()]
(1)   79/    9068 :                     ;
(1)   80/    9068 :                     ;	Unimplemented:
(1)   81/    9068 :                     ;
(1)   82/    9068 :                     ;
(1)   83/    9068 :                     ; ****************************************************************************************************************
(1)   84/    9068 :                     
(1)   85/    9068 :                     __EXDefaultLET:
(1)   86/    9068 : C5 FF               	ld 		@-1(p1) 											; point back to start of command
(1)   87/    906A : (MACRO)             	lpi 	p3,__EX_Command_LET_Optional-1						; and go to the LET code.
(1)   87/    906A : C4 91                       ldi     (__EX_COMMAND_LET_OPTIONAL-1) / 256
(1)   87/    906C : 37                          xpah    P3
(1)   87/    906D : C4 F7                       ldi     (__EX_COMMAND_LET_OPTIONAL-1) & 255
(1)   87/    906F : 33                          xpal    P3
(1)   88/    9070 : 3F                  	xppc 	p3
(1)   89/    9071 :                     
(1)   90/    9071 :                     __EXCode:
(1)   91/    9071 : C1 00               	ld 		0(p1) 												; check 2nd character is alphabetic
(1)   92/    9073 : D4 40               	ani 	64 													; if it 
(1)   93/    9075 : 98 F1               	jz 		__EXDefaultLET 										; if it isn't try for a default LET.
(1)   94/    9077 :                     
 AS V1.42 Beta [Bld 102] - source file minol.asm(execute.asm) - page 4 - 12/10/2015 15:02:01


(1)   95/    9077 : (MACRO)             	lpi 	p3, JumpTable 										; P3 points to jump table (at end of file)
(1)   95/    9077 : C4 91                       ldi     (JUMPTABLE) / 256
(1)   95/    9079 : 37                          xpah    P3
(1)   95/    907A : C4 FA                       ldi     (JUMPTABLE) & 255
(1)   95/    907C : 33                          xpal    P3
(1)   96/    907D : C4 05               	ldi 	ERROR_Syntax 										; syntax error in E ready for failure.
(1)   97/    907F : 01                  	xae
(1)   98/    9080 :                     __EXSearch:
(1)   99/    9080 : C7 03               	ld 		@3(p3)												; read token to match against
(1)  100/    9082 : 98 DE               	jz 		__EX_ReportError 									; end of table.
(1)  101/    9084 : E1 FF               	xor 	-1(p1)												; compare against first character
(1)  102/    9086 : 9C F8               	jnz 	__EXSearch 											; failed, keep searching.
(1)  103/    9088 : C3 FE               	ld 		-2(p3)												; LSB of address
(1)  104/    908A : 01                  	xae
(1)  105/    908B : C3 FF               	ld 		-1(p3) 												; MSB of address
(1)  106/    908D : 37                  	xpah 	p3 													; put into P3
(1)  107/    908E : 40                  	lde 														; put low address into P3
(1)  108/    908F : 33                  	xpal 	p3
(1)  109/    9090 : 3F                  	xppc 	p3 													; and go there.
(1)  110/    9091 :                     
(1)  111/    9091 :                     ; ****************************************************************************************************************
(1)  112/    9091 :                     ;											RUN Run Program
(1)  113/    9091 :                     ; ****************************************************************************************************************
(1)  114/    9091 :                     
(1)  115/    9091 :                     __EX_Command_RUN:
(1)  116/    9091 : (MACRO)             	lpi 	p3,RunProgram-1 									; run program, set everything up
(1)  116/    9091 : C4 92                       ldi     (RUNPROGRAM-1) / 256
(1)  116/    9093 : 37                          xpah    P3
(1)  116/    9094 : C4 31                       ldi     (RUNPROGRAM-1) & 255
(1)  116/    9096 : 33                          xpal    P3
(1)  117/    9097 : 3F                  	xppc 	p3
(1)  118/    9098 :                     __EXExit2:
(1)  119/    9098 : 90 92               	jmp 	__EXExit
(1)  120/    909A :                     
(1)  121/    909A :                     ; ****************************************************************************************************************
(1)  122/    909A :                     ;											C (ALL or LEAR)
(1)  123/    909A :                     ; ****************************************************************************************************************
(1)  124/    909A :                     
(1)  125/    909A :                     __EX_Decode_C:
(1)  126/    909A : C1 00               	ld 		0(p1) 												; get next character
(1)  127/    909C : E4 41               	xri 	'A'
(1)  128/    909E : 98 2A               	jz 		__EX_Command_CALL
(1)  129/    90A0 :                     
(1)  130/    90A0 :                     ; ****************************************************************************************************************
(1)  131/    90A0 :                     ;									CLEAR command. Clear all variables.
(1)  132/    90A0 :                     ; ****************************************************************************************************************
(1)  133/    90A0 :                     
(1)  134/    90A0 :                     __EX_Command_CLEAR:
(1)  135/    90A0 : (MACRO)             	lpi 	p3,Variables 										; point P3 to variables
(1)  135/    90A0 : C4 0C                       ldi     (VARIABLES) / 256
(1)  135/    90A2 : 37                          xpah    P3
(1)  135/    90A3 : C4 82                       ldi     (VARIABLES) & 255
(1)  135/    90A5 : 33                          xpal    P3
(1)  136/    90A6 : C4 1A               	ldi 	26 													; clear 26 (28 to clear RNG Seed ????)
(1)  137/    90A8 : CA FF               	st 		-1(p2)
(1)  138/    90AA :                     __EX_CLEAR_Loop:
(1)  139/    90AA : C4 00               	ldi 	0 													; clear and bump pointer
(1)  140/    90AC : CF 01               	st 		@1(p3)
(1)  141/    90AE : BA FF               	dld 	-1(p2) 												; do it 26 times.
(1)  142/    90B0 : 9C F8               	jnz 	__EX_CLEAR_Loop
 AS V1.42 Beta [Bld 102] - source file minol.asm(execute.asm) - page 5 - 12/10/2015 15:02:01


(1)  143/    90B2 : 90 A2               	jmp 	__EXNextCommand 									; next command.
(1)  144/    90B4 :                     
(1)  145/    90B4 :                     ; ****************************************************************************************************************
(1)  146/    90B4 :                     ;										PR items .... [;] Print
(1)  147/    90B4 :                     ; ****************************************************************************************************************
(1)  148/    90B4 :                     
(1)  149/    90B4 :                     __EX_Command_PR:
(1)  150/    90B4 : (MACRO)             	lpi 	p3,__EXSkipCharacters-1
(1)  150/    90B4 : C4 92                       ldi     (__EXSKIPCHARACTERS-1) / 256
(1)  150/    90B6 : 37                          xpah    P3
(1)  150/    90B7 : C4 15                       ldi     (__EXSKIPCHARACTERS-1) & 255
(1)  150/    90B9 : 33                          xpal    P3
(1)  151/    90BA : C4 01               	ldi 	1 													; skip R
(1)  152/    90BC : 3F                  	xppc 	p3
(1)  153/    90BD : (MACRO)             	lpi 	p3,OutCommand-1 									; handled via another source file.
(1)  153/    90BD : C4 92                       ldi     (OUTCOMMAND-1) / 256
(1)  153/    90BF : 37                          xpah    P3
(1)  153/    90C0 : C4 37                       ldi     (OUTCOMMAND-1) & 255
(1)  153/    90C2 : 33                          xpal    P3
(1)  154/    90C3 : 3F                  	xppc 	p3
(1)  155/    90C4 : 01                  	xae 														; save error code.
(1)  156/    90C5 : 06                  	csa 														; check for error.
(1)  157/    90C6 : 94 9A               	jp 		__EX_ReportError 									; if occurred, report it.
(1)  158/    90C8 :                     __EXNextCommand2:
(1)  159/    90C8 : 90 8C               	jmp 	__EXNextCommand										; otherwise, try again.
(1)  160/    90CA :                     
(1)  161/    90CA :                     ; ****************************************************************************************************************
(1)  162/    90CA :                     ;				CALL (h,l) Calls machine code routine at (H,L) where h,l are any two expressions.
(1)  163/    90CA :                     ; ****************************************************************************************************************
(1)  164/    90CA :                     
(1)  165/    90CA :                     __EX_Command_CALL:
(1)  166/    90CA : (MACRO)             	lpi 	p3,__EXSkipCharacters-1
(1)  166/    90CA : C4 92                       ldi     (__EXSKIPCHARACTERS-1) / 256
(1)  166/    90CC : 37                          xpah    P3
(1)  166/    90CD : C4 15                       ldi     (__EXSKIPCHARACTERS-1) & 255
(1)  166/    90CF : 33                          xpal    P3
(1)  167/    90D0 : C4 03               	ldi 	3 													; skip 'A' 'L' 'L' and spaces.
(1)  168/    90D2 : 3F                  	xppc 	p3
(1)  169/    90D3 : (MACRO)             	lpi 	p3,ReadHLMemoryFull-1 								; read the (h,l)
(1)  169/    90D3 : C4 95                       ldi     (READHLMEMORYFULL-1) / 256
(1)  169/    90D5 : 37                          xpah    P3
(1)  169/    90D6 : C4 03                       ldi     (READHLMEMORYFULL-1) & 255
(1)  169/    90D8 : 33                          xpal    P3
(1)  170/    90D9 : 3F                  	xppc 	p3 
(1)  171/    90DA : 01                  	xae
(1)  172/    90DB : 06                  	csa 
(1)  173/    90DC : 94 84               	jp 		__EX_ReportError 									; if CY/L = 0 then error.
(1)  174/    90DE : C2 FE               	ld 		-2(p2) 												; read L
(1)  175/    90E0 : 33                  	xpal 	p3
(1)  176/    90E1 : C2 FF               	ld 		-1(p2) 												; read H
(1)  177/    90E3 : 37                  	xpah 	p3
(1)  178/    90E4 : C7 FF               	ld 		@-1(p3) 											; fix up for pre-increment
(1)  179/    90E6 : 3F                  	xppc 	p3
(1)  180/    90E7 : 90 DF               	jmp 	__EXNextCommand2									; next command.
(1)  181/    90E9 :                     
(1)  182/    90E9 :                     ; ****************************************************************************************************************
(1)  183/    90E9 :                     ;											END end running program
(1)  184/    90E9 :                     ; ****************************************************************************************************************
(1)  185/    90E9 :                     
(1)  186/    90E9 :                     __EX_Command_END:
 AS V1.42 Beta [Bld 102] - source file minol.asm(execute.asm) - page 6 - 12/10/2015 15:02:01


(1)  187/    90E9 : (MACRO)             	lpi 	p3,CurrentLine 										; set current line to zero.
(1)  187/    90E9 : C4 0C                       ldi     (CURRENTLINE) / 256
(1)  187/    90EB : 37                          xpah    P3
(1)  187/    90EC : C4 A2                       ldi     (CURRENTLINE) & 255
(1)  187/    90EE : 33                          xpal    P3
(1)  188/    90EF : C4 00               	ldi 	0
(1)  189/    90F1 : CB 00               	st 		(p3)
(1)  190/    90F3 :                     __EX_END_EndOfLine:
(1)  191/    90F3 : C5 01               	ld 		@1(p1) 												; keep going till find NULL EOL marker
(1)  192/    90F5 : 9C FC               	jnz 	__EX_END_EndOfLine
(1)  193/    90F7 : C5 FF               	ld 		@-1(p1) 											; point back to the EOS
(1)  194/    90F9 :                     __EXNextCommand3:
(1)  195/    90F9 : 90 CD               	jmp 	__EXNextCommand2 									; and do next command, in this case will be input :)
(1)  196/    90FB :                     
(1)  197/    90FB :                     ; ****************************************************************************************************************
(1)  198/    90FB :                     ;								NEW Erase current program, and stop if running
(1)  199/    90FB :                     ; ****************************************************************************************************************
(1)  200/    90FB :                     
(1)  201/    90FB :                     __EX_Command_NEW:
(1)  202/    90FB : C1 00               	ld 		0(p1) 												; check actually NEW as this is important !
(1)  203/    90FD : E4 45               	xri 	'E' 												; check E
(1)  204/    90FF : 9C 0F               	jnz 	__EX_NEW_Syntax
(1)  205/    9101 : C1 01               	ld 		1(p1)	
(1)  206/    9103 : E4 57               	xri 	'W'													; check W
(1)  207/    9105 : 9C 09               	jnz 	__EX_NEW_Syntax
(1)  208/    9107 : (MACRO)             	lpi 	p3,NewProgram-1 									; call the NEW routine.
(1)  208/    9107 : C4 92                       ldi     (NEWPROGRAM-1) / 256
(1)  208/    9109 : 37                          xpah    P3
(1)  208/    910A : C4 30                       ldi     (NEWPROGRAM-1) & 255
(1)  208/    910C : 33                          xpal    P3
(1)  209/    910D : 3F                  	xppc 	p3
(1)  210/    910E : 90 D9               	jmp 	__EX_Command_END 									; END program.
(1)  211/    9110 :                     
(1)  212/    9110 :                     __EX_NEW_Syntax:												; come here if test for NEW fails, report syntax
(1)  213/    9110 : C4 05               	ldi 	ERROR_Syntax										; error - only this command is fully decoded.
(1)  214/    9112 : 90 68               	jmp 	__EX_ReportErrorA
(1)  215/    9114 :                     
(1)  216/    9114 :                     __EXExit3:
(1)  217/    9114 : 90 82               	jmp 	__EXExit2
(1)  218/    9116 :                     
(1)  219/    9116 :                     ; ****************************************************************************************************************
(1)  220/    9116 :                     ;												I(N or F)
(1)  221/    9116 :                     ; ****************************************************************************************************************
(1)  222/    9116 :                     
(1)  223/    9116 :                     __EX_Decode_I
(1)  224/    9116 : C1 00               	ld 		0(p1)												; look at next.
(1)  225/    9118 : E4 4E               	xri 	'N'
(1)  226/    911A : 98 68               	jz 		__EX_Command_IN
(1)  227/    911C :                     
(1)  228/    911C :                     ; ****************************************************************************************************************
(1)  229/    911C :                     ;									IF <expr> [#<=] <expr> ; conditional
(1)  230/    911C :                     ; ****************************************************************************************************************
(1)  231/    911C :                     
(1)  232/    911C :                     __EX_Command_IF:
(1)  233/    911C : (MACRO)             	lpi 	p3,__EXSkipCharacters-1
(1)  233/    911C : C4 92                       ldi     (__EXSKIPCHARACTERS-1) / 256
(1)  233/    911E : 37                          xpah    P3
(1)  233/    911F : C4 15                       ldi     (__EXSKIPCHARACTERS-1) & 255
(1)  233/    9121 : 33                          xpal    P3
(1)  234/    9122 : C4 01               	ldi 	1 													; skip over 1 character (F) and spaces
 AS V1.42 Beta [Bld 102] - source file minol.asm(execute.asm) - page 7 - 12/10/2015 15:02:01


(1)  235/    9124 : 3F                  	xppc 	p3
(1)  236/    9125 : (MACRO)             	lpi 	p3,EvaluateExpression-1 							; get LHS of expression
(1)  236/    9125 : C4 93                       ldi     (EVALUATEEXPRESSION-1) / 256
(1)  236/    9127 : 37                          xpah    P3
(1)  236/    9128 : C4 87                       ldi     (EVALUATEEXPRESSION-1) & 255
(1)  236/    912A : 33                          xpal    P3
(1)  237/    912B : 3F                  	xppc	p3
(1)  238/    912C : 01                  	xae 														; save in E
(1)  239/    912D : 06                  	csa 														; if error occured, report it.
(1)  240/    912E : 94 4D               	jp 		__EX_ReportErrorE
(1)  241/    9130 : C1 00               	ld 		(p1) 												; get the condition
(1)  242/    9132 : E4 23               	xri 	'#'
(1)  243/    9134 : 98 08               	jz 		__EX_IF_LegalTest
(1)  244/    9136 : E4 1F               	xri 	'#'!'<'
(1)  245/    9138 : 98 04               	jz 		__EX_IF_LegalTest
(1)  246/    913A : E4 01               	xri 	'<'!'='
(1)  247/    913C :                     __EX_NEW_Syntax_NZ2:
(1)  248/    913C : 9C D2               	jnz 	__EX_NEW_Syntax 									; this reports a syntax error
(1)  249/    913E :                     ;
(1)  250/    913E :                     ;	Now we have a legal left side, and a valid comparison =,#,or <
(1)  251/    913E :                     ;
(1)  252/    913E :                     __EX_IF_LegalTest:
(1)  253/    913E : C5 01               	ld 		@1(p1) 												; re-read condition and bump pointer
(1)  254/    9140 : CE FF               	st 		@-1(p2) 											; save on stack
(1)  255/    9142 : 40                  	lde 														; save left hand side of comparison on stack
(1)  256/    9143 : CE FF               	st 		@-1(p2) 	
(1)  257/    9145 : (MACRO)             	lpi 	p3,EvaluateExpression-1 							; and evaluate the RHS.
(1)  257/    9145 : C4 93                       ldi     (EVALUATEEXPRESSION-1) / 256
(1)  257/    9147 : 37                          xpah    P3
(1)  257/    9148 : C4 87                       ldi     (EVALUATEEXPRESSION-1) & 255
(1)  257/    914A : 33                          xpal    P3
(1)  258/    914B : 3F                  	xppc 	p3
(1)  259/    914C : 01                  	xae 														; result in E
(1)  260/    914D : C6 02               	ld 		@2(p2) 												; fix the stack back up.
(1)  261/    914F : 06                  	csa 														; check for error
(1)  262/    9150 : 94 2B               	jp 		__EX_ReportErrorE 									; we have got Left -2(p2) and operator -1(p2) and right (E)
(1)  263/    9152 : C2 FF               	ld 		-1(p2) 												; check if operator is <
(1)  264/    9154 : E4 3C               	xri 	'<'
(1)  265/    9156 : 98 19               	jz 		__EX_IF_LessThan
(1)  266/    9158 : C2 FE               	ld 		-2(p2) 												; XOR the two values together
(1)  267/    915A : 60                  	xre 			
(1)  268/    915B : 98 02               	jz 		__EX_IsEqual
(1)  269/    915D : C4 08               	ldi 	0x08
(1)  270/    915F :                     __EX_IsEqual:													; at this point, A = 8 (different) A = 0 (equal)
(1)  271/    915F : 01                  	xae 														; put in E (8 different, 0 same)
(1)  272/    9160 : C2 FF               	ld 		-1(p2) 												; get operator.
(1)  273/    9162 : D4 08               	ani 	0x08 												; # => $23 : = => $3D so A = 0 (for #) 8 (for =)
(1)  274/    9164 : 60                  	xre 														; if A = 0, E = 8 equal and = test and vice versa
(1)  275/    9165 :                     __EXNextCommand3IfZero:
(1)  276/    9165 : 98 92               	jz 		__EXNextCommand3 									; so the XOR will be non zero, so this is pass
(1)  277/    9167 :                     __EX_IF_Succeed:
(1)  278/    9167 : C1 00               	ld 		0(p1)												; look at next character
(1)  279/    9169 : E4 3B               	xri 	';'													; error if not semicolon.
(1)  280/    916B : 9C A3               	jnz 	__EX_NEW_Syntax
(1)  281/    916D : C5 01               	ld 		@1(p1)												; skip over it.
(1)  282/    916F :                     __EXExit4:
(1)  283/    916F : 90 A3               	jmp 	__EXExit3 											; just exit , ready to do the 'success' code.
(1)  284/    9171 :                     
(1)  285/    9171 :                     __EX_IF_LessThan:
(1)  286/    9171 : C2 FE               	ld 		-2(p2) 												; get left
 AS V1.42 Beta [Bld 102] - source file minol.asm(execute.asm) - page 8 - 12/10/2015 15:02:01


(1)  287/    9173 : 03                  	scl 														; subtract right
(1)  288/    9174 : 78                  	cae
(1)  289/    9175 : 06                  	csa 														; CY/L = 0 if succeeded.
(1)  290/    9176 : 94 EF               	jp 		__EX_IF_Succeed
(1)  291/    9178 :                     __EXNextCommand4:
(1)  292/    9178 : C4 00               	ldi 	0 													; clear A so can use the JZ above.
(1)  293/    917A : 90 E9               	jmp 	__EXNextCommand3IfZero 								; failed.
(1)  294/    917C :                     
(1)  295/    917C :                     __EX_ReportErrorA:
(1)  296/    917C : 01                  	xae
(1)  297/    917D :                     __EX_ReportErrorE:
(1)  298/    917D : (MACRO)             	lpi 	p3,__EX_ReportError-1 								; long jump
(1)  298/    917D : C4 90                       ldi     (__EX_REPORTERROR-1) / 256
(1)  298/    917F : 37                          xpah    P3
(1)  298/    9180 : C4 61                       ldi     (__EX_REPORTERROR-1) & 255
(1)  298/    9182 : 33                          xpal    P3
(1)  299/    9183 : 3F                  	xppc 	p3
(1)  300/    9184 :                     
(1)  301/    9184 :                     ; ****************************************************************************************************************
(1)  302/    9184 :                     ;										IN <variable>.... ; input
(1)  303/    9184 :                     ; ****************************************************************************************************************
(1)  304/    9184 :                     
(1)  305/    9184 :                     __EX_Command_IN:
(1)  306/    9184 : (MACRO)             	lpi 	p3,__EXSkipCharacters-1
(1)  306/    9184 : C4 92                       ldi     (__EXSKIPCHARACTERS-1) / 256
(1)  306/    9186 : 37                          xpah    P3
(1)  306/    9187 : C4 15                       ldi     (__EXSKIPCHARACTERS-1) & 255
(1)  306/    9189 : 33                          xpal    P3
(1)  307/    918A : C4 01               	ldi 	1 													; skip over 1 character (N) and spaces
(1)  308/    918C : 3F                  	xppc 	p3
(1)  309/    918D : (MACRO)             	lpi 	p3,InCommand-1 										; handled via another source file.
(1)  309/    918D : C4 92                       ldi     (INCOMMAND-1) / 256
(1)  309/    918F : 37                          xpah    P3
(1)  309/    9190 : C4 33                       ldi     (INCOMMAND-1) & 255
(1)  309/    9192 : 33                          xpal    P3
(1)  310/    9193 : 3F                  	xppc 	p3
(1)  311/    9194 : 01                  	xae 														; save error code.
(1)  312/    9195 : 06                  	csa 														; check for error.
(1)  313/    9196 : 94 E5               	jp 		__EX_ReportErrorE 									; if occurred, report it.
(1)  314/    9198 : 90 DE               	jmp 	__EXNextCommand4
(1)  315/    919A :                     
(1)  316/    919A :                     ; ****************************************************************************************************************
(1)  317/    919A :                     ;										 GOTO <expr> transfer control
(1)  318/    919A :                     ; ****************************************************************************************************************
(1)  319/    919A :                     
(1)  320/    919A :                     __EX_Command_GOTO:
(1)  321/    919A : (MACRO)             	lpi 	p3,__EXSkipCharacters-1
(1)  321/    919A : C4 92                       ldi     (__EXSKIPCHARACTERS-1) / 256
(1)  321/    919C : 37                          xpah    P3
(1)  321/    919D : C4 15                       ldi     (__EXSKIPCHARACTERS-1) & 255
(1)  321/    919F : 33                          xpal    P3
(1)  322/    91A0 : C4 03               	ldi 	3 													; skip O T O
(1)  323/    91A2 : 3F                  	xppc 	p3
(1)  324/    91A3 : (MACRO)             	lpi 	p3,EvaluateExpression-1 							; get line number to GOTO ... to :)
(1)  324/    91A3 : C4 93                       ldi     (EVALUATEEXPRESSION-1) / 256
(1)  324/    91A5 : 37                          xpah    P3
(1)  324/    91A6 : C4 87                       ldi     (EVALUATEEXPRESSION-1) & 255
(1)  324/    91A8 : 33                          xpal    P3
(1)  325/    91A9 : 3F                  	xppc 	p3
(1)  326/    91AA : 01                  	xae 														; save in E
 AS V1.42 Beta [Bld 102] - source file minol.asm(execute.asm) - page 9 - 12/10/2015 15:02:01


(1)  327/    91AB : 06                  	csa
(1)  328/    91AC : 94 CF               	jp 		__EX_ReportErrorE									; error in expression.
(1)  329/    91AE :                     
(1)  330/    91AE : (MACRO)             	lpi 	p3,FindProgramLine-1 								; Find program line.
(1)  330/    91AE : C4 92                       ldi     (FINDPROGRAMLINE-1) / 256
(1)  330/    91B0 : 37                          xpah    P3
(1)  330/    91B1 : C4 2E                       ldi     (FINDPROGRAMLINE-1) & 255
(1)  330/    91B3 : 33                          xpal    P3
(1)  331/    91B4 : 40                  	lde 														; with that number.		
(1)  332/    91B5 : 3F                  	xppc 	p3 												
(1)  333/    91B6 : 06                  	csa 
(1)  334/    91B7 : 94 13               	jp 		__EX_GOTO_NotFound 									; if CY/L = 0 then not found.
(1)  335/    91B9 :                     
(1)  336/    91B9 : (MACRO)             	lpi 	p3,CurrentLine
(1)  336/    91B9 : C4 0C                       ldi     (CURRENTLINE) / 256
(1)  336/    91BB : 37                          xpah    P3
(1)  336/    91BC : C4 A2                       ldi     (CURRENTLINE) & 255
(1)  336/    91BE : 33                          xpal    P3
(1)  337/    91BF : 40                  	lde  														; save current line number
(1)  338/    91C0 : CB 00               	st 		(p3)
(1)  339/    91C2 : 35                  	xpah 	p1 													; save P1 returned from line find in Current address
(1)  340/    91C3 : CB 01               	st 		CurrentAddr-CurrentLine(p3)
(1)  341/    91C5 : 35                  	xpah 	p1
(1)  342/    91C6 : 31                  	xpal 	p1
(1)  343/    91C7 : CB 01               	st 		CurrentAddr-CurrentLine(p3)
(1)  344/    91C9 : 31                  	xpal 	p1
(1)  345/    91CA : 90 A3               	jmp 	__EXExit4 											; exit, don't skip over.
(1)  346/    91CC :                     
(1)  347/    91CC :                     __EX_GOTO_NotFound:
(1)  348/    91CC : C4 01               	ldi 	ERROR_Label 
(1)  349/    91CE : 90 AC               	jmp 	__EX_ReportErrorA
(1)  350/    91D0 :                     
(1)  351/    91D0 :                     ; ****************************************************************************************************************
(1)  352/    91D0 :                     ;													L(IST or ET)
(1)  353/    91D0 :                     ; ****************************************************************************************************************
(1)  354/    91D0 :                     
(1)  355/    91D0 :                     __EX_Decode_L:
(1)  356/    91D0 : C1 00               	ld 		0(p1)												; look at next
(1)  357/    91D2 : E4 45               	xri 	'E'													; is it LE
(1)  358/    91D4 : 98 19               	jz 		__EX_Command_LET
(1)  359/    91D6 :                     
(1)  360/    91D6 :                     ; ****************************************************************************************************************
(1)  361/    91D6 :                     ;											LIST List Program
(1)  362/    91D6 :                     ; ****************************************************************************************************************
(1)  363/    91D6 :                     
(1)  364/    91D6 :                     __EX_Command_LIST:
(1)  365/    91D6 : (MACRO)             	lpi 	p3,ListProgram-1
(1)  365/    91D6 : C4 92                       ldi     (LISTPROGRAM-1) / 256
(1)  365/    91D8 : 37                          xpah    P3
(1)  365/    91D9 : C4 32                       ldi     (LISTPROGRAM-1) & 255
(1)  365/    91DB : 33                          xpal    P3
(1)  366/    91DC : 3F                  	xppc 	p3
(1)  367/    91DD : 90 99               	jmp 	__EXNextCommand4
(1)  368/    91DF :                     
(1)  369/    91DF :                     ; ****************************************************************************************************************
(1)  370/    91DF :                     ;											OS Boot Monitor
(1)  371/    91DF :                     ; ****************************************************************************************************************
(1)  372/    91DF :                     
(1)  373/    91DF :                     __EX_Command_OS:
(1)  374/    91DF : C4 05               	ldi 	ERROR_Syntax
 AS V1.42 Beta [Bld 102] - source file minol.asm(execute.asm) - page 10 - 12/10/2015 15:02:01


(1)  375/    91E1 : 01                  	xae
(1)  376/    91E2 : C1 00               	ld 		0(p1) 												; check it is OS
(1)  377/    91E4 : E4 53               	xri 	'S'
(1)  378/    91E6 : 9C 95               	jnz		__EX_ReportErrorE
(1)  379/    91E8 : (MACRO)             	lpi 	p3,MonitorBoot-1 									; boot to monitor
(1)  379/    91E8 : C4 02                       ldi     (MONITORBOOT-1) / 256
(1)  379/    91EA : 37                          xpah    P3
(1)  379/    91EB : C4 0F                       ldi     (MONITORBOOT-1) & 255
(1)  379/    91ED : 33                          xpal    P3
(1)  380/    91EE : 3F                  	xppc 	p3
(1)  381/    91EF :                     
(1)  382/    91EF :                     ; ****************************************************************************************************************
(1)  383/    91EF :                     ;								LET var = expr assignment, LET optional
(1)  384/    91EF :                     ; ****************************************************************************************************************
(1)  385/    91EF :                     
(1)  386/    91EF :                     __EX_Command_LET:
(1)  387/    91EF : (MACRO)             	lpi 	p3,__EXSkipCharacters-1
(1)  387/    91EF : C4 92                       ldi     (__EXSKIPCHARACTERS-1) / 256
(1)  387/    91F1 : 37                          xpah    P3
(1)  387/    91F2 : C4 15                       ldi     (__EXSKIPCHARACTERS-1) & 255
(1)  387/    91F4 : 33                          xpal    P3
(1)  388/    91F5 : C4 02               	ldi 	2													; skip over E and T
(1)  389/    91F7 : 3F                  	xppc 	p3
(1)  390/    91F8 :                     __EX_Command_LET_Optional:										; analyse to look for a LET.
(1)  391/    91F8 :                     
(1)  392/    91F8 :                     	; TODO: push address of var on stack (use left over one from ReadHL)
(1)  393/    91F8 :                     	; TODO: Check =
(1)  394/    91F8 :                     	; TODO: Do R-Expr
(1)  395/    91F8 :                     	; TODO: Do Assignment.
(1)  396/    91F8 :                     
(1)  397/    91F8 :                     wait4:
(1)  398/    91F8 : 90 FE               	jmp 	wait4
(1)  399/    91FA :                     
(1)  400/    91FA :                     ; ****************************************************************************************************************
(1)  401/    91FA :                     ;													Jump Table.
(1)  402/    91FA :                     ; ****************************************************************************************************************
(1)  403/    91FA :                     
(1)  404/    91FA :                     tableEntry macro ch,code
(1)  405/    91FA :                     	db 		ch
(1)  406/    91FA :                     	dw 		code-1
(1)  407/    91FA :                     	endm
(1)  408/    91FA :                     
(1)  409/    91FA :                     JumpTable:
(1)  410/    91FA : (MACRO)             	tableEntry 'C',__EX_Decode_C
(1)  410/    91FA : 43                          db              'C'
(1)  410/    91FB : 99 90                       dw              __EX_DECODE_C-1
(1)  411/    91FD : (MACRO)             	tableEntry 'E',__EX_Command_END
(1)  411/    91FD : 45                          db              'E'
(1)  411/    91FE : E8 90                       dw              __EX_COMMAND_END-1
(1)  412/    9200 : (MACRO)             	tableEntry 'G',__EX_Command_GOTO
(1)  412/    9200 : 47                          db              'G'
(1)  412/    9201 : 99 91                       dw              __EX_COMMAND_GOTO-1
(1)  413/    9203 : (MACRO)             	tableEntry 'N',__EX_Command_NEW
(1)  413/    9203 : 4E                          db              'N'
(1)  413/    9204 : FA 90                       dw              __EX_COMMAND_NEW-1
(1)  414/    9206 : (MACRO)             	tableEntry 'I',__EX_Decode_I
(1)  414/    9206 : 49                          db              'I'
(1)  414/    9207 : 15 91                       dw              __EX_DECODE_I-1
(1)  415/    9209 : (MACRO)             	tableEntry 'L',__EX_Decode_L
(1)  415/    9209 : 4C                          db              'L'
 AS V1.42 Beta [Bld 102] - source file minol.asm(execute.asm) - page 11 - 12/10/2015 15:02:01


(1)  415/    920A : CF 91                       dw              __EX_DECODE_L-1
(1)  416/    920C : (MACRO)             	tableEntry 'O',__EX_Command_OS
(1)  416/    920C : 4F                          db              'O'
(1)  416/    920D : DE 91                       dw              __EX_COMMAND_OS-1
(1)  417/    920F : (MACRO)             	tableEntry 'P',__EX_Command_PR
(1)  417/    920F : 50                          db              'P'
(1)  417/    9210 : B3 90                       dw              __EX_COMMAND_PR-1
(1)  418/    9212 : (MACRO)             	tableEntry 'R',__EX_Command_RUN
(1)  418/    9212 : 52                          db              'R'
(1)  418/    9213 : 90 90                       dw              __EX_COMMAND_RUN-1
(1)  419/    9215 : 00                  	db 		0
(1)  420/    9216 :                     
(1)  421/    9216 :                     ; ****************************************************************************************************************
(1)  422/    9216 :                     ;							Skip A characters from P1, and any subsequent spaces.
(1)  423/    9216 :                     ; ****************************************************************************************************************
(1)  424/    9216 :                     
(1)  425/    9216 :                     __EXSkipCharacters:
(1)  426/    9216 : CA FF               	st 		-1(p2)												; save number to skip
(1)  427/    9218 :                     __EXSkipOne:
(1)  428/    9218 : C1 00               	ld 		(p1) 												; end skip if ASCIIZ end of string
(1)  429/    921A : 98 12               	jz 		__EXSkipExit
(1)  430/    921C : C5 01               	ld 		@1(p1)												; advance by one.
(1)  431/    921E : BA FF               	dld 	-1(p2)												; done all of them
(1)  432/    9220 : 9C F6               	jnz 	__EXSkipOne											; no, keep going
(1)  433/    9222 :                     __EXSkipSpace:
(1)  434/    9222 : C1 00               	ld 		(p1)												; now skip over any spaces, 
(1)  435/    9224 : 98 08               	jz 		__EXSkipExit										; check if end of string
(1)  436/    9226 : C5 01               	ld 		@1(p1)												; get next char
(1)  437/    9228 : E4 20               	xri 	' '													; and loop back if space
(1)  438/    922A : 98 F6               	jz 		__EXSkipSpace
(1)  439/    922C : C5 FF               	ld 		@-1(p1)												; unpick final non-space bump.
(1)  440/    922E :                     __EXSkipExit
(1)  441/    922E : 3F                  	xppc 	p3
(1)  442/    922F :                     
(1)  443/    922F :                     
      66/    922F :                     	include source\program.asm 									; program space management.
(1)    1/    922F :                     
(1)    2/    922F :                     
(1)    3/    922F :                     ; ****************************************************************************************************************
(1)    4/    922F :                     ;							Find Program Line A, P1 points to it CY/L = 0 = not found
(1)    5/    922F :                     ; ****************************************************************************************************************
(1)    6/    922F :                     
(1)    7/    922F :                     FindProgramLine:	
(1)    8/    922F : 02                  	ccl 														; A Line # -> P1 start of line. CY/L = 0 = error.		
(1)    9/    9230 : 3F                  	xppc 	p3
(1)   10/    9231 :                     
(1)   11/    9231 :                     ; ****************************************************************************************************************
(1)   12/    9231 :                     ;											Erase the Program Completely
(1)   13/    9231 :                     ; ****************************************************************************************************************
(1)   14/    9231 :                     
(1)   15/    9231 :                     NewProgram:
(1)   16/    9231 : 3F                  	xppc 	p3
(1)   17/    9232 :                     
(1)   18/    9232 :                     ; ****************************************************************************************************************
(1)   19/    9232 :                     ;												Run current program
(1)   20/    9232 :                     ; ****************************************************************************************************************
(1)   21/    9232 :                     
(1)   22/    9232 :                     RunProgram:
(1)   23/    9232 : 3F                  	xppc 	p3
(1)   24/    9233 :                     
 AS V1.42 Beta [Bld 102] - source file minol.asm(program.asm) - page 12 - 12/10/2015 15:02:01


(1)   25/    9233 :                     ; ****************************************************************************************************************
(1)   26/    9233 :                     ;													List program
(1)   27/    9233 :                     ; ****************************************************************************************************************
(1)   28/    9233 :                     
(1)   29/    9233 :                     ListProgram:
(1)   30/    9233 : 3F                  	xppc 	p3
(1)   31/    9234 :                     	
      67/    9234 :                     	include source\console.asm 									; PR and IN command execution.
(1)    1/    9234 :                     
(1)    2/    9234 :                     
(1)    3/    9234 :                     InCommand:
(1)    4/    9234 :                     	; TODO process input, P1 ^ line returns CY/L = 0 if ok, CY/L = 1 and A = Error if not OK.
(1)    5/    9234 : 02                  	ccl
(1)    6/    9235 : C4 FF               	ldi 	0xFF
(1)    7/    9237 : 3F                  	xppc 	p3
(1)    8/    9238 :                     
(1)    9/    9238 :                     OutCommand:
(1)   10/    9238 :                     	; TODO process output, P1 ^ line returns CY/L = 0 if ok, CY/L = 1 and A = Error if not OK.
(1)   11/    9238 : 02                  	ccl
(1)   12/    9239 : C4 FF               	ldi 	0xFF
(1)   13/    923B : 3F                  	xppc 	p3
      68/    923C :                     
      69/    923C :                     ; ****************************************************************************************************************
      70/    923C :                     ;						Routines developed and tested seperately in other subdirectories.
      71/    923C :                     ; ****************************************************************************************************************
      72/    923C :                     
      73/    923C :                     	include ..\screen\screen.asm 								; screen I/O stuff.
(1)    1/    923C :                     ; ****************************************************************************************************************
(1)    2/    923C :                     ; ****************************************************************************************************************
(1)    3/    923C :                     ;
(1)    4/    923C :                     ;											Screen I/O, MINOL ROM
(1)    5/    923C :                     ;											=====================
(1)    6/    923C :                     ;
(1)    7/    923C :                     ;	Provides Character and String Input/Output functionality.
(1)    8/    923C :                     ;
(1)    9/    923C :                     ; ****************************************************************************************************************
(1)   10/    923C :                     ; ****************************************************************************************************************
(1)   11/    923C :                     
(1)   12/    923C :                     ; ****************************************************************************************************************
(1)   13/    923C :                     ; ****************************************************************************************************************
(1)   14/    923C :                     ;
(1)   15/    923C :                     ;	Print routine. Prints either character in A, or ASCIIZ string at P1 (if A is zero). Preserves all registers
(1)   16/    923C :                     ;	except if printing string, P1 points to the character after the NULL terminator.
(1)   17/    923C :                     ;
(1)   18/    923C :                     ;	Scrolls automatically. Understands character codes 32-255, 8 (Backspace) 12 (Clear Screen) 13 (Carriage
(1)   19/    923C :                     ;	Return). Others are currently ignored (except 0, see above). Note L/C values (97....) display those characters
(1)   20/    923C :                     ;	in the ROM font *not* lower case :)
(1)   21/    923C :                     ;
(1)   22/    923C :                     ; ****************************************************************************************************************
(1)   23/    923C :                     ; ****************************************************************************************************************
(1)   24/    923C :                     
(1)   25/    923C :                     Print:
(1)   26/    923C :                     	section 	Print
(1)   27/    923C :                     
(1)   28/    923C : CE FF               	st 		@-1(p2) 											; save character on stack.
(1)   29/    923E : 35                  	xpah 	p1
(1)   30/    923F : CE FF               	st 		@-1(p2) 											; save P1 on the stack.
(1)   31/    9241 : 31                  	xpal 	p1
(1)   32/    9242 : CE FF               	st 		@-1(p2)
(1)   33/    9244 : 01                  	xae 	
 AS V1.42 Beta [Bld 102] - source file minol.asm(screen.asm) - page 13 - 12/10/2015 15:02:01


(1)   34/    9245 : CE FF               	st 		@-1(p2) 											; save E on the stack.
(1)   35/    9247 :                     
(1)   36/    9247 : C2 03               	ld 		3(p2) 												; read character 
(1)   37/    9249 : 9C 12               	jnz 	__PRPrintCharacterA 								; if non zero print it on its own.
(1)   38/    924B :                     
(1)   39/    924B :                     __PRPrintString:
(1)   40/    924B : C2 01               	ld 		1(p2) 												; restore original P1
(1)   41/    924D : 31                  	xpal 	p1
(1)   42/    924E : C2 02               	ld 		2(p2)
(1)   43/    9250 : 35                  	xpah 	p1 													; read character at P1.
(1)   44/    9251 : C5 01               	ld 		@1(p1)
(1)   45/    9253 : 01                  	xae 														; save in E.
(1)   46/    9254 : 35                  	xpah 	p1 													; write P1 back.
(1)   47/    9255 : CA 02               	st 		2(p2)
(1)   48/    9257 : 31                  	xpal 	p1
(1)   49/    9258 : CA 01               	st 		1(p2)
(1)   50/    925A : 40                  	lde 														; get character from E
(1)   51/    925B : 98 46               	jz 		__PRExitNoCheck 									; exit without loop check.
(1)   52/    925D :                     ;
(1)   53/    925D :                     ;	Print character in A now ; throughout it is stored in E.
(1)   54/    925D :                     ;
(1)   55/    925D :                     __PRPrintCharacterA:
(1)   56/    925D : 01                  	xae 														; save character in E.
(1)   57/    925E :                     ;
(1)   58/    925E :                     ;	Read cursor and set P1 to that address
(1)   59/    925E :                     ;
(1)   60/    925E : C4 0C               	ldi 	ScreenCursor/256 									; set P1 to point to screen cursor
(1)   61/    9260 : 35                  	xpah 	p1
(1)   62/    9261 : C4 80               	ldi 	ScreenCursor&255
(1)   63/    9263 : 31                  	xpal 	p1
(1)   64/    9264 : C1 00               	ld 		0(p1) 												; put cursor position in P1.L
(1)   65/    9266 : 31                  	xpal 	p1
(1)   66/    9267 :                     ;
(1)   67/    9267 :                     ;	Check for control
(1)   68/    9267 :                     ;
(1)   69/    9267 : 40                  	lde 														; look at character
(1)   70/    9268 : D4 E0               	ani 	0xE0 												; is it code 0-31
(1)   71/    926A : 98 45               	jz 		__PRIsControlChar
(1)   72/    926C :                     ;
(1)   73/    926C :                     ;	Print non-control
(1)   74/    926C :                     ;
(1)   75/    926C : 40                  	lde 														; read character
(1)   76/    926D : 03                  	scl 														; CY/L clear if < 96
(1)   77/    926E : FC 60               	cai 	96 
(1)   78/    9270 : 06                  	csa 	 	 												; skip if carry set
(1)   79/    9271 : E4 80               	xri 	0x80													
(1)   80/    9273 : 94 04               	jp 		__PRNotASCII
(1)   81/    9275 : 40                  	lde 														; if ASCII make 6 bit.
(1)   82/    9276 : D4 3F               	ani 	0x3F
(1)   83/    9278 : 01                  	xae
(1)   84/    9279 :                     __PRNotASCII:
(1)   85/    9279 : 40                  	lde 														; get character.
(1)   86/    927A : C9 00               	st 		(p1) 												; save in shadow memory
(1)   87/    927C : 35                  	xpah 	p1 													; switch to VRAM, preserving A.
(1)   88/    927D : C4 00               	ldi 	0 													
(1)   89/    927F : 35                  	xpah 	p1
(1)   90/    9280 : CD 01               	st 		@1(p1) 												; save in screen memory, advance write position.
(1)   91/    9282 :                     ;
(1)   92/    9282 :                     ;	Write cursor position back from P1.L
(1)   93/    9282 :                     ;
 AS V1.42 Beta [Bld 102] - source file minol.asm(screen.asm) - page 14 - 12/10/2015 15:02:01


(1)   94/    9282 :                     __PRUpdateCursor:
(1)   95/    9282 : C4 0C               	ldi		ScreenCursor / 256 									; set P1 to point to screen cursor, restore position to P1
(1)   96/    9284 : 35                  	xpah 	p1
(1)   97/    9285 : C4 80               	ldi 	ScreenCursor & 255 
(1)   98/    9287 : 31                  	xpal 	p1 													; after this, adjusted cursor position is in AC.
(1)   99/    9288 : C9 00               	st 		(p1) 												; write back in cursor position
(1)  100/    928A : 94 13               	jp 		__PRExit 											; if position is off the bottom then scroll.
(1)  101/    928C :                     ;
(1)  102/    928C :                     ;	Scroll display
(1)  103/    928C :                     ;
(1)  104/    928C : C4 0C               	ldi 	(ScreenMirror+16) / 256 							; point P1 to 2nd line.
(1)  105/    928E : 35                  	xpah 	p1
(1)  106/    928F : C4 10               	ldi 	(ScreenMirror+16) & 255
(1)  107/    9291 :                     __PRScrollLoop:
(1)  108/    9291 : 31                  	xpal 	p1
(1)  109/    9292 : C1 00               	ld 		0(p1) 												; copy char to previous line
(1)  110/    9294 : C9 F0               	st 		-16(p1)
(1)  111/    9296 : C5 01               	ld 		@1(p1) 												; bump pointer.
(1)  112/    9298 : 31                  	xpal 	p1
(1)  113/    9299 : 94 F6               	jp 		__PRScrollLoop
(1)  114/    929B : C4 70               	ldi 	128-16 												; clear from and move to last line
(1)  115/    929D : 90 3D               	jmp 	__PRClearFromMoveTo
(1)  116/    929F :                     ;
(1)  117/    929F :                     ;	Exit screen drawing routine.
(1)  118/    929F :                     ;
(1)  119/    929F :                     __PRExit:
(1)  120/    929F : C2 03               	ld 		3(p2) 												; if character was zero, loop
(1)  121/    92A1 : 98 A8               	jz 		__PRPrintString 									; back as printing string at P1.
(1)  122/    92A3 :                     __PRExitNoCheck:
(1)  123/    92A3 : C6 01               	ld 		@1(p2) 												; restore E
(1)  124/    92A5 : 01                  	xae
(1)  125/    92A6 : C6 01               	ld 		@1(p2) 												; restore P1
(1)  126/    92A8 : 31                  	xpal 	p1
(1)  127/    92A9 : C6 01               	ld 		@1(p2)
(1)  128/    92AB : 35                  	xpah 	p1
(1)  129/    92AC : C6 01               	ld 		@1(p2)												; restore A
(1)  130/    92AE : 3F                  	xppc 	p3 													; return
(1)  131/    92AF : 90 8B               	jmp 	Print 												; make re-entrant.
(1)  132/    92B1 :                     ;
(1)  133/    92B1 :                     ;	Check for supported control characters 8 (Backspace) 12 (Clear) 13 (Carriage Return)
(1)  134/    92B1 :                     ;
(1)  135/    92B1 :                     __PRIsControlChar:
(1)  136/    92B1 : 40                  	lde 														; restore character.
(1)  137/    92B2 : E4 0D               	xri 	13 													; carriage return ? (13)
(1)  138/    92B4 : 98 1B               	jz 		__PRIsReturn
(1)  139/    92B6 : E4 01               	xri 	13!12 												; form feed ? (12)
(1)  140/    92B8 : 98 20               	jz 		__PRClearScreen
(1)  141/    92BA : E4 04               	xri 	12!8 												; backspace ? (8)
(1)  142/    92BC : 9C E1               	jnz 	__PRExit 
(1)  143/    92BE :                     ;
(1)  144/    92BE :                     ;	Handle backspace (8)
(1)  145/    92BE :                     ;
(1)  146/    92BE : 31                  	xpal 	p1 													; check cursor position is zero
(1)  147/    92BF : 98 DE               	jz 		__PRExit 											; if it is, cannot backspace so exit.
(1)  148/    92C1 : 31                  	xpal 	p1  												; put it back
(1)  149/    92C2 : C5 FF               	ld 		@-1(p1)												; move it back one
(1)  150/    92C4 : C4 20               	ldi 	' '	 												; erase in shadow
(1)  151/    92C6 : C9 00               	st 		(p1)
(1)  152/    92C8 : C4 00               	ldi 	0 													; point P1 to VRAM
(1)  153/    92CA : 35                  	xpah 	p1
 AS V1.42 Beta [Bld 102] - source file minol.asm(screen.asm) - page 15 - 12/10/2015 15:02:01


(1)  154/    92CB : C4 20               	ldi 	' '													; erase in VRAM
(1)  155/    92CD : C9 00               	st 		(p1)
(1)  156/    92CF : 90 B1               	jmp 	__PRUpdateCursor 									; and exit
(1)  157/    92D1 :                     ;
(1)  158/    92D1 :                     ;	Handle carriage return (13)
(1)  159/    92D1 :                     ;
(1)  160/    92D1 :                     __PRIsReturn:
(1)  161/    92D1 : 31                  	xpal 	p1 													; cursor position in A
(1)  162/    92D2 : D4 F0               	ani 	0xF0 												; start of current line
(1)  163/    92D4 : 02                  	ccl 														; down one line
(1)  164/    92D5 : F4 10               	adi 	0x10 	
(1)  165/    92D7 : 31                  	xpal 	p1 													; put it back in P1.
(1)  166/    92D8 : 90 A8               	jmp 	__PRUpdateCursor
(1)  167/    92DA :                     ;
(1)  168/    92DA :                     ;	Handle clear screen (12)
(1)  169/    92DA :                     ;
(1)  170/    92DA :                     __PRClearScreen:
(1)  171/    92DA : C4 00               	ldi 	0 													; clear shadow memory from here.
(1)  172/    92DC :                     ;
(1)  173/    92DC :                     ;	From position A, clear the memory in the shadow screen to the end, copy the shadow screen to VRAM
(1)  174/    92DC :                     ;	then use position A as the new cursor position.
(1)  175/    92DC :                     ;
(1)  176/    92DC :                     __PRClearFromMoveTo:
(1)  177/    92DC : CE FF               	st 		@-1(p2) 											; save this position, the cursor goes here.
(1)  178/    92DE :                     __PRClearLoop:
(1)  179/    92DE : 31                  	xpal 	p1 													; save position in P1.
(1)  180/    92DF : C4 20               	ldi 	' '													; write space there.
(1)  181/    92E1 : CD 01               	st 		@1(p1)
(1)  182/    92E3 : 31                  	xpal 	p1
(1)  183/    92E4 : 94 F8               	jp 		__PRClearLoop 										; until reached shadow memory start.
(1)  184/    92E6 : C4 00               	ldi 	0 													; now copy shadow memory to screen memory.
(1)  185/    92E8 :                     __PRCopy:
(1)  186/    92E8 : 31                  	xpal 	p1 													; set up P1.L
(1)  187/    92E9 : C4 0C               	ldi 	ScreenMirror/256 									; point to shadow memory.
(1)  188/    92EB : 35                  	xpah 	p1 													
(1)  189/    92EC : C1 00               	ld 		(p1) 												; read shadow memory
(1)  190/    92EE : 35                  	xpah 	p1 													; zero P1.H preserving A
(1)  191/    92EF : C4 00               	ldi 	0
(1)  192/    92F1 : 35                  	xpah 	p1
(1)  193/    92F2 : CD 01               	st 		@1(p1) 												; save and increment p1
(1)  194/    92F4 : 31                  	xpal 	p1 
(1)  195/    92F5 : 94 F1               	jp 		__PRCopy 											; keep doing till all copied.
(1)  196/    92F7 : C6 01               	ld 		@1(p2) 												; read cursor position
(1)  197/    92F9 : 31                  	xpal 	p1 													; put in P1.L
(1)  198/    92FA : 90 86               	jmp 	__PRUpdateCursor
(1)  199/    92FC :                     
(1)  200/    92FC :                     	endsection 	Print
(1)  201/    92FC :                     
(1)  202/    92FC :                     ; ****************************************************************************************************************
(1)  203/    92FC :                     ; ****************************************************************************************************************
(1)  204/    92FC :                     ;
(1)  205/    92FC :                     ;		Input a single character into A. Case is converted to Upper. All registers preserved except A
(1)  206/    92FC :                     ;
(1)  207/    92FC :                     ; ****************************************************************************************************************
(1)  208/    92FC :                     ; ****************************************************************************************************************
(1)  209/    92FC :                     
(1)  210/    92FC :                     GetChar:
(1)  211/    92FC :                     	section 	GetChar
(1)  212/    92FC : C4 08               	ldi 	0x8 												; set P1 to $8xx, and save P1.H
(1)  213/    92FE : 35                  	xpah 	p1
 AS V1.42 Beta [Bld 102] - source file minol.asm(screen.asm) - page 16 - 12/10/2015 15:02:01


(1)  214/    92FF : CE FF               	st 		@-1(p2)
(1)  215/    9301 :                     __GCWaitKey: 													; wait for key press
(1)  216/    9301 : C1 00               	ld 		0(p1)
(1)  217/    9303 : 94 FC               	jp 		__GCWaitKey
(1)  218/    9305 : D4 7F               	ani	 	0x7F 												; throw away the upper bit.
(1)  219/    9307 : CA FF               	st 		-1(p2) 												; save it below stack
(1)  220/    9309 :                     __GCWaitRelease:
(1)  221/    9309 : C1 00               	ld 		0(p1) 												; wait for release
(1)  222/    930B : D4 80               	ani 	0x80
(1)  223/    930D : 9C FA               	jnz 	__GCWaitRelease
(1)  224/    930F : C6 01               	ld 		@1(p2) 												; restore P1.H
(1)  225/    9311 : 35                  	xpah 	p1
(1)  226/    9312 : C2 FE               	ld 		-2(p2) 												; restore saved value
(1)  227/    9314 : 02                  	ccl
(1)  228/    9315 : F4 20               	adi 	0x20												; will make lower case -ve
(1)  229/    9317 : 94 02               	jp 		__GCNotLower
(1)  230/    9319 : FC 20               	cai 	0x20 												; capitalise
(1)  231/    931B :                     __GCNotLower:
(1)  232/    931B : F4 E0               	adi 	0xE0 												; fix up.
(1)  233/    931D : 3F                  	xppc 	p3 													; return
(1)  234/    931E : 90 DC               	jmp 	GetChar 											; make re-entrant
(1)  235/    9320 :                     	endsection 	GetChar
(1)  236/    9320 :                     
(1)  237/    9320 :                     ; ****************************************************************************************************************
(1)  238/    9320 :                     ; ****************************************************************************************************************
(1)  239/    9320 :                     ;
(1)  240/    9320 :                     ;			Read an ASCIIZ string from keyboard into P1 of length A maximum (excludes NULL terminator)
(1)  241/    9320 :                     ;
(1)  242/    9320 :                     ; ****************************************************************************************************************
(1)  243/    9320 :                     ; ****************************************************************************************************************
(1)  244/    9320 :                     
(1)  245/    9320 :                     GetString:
(1)  246/    9320 :                     	section GetString
(1)  247/    9320 : CE FF               	st 		@-1(p2) 											; save length on stack.
(1)  248/    9322 : 37                  	xpah 	p3 													; save P3 on stack
(1)  249/    9323 : CE FF               	st 		@-1(p2)
(1)  250/    9325 : 33                  	xpal 	p3
(1)  251/    9326 : CE FF               	st 		@-1(p2)
(1)  252/    9328 : 40                  	lde
(1)  253/    9329 : CE FF               	st 		@-1(p2) 											; save E on stack
(1)  254/    932B : C4 00               	ldi 	0 													; set E (current position) to A.
(1)  255/    932D : 01                  	xae
(1)  256/    932E :                     __GSLoop:
(1)  257/    932E : (MACRO)             	lpi 	p3,Print-1 											; print the prompt (half coloured square)
(1)  257/    932E : C4 92                       ldi     (PRINT-1) / 256
(1)  257/    9330 : 37                          xpah    P3
(1)  257/    9331 : C4 3B                       ldi     (PRINT-1) & 255
(1)  257/    9333 : 33                          xpal    P3
(1)  258/    9334 : C4 9B               	ldi 	155
(1)  259/    9336 : 3F                  	xppc 	p3
(1)  260/    9337 : (MACRO)             	lpi 	p3,GetChar-1 										; get a character
(1)  260/    9337 : C4 92                       ldi     (GETCHAR-1) / 256
(1)  260/    9339 : 37                          xpah    P3
(1)  260/    933A : C4 FB                       ldi     (GETCHAR-1) & 255
(1)  260/    933C : 33                          xpal    P3
(1)  261/    933D : 3F                  	xppc 	p3
(1)  262/    933E : C9 80               	st 		-0x80(p1) 											; save it in the current position.
(1)  263/    9340 : (MACRO)             	lpi 	p3,Print-1 											; erase the prompt with backspace.
(1)  263/    9340 : C4 92                       ldi     (PRINT-1) / 256
(1)  263/    9342 : 37                          xpah    P3
 AS V1.42 Beta [Bld 102] - source file minol.asm(screen.asm) - page 17 - 12/10/2015 15:02:01


(1)  263/    9343 : C4 3B                       ldi     (PRINT-1) & 255
(1)  263/    9345 : 33                          xpal    P3
(1)  264/    9346 : C4 08               	ldi 	8
(1)  265/    9348 : 3F                  	xppc 	p3
(1)  266/    9349 : C1 80               	ld 		-0x80(p1) 											; re-read character
(1)  267/    934B : D4 E0               	ani 	0xE0 												; check if control key.
(1)  268/    934D : 98 0F               	jz 		__GSControlKey 
(1)  269/    934F : 40                  	lde 														; get current position.
(1)  270/    9350 : E2 03               	xor 	3(p2) 												; reached maximum length of buffer ?
(1)  271/    9352 : 98 DA               	jz 		__GSLoop 											; if so, ignore the key and go round again.
(1)  272/    9354 : C1 80               	ld 		-0x80(p1) 											; get character and print it
(1)  273/    9356 : 3F                  	xppc 	p3
(1)  274/    9357 : C4 01               	ldi 	1 													; increment E
(1)  275/    9359 : 02                  	ccl
(1)  276/    935A : 70                  	ade
(1)  277/    935B : 01                  	xae
(1)  278/    935C : 90 D0               	jmp 	__GSLoop 											; and go round again.
(1)  279/    935E :                     ;
(1)  280/    935E :                     ;	Handle control keys (0x00-0x1F)
(1)  281/    935E :                     ;
(1)  282/    935E :                     __GSControlKey:
(1)  283/    935E : C1 80               	ld 		-0x80(p1) 											; get typed in key
(1)  284/    9360 : E4 08               	xri 	8 													; check for backspace.
(1)  285/    9362 : 98 17               	jz 		__GSBackspace 			
(1)  286/    9364 : E4 05               	xri 	8!13 												; check for CR
(1)  287/    9366 : 9C C6               	jnz 	__GSLoop 											; if not, ignore the key.
(1)  288/    9368 :                     ;
(1)  289/    9368 :                     ;	Carriage Return, ending input.
(1)  290/    9368 :                     ;
(1)  291/    9368 : C9 80               	st 		-0x80(p1) 											; replace the CR written with NULL terminator.
(1)  292/    936A : C4 0D               	ldi 	13 													; print CR
(1)  293/    936C : 3F                  	xppc 	p3
(1)  294/    936D : C6 01               	ld 		@1(p2) 												; pop E
(1)  295/    936F : 01                  	xae
(1)  296/    9370 : C6 01               	ld 		@1(p2) 												; pop P3
(1)  297/    9372 : 33                  	xpal 	p3
(1)  298/    9373 : C6 01               	ld 		@1(p2)
(1)  299/    9375 : 37                  	xpah 	p3
(1)  300/    9376 : C6 01               	ld 		@1(p2)												; pop A
(1)  301/    9378 : 3F                  	xppc 	p3 													; return
(1)  302/    9379 : 90 A5               	jmp 	GetString 											; make re-entrant (probably unneccessary !!)
(1)  303/    937B :                     ;
(1)  304/    937B :                     ;	Backspace entered
(1)  305/    937B :                     ;
(1)  306/    937B :                     __GSBackspace
(1)  307/    937B : 40                  	lde 														; if E = 0 we can't backspace any further.
(1)  308/    937C : 98 B0               	jz 		__GSLoop
(1)  309/    937E : C4 08               	ldi 	8 													; backspace on screen
(1)  310/    9380 : 3F                  	xppc 	p3
(1)  311/    9381 : C4 FF               	ldi 	0xFF 												; decrement E
(1)  312/    9383 : 02                  	ccl
(1)  313/    9384 : 70                  	ade
(1)  314/    9385 : 01                  	xae
(1)  315/    9386 : 90 A6               	jmp 	__GSLoop 											; and go round again.
(1)  316/    9388 :                     
(1)  317/    9388 :                     	endsection GetString
(1)  318/    9388 :                     
      74/    9388 :                     	include ..\expression\expression.asm 						; expression stuff.
(1)    1/    9388 :                     ; ****************************************************************************************************************
(1)    2/    9388 :                     ; ****************************************************************************************************************
 AS V1.42 Beta [Bld 102] - source file minol.asm(expression.asm) - page 18 - 12/10/2015 15:02:01


(1)    3/    9388 :                     ;
(1)    4/    9388 :                     ;											Expression, MINOL
(1)    5/    9388 :                     ;											=================
(1)    6/    9388 :                     ;
(1)    7/    9388 :                     ;	Terms are :
(1)    8/    9388 :                     ;		0-9* 		Numeric constant
(1)    9/    9388 :                     ;		A-Z 		Variables
(1)   10/    9388 :                     ;		'c'			Character ASCII value
(1)   11/    9388 :                     ;		(h,l) 		Memory direct access
(1)   12/    9388 :                     ;		! 			Random number
(1)   13/    9388 :                     ;
(1)   14/    9388 :                     ;	Operators are:	+,-,*,/
(1)   15/    9388 :                     ;
(1)   16/    9388 :                     ; ****************************************************************************************************************
(1)   17/    9388 :                     ; ****************************************************************************************************************
(1)   18/    9388 :                     
(1)   19/    9388 :                     ; ****************************************************************************************************************
(1)   20/    9388 :                     ; ****************************************************************************************************************
(1)   21/    9388 :                     ;
(1)   22/    9388 :                     ;				Evaluate an expression at P1. Returns A = Result, CY/L = 1 or A = Error, CY/L = 0
(1)   23/    9388 :                     ;
(1)   24/    9388 :                     ;	Preserves registers except A and P1, which is advanced to the end of the expression - on exit it points to
(1)   25/    9388 :                     ;	NULL or the next character - so 2+3, will return A = 5, CY/L = 1,P1 pointing to the comma.
(1)   26/    9388 :                     ;
(1)   27/    9388 :                     ;	This isn't re-entrant.
(1)   28/    9388 :                     ;
(1)   29/    9388 :                     ; ****************************************************************************************************************
(1)   30/    9388 :                     ; ****************************************************************************************************************
(1)   31/    9388 :                     
(1)   32/    9388 :                     EvaluateExpression:
(1)   33/    9388 :                     
(1)   34/    9388 : =0x0                __EEValue = 0 													; stack positions of current value & pending
(1)   35/    9388 : =0x1                __EEOperator = 1 												; operator.
(1)   36/    9388 : =0x1A               __EERandomOffset = 26 											; offset to random seed from p3
(1)   37/    9388 :                     
(1)   38/    9388 : =0x4                ERROR_BadTerm = 4
(1)   39/    9388 : =0x5                ERROR_Syntax = 5
(1)   40/    9388 : =0x7                ERROR_DivZero = 7
(1)   41/    9388 :                     
(1)   42/    9388 : 40                  	lde 														; save E on stack
(1)   43/    9389 : CE FF               	st 		@-1(p2)
(1)   44/    938B : 37                  	xpah 	p3 													; save P3 on stack
(1)   45/    938C : CE FF               	st 		@-1(p2)
(1)   46/    938E : 33                  	xpal 	p3
(1)   47/    938F : CE FF               	st 		@-1(p2)
(1)   48/    9391 : C4 2B               	ldi 	'+'													; pending expression (+) at +1(p2)
(1)   49/    9393 : CE FF               	st 		@-1(p2)												; set up so done "0+" in theory :)
(1)   50/    9395 : C4 00               	ldi 	0 													; current value (0) at +0(p2)
(1)   51/    9397 : CE FF               	st 		@-1(p2)
(1)   52/    9399 : 90 4C               	jmp 	__EELoop
(1)   53/    939B :                     
(1)   54/    939B :                     ; ****************************************************************************************************************
(1)   55/    939B :                     ;											'c' term (character constant)
(1)   56/    939B :                     ; ****************************************************************************************************************
(1)   57/    939B :                     
(1)   58/    939B :                     __EECharacter:
(1)   59/    939B : C1 00               	ld 		(p1) 												; read character following quote
(1)   60/    939D : 98 0B               	jz 		__EECharacterError 									; if EOS fail
(1)   61/    939F : 01                  	xae 														; save in E
(1)   62/    93A0 : C1 01               	ld 		1(p1) 												; read the one after that
 AS V1.42 Beta [Bld 102] - source file minol.asm(expression.asm) - page 19 - 12/10/2015 15:02:01


(1)   63/    93A2 : E4 27               	xri 	0x27												; check if closing quote
(1)   64/    93A4 : 9C 04               	jnz 	__EECharacterError 									; should be a quote mark, fail if not.
(1)   65/    93A6 : C5 02               	ld 		@2(p1) 												; skip over 2 characters
(1)   66/    93A8 : 90 2B               	jmp 	__EECalculate4 										; go and complete the calculation
(1)   67/    93AA :                     
(1)   68/    93AA :                     __EECharacterError:
(1)   69/    93AA : C4 04               	ldi 	ERROR_BadTerm	 									; bad character
(1)   70/    93AC : 90 37               	jmp 	__EEError3	
(1)   71/    93AE :                     
(1)   72/    93AE :                     ; ****************************************************************************************************************
(1)   73/    93AE :                     ;											! term (random number)
(1)   74/    93AE :                     ; ****************************************************************************************************************
(1)   75/    93AE :                     
(1)   76/    93AE :                     __EERandom:
(1)   77/    93AE : C3 1A               	ld 		__EERandomOffset(p3) 								; does it need initialising
(1)   78/    93B0 : DB 1B               	or 		__EERandomOffset+1(p3)
(1)   79/    93B2 : 9C 08               	jnz		__EERandom_IsInitialised
(1)   80/    93B4 : C4 E1               	ldi 	0xE1												; if so, set to $ACE1
(1)   81/    93B6 : CB 1A               	st 		__EERandomOffset(p3)
(1)   82/    93B8 : C4 AC               	ldi 	0xAC
(1)   83/    93BA : CB 1B               	st 		__EERandomOffset+1(p3)
(1)   84/    93BC :                     __EERandom_IsInitialised:
(1)   85/    93BC : C3 1B               	ld 		__EERandomOffset+1(p3) 								; shift seed right into carry
(1)   86/    93BE : 02                  	ccl
(1)   87/    93BF : 1F                  	rrl
(1)   88/    93C0 : CB 1B               	st 		__EERandomOffset+1(p3)
(1)   89/    93C2 : C3 1A               	ld 		__EERandomOffset(p3)
(1)   90/    93C4 : 1F                  	rrl
(1)   91/    93C5 : CB 1A               	st 		__EERandomOffset(p3)
(1)   92/    93C7 : 06                  	csa  														; if the LSB was 1
(1)   93/    93C8 : 94 06               	jp 		__EERandomNoToggle
(1)   94/    93CA : C3 1B               	ld 		__EERandomOffset+1(p3)
(1)   95/    93CC : E4 B4               	xri 	0xB4
(1)   96/    93CE : CB 1B               	st 		__EERandomOffset+1(p3)
(1)   97/    93D0 :                     __EERandomNoToggle:
(1)   98/    93D0 : C3 1A               	ld 		__EERandomOffset(p3) 								; XOR two values together into E.
(1)   99/    93D2 : E3 1B               	xor 	__EERandomOffset+1(p3)
(1)  100/    93D4 : 01                  	xae
(1)  101/    93D5 :                     __EECalculate4:
(1)  102/    93D5 : 90 6C               	jmp 	__EECalculate3
(1)  103/    93D7 :                     
(1)  104/    93D7 :                     ; ****************************************************************************************************************
(1)  105/    93D7 :                     ;												  Read data (h,l)
(1)  106/    93D7 :                     ; ****************************************************************************************************************
(1)  107/    93D7 :                     
(1)  108/    93D7 :                     __EEDataAccess:
(1)  109/    93D7 : (MACRO)             	lpi 	p3,ReadHLMemory-1 									; read HL memory into A
(1)  109/    93D7 : C4 95                       ldi     (READHLMEMORY-1) / 256
(1)  109/    93D9 : 37                          xpah    P3
(1)  109/    93DA : C4 13                       ldi     (READHLMEMORY-1) & 255
(1)  109/    93DC : 33                          xpal    P3
(1)  110/    93DD : 3F                  	xppc 	p3
(1)  111/    93DE : 01                  	xae 														; save in E
(1)  112/    93DF : 06                  	csa 														; if carry is set then calculate as normal.
(1)  113/    93E0 : D4 80               	ani 	0x80
(1)  114/    93E2 : 9C 5F               	jnz 	__EECalculate3
(1)  115/    93E4 : 40                  	lde 														; get error code
(1)  116/    93E5 :                     __EEError3:
(1)  117/    93E5 : 90 47               	jmp 	__EEError2
(1)  118/    93E7 :                     
 AS V1.42 Beta [Bld 102] - source file minol.asm(expression.asm) - page 20 - 12/10/2015 15:02:01


(1)  119/    93E7 :                     ; ****************************************************************************************************************
(1)  120/    93E7 :                     ;
(1)  121/    93E7 :                     ;											Main loop - get another term.
(1)  122/    93E7 :                     ;
(1)  123/    93E7 :                     ; ****************************************************************************************************************
(1)  124/    93E7 :                     __EELoop:
(1)  125/    93E7 : (MACRO)             	lpi 	p3,Variables 										; point P3 to variables
(1)  125/    93E7 : C4 0C                       ldi     (VARIABLES) / 256
(1)  125/    93E9 : 37                          xpah    P3
(1)  125/    93EA : C4 82                       ldi     (VARIABLES) & 255
(1)  125/    93EC : 33                          xpal    P3
(1)  126/    93ED :                     
(1)  127/    93ED : C1 00               	ld 		(p1) 												; check end of string.
(1)  128/    93EF : 98 79               	jz 		__EEBadTerm 				
(1)  129/    93F1 : C5 01               	ld 		@1(p1) 												; get next character till non-space
(1)  130/    93F3 : E4 20               	xri		' '
(1)  131/    93F5 : 98 F0               	jz 		__EELoop
(1)  132/    93F7 :                     
(1)  133/    93F7 : E4 08               	xri 	' ' ! '('											; if ( then (x,y) memory access.
(1)  134/    93F9 : 98 DC               	jz 		__EEDataAccess
(1)  135/    93FB : E4 09               	xri 	'(' ! '!' 											; if ! then random number.
(1)  136/    93FD : 98 AF               	jz 		__EERandom
(1)  137/    93FF : E4 06               	xri 	'!' ! 0x27											; if ' then character constant
(1)  138/    9401 : 98 98               	jz 		__EECharacter
(1)  139/    9403 :                     
(1)  140/    9403 : C1 FF               	ld 		-1(p1) 												; get character.
(1)  141/    9405 : 02                  	ccl
(1)  142/    9406 : F4 50               	adi 	128-'0' 											; if < '0' then there is an error.
(1)  143/    9408 : 94 60               	jp 		__EEBadTerm
(1)  144/    940A : F4 76               	adi 	0xFF-0x89 											; if > '9' then it is not a digit.
(1)  145/    940C : 94 24               	jp 		__EENotDigit 										; so check for A-Z
(1)  146/    940E :                     
(1)  147/    940E :                     ; ****************************************************************************************************************
(1)  148/    940E :                     ;
(1)  149/    940E :                     ;								We have a constant value 0-255, extract it
(1)  150/    940E :                     ;
(1)  151/    940E :                     ; ****************************************************************************************************************
(1)  152/    940E :                     
(1)  153/    940E : C1 FF               	ld 		-1(p1) 												; re-read digit
(1)  154/    9410 : D4 0F               	ani 	0x0F 												; make number
(1)  155/    9412 : 01                  	xae 														; put in E.
(1)  156/    9413 :                     __EEConstantLoop:
(1)  157/    9413 : C1 00               	ld 		(p1) 												; keep going until non digit found
(1)  158/    9415 : 02                  	ccl
(1)  159/    9416 : F4 50               	adi 	128-'0'												; exit if outside range 0-9.
(1)  160/    9418 : 94 67               	jp 		__EECalculate 										; calculate the result.
(1)  161/    941A : F4 76               	adi 	0xFF-0x89 
(1)  162/    941C : 94 63               	jp 		__EECalculate 
(1)  163/    941E : 40                  	lde 														; A = E
(1)  164/    941F : 02                  	ccl
(1)  165/    9420 : 70                  	ade 														; A = E * 2
(1)  166/    9421 : 70                  	ade 														; A = E * 3
(1)  167/    9422 : 70                  	ade 														; A = E * 4
(1)  168/    9423 : 70                  	ade 														; A = E * 5
(1)  169/    9424 : 01                  	xae 														; E = E * 5
(1)  170/    9425 : C5 01               	ld 		@1(p1) 												; read digit and bump pointer.
(1)  171/    9427 : D4 0F               	ani 	0x0F 												; make number
(1)  172/    9429 : 70                  	ade 														; add E * 5 twice, e.g. E * 10
(1)  173/    942A : 70                  	ade
(1)  174/    942B : 01                  	xae 														; put into E
 AS V1.42 Beta [Bld 102] - source file minol.asm(expression.asm) - page 21 - 12/10/2015 15:02:01


(1)  175/    942C : 90 E5               	jmp 	__EEConstantLoop
(1)  176/    942E :                     
(1)  177/    942E :                     __EEError2:
(1)  178/    942E : 90 3C               	jmp 	__EEError
(1)  179/    9430 :                     __EELoop2:
(1)  180/    9430 : 90 B5               	jmp 	__EELoop
(1)  181/    9432 :                     
(1)  182/    9432 :                     ; ****************************************************************************************************************
(1)  183/    9432 :                     ;
(1)  184/    9432 :                     ;												Check for variable A-Z.
(1)  185/    9432 :                     ;
(1)  186/    9432 :                     ; ****************************************************************************************************************
(1)  187/    9432 :                     __EENotDigit:
(1)  188/    9432 : C1 FF               	ld 		-1(p1) 												; read character again.
(1)  189/    9434 : 02                  	ccl
(1)  190/    9435 : F4 3F               	adi 	128-'A' 											; check in range A-Z.
(1)  191/    9437 : 94 31               	jp 		__EEBadTerm 										; if not in that range, we failed.
(1)  192/    9439 : F4 66               	adi 	0x80-26 
(1)  193/    943B : 94 2D               	jp 		__EEBadTerm 
(1)  194/    943D : F4 1A               	adi 	26 													; make it 0-25 (A-Z)
(1)  195/    943F : 01                  	xae 														; E is variable number 0-25
(1)  196/    9440 : C3 80               	ld 		-0x80(p3) 											; read variable value.
(1)  197/    9442 : 01                  	xae 														; put in E
(1)  198/    9443 :                     __EECalculate3:
(1)  199/    9443 : 90 3C               	jmp 	__EECalculate 										; calculate result of delayed operation.
(1)  200/    9445 :                     ;
(1)  201/    9445 :                     ;	Bump over spaces to find operator.
(1)  202/    9445 :                     ;
(1)  203/    9445 :                     __EEGetNextOperator:
(1)  204/    9445 : 03                  	scl 														; set Carry/Link indicating okay.
(1)  205/    9446 : C1 00               	ld 		0(p1) 												; skip spaces, checking for exit.
(1)  206/    9448 : 98 25               	jz 		__EEExit 											; exit on NULL.
(1)  207/    944A : E4 20               	xri 	' ' 												
(1)  208/    944C : 9C 04               	jnz 	__EECheckOperator
(1)  209/    944E : C5 01               	ld 		@1(p1)
(1)  210/    9450 : 90 F3               	jmp 	__EEGetNextOperator
(1)  211/    9452 :                     ;
(1)  212/    9452 :                     ;	Found something not NULL or space - see if it is an operator + - * /, in which case go round again.
(1)  213/    9452 :                     ;
(1)  214/    9452 :                     __EECheckOperator:
(1)  215/    9452 : C1 00               	ld 		(p1) 												; get operator
(1)  216/    9454 : E4 2B               	xri 	'+' 												; check if it is +,-,*,/
(1)  217/    9456 : 98 0C               	jz 		__EEDoOperator
(1)  218/    9458 : E4 06               	xri 	'+'!'-'
(1)  219/    945A : 98 08               	jz 		__EEDoOperator
(1)  220/    945C : E4 07               	xri 	'-'!'*'
(1)  221/    945E : 98 04               	jz 		__EEDoOperator
(1)  222/    9460 : E4 05               	xri 	'*'!'/'
(1)  223/    9462 : 9C 0B               	jnz 	__EEExit 											; if not any of those, then exit.
(1)  224/    9464 :                     __EEDoOperator:
(1)  225/    9464 : C5 01               	ld 		@1(p1) 												; get and save operator
(1)  226/    9466 : CA 01               	st 		1(p2)
(1)  227/    9468 : 90 C6               	jmp		__EELoop2 											; go get another term. 			
(1)  228/    946A :                     ;
(1)  229/    946A :                     ;	Handle Errors (1) Bad Term (2) Divide by zero.
(1)  230/    946A :                     ;
(1)  231/    946A :                     __EEBadTerm:
(1)  232/    946A : C4 04               	ldi 	ERROR_BadTerm 										; syntax in expression
(1)  233/    946C :                     __EEError:
(1)  234/    946C : CA 00               	st 		__EEValue(p2) 										; error code as result.
 AS V1.42 Beta [Bld 102] - source file minol.asm(expression.asm) - page 22 - 12/10/2015 15:02:01


(1)  235/    946E : 02                  	ccl 														; CY/L clear indicating error
(1)  236/    946F :                     ;
(1)  237/    946F :                     ;	Exit with the value in __EEValue(p2) and CY/L set accordingly.
(1)  238/    946F :                     ;
(1)  239/    946F :                     __EEExit:
(1)  240/    946F : C6 02               	ld 		@2(p2) 												; skip over saved values
(1)  241/    9471 : C6 01               	ld 		@1(p2) 												; restore P3
(1)  242/    9473 : 33                  	xpal 	p3
(1)  243/    9474 : C6 01               	ld 		@1(p2)
(1)  244/    9476 : 37                  	xpah 	p3
(1)  245/    9477 : C6 01               	ld 		@1(p2) 												; restore E
(1)  246/    9479 : 01                  	xae 
(1)  247/    947A : C2 FB               	ld 		-5(p2)												; get answer into A
(1)  248/    947C : 3F                  	xppc 	p3 													; and exit.
(1)  249/    947D :                     
(1)  250/    947D :                     __EE_Divide_Zero:
(1)  251/    947D : C4 07               	ldi 	ERROR_DivZero 										; come here for divide by zero.	
(1)  252/    947F : 90 EB               	jmp 	__EEError
(1)  253/    9481 :                     
(1)  254/    9481 :                     ; ****************************************************************************************************************
(1)  255/    9481 :                     ;
(1)  256/    9481 :                     ;							Do 0(p2) op E where op is 1(p2) and is a valid operator.
(1)  257/    9481 :                     ;	
(1)  258/    9481 :                     ; ****************************************************************************************************************
(1)  259/    9481 :                     
(1)  260/    9481 :                     __EECalculate:
(1)  261/    9481 : C2 01               	ld 		__EEOperator(p2) 									; get the operator.
(1)  262/    9483 : E4 2D               	xri 	'-'
(1)  263/    9485 : 98 10               	jz 		__EE_Subtract
(1)  264/    9487 : E4 07               	xri 	'-'!'*'
(1)  265/    9489 : 98 14               	jz 		__EE_Multiply
(1)  266/    948B : E4 05               	xri 	'*'!'/'
(1)  267/    948D : 98 32               	jz 		__EE_Divide
(1)  268/    948F :                     
(1)  269/    948F :                     ; ****************************************************************************************************************
(1)  270/    948F :                     ;														  Add.
(1)  271/    948F :                     ; ****************************************************************************************************************
(1)  272/    948F :                     
(1)  273/    948F :                     __EE_Add:
(1)  274/    948F : 02                  	ccl
(1)  275/    9490 : C2 00               	ld 		__EEValue(p2)
(1)  276/    9492 : 70                  	ade
(1)  277/    9493 : CA 00               	st 		__EEValue(p2)
(1)  278/    9495 : 90 AE               	jmp 	__EEGetNextOperator
(1)  279/    9497 :                     
(1)  280/    9497 :                     ; ****************************************************************************************************************
(1)  281/    9497 :                     ;														Subtract
(1)  282/    9497 :                     ; ****************************************************************************************************************
(1)  283/    9497 :                     
(1)  284/    9497 :                     __EE_Subtract:
(1)  285/    9497 : 03                  	scl
(1)  286/    9498 : C2 00               	ld 		__EEValue(p2)
(1)  287/    949A : 78                  	cae
(1)  288/    949B : CA 00               	st 		__EEValue(p2)
(1)  289/    949D :                     __EEGetNextOperator2:
(1)  290/    949D : 90 A6               	jmp 	__EEGetNextOperator
(1)  291/    949F :                     
(1)  292/    949F :                     ; ****************************************************************************************************************
(1)  293/    949F :                     ;														Multiply
(1)  294/    949F :                     ; ****************************************************************************************************************
 AS V1.42 Beta [Bld 102] - source file minol.asm(expression.asm) - page 23 - 12/10/2015 15:02:01


(1)  295/    949F :                     
(1)  296/    949F :                     __EE_Multiply:										
(1)  297/    949F : C2 00               	ld 		__EEValue(p2) 													; a = __EEOperator(p2)
(1)  298/    94A1 : CA 01               	st 		__EEOperator(p2)
(1)  299/    94A3 : C4 00               	ldi 	0																; res = __EEValue(p2)
(1)  300/    94A5 : CA 00               	st 		__EEValue(p2) 													; clear it.
(1)  301/    94A7 :                     __EE_MultiplyLoop:
(1)  302/    94A7 : 40                  	lde  																	; if B == 0 then we are done.
(1)  303/    94A8 : 98 9B               	jz 		__EEGetNextOperator
(1)  304/    94AA : D4 01               	ani 	1 																; if B LSB is non zero.
(1)  305/    94AC : 98 07               	jz 		__EE_Multiply_B0IsZero
(1)  306/    94AE : C2 01               	ld 		__EEOperator(p2) 												; add A to Result
(1)  307/    94B0 : 02                  	ccl
(1)  308/    94B1 : F2 00               	add 	__EEValue(p2)
(1)  309/    94B3 : CA 00               	st 		__EEValue(p2)
(1)  310/    94B5 :                     __EE_Multiply_B0IsZero:
(1)  311/    94B5 : 40                  	lde 																	; shift B right
(1)  312/    94B6 : 1C                  	sr
(1)  313/    94B7 : 01                  	xae
(1)  314/    94B8 : C2 01               	ld 		__EEOperator(p2) 												; shift A left
(1)  315/    94BA : 02                  	ccl
(1)  316/    94BB : F2 01               	add 	__EEOperator(p2)
(1)  317/    94BD : CA 01               	st 		__EEOperator(p2)
(1)  318/    94BF : 90 E6               	jmp 	__EE_MultiplyLoop
(1)  319/    94C1 :                     
(1)  320/    94C1 :                     ;	res = 0
(1)  321/    94C1 :                     ;	while (b != 0):
(1)  322/    94C1 :                     ;		if (b & 1) != 0:
(1)  323/    94C1 :                     ;		 	res = (res + a) & 0xFF
(1)  324/    94C1 :                     ;		a = (a << 1) & 0xFF
(1)  325/    94C1 :                     ;		b = (b >> 1) & 0xFF
(1)  326/    94C1 :                     
(1)  327/    94C1 :                     
(1)  328/    94C1 :                     ; ****************************************************************************************************************
(1)  329/    94C1 :                     ;														Divide
(1)  330/    94C1 :                     ; ****************************************************************************************************************
(1)  331/    94C1 :                     
(1)  332/    94C1 :                     __EE_Divide:
(1)  333/    94C1 : 40                  	lde 																	; if denominator zero, error 2.
(1)  334/    94C2 : 98 B9               	jz 		__EE_Divide_Zero
(1)  335/    94C4 : C2 00               	ld 		__EEValue(p2) 													; numerator into __EEOperator(p2)
(1)  336/    94C6 : CA 01               	st 		__EEOperator(p2) 												; denominator is in E
(1)  337/    94C8 : C4 00               	ldi 	0
(1)  338/    94CA : CA 00               	st 		__EEValue(p2)													; quotient in __EEValue(p2)
(1)  339/    94CC : CA FF               	st 		-1(p2) 															; remainder in -1(p2)
(1)  340/    94CE : C4 80               	ldi 	0x80 									
(1)  341/    94D0 : CA FE               	st 		-2(p2) 															; bit in -2(p2)
(1)  342/    94D2 :                     
(1)  343/    94D2 :                     __EE_Divide_Loop:
(1)  344/    94D2 : C2 FE               	ld 		-2(p2) 															; exit if bit = 0,we've finished.
(1)  345/    94D4 : 98 C7               	jz 		__EEGetNextOperator2
(1)  346/    94D6 :                     
(1)  347/    94D6 : 02                  	ccl 	 																; shift remainder left.
(1)  348/    94D7 : C2 FF               	ld 		-1(p2)
(1)  349/    94D9 : F2 FF               	add 	-1(p2)
(1)  350/    94DB : CA FF               	st 		-1(p2)
(1)  351/    94DD :                     
(1)  352/    94DD : C2 01               	ld 		__EEOperator(p2)												; get numerator.
(1)  353/    94DF : 94 02               	jp 		__EE_Divide_Numerator_Positive
(1)  354/    94E1 : AA FF               	ild 	-1(p2)  														; if numerator -ve, increment remainder.
 AS V1.42 Beta [Bld 102] - source file minol.asm(expression.asm) - page 24 - 12/10/2015 15:02:01


(1)  355/    94E3 :                     __EE_Divide_Numerator_Positive:
(1)  356/    94E3 :                     
(1)  357/    94E3 : C2 FF               	ld 		-1(p2) 															; calculate remainder - denominator
(1)  358/    94E5 : 03                  	scl
(1)  359/    94E6 : 78                  	cae 
(1)  360/    94E7 : CA FD               	st 		-3(p2) 															; save in temp -3(p2)
(1)  361/    94E9 : 06                  	csa 																	; if temp >= 0, CY/L is set
(1)  362/    94EA : 94 0A               	jp 		__EE_Divide_Temp_Positive
(1)  363/    94EC :                     
(1)  364/    94EC : C2 FD               	ld 		-3(p2) 															; copy temp to remainder
(1)  365/    94EE : CA FF               	st 		-1(p2)
(1)  366/    94F0 : C2 FE               	ld 		-2(p2) 															; or bit into quotient
(1)  367/    94F2 : DA 00               	or 		__EEValue(p2)
(1)  368/    94F4 : CA 00               	st 		__EEValue(p2)
(1)  369/    94F6 :                     __EE_Divide_Temp_Positive:
(1)  370/    94F6 :                     
(1)  371/    94F6 : C2 FE               	ld 		-2(p2) 															; shift bit right
(1)  372/    94F8 : 1C                  	sr
(1)  373/    94F9 : CA FE               	st 		-2(p2)
(1)  374/    94FB :                     
(1)  375/    94FB : C2 01               	ld 		__EEOperator(p2)												; shift numerator positive
(1)  376/    94FD : 02                  	ccl
(1)  377/    94FE : F2 01               	add 	__EEOperator(p2)
(1)  378/    9500 : CA 01               	st 		__EEOperator(p2)
(1)  379/    9502 : 90 CE               	jmp 	__EE_Divide_Loop
(1)  380/    9504 :                     
(1)  381/    9504 :                     ;	quotient = 0			
(1)  382/    9504 :                     ;	remainder = 0 			
(1)  383/    9504 :                     ;	bit = 0x80
(1)  384/    9504 :                     ;
(1)  385/    9504 :                     ;	while (bit != 0):
(1)  386/    9504 :                     ;
(1)  387/    9504 :                     ;		remainder = remainder << 1
(1)  388/    9504 :                     ;		if numerator & 0x80 != 0:
(1)  389/    9504 :                     ;			remainder = (remainder + 1) & 0xFF
(1)  390/    9504 :                     ;		temp = remainder - denominator
(1)  391/    9504 :                     ;		if temp >= 0:
(1)  392/    9504 :                     ;			remainder = temp
(1)  393/    9504 :                     ;			quotient = quotient | bit
(1)  394/    9504 :                     ;		bit = (bit >> 1) & 0xFF
(1)  395/    9504 :                     ;		numerator = (numerator << 1) & 0xFF
(1)  396/    9504 :                     
(1)  397/    9504 :                     
(1)  398/    9504 :                     ; ****************************************************************************************************************
(1)  399/    9504 :                     ; ****************************************************************************************************************
(1)  400/    9504 :                     ;
(1)  401/    9504 :                     ;		P1 points to <expr>,<expr>) - parse out the values, read memory location and return in A, 
(1)  402/    9504 :                     ;		CY/L = 0 => error A. -2(p2) and -1(p2) should contain the address if we need to read it later.
(1)  403/    9504 :                     ;	
(1)  404/    9504 :                     ; ****************************************************************************************************************
(1)  405/    9504 :                     ; ****************************************************************************************************************
(1)  406/    9504 :                     
(1)  407/    9504 :                     ReadHLMemoryFull:
(1)  408/    9504 : C5 01               	ld 		@1(p1) 												; look at next character and bump.
(1)  409/    9506 : E4 20               	xri 	' '													; skip over the spaces.
(1)  410/    9508 : 98 FA               	jz 		ReadHLMemoryFull
(1)  411/    950A : E4 08               	xri 	' ' ! '(' 											; if it is '(' then evaluate normally.
(1)  412/    950C : 98 06               	jz 		ReadHLMemory
(1)  413/    950E : C5 FF               	ld 		@-1(p1) 											; undo the post increment.
(1)  414/    9510 : 02                  	ccl 														; return with a syntax error.
 AS V1.42 Beta [Bld 102] - source file minol.asm(expression.asm) - page 25 - 12/10/2015 15:02:01


(1)  415/    9511 : C4 05               	ldi 	ERROR_Syntax 
(1)  416/    9513 : 3F                  	xppc 	p3 
(1)  417/    9514 :                     
(1)  418/    9514 :                     ReadHLMemory:
(1)  419/    9514 :                     
(1)  420/    9514 : =0x3                RHL_AddrLo = 3
(1)  421/    9514 : =0x4                RHL_AddrHi = 4
(1)  422/    9514 : =0xFFFFFFFFF..      RHL_Result = -1
(1)  423/    9514 :                     
(1)  424/    9514 : 40                  	lde 														; save E
(1)  425/    9515 : CE FD               	st 		@-3(p2) 											; save leaving room for addr.lo and addr.hi
(1)  426/    9517 : 37                  	xpah 	p3 													; save P3
(1)  427/    9518 : CE FF               	st 		@-1(p2)
(1)  428/    951A : 33                  	xpal 	p3
(1)  429/    951B : CE FF               	st 		@-1(p2)
(1)  430/    951D : C4 2C               	ldi 	',' 												; first seperator is a comma.
(1)  431/    951F : 01                  	xae
(1)  432/    9520 :                     __RHLLoop:	
(1)  433/    9520 : C2 03               	ld 		RHL_AddrLo(p2) 										; copy addr lo to addr hi
(1)  434/    9522 : CA 04               	st 		RHL_AddrHi(p2)
(1)  435/    9524 : (MACRO)             	lpi 	p3,EvaluateExpression-1 							; evaluate the expression.
(1)  435/    9524 : C4 93                       ldi     (EVALUATEEXPRESSION-1) / 256
(1)  435/    9526 : 37                          xpah    P3
(1)  435/    9527 : C4 87                       ldi     (EVALUATEEXPRESSION-1) & 255
(1)  435/    9529 : 33                          xpal    P3
(1)  436/    952A : 3F                  	xppc 	p3
(1)  437/    952B : CA 03               	st 		RHL_AddrLo(p2) 										; save in addr.lo
(1)  438/    952D : 06                  	csa  														; if error
(1)  439/    952E : 94 25               	jp 		__RHLError
(1)  440/    9530 :                     __RHLSkip:
(1)  441/    9530 : C1 00               	ld 		0(p1) 												; check for end of line
(1)  442/    9532 : 98 25               	jz 		__RHLSyntax
(1)  443/    9534 : C5 01               	ld 		@1(p1) 												; fetch next character
(1)  444/    9536 : E4 20               	xri 	' ' 												; skip over spaces.
(1)  445/    9538 : 98 F6               	jz 		__RHLSkip 
(1)  446/    953A : C1 FF               	ld 		-1(p1) 												; get fetched character
(1)  447/    953C : 60                  	xre 														; is it the one we wanted ?
(1)  448/    953D : 9C 1A               	jnz 	__RHLSyntax 										; no, so fail.
(1)  449/    953F : 40                  	lde 														; get character
(1)  450/    9540 : E4 05               	xri 	','!')'												; switch from , to )
(1)  451/    9542 : 01                  	xae 														; put back in E.
(1)  452/    9543 : 40                  	lde 														; if it is ')' , go back.
(1)  453/    9544 : E4 29               	xri 	')'
(1)  454/    9546 : 98 D8               	jz 		__RHLLoop 
(1)  455/    9548 :                     
(1)  456/    9548 : C2 03               	ld 		RHL_AddrLo(p2) 										; load address into P3
(1)  457/    954A : 33                  	xpal 	p3
(1)  458/    954B : C2 04               	ld 		RHL_AddrHi(p2)
(1)  459/    954D : 37                  	xpah 	p3
(1)  460/    954E : C3 00               	ld 		0(p3) 												; read byte there
(1)  461/    9550 : CA FF               	st 		-1(p2) 												; save in return value space.
(1)  462/    9552 : 03                  	scl 														; set CY/L indicating no error
(1)  463/    9553 : 90 09               	jmp 	__RHLExit 											; and exit.
(1)  464/    9555 :                     
(1)  465/    9555 :                     __RHLError:
(1)  466/    9555 : C2 03               	ld 		RHL_AddrLo(p2) 										; read error code
(1)  467/    9557 : 90 02               	jmp 	__RHLSaveErrorAndExit
(1)  468/    9559 :                     
(1)  469/    9559 :                     __RHLSyntax:
(1)  470/    9559 : C4 05               	ldi 	ERROR_Syntax 										; syntax error
 AS V1.42 Beta [Bld 102] - source file minol.asm(expression.asm) - page 26 - 12/10/2015 15:02:01


(1)  471/    955B :                     __RHLSaveErrorAndExit:
(1)  472/    955B : CA FF               	st 		RHL_Result(p2)										; save as error code
(1)  473/    955D : 02                  	ccl 														; return error
(1)  474/    955E :                     
(1)  475/    955E :                     __RHLExit:														; exit with result in RHL_AddrLo.
(1)  476/    955E : C6 01               	ld 		@1(p2) 												; reload P3
(1)  477/    9560 : 33                  	xpal 	p3
(1)  478/    9561 : C6 01               	ld 		@1(p2)
(1)  479/    9563 : 37                  	xpah 	p3
(1)  480/    9564 : C6 03               	ld 		@3(p2)
(1)  481/    9566 : 01                  	xae
(1)  482/    9567 : C2 FA               	ld 		-6(p2) 												; get the return value
(1)  483/    9569 : 3F                  	xppc 	p3 													; and exit.
(1)  484/    956A :                     
      75/    956A :                     
      76/    956A :                     
      77/    956A :                     
 AS V1.42 Beta [Bld 102] - source file minol.asm - page 27 - 12/10/2015 15:02:01


  symbol table (* = unused):
  ------------------------

*ARCHITECTURE :  i386-unknown-win32 - | *BIGENDIAN :                      0 - |
*BRANCHEXT :                      0 - | *CASESENSITIVE :                  0 - |
*CONSTPI :        3.141592653589793 - |  CURRENTADDR :                  CA3 - |
 CURRENTLINE :                  CA2 - | *DATE :                  12/10/2015 - |
 ERROR_BADTERM :                  4 - |  ERROR_DIVZERO :                  7 - |
 ERROR_LABEL :                    1 - |  ERROR_SYNTAX :                   5 - |
 EVALUATEEXPRESSION :          9388 C |  EXECUTECOMMAND :              9039 C |
*FALSE :                          0 - |  FINDPROGRAMLINE :             922F C |
*FULLPMMU :                       1 - |  GETCHAR :                     92FC C |
 GETSTRING :                   9320 C | *HAS64 :                          1 - |
*HASDSP :                         0 - | *HASFPU :                         0 - |
*HASPMMU :                        0 - |  INCOMMAND :                   9234 C |
*INEXTMODE :                      0 - | *INLWORDMODE :                    0 - |
*INMAXMODE :                      0 - | *INSRCMODE :                      0 - |
*INSUPMODE :                      0 - |  JUMPTABLE :                   91FA C |
*LISTON :                         1 - |  LISTPROGRAM :                 9233 C |
*MACEXP :                         1 - |  MINOLVARS :                    CA2 - |
*MOMCPU :                         C - | *MOMCPUNAME :                 SC/MP - |
 MONITORBOOT :                  210 - | *NESTMAX :                      100 - |
 NEWPROGRAM :                  9231 C |  OUTCOMMAND :                  9238 C |
*PACKING :                        0 - | *PADDING :                        1 - |
 PRINT :                       923C C |  READHLMEMORY :                9514 C |
 READHLMEMORYFULL :            9504 C | *RELAXED :                        0 - |
 RHL_ADDRHI :                     4 - |  RHL_ADDRLO :                     3 - |
 RHL_RESULT :      FFFFFFFFFFFFFFFF - |  RUNPROGRAM :                  9232 C |
 SCREENCURSOR :                 C80 - |  SCREENMIRROR :                 C00 - |
 STOP :                        9020 C |  TEST :                        9022 C |
*TIME :                    15:02:01 - | *TRUE :                           1 - |
 VARIABLES :                    C82 - | *VERSION :                     142F - |
 WAIT4 :                       91F8 C |  __EEBADTERM :                 946A C |
 __EECALCULATE :               9481 C |  __EECALCULATE3 :              9443 C |
 __EECALCULATE4 :              93D5 C |  __EECHARACTER :               939B C |
 __EECHARACTERERROR :          93AA C |  __EECHECKOPERATOR :           9452 C |
 __EECONSTANTLOOP :            9413 C |  __EEDATAACCESS :              93D7 C |
 __EEDOOPERATOR :              9464 C |  __EEERROR :                   946C C |
 __EEERROR2 :                  942E C |  __EEERROR3 :                  93E5 C |
 __EEEXIT :                    946F C |  __EEGETNEXTOPERATOR :         9445 C |
 __EEGETNEXTOPERATOR2 :        949D C |  __EELOOP :                    93E7 C |
 __EELOOP2 :                   9430 C |  __EENOTDIGIT :                9432 C |
 __EEOPERATOR :                   1 - |  __EERANDOM :                  93AE C |
 __EERANDOMNOTOGGLE :          93D0 C |  __EERANDOMOFFSET :              1A - |
 __EERANDOM_ISINITIALISED :    93BC C |  __EEVALUE :                      0 - |
*__EE_ADD :                    948F C |  __EE_DIVIDE :                 94C1 C |
 __EE_DIVIDE_LOOP :            94D2 C |
 __EE_DIVIDE_NUMERATOR_POSITIVE :                                      94E3 C |
 __EE_DIVIDE_TEMP_POSITIVE :   94F6 C |  __EE_DIVIDE_ZERO :            947D C |
 __EE_MULTIPLY :               949F C |  __EE_MULTIPLYLOOP :           94A7 C |
 __EE_MULTIPLY_B0ISZERO :      94B5 C |  __EE_SUBTRACT :               9497 C |
 __EXCODE :                    9071 C |  __EXDEFAULTLET :              9068 C |
 __EXEXIT :                    902C C |  __EXEXIT2 :                   9098 C |
 __EXEXIT3 :                   9114 C |  __EXEXIT4 :                   916F C |
 __EXEXITNOSC :                902D C |  __EXFIRST :                   9044 C |
 __EXNEXTCOMMAND :             9056 C |  __EXNEXTCOMMAND2 :            90C8 C |
 __EXNEXTCOMMAND3 :            90F9 C |  __EXNEXTCOMMAND3IFZERO :      9165 C |
 __EXNEXTCOMMAND4 :            9178 C |  __EXSEARCH :                  9080 C |
 __EXSKIPCHARACTERS :          9216 C |  __EXSKIPEXIT :                922E C |
 __EXSKIPONE :                 9218 C |  __EXSKIPSPACE :               9222 C |
 AS V1.42 Beta [Bld 102] - source file minol.asm - page 28 - 12/10/2015 15:02:01


 __EX_CLEAR_LOOP :             90AA C |  __EX_COMMAND_CALL :           90CA C |
*__EX_COMMAND_CLEAR :          90A0 C |  __EX_COMMAND_END :            90E9 C |
 __EX_COMMAND_GOTO :           919A C | *__EX_COMMAND_IF :             911C C |
 __EX_COMMAND_IN :             9184 C |  __EX_COMMAND_LET :            91EF C |
 __EX_COMMAND_LET_OPTIONAL :   91F8 C | *__EX_COMMAND_LIST :           91D6 C |
 __EX_COMMAND_NEW :            90FB C |  __EX_COMMAND_OS :             91DF C |
 __EX_COMMAND_PR :             90B4 C |  __EX_COMMAND_RUN :            9091 C |
 __EX_DECODE_C :               909A C |  __EX_DECODE_I :               9116 C |
 __EX_DECODE_L :               91D0 C |  __EX_END_ENDOFLINE :          90F3 C |
 __EX_GOTO_NOTFOUND :          91CC C |  __EX_IF_LEGALTEST :           913E C |
 __EX_IF_LESSTHAN :            9171 C |  __EX_IF_SUCCEED :             9167 C |
 __EX_ISEQUAL :                915F C |  __EX_NEW_SYNTAX :             9110 C |
*__EX_NEW_SYNTAX_NZ2 :         913C C |  __EX_REPORTERROR :            9062 C |
 __EX_REPORTERRORA :           917C C |  __EX_REPORTERRORE :           917D C |
 __GCNOTLOWER [GETCHAR] :      931B C |  __GCWAITKEY [GETCHAR] :       9301 C |
 __GCWAITRELEASE [GETCHAR] :   9309 C |  __GSBACKSPACE [GETSTRING] :   937B C |
 __GSCONTROLKEY [GETSTRING] :  935E C |  __GSLOOP [GETSTRING] :        932E C |
 __PRCLEARFROMMOVETO [PRINT] : 92DC C |  __PRCLEARLOOP [PRINT] :       92DE C |
 __PRCLEARSCREEN [PRINT] :     92DA C |  __PRCOPY [PRINT] :            92E8 C |
 __PREXIT [PRINT] :            929F C |  __PREXITNOCHECK [PRINT] :     92A3 C |
 __PRISCONTROLCHAR [PRINT] :   92B1 C |  __PRISRETURN [PRINT] :        92D1 C |
 __PRNOTASCII [PRINT] :        9279 C |  __PRPRINTCHARACTERA [PRINT] : 925D C |
 __PRPRINTSTRING [PRINT] :     924B C |  __PRSCROLLLOOP [PRINT] :      9291 C |
 __PRUPDATECURSOR [PRINT] :    9282 C |  __RHLERROR :                  9555 C |
 __RHLEXIT :                   955E C |  __RHLLOOP :                   9520 C |
 __RHLSAVEERRORANDEXIT :       955B C |  __RHLSKIP :                   9530 C |
 __RHLSYNTAX :                 9559 C |

    165 symbols
     33 unused symbols

 AS V1.42 Beta [Bld 102] - source file minol.asm - page 29 - 12/10/2015 15:02:01


  defined macros:
  ---------------

LPI                                   | TABLEENTRY                           

      2 macros

 AS V1.42 Beta [Bld 102] - source file minol.asm - page 30 - 12/10/2015 15:02:01


  codepages:
  ----------

STANDARD (0 changed characters)


0.03 seconds assembly time

   1366 lines source file
   1516 lines incl. macro expansions
      2 passes
      0 errors
      0 warnings
