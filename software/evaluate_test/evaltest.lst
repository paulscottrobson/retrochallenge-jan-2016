 AS V1.42 Beta [Bld 102] - source file evaltest.asm - page 1 - 12/7/2015 16:54:05


       1/       0 :                     ; ****************************************************************************************************************
       2/       0 :                     ; ****************************************************************************************************************
       3/       0 :                     ;
       4/       0 :                     ;												Evaluation Test
       5/       0 :                     ;
       6/       0 :                     ; ****************************************************************************************************************
       7/       0 :                     ; ****************************************************************************************************************
       8/       0 :                     
       9/       0 :                     ; ****************************************************************************************************************
      10/       0 :                     ;												 Memory Allocation
      11/       0 :                     ; ****************************************************************************************************************
      12/       0 :                     
      13/       0 :                     	cpu 	sc/mp
      14/       0 :                     	
      15/       0 : =0xD00              VariableBase = 0xD00 											; Base of variables. Variables start from here, 2 bytes
      16/       0 :                     																; each, 6 bit ASCII (e.g. @,A,B,C)
      17/       0 :                     																; VTL-2 other variables work backwards from here.
      18/       0 :                     																	; must be on a page boundary.
      19/       0 :                     
      20/       0 : =0x3                MathLibrary = 3 												; Monitor Mathematics Routine Address
      21/       0 :                     
      22/       0 : =0xC00              KeyboardBuffer = 0xC00											; dummies
      23/       0 : =0x10               KeyboardBufferSize = 16
      24/       0 :                     
      25/       0 : =0xCFE              Pointer = 0xCFE
      26/       0 :                     
      27/       0 : =0x1000             ProgramSpace = 0x1000 											; Page with program memory.
      28/       0 :                     
      29/       0 :                     ; ****************************************************************************************************************
      30/       0 :                     ;														Macros
      31/       0 :                     ; ****************************************************************************************************************
      32/       0 :                     
      33/       0 :                     lpi	macro	ptr,addr
      34/       0 :                     	ldi 	(addr) / 256
      35/       0 :                     	xpah 	ptr
      36/       0 :                     	ldi 	(addr) & 255
      37/       0 :                     	xpal 	ptr
      38/       0 :                     	endm
      39/       0 :                     
      40/       0 :                     ; ****************************************************************************************************************
      41/       0 :                     ;													Main Program
      42/       0 :                     ; ****************************************************************************************************************
      43/       0 :                     
      44/    9000 :                     	org 	0x9000 												; the ROM starts here
      45/    9000 :                     
      46/    9000 : 68                  	db 		0x68												; this makes it boot straight into this ROM.
      47/    9001 :                     
      48/    9001 : (MACRO)             	lpi 	p1,VariableBase 									; put multiples of 37 in @,A,B,C etc.
      48/    9001 : C4 0D                       ldi     (VARIABLEBASE) / 256
      48/    9003 : 35                          xpah    P1
      48/    9004 : C4 00                       ldi     (VARIABLEBASE) & 255
      48/    9006 : 31                          xpal    P1
      49/    9007 : (MACRO)             	lpi 	p2,0
      49/    9007 : C4 00                       ldi     (0) / 256
      49/    9009 : 36                          xpah    P2
      49/    900A : C4 00                       ldi     (0) & 255
      49/    900C : 32                          xpal    P2
      50/    900D :                     Fill: 															; A = MSB, E = LSB
      51/    900D : 32                  	xpal 	p2
      52/    900E : CD 01               	st 		@1(p1)
 AS V1.42 Beta [Bld 102] - source file evaltest.asm - page 2 - 12/7/2015 16:54:05


      53/    9010 : 02                  	ccl
      54/    9011 : F4 25               	adi 	37
      55/    9013 : 32                  	xpal 	p2
      56/    9014 :                     	
      57/    9014 : 36                  	xpah 	p2
      58/    9015 : F4 00               	adi 	0
      59/    9017 : CD 01               	st 		@1(p1)
      60/    9019 : 36                  	xpah	p2
      61/    901A :                     
      62/    901A : 35                  	xpah 	p1
      63/    901B : E4 0E               	xri 	0xE
      64/    901D : 98 05               	jz 		SetPointer
      65/    901F : E4 0E               	xri 	0xE
      66/    9021 : 35                  	xpah 	p1
      67/    9022 : 90 E9               	jmp 	Fill
      68/    9024 :                     
      69/    9024 :                     SetPointer:
      70/    9024 : (MACRO)             	lpi 	p1,Pointer 											; reset pointer to testdata
      70/    9024 : C4 0C                       ldi     (POINTER) / 256
      70/    9026 : 35                          xpah    P1
      70/    9027 : C4 FE                       ldi     (POINTER) & 255
      70/    9029 : 31                          xpal    P1
      71/    902A : C4 6E               	ldi 	TestData & 255
      72/    902C : C9 00               	st 		0(p1)
      73/    902E : C4 92               	ldi 	TestData / 256
      74/    9030 : C9 01               	st 		1(p1)
      75/    9032 :                     
      76/    9032 :                     TestLoop:
      77/    9032 : (MACRO)             	lpi 	p2,Pointer 											; read pointer into P1
      77/    9032 : C4 0C                       ldi     (POINTER) / 256
      77/    9034 : 36                          xpah    P2
      77/    9035 : C4 FE                       ldi     (POINTER) & 255
      77/    9037 : 32                          xpal    P2
      78/    9038 : C2 00               	ld 		0(p2)
      79/    903A : 31                  	xpal 	p1
      80/    903B : C2 01               	ld 		1(p2)
      81/    903D : 35                  	xpah 	p1	
      82/    903E : C1 00               	ld 		0(p1)												; read first character
      83/    9040 : 98 49               	jz 		Completed 											; if zero, test over.
      84/    9042 :                     
      85/    9042 : (MACRO)             	lpi 	p2,0xFFF											; reset stack
      85/    9042 : C4 0F                       ldi     (0XFFF) / 256
      85/    9044 : 36                          xpah    P2
      85/    9045 : C4 FF                       ldi     (0XFFF) & 255
      85/    9047 : 32                          xpal    P2
      86/    9048 : (MACRO)             	lpi 	p3,EvaluateExpression-1 							; set P3 to evaluate
      86/    9048 : C4 90                       ldi     (EVALUATEEXPRESSION-1) / 256
      86/    904A : 37                          xpah    P3
      86/    904B : C4 91                       ldi     (EVALUATEEXPRESSION-1) & 255
      86/    904D : 33                          xpal    P3
      87/    904E : 3F                  	xppc 	p3 													; evaluate expression.
      88/    904F : 06                  	csa 														; exit if CS.
      89/    9050 : D4 80               	ani 	0x80
      90/    9052 : 9C 32               	jnz 	Failed
      91/    9054 : (MACRO)             	lpi 	p3,Pointer 											; read pointer into P1
      91/    9054 : C4 0C                       ldi     (POINTER) / 256
      91/    9056 : 37                          xpah    P3
      91/    9057 : C4 FE                       ldi     (POINTER) & 255
      91/    9059 : 33                          xpal    P3
      92/    905A : C3 00               	ld 		0(p3)
 AS V1.42 Beta [Bld 102] - source file evaltest.asm - page 3 - 12/7/2015 16:54:05


      93/    905C : 31                  	xpal 	p1
      94/    905D : C3 01               	ld 		1(p3)
      95/    905F : 35                  	xpah 	p1	
      96/    9060 :                     FindEnd: 														; find end of the test expression string.
      97/    9060 : C5 01               	ld 		@1(p1)
      98/    9062 : 9C FC               	jnz 	FindEnd
      99/    9064 : C5 01               	ld 		@1(p1) 												; read answer LSB
     100/    9066 : E2 00               	xor 	0(p2) 												; check it
     101/    9068 : 9C 1C               	jnz 	Failed
     102/    906A : C5 01               	ld 		@1(p1)												; read and check MSB of answer
     103/    906C : E2 01               	xor 	1(p2)
     104/    906E : 9C 16               	jnz 	Failed
     105/    9070 : 31                  	xpal 	p1 													; write back to pointer
     106/    9071 : CB 00               	st 		0(p3) 
     107/    9073 : 35                  	xpah 	p1
     108/    9074 : CB 01               	st 		1(p3)
     109/    9076 : C6 02               	ld 		@2(p2) 												; pop result
     110/    9078 : 32                  	xpal 	p2 													; check it is $0FFF
     111/    9079 : E4 FF               	xri 	0xFF
     112/    907B : 9C 09               	jnz 	Failed
     113/    907D : 36                  	xpah 	p2
     114/    907E : E4 0F               	xri 	0x0F
     115/    9080 : 9C 04               	jnz 	Failed
     116/    9082 : 90 AE               	jmp 	TestLoop
     117/    9084 :                     wait:
     118/    9084 : 90 FE               	jmp 	wait
     119/    9086 :                     
     120/    9086 :                     Failed: 														; set AE to $FF and stop.
     121/    9086 : C4 FF               	ldi 	255
     122/    9088 : 01                  	xae
     123/    9089 : 90 FB               	jmp 	Failed
     124/    908B :                     
     125/    908B :                     Completed:														; set AE to 0 and stop.
     126/    908B : C4 00               	ldi 	0
     127/    908D : 01                  	xae
     128/    908E : 90 FB               	jmp 	Completed
     129/    9090 :                     
     130/    9090 :                     GetChar:														; dummies to shut assembler up, shouldn't be called
     131/    9090 :                     GetString:
     132/    9090 : 90 FE               	jmp 	GetChar												; calling will stop program
     133/    9092 :                     
     134/    9092 :                     	include ..\vtl-2\Source\evaluate.asm 						; evaluate an expression code from VTL-2 directory
(1)    1/    9092 :                     ; ****************************************************************************************************************
(1)    2/    9092 :                     ; ****************************************************************************************************************
(1)    3/    9092 :                     ;
(1)    4/    9092 :                     ;											Evaluate, VTL-2 ROM
(1)    5/    9092 :                     ;											===================
(1)    6/    9092 :                     ;
(1)    7/    9092 :                     ;	R-Expression and Term Evaluators, including specials.
(1)    8/    9092 :                     ;
(1)    9/    9092 :                     ; ****************************************************************************************************************
(1)   10/    9092 :                     ; ****************************************************************************************************************
(1)   11/    9092 :                     
(1)   12/    9092 :                     ; ****************************************************************************************************************
(1)   13/    9092 :                     ; ****************************************************************************************************************
(1)   14/    9092 :                     ;
(1)   15/    9092 :                     ;				Evaluate an expression from P1, and push it on the stack. CY/L set on error
(1)   16/    9092 :                     ;
(1)   17/    9092 :                     ; ****************************************************************************************************************
(1)   18/    9092 :                     ; ****************************************************************************************************************
 AS V1.42 Beta [Bld 102] - source file evaltest.asm(evaluate.asm) - page 4 - 12/7/2015 16:54:05


(1)   19/    9092 :                     
(1)   20/    9092 :                     EvaluateExpression:
(1)   21/    9092 :                     
(1)   22/    9092 :                     	section EvaluateExpression
(1)   23/    9092 :                     
(1)   24/    9092 : =0x4                EXExprResult = 4
(1)   25/    9092 :                     
(1)   26/    9092 : CE FD               	st 		@-3(p2) 											; save A, allow space for answer
(1)   27/    9094 : 40                  	lde
(1)   28/    9095 : CE FF               	st 		@-1(p2) 											; save E
(1)   29/    9097 : 37                  	xpah 	p3 												
(1)   30/    9098 : CE FF               	st 		@-1(p2) 											; save P3
(1)   31/    909A : 33                  	xpal 	p3
(1)   32/    909B : CE FF               	st 		@-1(p2)
(1)   33/    909D : C4 00               	ldi 	0 													; clear final result, not technically required
(1)   34/    909F : CA 04               	st 		EXExprResult(p2)
(1)   35/    90A1 : CA 05               	st 		EXExprResult+1(p2)
(1)   36/    90A3 :                     ;
(1)   37/    90A3 :                     ;	Evaluate the first term.
(1)   38/    90A3 :                     ;
(1)   39/    90A3 : (MACRO)             	lpi 	p3,EvaluateTerm-1 									; evaluate term and push on stack.
(1)   39/    90A3 : C4 91                       ldi     (EVALUATETERM-1) / 256
(1)   39/    90A5 : 37                          xpah    P3
(1)   39/    90A6 : C4 4B                       ldi     (EVALUATETERM-1) & 255
(1)   39/    90A8 : 33                          xpal    P3
(1)   40/    90A9 : 3F                  	xppc 	p3
(1)   41/    90AA : 06                  	csa
(1)   42/    90AB : 94 1A               	jp 		__EXTermOkay 										; term is okay if CY/L = 0
(1)   43/    90AD :                     
(1)   44/    90AD :                     __EXError:
(1)   45/    90AD : 03                  	scl 														; return with CY/L set and erroneous value.
(1)   46/    90AE : 90 01               	jmp 	__EXCopyAndExit
(1)   47/    90B0 :                     
(1)   48/    90B0 :                     __EXClearCarryCopyAndExit 										; come here if finished successfully.
(1)   49/    90B0 : 02                  	ccl
(1)   50/    90B1 :                     __EXCopyAndExit:	
(1)   51/    90B1 : C6 01               	ld 		@1(p2) 												; copy stack to result space
(1)   52/    90B3 : CA 05               	st 		EXExprResult+1(p2)
(1)   53/    90B5 : C6 01               	ld 		@1(p2)
(1)   54/    90B7 : CA 05               	st 		EXExprResult+1(p2)
(1)   55/    90B9 :                     
(1)   56/    90B9 : C6 01               	ld 		@1(p2) 												; restore P3,E,A
(1)   57/    90BB : 33                  	xpal 	p3
(1)   58/    90BC : C6 01               	ld 		@1(p2)
(1)   59/    90BE : 37                  	xpah 	p3
(1)   60/    90BF : C6 01               	ld 		@1(p2)
(1)   61/    90C1 : 01                  	xae
(1)   62/    90C2 : C6 01               	ld 		@1(p2)
(1)   63/    90C4 : 3F                  	xppc 	p3 													; return and make re-entrant.
(1)   64/    90C5 : 90 CB               	jmp 	EvaluateExpression 
(1)   65/    90C7 :                     ;
(1)   66/    90C7 :                     ;	Successfully acquired first term / main loop.
(1)   67/    90C7 :                     ;
(1)   68/    90C7 :                     __EXTermOkay:
(1)   69/    90C7 : C1 00               	ld 		(p1) 												; look at next character to find operator.
(1)   70/    90C9 : 98 E5               	jz 		__EXClearCarryCopyAndExit							; if zero, then end of string.
(1)   71/    90CB : E4 29               	xri 	')'													; found a close bracket, ending paren expr
(1)   72/    90CD : 98 E1               	jz 		__EXClearCarryCopyAndExit 							; keep P1 pointing to that close bracket though.
(1)   73/    90CF :                     
(1)   74/    90CF : C5 01               	ld 		@1(p1) 												; get character and bump
 AS V1.42 Beta [Bld 102] - source file evaltest.asm(evaluate.asm) - page 5 - 12/7/2015 16:54:05


(1)   75/    90D1 : E4 20               	xri 	' '													; if space, keep going
(1)   76/    90D3 : 98 F2               	jz 		__EXTermOkay
(1)   77/    90D5 : E4 08               	xri 	'('!' '												; found an open bracket which would be comment
(1)   78/    90D7 : 98 D7               	jz 		__EXClearCarryCopyAndExit
(1)   79/    90D9 : C1 FF               	ld 		-1(p1) 												; get this, this is the operator.
(1)   80/    90DB : 01                  	xae 														; save in E.
(1)   81/    90DC : (MACRO)             	lpi 	p3,EvaluateTerm-1 	
(1)   81/    90DC : C4 91                       ldi     (EVALUATETERM-1) / 256
(1)   81/    90DE : 37                          xpah    P3
(1)   81/    90DF : C4 4B                       ldi     (EVALUATETERM-1) & 255
(1)   81/    90E1 : 33                          xpal    P3
(1)   82/    90E2 : 3F                  	xppc 	p3 													; get the second term
(1)   83/    90E3 : 06                  	csa 														; if CY/L = 0 do operator.
(1)   84/    90E4 : 94 04               	jp 		__EXDoOperator
(1)   85/    90E6 :                     ;
(1)   86/    90E6 :                     ;	Drop an unwanted value and exit with error flag set
(1)   87/    90E6 :                     ;
(1)   88/    90E6 :                     __EXDropValueAndExitWithError:
(1)   89/    90E6 : C6 02               	ld 		@2(p2) 												; throw away the 2nd operand
(1)   90/    90E8 : 90 C3               	jmp 	__EXError 											; and exit.
(1)   91/    90EA :                     ;
(1)   92/    90EA :                     ;	Do the operator in E.
(1)   93/    90EA :                     ;
(1)   94/    90EA :                     __EXDoOperator:
(1)   95/    90EA : 40                  	lde
(1)   96/    90EB : E4 3D               	xri 	'='													; check for comparisons. = > <
(1)   97/    90ED : 98 2A               	jz 		__EXDoCompare
(1)   98/    90EF : E4 03               	xri		'>'!'='
(1)   99/    90F1 : 98 26               	jz 		__EXDoCompare
(1)  100/    90F3 : E4 02               	xri 	'<'!'>'
(1)  101/    90F5 : 98 22               	jz 		__EXDoCompare
(1)  102/    90F7 :                     
(1)  103/    90F7 : (MACRO)             	lpi 	p3,MathLibrary-1 									; do the maths operations + - * /
(1)  103/    90F7 : C4 00                       ldi     (MATHLIBRARY-1) / 256
(1)  103/    90F9 : 37                          xpah    P3
(1)  103/    90FA : C4 02                       ldi     (MATHLIBRARY-1) & 255
(1)  103/    90FC : 33                          xpal    P3
(1)  104/    90FD : 40                  	lde 	
(1)  105/    90FE : 3F                  	xppc 	p3 	
(1)  106/    90FF : 06                  	csa 														; if CY/L = 0 then try and get another term.
(1)  107/    9100 : D4 80               	ani 	0x80
(1)  108/    9102 : 9C E2               	jnz 	__EXDropValueAndExitWithError 						; if set drop the value and exit with error.
(1)  109/    9104 : 40                  	lde 														; check if it was division
(1)  110/    9105 : E4 2F               	xri 	'/'
(1)  111/    9107 : 9C BE               	jnz 	__EXTermOkay 										; if not it's fine, exit.
(1)  112/    9109 : (MACRO)             	lpi 	p3,VariableBase+('%' & 0x3F) * 2					; point to the '%' variable.
(1)  112/    9109 : C4 0D                       ldi     (VARIABLEBASE+('%' & 0X3F) * 2) / 256
(1)  112/    910B : 37                          xpah    P3
(1)  112/    910C : C4 4A                       ldi     (VARIABLEBASE+('%' & 0X3F) * 2) & 255
(1)  112/    910E : 33                          xpal    P3
(1)  113/    910F : C2 FE               	ld 		-2(p2) 												; copy remainder to % variable
(1)  114/    9111 : CB 00               	st 		(p3)
(1)  115/    9113 : C2 FF               	ld 		-1(p2)
(1)  116/    9115 : CB 01               	st 		1(p3)
(1)  117/    9117 :                     __EXTermOkay2:
(1)  118/    9117 : 90 AE               	jmp 	__EXTermOkay 										; loop round to get the next operator.
(1)  119/    9119 :                     ;
(1)  120/    9119 :                     ;	Do the comparison in E (yields 1 or 0)
(1)  121/    9119 :                     ;
(1)  122/    9119 :                     __EXDoCompare:
 AS V1.42 Beta [Bld 102] - source file evaltest.asm(evaluate.asm) - page 6 - 12/7/2015 16:54:05


(1)  123/    9119 : C2 02               	ld 		2(p2) 												; do the subtraction comparison
(1)  124/    911B : 03                  	scl
(1)  125/    911C : FA 00               	cad 	0(p2)
(1)  126/    911E : CA 00               	st 		0(p2)
(1)  127/    9120 : C2 03               	ld 		3(p2)
(1)  128/    9122 : FA 01               	cad 	1(p2)
(1)  129/    9124 : DA 00               	or 		0(p2)												; A = 0 if equal
(1)  130/    9126 : 37                  	xpah 	p3 													; save temporarily in P3.H
(1)  131/    9127 : C4 00               	ldi 	0
(1)  132/    9129 : CA 02               	st 		2(p2)												; zero the result. 
(1)  133/    912B : CA 03               	st 		3(p2)
(1)  134/    912D : C6 02               	ld 		@2(p2) 												; drop the 2nd value off the stack.
(1)  135/    912F : 40                  	lde 														; check for < 
(1)  136/    9130 : E4 3C               	xri 	'<'	
(1)  137/    9132 : 98 13               	jz 		__EXLessThan
(1)  138/    9134 : E4 01               	xri 	'<'!'='												; check for =
(1)  139/    9136 : 98 0A               	jz 		__EXEquals
(1)  140/    9138 :                     
(1)  141/    9138 : 37                  	xpah 	p3 													; greater than test
(1)  142/    9139 : 98 DC               	jz 		__EXTermOkay2 										; if equal then it is false.
(1)  143/    913B : 06                  	csa 														; for >= requires carry set
(1)  144/    913C : 94 D9               	jp 		__EXTermOkay2 										; exit if clear.
(1)  145/    913E :                     __EXReturnTrue:
(1)  146/    913E : AA 00               	ild 	0(p2) 												; return 1 rather than 0.
(1)  147/    9140 : 90 D5               	jmp 	__EXTermOkay2
(1)  148/    9142 :                     
(1)  149/    9142 :                     __EXEquals:														; equal test
(1)  150/    9142 : 37                  	xpah 	p3 													; get zero test.
(1)  151/    9143 : 98 F9               	jz 		__EXReturnTrue										; if zero, return 1.
(1)  152/    9145 : 90 D0               	jmp 	__EXTermOkay2
(1)  153/    9147 :                     
(1)  154/    9147 :                     __EXLessThan:													; < test
(1)  155/    9147 : 06                  	csa 														; look at carry
(1)  156/    9148 : 94 F4               	jp 		__EXReturnTrue										; if carry clear then <
(1)  157/    914A : 90 CB               	jmp 	__EXTermOkay2 										; pop and continue.
(1)  158/    914C :                     
(1)  159/    914C :                     
(1)  160/    914C :                     	endsection EvaluateExpression
(1)  161/    914C :                     
(1)  162/    914C :                     ; ****************************************************************************************************************
(1)  163/    914C :                     ; ****************************************************************************************************************
(1)  164/    914C :                     ;
(1)  165/    914C :                     ;					Evaluate a single term from P1 and push it on the stack. CY/L set on error
(1)  166/    914C :                     ;
(1)  167/    914C :                     ;	Terms can be:
(1)  168/    914C :                     ;
(1)  169/    914C :                     ;		A numeric constant (e.g. "46")
(1)  170/    914C :                     ;		A parenthesised expression ( (5+2) )
(1)  171/    914C :                     ;		An array expression :42)
(1)  172/    914C :                     ;		A system variable (e.g. $ or ?)
(1)  173/    914C :                     ;		A variable (all other values 32-95)
(1)  174/    914C :                     ;
(1)  175/    914C :                     ;	Registers are unchanged except P1, which points to the erroneous character, or the next character.
(1)  176/    914C :                     ;
(1)  177/    914C :                     ; ****************************************************************************************************************
(1)  178/    914C :                     ; ****************************************************************************************************************
(1)  179/    914C :                     
(1)  180/    914C :                     EvaluateTerm:
(1)  181/    914C :                     
(1)  182/    914C :                     	section EvaluateTerm
 AS V1.42 Beta [Bld 102] - source file evaltest.asm(evaluate.asm) - page 7 - 12/7/2015 16:54:05


(1)  183/    914C :                     
(1)  184/    914C : =0x4                EVTermResult = 4 												; offset in stack to result.
(1)  185/    914C :                     
(1)  186/    914C : CE FD               	st 		@-3(p2) 											; save A, reserving room for the result.
(1)  187/    914E : 40                  	lde 														; save E
(1)  188/    914F : CE FF               	st 		@-1(p2) 	
(1)  189/    9151 : 37                  	xpah 	p3 													; save P3
(1)  190/    9152 : CE FF               	st 		@-1(p2)
(1)  191/    9154 : 33                  	xpal	p3
(1)  192/    9155 : CE FF               	st 		@-1(p2)
(1)  193/    9157 :                     
(1)  194/    9157 : C4 00               	ldi 	0 													; blank the result on the stack
(1)  195/    9159 : CA 04               	st 		EVTermResult(p2) 									; not strictly necessary :)
(1)  196/    915B : CA 05               	st 		EVTermResult+1(p2)
(1)  197/    915D : 90 02               	jmp 	__ETFindTerm
(1)  198/    915F :                     
(1)  199/    915F :                     __ETSkipSpace:
(1)  200/    915F : C5 01               	ld 		@1(p1) 												; bump P1
(1)  201/    9161 :                     __ETFindTerm:
(1)  202/    9161 : C1 00               	ld 		(p1) 												; read the first term character
(1)  203/    9163 : 03                  	scl
(1)  204/    9164 : FC 20               	cai 	32													; if space, skip over it and try again.
(1)  205/    9166 : 98 F7               	jz 		__ETSkipSpace
(1)  206/    9168 : D4 C0               	ani 	0xC0												; should be in range 00-3F to be 32-95 (legal chars)
(1)  207/    916A : 03                  	scl
(1)  208/    916B : 9C 1D               	jnz 	__ETExit 											; if not, exit with error.
(1)  209/    916D :                     
(1)  210/    916D : C1 00               	ld 		(p1) 												; read term first character again
(1)  211/    916F : 03                  	scl
(1)  212/    9170 : FC 3A               	cai 	'9'+1 												; if >= '9' will be +ve
(1)  213/    9172 : 94 24               	jp 		__ETTermNotConstant
(1)  214/    9174 : F4 8A               	adi 	128+10 												; if < '0' will be +ve
(1)  215/    9176 : 94 20               	jp 		__ETTermNotConstant
(1)  216/    9178 :                     ;
(1)  217/    9178 :                     ;	Term is an ASCII Constant
(1)  218/    9178 :                     ;
(1)  219/    9178 : (MACRO)             	lpi 	p3,MathLibrary-1 									; use Math library to convert to integer.
(1)  219/    9178 : C4 00                       ldi     (MATHLIBRARY-1) / 256
(1)  219/    917A : 37                          xpah    P3
(1)  219/    917B : C4 02                       ldi     (MATHLIBRARY-1) & 255
(1)  219/    917D : 33                          xpal    P3
(1)  220/    917E : C4 3F               	ldi 	'?'													; function ASCII->Int, cannot fail as first digit numeric
(1)  221/    9180 : 3F                  	xppc 	p3
(1)  222/    9181 :                     ;
(1)  223/    9181 :                     ;	Result on TOS - have to reposition past the stacked SC/MP registers.
(1)  224/    9181 :                     ;
(1)  225/    9181 :                     __ETSucceed:
(1)  226/    9181 : C6 01               	ld 		@1(p2)												; put result in its proper place
(1)  227/    9183 : CA 05               	st 		EVTermResult+1(p2) 									; unstacking TOS.
(1)  228/    9185 : C6 01               	ld 		@1(p2)
(1)  229/    9187 : CA 05               	st 		EVTermResult+1(p2)
(1)  230/    9189 :                     __ETCCLAndExit:
(1)  231/    9189 : 02                  	ccl 														; clear carry indicating success
(1)  232/    918A :                     __ETExit:
(1)  233/    918A : C6 01               	ld 		@1(p2) 												; restore P3
(1)  234/    918C : 33                  	xpal 	p3
(1)  235/    918D : C6 01               	ld 		@1(p2)
(1)  236/    918F : 37                  	xpah 	p3
(1)  237/    9190 : C6 01               	ld 		@1(p2) 												; restore E
(1)  238/    9192 : 01                  	xae
 AS V1.42 Beta [Bld 102] - source file evaltest.asm(evaluate.asm) - page 8 - 12/7/2015 16:54:05


(1)  239/    9193 : C6 01               	ld 		@1(p2) 												; restore A, leaving the result on the tack
(1)  240/    9195 : 3F                  	xppc 	p3 													; return
(1)  241/    9196 : 90 B4               	jmp 	EvaluateTerm 										; make re-entrant
(1)  242/    9198 :                     ;
(1)  243/    9198 :                     ;	P1 still points to first non space, which is in range 33-95. It is not a numeric character.
(1)  244/    9198 :                     ;
(1)  245/    9198 :                     __ETTermNotConstant:
(1)  246/    9198 :                     
(1)  247/    9198 : C1 00               	ld 		(p1) 												; read character
(1)  248/    919A : E4 3A               	xri 	':'													; array check ?
(1)  249/    919C : 98 2E               	jz 		__ETIsParenType 					
(1)  250/    919E : E4 12               	xri 	':'!'('												; parenthesis check ?
(1)  251/    91A0 : 98 2A               	jz 		__ETIsParenType
(1)  252/    91A2 :                     ;
(1)  253/    91A2 :                     ;	System variable checks.
(1)  254/    91A2 :                     ;
(1)  255/    91A2 : (MACRO)             	lpi 	p3,TermSystemVariableCheck-1 						; this routine checks for system variables.
(1)  255/    91A2 : C4 92                       ldi     (TERMSYSTEMVARIABLECHECK-1) / 256
(1)  255/    91A4 : 37                          xpah    P3
(1)  255/    91A5 : C4 17                       ldi     (TERMSYSTEMVARIABLECHECK-1) & 255
(1)  255/    91A7 : 33                          xpal    P3
(1)  256/    91A8 : C5 01               	ld 		@1(p1)												; read the variable name and bump, finally.
(1)  257/    91AA : 3F                  	xppc 	p3 													; call it
(1)  258/    91AB : 06                  	csa 														; if CY/L is clear, this has done the work.
(1)  259/    91AC : 94 D3               	jp 		__ETSucceed 										; and the result is on the stack, so process it.
(1)  260/    91AE : C6 02               	ld 		@2(p2) 												; throw away the saved value
(1)  261/    91B0 :                     ;
(1)  262/    91B0 :                     ;	Okay, finally we think it's just a normal variable. We copy it in, don't bother shoving it on the stack.
(1)  263/    91B0 :                     ;
(1)  264/    91B0 : C1 FF               	ld 		-1(p1) 												; read the variable name and skip over it
(1)  265/    91B2 : 02                  	ccl
(1)  266/    91B3 : F1 FF               	add 	-1(p1) 												; double it.
(1)  267/    91B5 : D4 7E               	ani 	0x7E 												; arrangement is 6 bit ASCII, this is 3F x 2
(1)  268/    91B7 : 33                  	xpal 	p3
(1)  269/    91B8 : C4 0D               	ldi 	VariableBase/256 									; point P3 to the variables
(1)  270/    91BA : 37                  	xpah 	p3
(1)  271/    91BB : C7 01               	ld 		@1(p3) 												; read low 
(1)  272/    91BD : CA 04               	st 		EVTermResult(p2) 									; copy to stack space
(1)  273/    91BF : C3 00               	ld 		(p3) 												; same for high
(1)  274/    91C1 : CA 05               	st 		EVTermResult+1(p2)
(1)  275/    91C3 : 90 C4               	jmp 	__ETCCLAndExit 										; clear carry and exit.
(1)  276/    91C5 :                     
(1)  277/    91C5 :                     __ETSucceed2:													; allows extended jump from end of array code.
(1)  278/    91C5 : 90 BA               	jmp 	__ETSucceed
(1)  279/    91C7 :                     
(1)  280/    91C7 :                     __ETFailParen:
(1)  281/    91C7 : C6 02               	ld 		@2(p2) 												; throw away the index value as error
(1)  282/    91C9 : 03                  	scl
(1)  283/    91CA : 90 BE               	jmp 	__ETExit 											; and exit with failure.
(1)  284/    91CC :                     ;
(1)  285/    91CC :                     ;	Parenthesis (expr) or Array :expr)
(1)  286/    91CC :                     ;
(1)  287/    91CC :                     __ETIsParenType:
(1)  288/    91CC : C5 01               	ld 		@1(p1) 												; read the type and save in E so we know what it was.
(1)  289/    91CE : 01                  	xae
(1)  290/    91CF : (MACRO)             	lpi 	p3,EvaluateExpression-1 							; evaluate the sub-expression.
(1)  290/    91CF : C4 90                       ldi     (EVALUATEEXPRESSION-1) / 256
(1)  290/    91D1 : 37                          xpah    P3
(1)  290/    91D2 : C4 91                       ldi     (EVALUATEEXPRESSION-1) & 255
(1)  290/    91D4 : 33                          xpal    P3
 AS V1.42 Beta [Bld 102] - source file evaltest.asm(evaluate.asm) - page 9 - 12/7/2015 16:54:05


(1)  291/    91D5 : 3F                  	xppc 	p3 
(1)  292/    91D6 : 06                  	csa 														; if carry set, error occurred
(1)  293/    91D7 : D4 80               	ani 	0x80
(1)  294/    91D9 : 9C AF               	jnz 	__ETExit
(1)  295/    91DB :                     ;
(1)  296/    91DB :                     ;	Look for )
(1)  297/    91DB :                     ;
(1)  298/    91DB :                     __ETFindClosure:
(1)  299/    91DB : C1 00               	ld 		(p1) 												; what's next ?
(1)  300/    91DD : 98 E8               	jz 		__ETFailParen 										; if nothing, exit with fail (end of string)
(1)  301/    91DF : C5 01               	ld 		@1(p1) 												; read it with bumping
(1)  302/    91E1 : E4 20               	xri 	' ' 												; is it a space character ?
(1)  303/    91E3 : 98 F6               	jz 		__ETFindClosure 									; if so, try the next one.
(1)  304/    91E5 : E4 09               	xri 	' '!')'												; check it was close brackets ?
(1)  305/    91E7 : 9C DE               	jnz 	__ETFailParen 										; if not, exit with fail as both end in close bracket.
(1)  306/    91E9 :                     
(1)  307/    91E9 : 40                  	lde 														; was it :nnn) or (nnn)
(1)  308/    91EA : E4 28               	xri 	'('
(1)  309/    91EC : 98 93               	jz 		__ETSucceed 										; if '(' exit with value on TOS.
(1)  310/    91EE :                     ;
(1)  311/    91EE :                     ;	Now it is array type e.g. :expr) so we have to do the array lookup.
(1)  312/    91EE :                     ;
(1)  313/    91EE : 02                  	ccl 														; otherwise, it's an array reference.
(1)  314/    91EF : C2 00               	ld 		0(p2)  												; double TOS as it is word orientated
(1)  315/    91F1 : F2 00               	add 	0(p2)
(1)  316/    91F3 : CA 00               	st 		0(p2)
(1)  317/    91F5 : C2 01               	ld 		1(p2)
(1)  318/    91F7 : F2 01               	add 	1(p2)
(1)  319/    91F9 : CA 01               	st 		1(p2) 												; p2 is now double the index.
(1)  320/    91FB : C4 0D               	ldi 	VariableBase/256 									; point P3 to the program last byte variable (&)
(1)  321/    91FD : 37                  	xpah 	p3
(1)  322/    91FE : C4 4C               	ldi 	('&' & 0x3F) * 2
(1)  323/    9200 : 33                  	xpal 	p3 
(1)  324/    9201 : 02                  	ccl
(1)  325/    9202 : C2 00               	ld 		0(p2)												; get offset
(1)  326/    9204 : F3 00               	add 	0(p3) 												; add top of program memory
(1)  327/    9206 : 01                  	xae 														; put in E temporarily
(1)  328/    9207 : C2 01               	ld 		1(p2) 												; repeat for MSB
(1)  329/    9209 : F3 01               	add 	1(p3)
(1)  330/    920B : 37                  	xpah 	p3 													; put in P3.H
(1)  331/    920C : 40                  	lde 														; get E temporary
(1)  332/    920D : 33                  	xpal 	p3 													; put in P3.L - P3 now the address to access
(1)  333/    920E : C3 00               	ld 		0(p3) 												; so access it
(1)  334/    9210 : CA 00               	st 		0(p2)												; and override the array index
(1)  335/    9212 : C3 01               	ld 		1(p3)
(1)  336/    9214 : CA 01               	st 		1(p2) 
(1)  337/    9216 : 90 AD               	jmp 	__ETSucceed2 										; and we are done.
(1)  338/    9218 :                     
(1)  339/    9218 :                     	endsection EvaluateTerm
(1)  340/    9218 :                     
(1)  341/    9218 :                     ; ****************************************************************************************************************
(1)  342/    9218 :                     ; ****************************************************************************************************************
(1)  343/    9218 :                     ;
(1)  344/    9218 :                     ;		A is a variable whose value has been requested. Returns single value. This is used for non
(1)  345/    9218 :                     ;		standard variables, things like $ and ? which have side-effects.
(1)  346/    9218 :                     ;
(1)  347/    9218 :                     ;		If legitimate value return CY/L = 0, else return CY/L = 1
(1)  348/    9218 :                     ;
(1)  349/    9218 :                     ; ****************************************************************************************************************
(1)  350/    9218 :                     ; ****************************************************************************************************************
 AS V1.42 Beta [Bld 102] - source file evaltest.asm(evaluate.asm) - page 10 - 12/7/2015 16:54:05


(1)  351/    9218 :                     
(1)  352/    9218 :                     TermSystemVariableCheck:
(1)  353/    9218 :                     
(1)  354/    9218 :                     	section ReadSystemVariables
(1)  355/    9218 :                     
(1)  356/    9218 : 37                  	xpah 	p3													; save P3 preserving A, reserve space for result.
(1)  357/    9219 : CE FD               	st 		@-3(p2)
(1)  358/    921B : 33                  	xpal 	p3
(1)  359/    921C : CE FF               	st 		@-1(p2)
(1)  360/    921E :                     
(1)  361/    921E : 37                  	xpah 	p3 													; get system variable back.
(1)  362/    921F :                     
(1)  363/    921F : E4 24               	xri 	'$'													; $ as a term reads a keystroke.
(1)  364/    9221 : 98 0C               	jz 		__TSVCGetCharacter
(1)  365/    9223 : E4 1B               	xri 	'$'!'?'												; ? reads a keyboard line in and evaluates it.
(1)  366/    9225 : 98 18               	jz 		__TSVCGetNumber
(1)  367/    9227 : 03                  	scl 														; fail - set CY/L and just restore P3 and exit
(1)  368/    9228 :                     __TSVCExit:
(1)  369/    9228 : C6 01               	ld 		@1(p2)
(1)  370/    922A : 33                  	xpal 	p3
(1)  371/    922B : C6 01               	ld 		@1(p2)
(1)  372/    922D : 37                  	xpah 	p3
(1)  373/    922E : 3F                  	xppc	p3 													; doesn't need to be re-entrant
(1)  374/    922F :                     ;
(1)  375/    922F :                     ;	$ (read character ASCII code)
(1)  376/    922F :                     ;
(1)  377/    922F :                     __TSVCGetCharacter:
(1)  378/    922F : (MACRO)             	lpi 	p3,GetChar-1 										; get a character
(1)  378/    922F : C4 90                       ldi     (GETCHAR-1) / 256
(1)  378/    9231 : 37                          xpah    P3
(1)  378/    9232 : C4 8F                       ldi     (GETCHAR-1) & 255
(1)  378/    9234 : 33                          xpal    P3
(1)  379/    9235 : 3F                  	xppc 	p3 													; from the keyboard.
(1)  380/    9236 : CA 02               	st 		2(p2) 												; put on stack in return slot
(1)  381/    9238 : C4 00               	ldi 	0
(1)  382/    923A : CA 03               	st 		3(p2) 												; clear MSB of answer.
(1)  383/    923C : 02                  	ccl 														; mark as done
(1)  384/    923D : 90 E9               	jmp 	__TSVCExit 											; and exit.
(1)  385/    923F :                     ;
(1)  386/    923F :                     ;	? (read keyboard line in and evaluate it)
(1)  387/    923F :                     ;
(1)  388/    923F :                     __TSVCGetNumber:
(1)  389/    923F : 35                  	xpah 	p1 													; save P1 on the stack
(1)  390/    9240 : CE FF               	st 		@-1(p2)
(1)  391/    9242 : 31                  	xpal 	p1
(1)  392/    9243 : CE FF               	st 		@-1(p2)
(1)  393/    9245 : (MACRO)             	lpi 	p1,KeyboardBuffer 									; P1 points to keyboard buffer
(1)  393/    9245 : C4 0C                       ldi     (KEYBOARDBUFFER) / 256
(1)  393/    9247 : 35                          xpah    P1
(1)  393/    9248 : C4 00                       ldi     (KEYBOARDBUFFER) & 255
(1)  393/    924A : 31                          xpal    P1
(1)  394/    924B : (MACRO)             	lpi 	p3,GetString-1 										; P3 points to string read function
(1)  394/    924B : C4 90                       ldi     (GETSTRING-1) / 256
(1)  394/    924D : 37                          xpah    P3
(1)  394/    924E : C4 8F                       ldi     (GETSTRING-1) & 255
(1)  394/    9250 : 33                          xpal    P3
(1)  395/    9251 : C4 10               	ldi 	KeyboardBufferSize 									; max length
(1)  396/    9253 : 3F                  	xppc 	p3 													; read keyboard input.
(1)  397/    9254 : (MACRO)             	lpi 	p3,EvaluateExpression-1 							; evaluate and push on stack, ignore any errors.
(1)  397/    9254 : C4 90                       ldi     (EVALUATEEXPRESSION-1) / 256
 AS V1.42 Beta [Bld 102] - source file evaltest.asm(evaluate.asm) - page 11 - 12/7/2015 16:54:05


(1)  397/    9256 : 37                          xpah    P3
(1)  397/    9257 : C4 91                       ldi     (EVALUATEEXPRESSION-1) & 255
(1)  397/    9259 : 33                          xpal    P3
(1)  398/    925A : 3F                  	xppc 	p3
(1)  399/    925B : C2 00               	ld 		0(p2) 												; copy result
(1)  400/    925D : CA 06               	st 		6(p2)
(1)  401/    925F : C2 01               	ld 		1(p2)
(1)  402/    9261 : CA 07               	st 		7(p2)
(1)  403/    9263 : C6 02               	ld 		@2(p2) 												; skip over result
(1)  404/    9265 : C6 01               	ld 		@1(p2)												; restore P1
(1)  405/    9267 : 31                  	xpal 	p1
(1)  406/    9268 : C6 01               	ld 		@1(p2)
(1)  407/    926A : 35                  	xpah 	p1
(1)  408/    926B : 02                  	ccl 														; clear carry as done
(1)  409/    926C : 90 BA               	jmp 	__TSVCExit
(1)  410/    926E :                     
(1)  411/    926E :                     	endsection ReadSystemVariables
(1)  412/    926E :                     
     135/    926E :                     ;
     136/    926E :                     ;	Q+A test data. 
     137/    926E :                     ;
     138/    926E :                     TestData:
     139/    926E : 31 31 31 2B 31 30   	db 	"111+1000",0
                    30 30 00 
     140/    9277 : 57 04               	dw 	1111
     141/    9279 : 32 32 2F 32 00      	db 	"22/2",0
     142/    927E : 0B 00               	dw 	11
     143/    9280 : 41 00               	db 	"A",0
     144/    9282 : 25 00               	dw 	37
     145/    9284 :                     
     146/    9284 : 00                  	db 	0
 AS V1.42 Beta [Bld 102] - source file evaltest.asm - page 12 - 12/7/2015 16:54:05


  symbol table (* = unused):
  ------------------------

*ARCHITECTURE :  i386-unknown-win32 - | *BIGENDIAN :                      0 - |
*BRANCHEXT :                      0 - | *CASESENSITIVE :                  0 - |
 COMPLETED :                   908B C | *CONSTPI :        3.141592653589793 - |
*DATE :                   12/7/2015 - |  EVALUATEEXPRESSION :          9092 C |
 EVALUATETERM :                914C C |  EVTERMRESULT [EVALUATETERM] :    4 - |
 EXEXPRRESULT [EVALUATEEXPRESSION] :                                      4 - |
 FAILED :                      9086 C | *FALSE :                          0 - |
 FILL :                        900D C |  FINDEND :                     9060 C |
*FULLPMMU :                       1 - |  GETCHAR :                     9090 C |
 GETSTRING :                   9090 C | *HAS64 :                          1 - |
*HASDSP :                         0 - | *HASFPU :                         0 - |
*HASPMMU :                        0 - | *INEXTMODE :                      0 - |
*INLWORDMODE :                    0 - | *INMAXMODE :                      0 - |
*INSRCMODE :                      0 - | *INSUPMODE :                      0 - |
 KEYBOARDBUFFER :               C00 - |  KEYBOARDBUFFERSIZE :            10 - |
*LISTON :                         1 - | *MACEXP :                         1 - |
 MATHLIBRARY :                    3 - | *MOMCPU :                         C - |
*MOMCPUNAME :                 SC/MP - | *NESTMAX :                      100 - |
*PACKING :                        0 - | *PADDING :                        1 - |
 POINTER :                      CFE - | *PROGRAMSPACE :                1000 - |
*RELAXED :                        0 - |  SETPOINTER :                  9024 C |
 TERMSYSTEMVARIABLECHECK :     9218 C |  TESTDATA :                    926E C |
 TESTLOOP :                    9032 C | *TIME :                    16:54:05 - |
*TRUE :                           1 - |  VARIABLEBASE :                 D00 - |
*VERSION :                     142F - |  WAIT :                        9084 C |
 __ETCCLANDEXIT [EVALUATETERM] :                                       9189 C |
 __ETEXIT [EVALUATETERM] :     918A C |
 __ETFAILPAREN [EVALUATETERM] : 91C7 C |
 __ETFINDCLOSURE [EVALUATETERM] :                                      91DB C |
 __ETFINDTERM [EVALUATETERM] : 9161 C |
 __ETISPARENTYPE [EVALUATETERM] :                                      91CC C |
 __ETSKIPSPACE [EVALUATETERM] : 915F C |
 __ETSUCCEED [EVALUATETERM] :  9181 C |  __ETSUCCEED2 [EVALUATETERM] : 91C5 C |
 __ETTERMNOTCONSTANT [EVALUATETERM] :                                  9198 C |
 __EXCLEARCARRYCOPYANDEXIT [EVALUATEEXPRESSION] :                      90B0 C |
 __EXCOPYANDEXIT [EVALUATEEXPRESSION] :                                90B1 C |
 __EXDOCOMPARE [EVALUATEEXPRESSION] :                                  9119 C |
 __EXDOOPERATOR [EVALUATEEXPRESSION] :                                 90EA C |
 __EXDROPVALUEANDEXITWITHERROR [EVALUATEEXPRESSION] :                  90E6 C |
 __EXEQUALS [EVALUATEEXPRESSION] :                                     9142 C |
 __EXERROR [EVALUATEEXPRESSION] :                                      90AD C |
 __EXLESSTHAN [EVALUATEEXPRESSION] :                                   9147 C |
 __EXRETURNTRUE [EVALUATEEXPRESSION] :                                 913E C |
 __EXTERMOKAY [EVALUATEEXPRESSION] :                                   90C7 C |
 __EXTERMOKAY2 [EVALUATEEXPRESSION] :                                  9117 C |
 __TSVCEXIT [READSYSTEMVARIABLES] :                                    9228 C |
 __TSVCGETCHARACTER [READSYSTEMVARIABLES] :                            922F C |
 __TSVCGETNUMBER [READSYSTEMVARIABLES] :                               923F C |

     73 symbols
     29 unused symbols

 AS V1.42 Beta [Bld 102] - source file evaltest.asm - page 13 - 12/7/2015 16:54:05


  defined macros:
  ---------------

LPI                                   |

      1 macro

 AS V1.42 Beta [Bld 102] - source file evaltest.asm - page 14 - 12/7/2015 16:54:05


  codepages:
  ----------

STANDARD (0 changed characters)


0.01 seconds assembly time

    558 lines source file
    630 lines incl. macro expansions
      2 passes
      0 errors
      0 warnings
