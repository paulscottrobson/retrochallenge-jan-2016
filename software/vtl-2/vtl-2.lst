 AS V1.42 Beta [Bld 102] - source file vtl-2.asm - page 1 - 12/12/2015 16:44:57


       1/       0 :                     ; ****************************************************************************************************************
       2/       0 :                     ; ****************************************************************************************************************
       3/       0 :                     ;
       4/       0 :                     ;												VTL-2 ROM Image
       5/       0 :                     ;
       6/       0 :                     ; ****************************************************************************************************************
       7/       0 :                     ; ****************************************************************************************************************
       8/       0 :                     
       9/       0 :                     	cpu 	sc/mp
      10/       0 :                     
      11/       0 :                     	include source\memorymacros.asm 							; Memory allocation and Macro definition.	
(1)    1/       0 :                     ; ****************************************************************************************************************
(1)    2/       0 :                     ; ****************************************************************************************************************
(1)    3/       0 :                     ;
(1)    4/       0 :                     ;										Memory and Macro Allocation.
(1)    5/       0 :                     ;	
(1)    6/       0 :                     ; ****************************************************************************************************************
(1)    7/       0 :                     ; ****************************************************************************************************************
(1)    8/       0 :                     
(1)    9/       0 : =0x3                OSMathLibrary = 0x0003 											; the Maths library is here.
(1)   10/       0 :                     
(1)   11/       0 :                     ; ****************************************************************************************************************
(1)   12/       0 :                     ;												 Memory Allocation
(1)   13/       0 :                     ; ****************************************************************************************************************
(1)   14/       0 :                     
(1)   15/       0 : =0xC00              ScreenMirror = 0xC00 											; Screen mirror, 128 bytes, 256 byte page boundary.
(1)   16/       0 : =0xC80              ScreenCursor = ScreenMirror+0x80  								; Position on that screen (00..7F)
(1)   17/       0 :                     
(1)   18/       0 : =0xC90              SystemVariables = 0xC90 										; System variables start here.
(1)   19/       0 :                     
(1)   20/       0 : =0xC90              Variables = SystemVariables 									; 64 x 2 byte system variables, 6 bit ASCII (@,A,B,C...)
(1)   21/       0 :                     
(1)   22/       0 : =0xD10              KeyboardBuffer = SystemVariables+128							; Keyboard buffer.
(1)   23/       0 : =0x50               KeyboardBufferSize = 80
(1)   24/       0 :                     
(1)   25/       0 :                     ; ****************************************************************************************************************
(1)   26/       0 :                     ;														Macros
(1)   27/       0 :                     ; ****************************************************************************************************************
(1)   28/       0 :                     
(1)   29/       0 :                     lpi	macro	ptr,addr											; load pointer register with constant
(1)   30/       0 :                     	ldi 	(addr) / 256
(1)   31/       0 :                     	xpah 	ptr
(1)   32/       0 :                     	ldi 	(addr) & 255
(1)   33/       0 :                     	xpal 	ptr
(1)   34/       0 :                     	endm
(1)   35/       0 :                     
(1)   36/       0 :                     pushp macro ptr 												; push pointer register on stack
(1)   37/       0 :                     	xpah 	ptr
(1)   38/       0 :                     	st 		@-1(p2)
(1)   39/       0 :                     	xpal 	ptr
(1)   40/       0 :                     	st 		@-1(p2)
(1)   41/       0 :                     	endm
(1)   42/       0 :                     
(1)   43/       0 :                     pullp macro ptr 												; pull pointer register off stack
(1)   44/       0 :                     	ld 		@1(p2)
(1)   45/       0 :                     	xpal 	ptr
(1)   46/       0 :                     	ld 		@1(p2)
(1)   47/       0 :                     	xpah 	ptr
(1)   48/       0 :                     	endm
(1)   49/       0 :                     
 AS V1.42 Beta [Bld 102] - source file vtl-2.asm(memorymacros.asm) - page 2 - 12/12/2015 16:44:57


(1)   50/       0 :                     pushe macro 													; push E on stack
(1)   51/       0 :                     	lde
(1)   52/       0 :                     	st 		@-1(p2)
(1)   53/       0 :                     	endm
(1)   54/       0 :                     
(1)   55/       0 :                     pulle macro 													; pull E off stack
(1)   56/       0 :                     	ld 		@1(p2)
(1)   57/       0 :                     	xae
(1)   58/       0 :                     	endm
(1)   59/       0 :                     
(1)   60/       0 :                     pusha macro 													; push A on stack
(1)   61/       0 :                     	st 		@-1(p2)
(1)   62/       0 :                     	endm
(1)   63/       0 :                     
(1)   64/       0 :                     pulla macro
(1)   65/       0 :                     	ld 		@1(p2)
(1)   66/       0 :                     	endm
(1)   67/       0 :                     
(1)   68/       0 :                     setv macro var,value											; a debugging macro, to set a variable value.
(1)   69/       0 :                     	ldi 	value & 255											; P3 points to variables
(1)   70/       0 :                     	st 		((var & 0x3F)*2)(p3)
(1)   71/       0 :                     	ldi 	value/256
(1)   72/       0 :                     	st 		((var & 0x3F)*2+1)(p3)
(1)   73/       0 :                     	endm
(1)   74/       0 :                     
      12/       0 :                     
      13/       0 :                     ; ****************************************************************************************************************
      14/       0 :                     ;													Main Program
      15/       0 :                     ; ****************************************************************************************************************
      16/       0 :                     
      17/    9000 :                     	org 	0x9000 												; the ROM starts here
      18/    9000 :                     
      19/    9000 : 68                  	db 		0x68												; this makes it boot straight into this ROM.
      20/    9001 :                     
      21/    9001 : (MACRO)             	lpi 	p3,Variables
      21/    9001 : C4 0C                       ldi     (VARIABLES) / 256
      21/    9003 : 37                          xpah    P3
      21/    9004 : C4 90                       ldi     (VARIABLES) & 255
      21/    9006 : 33                          xpal    P3
      22/    9007 : (MACRO)             	setv 	'C',1023
      22/    9007 : C4 FF                       ldi     1023 & 255                                                                                     ; P3 points to variables
      22/    9009 : CB 06                       st              (('C' & 0x3F)*2)(p3)
      22/    900B : C4 03                       ldi     1023/256
      22/    900D : CB 07                       st              (('C' & 0x3F)*2+1)(p3)
      23/    900F : (MACRO)             	setv 	'D',15
      23/    900F : C4 0F                       ldi     15 & 255                                                                                     ; P3 points to variables
      23/    9011 : CB 08                       st              (('D' & 0x3F)*2)(p3)
      23/    9013 : C4 00                       ldi     15/256
      23/    9015 : CB 09                       st              (('D' & 0x3F)*2+1)(p3)
      24/    9017 : (MACRO)             	setv 	'&',0x9002
      24/    9017 : C4 02                       ldi     0X9002 & 255                                                                                     ; P3 points to variables
      24/    9019 : CB 4C                       st              (('&' & 0x3F)*2)(p3)
      24/    901B : C4 90                       ldi     0X9002/256
      24/    901D : CB 4D                       st              (('&' & 0x3F)*2+1)(p3)
      25/    901F : (MACRO)             	lpi 	p2,0xFF8											; set up stack
      25/    901F : C4 0F                       ldi     (0XFF8) / 256
      25/    9021 : 36                          xpah    P2
      25/    9022 : C4 F8                       ldi     (0XFF8) & 255
      25/    9024 : 32                          xpal    P2
      26/    9025 : (MACRO)             	lpi 	p1,test
 AS V1.42 Beta [Bld 102] - source file vtl-2.asm - page 3 - 12/12/2015 16:44:57


      26/    9025 : C4 93                       ldi     (TEST) / 256
      26/    9027 : 35                          xpah    P1
      26/    9028 : C4 18                       ldi     (TEST) & 255
      26/    902A : 31                          xpal    P1
      27/    902B : (MACRO)             	lpi 	p3,EvaluateExpression-1
      27/    902B : C4 92                       ldi     (EVALUATEEXPRESSION-1) / 256
      27/    902D : 37                          xpah    P3
      27/    902E : C4 5A                       ldi     (EVALUATEEXPRESSION-1) & 255
      27/    9030 : 33                          xpal    P3
      28/    9031 : 3F                  	xppc 	p3
      29/    9032 : 01                  	xae
      30/    9033 : C2 00               	ld 		0(p2)
      31/    9035 : 33                  	xpal 	p3
      32/    9036 : C2 01               	ld 		1(p2)
      33/    9038 : 37                  	xpah 	p3
      34/    9039 : 90 FE               stop:jmp 	stop
      35/    903B :                     
      36/    903B :                     	include source\screen.asm 									; screen I/O stuff.
(1)    1/    903B :                     ; ****************************************************************************************************************
(1)    2/    903B :                     ; ****************************************************************************************************************
(1)    3/    903B :                     ;
(1)    4/    903B :                     ;											Screen I/O, VTL-2 ROM
(1)    5/    903B :                     ;											=====================
(1)    6/    903B :                     ;
(1)    7/    903B :                     ;	Provides Character and String Input/Output functionality.
(1)    8/    903B :                     ;
(1)    9/    903B :                     ; ****************************************************************************************************************
(1)   10/    903B :                     ; ****************************************************************************************************************
(1)   11/    903B :                     
(1)   12/    903B :                     ; ****************************************************************************************************************
(1)   13/    903B :                     ; ****************************************************************************************************************
(1)   14/    903B :                     ;
(1)   15/    903B :                     ;	Print routine. Prints either character in A, or ASCIIZ string at P1 (if A is zero). Preserves all registers
(1)   16/    903B :                     ;	except if printing string, P1 points to the character after the NULL terminator.
(1)   17/    903B :                     ;
(1)   18/    903B :                     ;	Scrolls automatically. Understands character codes 32-255, 8 (Backspace) 12 (Clear Screen) 13 (Carriage
(1)   19/    903B :                     ;	Return). Others are currently ignored (except 0, see above). Note L/C values (97....) display those characters
(1)   20/    903B :                     ;	in the ROM font *not* lower case :)
(1)   21/    903B :                     ;
(1)   22/    903B :                     ; ****************************************************************************************************************
(1)   23/    903B :                     ; ****************************************************************************************************************
(1)   24/    903B :                     
(1)   25/    903B :                     Print:
(1)   26/    903B :                     	section 	Print
(1)   27/    903B :                     
(1)   28/    903B : (MACRO)             	pusha														; push registers on stack
(1)   28/    903B : CE FF                       st              @-1(p2)
(1)   29/    903D : (MACRO)             	pushp 	p1
(1)   29/    903D : 35                          xpah    P1
(1)   29/    903E : CE FF                       st              @-1(p2)
(1)   29/    9040 : 31                          xpal    P1
(1)   29/    9041 : CE FF                       st              @-1(p2)
(1)   30/    9043 : (MACRO)             	pushe
(1)   30/    9043 : 40                          lde
(1)   30/    9044 : CE FF                       st              @-1(p2)
(1)   31/    9046 :                     
(1)   32/    9046 : C2 03               	ld 		3(p2) 												; read character 
(1)   33/    9048 : 9C 12               	jnz 	__PRPrintCharacterA 								; if non zero print it on its own.
(1)   34/    904A :                     
(1)   35/    904A :                     __PRPrintString:
 AS V1.42 Beta [Bld 102] - source file vtl-2.asm(screen.asm) - page 4 - 12/12/2015 16:44:57


(1)   36/    904A : C2 01               	ld 		1(p2) 												; restore original P1
(1)   37/    904C : 31                  	xpal 	p1
(1)   38/    904D : C2 02               	ld 		2(p2)
(1)   39/    904F : 35                  	xpah 	p1 													; read character at P1.
(1)   40/    9050 : C5 01               	ld 		@1(p1)
(1)   41/    9052 : 01                  	xae 														; save in E.
(1)   42/    9053 : 35                  	xpah 	p1 													; write P1 back.
(1)   43/    9054 : CA 02               	st 		2(p2)
(1)   44/    9056 : 31                  	xpal 	p1
(1)   45/    9057 : CA 01               	st 		1(p2)
(1)   46/    9059 : 40                  	lde 														; get character from E
(1)   47/    905A : 98 46               	jz 		__PRExitNoCheck 									; exit without loop check.
(1)   48/    905C :                     ;
(1)   49/    905C :                     ;	Print character in A now ; throughout it is stored in E.
(1)   50/    905C :                     ;
(1)   51/    905C :                     __PRPrintCharacterA:
(1)   52/    905C : 01                  	xae 														; save character in E.
(1)   53/    905D :                     ;
(1)   54/    905D :                     ;	Read cursor and set P1 to that address
(1)   55/    905D :                     ;
(1)   56/    905D : C4 0C               	ldi 	ScreenCursor/256 									; set P1 to point to screen cursor
(1)   57/    905F : 35                  	xpah 	p1
(1)   58/    9060 : C4 80               	ldi 	ScreenCursor&255
(1)   59/    9062 : 31                  	xpal 	p1
(1)   60/    9063 : C1 00               	ld 		0(p1) 												; put cursor position in P1.L
(1)   61/    9065 : 31                  	xpal 	p1
(1)   62/    9066 :                     ;
(1)   63/    9066 :                     ;	Check for control
(1)   64/    9066 :                     ;
(1)   65/    9066 : 40                  	lde 														; look at character
(1)   66/    9067 : D4 E0               	ani 	0xE0 												; is it code 0-31
(1)   67/    9069 : 98 45               	jz 		__PRIsControlChar
(1)   68/    906B :                     ;
(1)   69/    906B :                     ;	Print non-control
(1)   70/    906B :                     ;
(1)   71/    906B : 40                  	lde 														; read character
(1)   72/    906C : 03                  	scl 														; CY/L clear if < 96
(1)   73/    906D : FC 60               	cai 	96 
(1)   74/    906F : 06                  	csa 	 	 												; skip if carry set
(1)   75/    9070 : E4 80               	xri 	0x80													
(1)   76/    9072 : 94 04               	jp 		__PRNotASCII
(1)   77/    9074 : 40                  	lde 														; if ASCII make 6 bit.
(1)   78/    9075 : D4 3F               	ani 	0x3F
(1)   79/    9077 : 01                  	xae
(1)   80/    9078 :                     __PRNotASCII:
(1)   81/    9078 : 40                  	lde 														; get character.
(1)   82/    9079 : C9 00               	st 		(p1) 												; save in shadow memory
(1)   83/    907B : 35                  	xpah 	p1 													; switch to VRAM, preserving A.
(1)   84/    907C : C4 00               	ldi 	0 													
(1)   85/    907E : 35                  	xpah 	p1
(1)   86/    907F : CD 01               	st 		@1(p1) 												; save in screen memory, advance write position.
(1)   87/    9081 :                     ;
(1)   88/    9081 :                     ;	Write cursor position back from P1.L
(1)   89/    9081 :                     ;
(1)   90/    9081 :                     __PRUpdateCursor:
(1)   91/    9081 : C4 0C               	ldi		ScreenCursor / 256 									; set P1 to point to screen cursor, restore position to P1
(1)   92/    9083 : 35                  	xpah 	p1
(1)   93/    9084 : C4 80               	ldi 	ScreenCursor & 255 
(1)   94/    9086 : 31                  	xpal 	p1 													; after this, adjusted cursor position is in AC.
(1)   95/    9087 : C9 00               	st 		(p1) 												; write back in cursor position
 AS V1.42 Beta [Bld 102] - source file vtl-2.asm(screen.asm) - page 5 - 12/12/2015 16:44:57


(1)   96/    9089 : 94 13               	jp 		__PRExit 											; if position is off the bottom then scroll.
(1)   97/    908B :                     ;
(1)   98/    908B :                     ;	Scroll display
(1)   99/    908B :                     ;
(1)  100/    908B : C4 0C               	ldi 	(ScreenMirror+16) / 256 							; point P1 to 2nd line.
(1)  101/    908D : 35                  	xpah 	p1
(1)  102/    908E : C4 10               	ldi 	(ScreenMirror+16) & 255
(1)  103/    9090 :                     __PRScrollLoop:
(1)  104/    9090 : 31                  	xpal 	p1
(1)  105/    9091 : C1 00               	ld 		0(p1) 												; copy char to previous line
(1)  106/    9093 : C9 F0               	st 		-16(p1)
(1)  107/    9095 : C5 01               	ld 		@1(p1) 												; bump pointer.
(1)  108/    9097 : 31                  	xpal 	p1
(1)  109/    9098 : 94 F6               	jp 		__PRScrollLoop
(1)  110/    909A : C4 70               	ldi 	128-16 												; clear from and move to last line
(1)  111/    909C : 90 3D               	jmp 	__PRClearFromMoveTo
(1)  112/    909E :                     ;
(1)  113/    909E :                     ;	Exit screen drawing routine.
(1)  114/    909E :                     ;
(1)  115/    909E :                     __PRExit:
(1)  116/    909E : C2 03               	ld 		3(p2) 												; if character was zero, loop
(1)  117/    90A0 : 98 A8               	jz 		__PRPrintString 									; back as printing string at P1.
(1)  118/    90A2 :                     __PRExitNoCheck:
(1)  119/    90A2 : (MACRO)             	pulle 														; restore registers
(1)  119/    90A2 : C6 01                       ld              @1(p2)
(1)  119/    90A4 : 01                          xae
(1)  120/    90A5 : (MACRO)             	pullp 	p1
(1)  120/    90A5 : C6 01                       ld              @1(p2)
(1)  120/    90A7 : 31                          xpal    P1
(1)  120/    90A8 : C6 01                       ld              @1(p2)
(1)  120/    90AA : 35                          xpah    P1
(1)  121/    90AB : (MACRO)             	pulla
(1)  121/    90AB : C6 01                       ld              @1(p2)
(1)  122/    90AD : 3F                  	xppc 	p3 													; return
(1)  123/    90AE : 90 8B               	jmp 	Print 												; make re-entrant.
(1)  124/    90B0 :                     ;
(1)  125/    90B0 :                     ;	Check for supported control characters 8 (Backspace) 12 (Clear) 13 (Carriage Return)
(1)  126/    90B0 :                     ;
(1)  127/    90B0 :                     __PRIsControlChar:
(1)  128/    90B0 : 40                  	lde 														; restore character.
(1)  129/    90B1 : E4 0D               	xri 	13 													; carriage return ? (13)
(1)  130/    90B3 : 98 1B               	jz 		__PRIsReturn
(1)  131/    90B5 : E4 01               	xri 	13!12 												; form feed ? (12)
(1)  132/    90B7 : 98 20               	jz 		__PRClearScreen
(1)  133/    90B9 : E4 04               	xri 	12!8 												; backspace ? (8)
(1)  134/    90BB : 9C E1               	jnz 	__PRExit 
(1)  135/    90BD :                     ;
(1)  136/    90BD :                     ;	Handle backspace (8)
(1)  137/    90BD :                     ;
(1)  138/    90BD : 31                  	xpal 	p1 													; check cursor position is zero
(1)  139/    90BE : 98 DE               	jz 		__PRExit 											; if it is, cannot backspace so exit.
(1)  140/    90C0 : 31                  	xpal 	p1  												; put it back
(1)  141/    90C1 : C5 FF               	ld 		@-1(p1)												; move it back one
(1)  142/    90C3 : C4 20               	ldi 	' '	 												; erase in shadow
(1)  143/    90C5 : C9 00               	st 		(p1)
(1)  144/    90C7 : C4 00               	ldi 	0 													; point P1 to VRAM
(1)  145/    90C9 : 35                  	xpah 	p1
(1)  146/    90CA : C4 20               	ldi 	' '													; erase in VRAM
(1)  147/    90CC : C9 00               	st 		(p1)
(1)  148/    90CE : 90 B1               	jmp 	__PRUpdateCursor 									; and exit
 AS V1.42 Beta [Bld 102] - source file vtl-2.asm(screen.asm) - page 6 - 12/12/2015 16:44:57


(1)  149/    90D0 :                     ;
(1)  150/    90D0 :                     ;	Handle carriage return (13)
(1)  151/    90D0 :                     ;
(1)  152/    90D0 :                     __PRIsReturn:
(1)  153/    90D0 : 31                  	xpal 	p1 													; cursor position in A
(1)  154/    90D1 : D4 F0               	ani 	0xF0 												; start of current line
(1)  155/    90D3 : 02                  	ccl 														; down one line
(1)  156/    90D4 : F4 10               	adi 	0x10 	
(1)  157/    90D6 : 31                  	xpal 	p1 													; put it back in P1.
(1)  158/    90D7 : 90 A8               	jmp 	__PRUpdateCursor
(1)  159/    90D9 :                     ;
(1)  160/    90D9 :                     ;	Handle clear screen (12)
(1)  161/    90D9 :                     ;
(1)  162/    90D9 :                     __PRClearScreen:
(1)  163/    90D9 : C4 00               	ldi 	0 													; clear shadow memory from here.
(1)  164/    90DB :                     ;
(1)  165/    90DB :                     ;	From position A, clear the memory in the shadow screen to the end, copy the shadow screen to VRAM
(1)  166/    90DB :                     ;	then use position A as the new cursor position.
(1)  167/    90DB :                     ;
(1)  168/    90DB :                     __PRClearFromMoveTo:
(1)  169/    90DB : CE FF               	st 		@-1(p2) 											; save this position, the cursor goes here.
(1)  170/    90DD :                     __PRClearLoop:
(1)  171/    90DD : 31                  	xpal 	p1 													; save position in P1.
(1)  172/    90DE : C4 20               	ldi 	' '													; write space there.
(1)  173/    90E0 : CD 01               	st 		@1(p1)
(1)  174/    90E2 : 31                  	xpal 	p1
(1)  175/    90E3 : 94 F8               	jp 		__PRClearLoop 										; until reached shadow memory start.
(1)  176/    90E5 : C4 00               	ldi 	0 													; now copy shadow memory to screen memory.
(1)  177/    90E7 :                     __PRCopy:
(1)  178/    90E7 : 31                  	xpal 	p1 													; set up P1.L
(1)  179/    90E8 : C4 0C               	ldi 	ScreenMirror/256 									; point to shadow memory.
(1)  180/    90EA : 35                  	xpah 	p1 													
(1)  181/    90EB : C1 00               	ld 		(p1) 												; read shadow memory
(1)  182/    90ED : 35                  	xpah 	p1 													; zero P1.H preserving A
(1)  183/    90EE : C4 00               	ldi 	0
(1)  184/    90F0 : 35                  	xpah 	p1
(1)  185/    90F1 : CD 01               	st 		@1(p1) 												; save and increment p1
(1)  186/    90F3 : 31                  	xpal 	p1 
(1)  187/    90F4 : 94 F1               	jp 		__PRCopy 											; keep doing till all copied.
(1)  188/    90F6 : C6 01               	ld 		@1(p2) 												; read cursor position
(1)  189/    90F8 : 31                  	xpal 	p1 													; put in P1.L
(1)  190/    90F9 : 90 86               	jmp 	__PRUpdateCursor
(1)  191/    90FB :                     
(1)  192/    90FB :                     	endsection 	Print
(1)  193/    90FB :                     
(1)  194/    90FB :                     ; ****************************************************************************************************************
(1)  195/    90FB :                     ; ****************************************************************************************************************
(1)  196/    90FB :                     ;
(1)  197/    90FB :                     ;		Input a single character into A. Case is converted to Upper. All registers preserved except A
(1)  198/    90FB :                     ;
(1)  199/    90FB :                     ; ****************************************************************************************************************
(1)  200/    90FB :                     ; ****************************************************************************************************************
(1)  201/    90FB :                     
(1)  202/    90FB :                     GetChar:
(1)  203/    90FB :                     	section 	GetChar
(1)  204/    90FB : C4 08               	ldi 	0x8 												; set P1 to $8xx, and save P1.H
(1)  205/    90FD : 35                  	xpah 	p1
(1)  206/    90FE : CE FF               	st 		@-1(p2)
(1)  207/    9100 :                     __GCWaitKey: 													; wait for key press
(1)  208/    9100 : C1 00               	ld 		0(p1)
 AS V1.42 Beta [Bld 102] - source file vtl-2.asm(screen.asm) - page 7 - 12/12/2015 16:44:57


(1)  209/    9102 : 94 FC               	jp 		__GCWaitKey
(1)  210/    9104 : D4 7F               	ani	 	0x7F 												; throw away the upper bit.
(1)  211/    9106 : CA FF               	st 		-1(p2) 												; save it below stack
(1)  212/    9108 :                     __GCWaitRelease:
(1)  213/    9108 : C1 00               	ld 		0(p1) 												; wait for release
(1)  214/    910A : D4 80               	ani 	0x80
(1)  215/    910C : 9C FA               	jnz 	__GCWaitRelease
(1)  216/    910E : C6 01               	ld 		@1(p2) 												; restore P1.H
(1)  217/    9110 : 35                  	xpah 	p1
(1)  218/    9111 : C2 FE               	ld 		-2(p2) 												; restore saved value
(1)  219/    9113 : 02                  	ccl
(1)  220/    9114 : F4 20               	adi 	0x20												; will make lower case -ve
(1)  221/    9116 : 94 02               	jp 		__GCNotLower
(1)  222/    9118 : FC 20               	cai 	0x20 												; capitalise
(1)  223/    911A :                     __GCNotLower:
(1)  224/    911A : F4 E0               	adi 	0xE0 												; fix up.
(1)  225/    911C : 3F                  	xppc 	p3 													; return
(1)  226/    911D : 90 DC               	jmp 	GetChar 											; make re-entrant
(1)  227/    911F :                     	endsection 	GetChar
(1)  228/    911F :                     
(1)  229/    911F :                     ; ****************************************************************************************************************
(1)  230/    911F :                     ; ****************************************************************************************************************
(1)  231/    911F :                     ;
(1)  232/    911F :                     ;			Read an ASCIIZ string from keyboard into P1 of length A maximum (excludes NULL terminator)
(1)  233/    911F :                     ;
(1)  234/    911F :                     ; ****************************************************************************************************************
(1)  235/    911F :                     ; ****************************************************************************************************************
(1)  236/    911F :                     
(1)  237/    911F :                     GetString:
(1)  238/    911F :                     	section GetString
(1)  239/    911F : (MACRO)             	pusha 														; save A,P3,E
(1)  239/    911F : CE FF                       st              @-1(p2)
(1)  240/    9121 : (MACRO)             	pushp 	p3
(1)  240/    9121 : 37                          xpah    P3
(1)  240/    9122 : CE FF                       st              @-1(p2)
(1)  240/    9124 : 33                          xpal    P3
(1)  240/    9125 : CE FF                       st              @-1(p2)
(1)  241/    9127 : (MACRO)             	pushe 
(1)  241/    9127 : 40                          lde
(1)  241/    9128 : CE FF                       st              @-1(p2)
(1)  242/    912A : C4 00               	ldi 	0 													; set E (current position) to A.
(1)  243/    912C : 01                  	xae
(1)  244/    912D :                     __GSLoop:
(1)  245/    912D : (MACRO)             	lpi 	p3,Print-1 											; print the prompt (half coloured square)
(1)  245/    912D : C4 90                       ldi     (PRINT-1) / 256
(1)  245/    912F : 37                          xpah    P3
(1)  245/    9130 : C4 3A                       ldi     (PRINT-1) & 255
(1)  245/    9132 : 33                          xpal    P3
(1)  246/    9133 : C4 9B               	ldi 	155
(1)  247/    9135 : 3F                  	xppc 	p3
(1)  248/    9136 : (MACRO)             	lpi 	p3,GetChar-1 										; get a character
(1)  248/    9136 : C4 90                       ldi     (GETCHAR-1) / 256
(1)  248/    9138 : 37                          xpah    P3
(1)  248/    9139 : C4 FA                       ldi     (GETCHAR-1) & 255
(1)  248/    913B : 33                          xpal    P3
(1)  249/    913C : 3F                  	xppc 	p3
(1)  250/    913D : C9 80               	st 		-0x80(p1) 											; save it in the current position.
(1)  251/    913F : (MACRO)             	lpi 	p3,Print-1 											; erase the prompt with backspace.
(1)  251/    913F : C4 90                       ldi     (PRINT-1) / 256
(1)  251/    9141 : 37                          xpah    P3
 AS V1.42 Beta [Bld 102] - source file vtl-2.asm(screen.asm) - page 8 - 12/12/2015 16:44:57


(1)  251/    9142 : C4 3A                       ldi     (PRINT-1) & 255
(1)  251/    9144 : 33                          xpal    P3
(1)  252/    9145 : C4 08               	ldi 	8
(1)  253/    9147 : 3F                  	xppc 	p3
(1)  254/    9148 : C1 80               	ld 		-0x80(p1) 											; re-read character
(1)  255/    914A : D4 E0               	ani 	0xE0 												; check if control key.
(1)  256/    914C : 98 0F               	jz 		__GSControlKey 
(1)  257/    914E : 40                  	lde 														; get current position.
(1)  258/    914F : E2 03               	xor 	3(p2) 												; reached maximum length of buffer ?
(1)  259/    9151 : 98 DA               	jz 		__GSLoop 											; if so, ignore the key and go round again.
(1)  260/    9153 : C1 80               	ld 		-0x80(p1) 											; get character and print it
(1)  261/    9155 : 3F                  	xppc 	p3
(1)  262/    9156 : C4 01               	ldi 	1 													; increment E
(1)  263/    9158 : 02                  	ccl
(1)  264/    9159 : 70                  	ade
(1)  265/    915A : 01                  	xae
(1)  266/    915B : 90 D0               	jmp 	__GSLoop 											; and go round again.
(1)  267/    915D :                     ;
(1)  268/    915D :                     ;	Handle control keys (0x00-0x1F)
(1)  269/    915D :                     ;
(1)  270/    915D :                     __GSControlKey:
(1)  271/    915D : C1 80               	ld 		-0x80(p1) 											; get typed in key
(1)  272/    915F : E4 08               	xri 	8 													; check for backspace.
(1)  273/    9161 : 98 17               	jz 		__GSBackspace 			
(1)  274/    9163 : E4 05               	xri 	8!13 												; check for CR
(1)  275/    9165 : 9C C6               	jnz 	__GSLoop 											; if not, ignore the key.
(1)  276/    9167 :                     ;
(1)  277/    9167 :                     ;	Carriage Return, ending input.
(1)  278/    9167 :                     ;
(1)  279/    9167 : C9 80               	st 		-0x80(p1) 											; replace the CR written with NULL terminator.
(1)  280/    9169 : C4 0D               	ldi 	13 													; print CR
(1)  281/    916B : 3F                  	xppc 	p3
(1)  282/    916C : (MACRO)             	pulle 														; restore E,P3,A
(1)  282/    916C : C6 01                       ld              @1(p2)
(1)  282/    916E : 01                          xae
(1)  283/    916F : (MACRO)             	pullp	p3
(1)  283/    916F : C6 01                       ld              @1(p2)
(1)  283/    9171 : 33                          xpal    P3
(1)  283/    9172 : C6 01                       ld              @1(p2)
(1)  283/    9174 : 37                          xpah    P3
(1)  284/    9175 : (MACRO)             	pulla
(1)  284/    9175 : C6 01                       ld              @1(p2)
(1)  285/    9177 : 3F                  	xppc 	p3 													; return
(1)  286/    9178 : 90 A5               	jmp 	GetString 											; make re-entrant (probably unneccessary !!)
(1)  287/    917A :                     ;
(1)  288/    917A :                     ;	Backspace entered
(1)  289/    917A :                     ;
(1)  290/    917A :                     __GSBackspace
(1)  291/    917A : 40                  	lde 														; if E = 0 we can't backspace any further.
(1)  292/    917B : 98 B0               	jz 		__GSLoop
(1)  293/    917D : C4 08               	ldi 	8 													; backspace on screen
(1)  294/    917F : 3F                  	xppc 	p3
(1)  295/    9180 : C4 FF               	ldi 	0xFF 												; decrement E
(1)  296/    9182 : 02                  	ccl
(1)  297/    9183 : 70                  	ade
(1)  298/    9184 : 01                  	xae
(1)  299/    9185 : 90 A6               	jmp 	__GSLoop 											; and go round again.
(1)  300/    9187 :                     
(1)  301/    9187 :                     	endsection GetString
(1)  302/    9187 :                     
 AS V1.42 Beta [Bld 102] - source file vtl-2.asm(screen.asm) - page 9 - 12/12/2015 16:44:57


      37/    9187 :                     	include source\special_terms.asm 							; special terms (things like ?, $, ! a)
(1)    1/    9187 :                     ; ****************************************************************************************************************
(1)    2/    9187 :                     ; ****************************************************************************************************************
(1)    3/    9187 :                     ;
(1)    4/    9187 :                     ;										Special Term Evaluation
(1)    5/    9187 :                     ;	
(1)    6/    9187 :                     ; ****************************************************************************************************************
(1)    7/    9187 :                     ; ****************************************************************************************************************
(1)    8/    9187 :                     
(1)    9/    9187 :                     ; ****************************************************************************************************************
(1)   10/    9187 :                     ; ****************************************************************************************************************
(1)   11/    9187 :                     ;
(1)   12/    9187 :                     ;			Handle Special Non-Standard Terms. Standard terms are numeric constants and variables. 
(1)   13/    9187 :                     ;
(1)   14/    9187 :                     ;	Non standard terms are more complex than simple variable access or have side effects.
(1)   15/    9187 :                     ;
(1)   16/    9187 :                     ;	Accept pointer to term 2nd char in P1, first char in A.  Returns CY/L = 0 if processed, CY/L = 1 if ignored.
(1)   17/    9187 :                     ;
(1)   18/    9187 :                     ;										if processed correctly, value is on stack and E = 0.
(1)   19/    9187 :                     ;										if error occurred when processing, E != 0, no value on stack.
(1)   20/    9187 :                     ;	Non re-entrant:
(1)   21/    9187 :                     ;
(1)   22/    9187 :                     ;	Supported Terms are (at present) :
(1)   23/    9187 :                     ;
(1)   24/    9187 :                     ;		$ 			Read a single keystroke from keyboard, return ASCII value		(Not implemented)
(1)   25/    9187 :                     ;		?			Read a string from the keyboard, evaluate as expression			(Not implemented)
(1)   26/    9187 :                     ;		:<exp>)		Array access.													(Not implemented)
(1)   27/    9187 :                     ;		(<exp>)		Parenthesised expression.										(Not implemented)
(1)   28/    9187 :                     ;
(1)   29/    9187 :                     ; ****************************************************************************************************************
(1)   30/    9187 :                     ; ****************************************************************************************************************
(1)   31/    9187 :                     
(1)   32/    9187 :                     SpecialTermEvaluate:
(1)   33/    9187 : CE FE               	st 		@-2(p2) 											; save A allocating space for result.
(1)   34/    9189 : (MACRO)             	pushp 	p3													; save P3
(1)   34/    9189 : 37                          xpah    P3
(1)   34/    918A : CE FF                       st              @-1(p2)
(1)   34/    918C : 33                          xpal    P3
(1)   34/    918D : CE FF                       st              @-1(p2)
(1)   35/    918F : C2 02               	ld 		2(p2) 												; get original A
(1)   36/    9191 : E4 24               	xri 	'$'													; check for $ (get a key stroke.)
(1)   37/    9193 : 9C 11               	jnz 	__STE_NotKeyStroke
(1)   38/    9195 :                     
(1)   39/    9195 :                     ; ****************************************************************************************************************
(1)   40/    9195 :                     ;										$ Read Character from keyboard
(1)   41/    9195 :                     ; ****************************************************************************************************************
(1)   42/    9195 : (MACRO)             	lpi 	p3,GetChar-1 										; read a keystroke.
(1)   42/    9195 : C4 90                       ldi     (GETCHAR-1) / 256
(1)   42/    9197 : 37                          xpah    P3
(1)   42/    9198 : C4 FA                       ldi     (GETCHAR-1) & 255
(1)   42/    919A : 33                          xpal    P3
(1)   43/    919B : 3F                  	xppc 	p3 													; call it
(1)   44/    919C : CA 02               	st 		2(p2) 												; save result in LSB
(1)   45/    919E : C4 00               	ldi 	0
(1)   46/    91A0 : CA 03               	st 		3(p2) 												; save zero in MSB
(1)   47/    91A2 : 01                  	xae 														; E = 0
(1)   48/    91A3 : 02                  	ccl 														; CY/L = 1 => processed
(1)   49/    91A4 : 90 31               	jmp 	__STEExit
(1)   50/    91A6 :                     
(1)   51/    91A6 :                     __STE_NotKeyStroke:
 AS V1.42 Beta [Bld 102] - source file vtl-2.asm(special_terms.asm) - page 10 - 12/12/2015 16:44:57


(1)   52/    91A6 : E4 1B               	xri 	'$'!'?'												; check for ? (read an expression)
(1)   53/    91A8 : 9C 24               	jnz 	__STENotExpression
(1)   54/    91AA :                     
(1)   55/    91AA :                     ; ****************************************************************************************************************
(1)   56/    91AA :                     ;										? Read Expression from Keyboard
(1)   57/    91AA :                     ; ****************************************************************************************************************
(1)   58/    91AA :                     
(1)   59/    91AA : (MACRO)             	lpi 	p3,GetString-1 										; read a string
(1)   59/    91AA : C4 91                       ldi     (GETSTRING-1) / 256
(1)   59/    91AC : 37                          xpah    P3
(1)   59/    91AD : C4 1E                       ldi     (GETSTRING-1) & 255
(1)   59/    91AF : 33                          xpal    P3
(1)   60/    91B0 : (MACRO)             	lpi 	p1,KeyboardBuffer 									; into keyboard buffer
(1)   60/    91B0 : C4 0D                       ldi     (KEYBOARDBUFFER) / 256
(1)   60/    91B2 : 35                          xpah    P1
(1)   60/    91B3 : C4 10                       ldi     (KEYBOARDBUFFER) & 255
(1)   60/    91B5 : 31                          xpal    P1
(1)   61/    91B6 : C4 50               	ldi 	KeyboardBufferSize 									; max length.
(1)   62/    91B8 : 3F                  	xppc 	p3
(1)   63/    91B9 : (MACRO)             	lpi 	p3,EvaluateExpression-1 							; evaluate it
(1)   63/    91B9 : C4 92                       ldi     (EVALUATEEXPRESSION-1) / 256
(1)   63/    91BB : 37                          xpah    P3
(1)   63/    91BC : C4 5A                       ldi     (EVALUATEEXPRESSION-1) & 255
(1)   63/    91BE : 33                          xpal    P3
(1)   64/    91BF : 3F                  	xppc 	p3
(1)   65/    91C0 : C6 01               	ld 		@1(p2)												; copy result
(1)   66/    91C2 : CA 03               	st 		3(p2)
(1)   67/    91C4 : C6 01               	ld 		@1(p2)
(1)   68/    91C6 : CA 03               	st 		3(p2)
(1)   69/    91C8 : C4 00               	ldi 	0 													; and exit ignoring errors.
(1)   70/    91CA : 01                  	xae 	
(1)   71/    91CB : 02                  	ccl 	
(1)   72/    91CC : 90 09               	jmp 	__STEExit
(1)   73/    91CE :                     
(1)   74/    91CE :                     __STENotExpression:
(1)   75/    91CE : E4 05               	xri 	'?'!':'												; check if it is array or parenthesis
(1)   76/    91D0 : 98 15               	jz 		__STEArrayOrBracket
(1)   77/    91D2 : E4 12               	xri 	':'!'('
(1)   78/    91D4 : 98 11               	jz 		__STEArrayOrBracket
(1)   79/    91D6 :                     
(1)   80/    91D6 :                     __STEIgnore:
(1)   81/    91D6 : 03                  	scl 														; A = 0, CY/L = 1 => last option.
(1)   82/    91D7 :                     __STEExit:
(1)   83/    91D7 : (MACRO)             	pullp 	p3
(1)   83/    91D7 : C6 01                       ld              @1(p2)
(1)   83/    91D9 : 33                          xpal    P3
(1)   83/    91DA : C6 01                       ld              @1(p2)
(1)   83/    91DC : 37                          xpah    P3
(1)   84/    91DD : 06                  	csa 														; if CY/L = 0,
(1)   85/    91DE : 94 03               	jp 		__STEWasProcessed 									; then maybe keep result
(1)   86/    91E0 :                     __STEThrow:
(1)   87/    91E0 : C6 02               	ld 		@2(p2) 												; remove result off stack.
(1)   88/    91E2 : 3F                  	xppc 	p3
(1)   89/    91E3 :                     
(1)   90/    91E3 :                     __STEWasProcessed:
(1)   91/    91E3 : 40                  	lde 														; if E != 0, throw result.
(1)   92/    91E4 : 9C FA               	jnz 	__STEThrow
(1)   93/    91E6 : 3F                  	xppc 	p3 													; return with result still on stack.
(1)   94/    91E7 :                     
(1)   95/    91E7 :                     ; ****************************************************************************************************************
 AS V1.42 Beta [Bld 102] - source file vtl-2.asm(special_terms.asm) - page 11 - 12/12/2015 16:44:57


(1)   96/    91E7 :                     ;							(<expr>), parenthesis or :<expr>), array lookup
(1)   97/    91E7 :                     ; ****************************************************************************************************************
(1)   98/    91E7 :                     
(1)   99/    91E7 :                     
(1)  100/    91E7 :                     __STEArrayOrBracket:
(1)  101/    91E7 : (MACRO)             	lpi 	p3,EvaluateExpression-1 							; evaluate expression
(1)  101/    91E7 : C4 92                       ldi     (EVALUATEEXPRESSION-1) / 256
(1)  101/    91E9 : 37                          xpah    P3
(1)  101/    91EA : C4 5A                       ldi     (EVALUATEEXPRESSION-1) & 255
(1)  101/    91EC : 33                          xpal    P3
(1)  102/    91ED : 3F                  	xppc 	p3
(1)  103/    91EE : 01                  	xae 														; error code in E
(1)  104/    91EF : 06                  	csa 	
(1)  105/    91F0 : 94 42               	jp 		__STETermErrorDrop 									; error in parenthesis expression.
(1)  106/    91F2 :                     
(1)  107/    91F2 : C2 04               	ld 		4(p2) 												; get first character original
(1)  108/    91F4 : 01                  	xae 														; save in E
(1)  109/    91F5 : C6 01               	ld 		@1(p2)												; copy result
(1)  110/    91F7 : CA 03               	st 		3(p2)
(1)  111/    91F9 : C6 01               	ld 		@1(p2)
(1)  112/    91FB : CA 03               	st 		3(p2)
(1)  113/    91FD : C1 00               	ld 		(p1) 												; if next character NIL
(1)  114/    91FF : 98 35               	jz 		__STETermError
(1)  115/    9201 : C5 01               	ld 		@1(p1) 												; if next character ) then okay.
(1)  116/    9203 : E4 29               	xri 	')'
(1)  117/    9205 : 9C 2F               	jnz 	__STETermError
(1)  118/    9207 :                     
(1)  119/    9207 : 40                  	lde															; check first character to see if : or (
(1)  120/    9208 : E4 28               	xri 	'('
(1)  121/    920A : 98 22               	jz 		__STENotArray
(1)  122/    920C :                     
(1)  123/    920C : (MACRO)             	lpi 	p3,Variables+('&' & 0x3F) * 2 						; point P3 to top of memory variable.
(1)  123/    920C : C4 0C                       ldi     (VARIABLES+('&' & 0X3F) * 2) / 256
(1)  123/    920E : 37                          xpah    P3
(1)  123/    920F : C4 DC                       ldi     (VARIABLES+('&' & 0X3F) * 2) & 255
(1)  123/    9211 : 33                          xpal    P3
(1)  124/    9212 : C2 02               	ld 		2(p2) 												; double value being returned (word index)
(1)  125/    9214 : 02                  	ccl
(1)  126/    9215 : F2 02               	add 	2(p2)
(1)  127/    9217 : 01                  	xae 														; save Low Value in E
(1)  128/    9218 : C2 03               	ld 		3(p2)
(1)  129/    921A : F2 03               	add 	3(p2)
(1)  130/    921C : 01                  	xae 														; High value in E, Low Value in A.
(1)  131/    921D : 02                  	ccl
(1)  132/    921E : F3 00               	add 	0(p3) 												; low address
(1)  133/    9220 : 01                  	xae 														; save in E, get high value.
(1)  134/    9221 : F3 01               	add 	1(p3)  												; add high base.
(1)  135/    9223 : 37                  	xpah 	p3 													; put in P3.H
(1)  136/    9224 : 40                  	lde 														; put low address in P3.L
(1)  137/    9225 : 33                  	xpal 	p3
(1)  138/    9226 : C3 00               	ld 		0(p3) 												; copy this into stack position
(1)  139/    9228 : CA 02               	st 		2(p2)
(1)  140/    922A : C3 01               	ld 		1(p3)
(1)  141/    922C : CA 03               	st 		3(p2)
(1)  142/    922E :                     __STENotArray:
(1)  143/    922E : C4 00               	ldi 	0
(1)  144/    9230 : 01                  	xae 														; E = 0
(1)  145/    9231 : 02                  	ccl 														; clear CY/L indicating processed.
(1)  146/    9232 : 90 A3               	jmp 	__STEExit 
(1)  147/    9234 :                     
 AS V1.42 Beta [Bld 102] - source file vtl-2.asm(special_terms.asm) - page 12 - 12/12/2015 16:44:57


(1)  148/    9234 :                     __STETermErrorDrop:
(1)  149/    9234 : C6 02               	ld 		@2(p2)
(1)  150/    9236 :                     
(1)  151/    9236 :                     __STETermError:
(1)  152/    9236 : C4 50               	ldi 	'P'													; P error
(1)  153/    9238 : 01                  	xae 
(1)  154/    9239 : 02                  	ccl
(1)  155/    923A : 90 9B               	jmp 	__STEExit
(1)  156/    923C :                     
(1)  157/    923C :                     wait5:
(1)  158/    923C : 90 FE               	jmp 	wait5
(1)  159/    923E :                     	
      38/    923E :                     	include source\expression.asm 								; expression evaluator.
(1)    1/    923E :                     ; ****************************************************************************************************************
(1)    2/    923E :                     ; ****************************************************************************************************************
(1)    3/    923E :                     ;
(1)    4/    923E :                     ;						Expression Evaluation. Returns CY/L = 0 on Error, A = Error Code
(1)    5/    923E :                     ;	
(1)    6/    923E :                     ; ****************************************************************************************************************
(1)    7/    923E :                     ; ****************************************************************************************************************
(1)    8/    923E :                     
(1)    9/    923E :                     ; TODO: Add special terms.
(1)   10/    923E :                     ; TODO: Write > = < code. (remember GE), requires a different test.
(1)   11/    923E :                     
(1)   12/    923E : =0x3                operation = 3													; pending operation
(1)   13/    923E : =0x5                resultLo = 5
(1)   14/    923E : =0x6                resultHi = 6
(1)   15/    923E :                     
(1)   16/    923E :                     ;
(1)   17/    923E :                     ;	Come here when the binary operator (+,-,*,/,>,=,<) fails. There are the two values still on the stack
(1)   18/    923E :                     ;	so drop one and exit.
(1)   19/    923E :                     ;
(1)   20/    923E :                     __EE_TermErrorAndDrop:
(1)   21/    923E : C6 02               	ld 		@2(p2) 												; reduce back to one number on the stack.
(1)   22/    9240 :                     ;
(1)   23/    9240 :                     ;	Return with a Term Error.
(1)   24/    9240 :                     ;
(1)   25/    9240 :                     __EE_TermError:
(1)   26/    9240 : 02                  	ccl
(1)   27/    9241 : C4 54               	ldi 	'T'													; 'T' is Term Error.
(1)   28/    9243 : CA 06               	st 		6(p2) 												; return the term error in A register
(1)   29/    9245 :                     __EE_Exit:
(1)   30/    9245 : C6 01               	ld 		@1(p2)												; copy result to final target
(1)   31/    9247 : CA 06               	st 		6(p2)
(1)   32/    9249 : C6 01               	ld 		@1(p2)
(1)   33/    924B : CA 06               	st 		6(p2)
(1)   34/    924D : (MACRO)             	pullp 	p3													; restore registers
(1)   34/    924D : C6 01                       ld              @1(p2)
(1)   34/    924F : 33                          xpal    P3
(1)   34/    9250 : C6 01                       ld              @1(p2)
(1)   34/    9252 : 37                          xpah    P3
(1)   35/    9253 : (MACRO)             	pulle 	
(1)   35/    9253 : C6 01                       ld              @1(p2)
(1)   35/    9255 : 01                          xae
(1)   36/    9256 : (MACRO)             	pulla 	 													; this is pending operation
(1)   36/    9256 : C6 01                       ld              @1(p2)
(1)   37/    9258 : (MACRO)             	pulla 	
(1)   37/    9258 : C6 01                       ld              @1(p2)
(1)   38/    925A : 3F                  	xppc 	p3
(1)   39/    925B :                     
 AS V1.42 Beta [Bld 102] - source file vtl-2.asm(expression.asm) - page 13 - 12/12/2015 16:44:57


(1)   40/    925B :                     EvaluateExpression:
(1)   41/    925B : CE FE               	st 		@-2(p2)												; 2 byte final result
(1)   42/    925D : (MACRO)             	pusha 														; save A
(1)   42/    925D : CE FF                       st              @-1(p2)
(1)   43/    925F : C4 2B               	ldi 	'+' 												; save pending operation.
(1)   44/    9261 : CE FF               	st 		@-1(p2)
(1)   45/    9263 : (MACRO)             	pushe 														; save E and P3.
(1)   45/    9263 : 40                          lde
(1)   45/    9264 : CE FF                       st              @-1(p2)
(1)   46/    9266 : (MACRO)             	pushp 	p3
(1)   46/    9266 : 37                          xpah    P3
(1)   46/    9267 : CE FF                       st              @-1(p2)
(1)   46/    9269 : 33                          xpal    P3
(1)   46/    926A : CE FF                       st              @-1(p2)
(1)   47/    926C : C4 00               	ldi 	0 													; clear current value, push 0 on the stack.
(1)   48/    926E : CE FF               	st 		@-1(p2)
(1)   49/    9270 : CE FF               	st		@-1(p2)
(1)   50/    9272 :                     ;
(1)   51/    9272 :                     ;	Get a new term to complete pending operation.
(1)   52/    9272 :                     ;
(1)   53/    9272 :                     __EE_NextTerm:
(1)   54/    9272 : C1 00               	ld 		(p1) 												; read P1
(1)   55/    9274 : 98 CA               	jz 		__EE_TermError 										; term not found error.
(1)   56/    9276 : C5 01               	ld 		@1(p1)												; fetch and skip over any spaces.
(1)   57/    9278 : E4 20               	xri 	' '
(1)   58/    927A : 98 F6               	jz 		__EE_NextTerm
(1)   59/    927C :                     ;
(1)   60/    927C :                     ;	Check if it is a numeric constant
(1)   61/    927C :                     ;
(1)   62/    927C : C5 FF               	ld 		@-1(p1) 											; re-read first non space character.
(1)   63/    927E : 02                  	ccl
(1)   64/    927F : F4 50               	adi 	128-'0'												; will be +ve if < '0'
(1)   65/    9281 : 94 5A               	jp 		__EE_Variable
(1)   66/    9283 : F4 76               	adi 	255-0x89 											; will be +ve if > '9'
(1)   67/    9285 : 94 56               	jp 		__EE_Variable
(1)   68/    9287 :                     ;
(1)   69/    9287 :                     ;	Using the pending operation, the old value, and the new value, do the operation. Choice of either the
(1)   70/    9287 :                     ;	OS built in routines or a seperate function for < = and >.
(1)   71/    9287 :                     ;
(1)   72/    9287 : (MACRO)             	lpi 	p3,OSMathLibrary-1 									; use the maths library to convert to an integer
(1)   72/    9287 : C4 00                       ldi     (OSMATHLIBRARY-1) / 256
(1)   72/    9289 : 37                          xpah    P3
(1)   72/    928A : C4 02                       ldi     (OSMATHLIBRARY-1) & 255
(1)   72/    928C : 33                          xpal    P3
(1)   73/    928D : C4 3F               	ldi	 	'?' 												; this is that function.
(1)   74/    928F : 3F                  	xppc 	p3
(1)   75/    9290 :                     __EE_RunPendingOperation:										; now two values on the stack that we operate on.
(1)   76/    9290 : (MACRO)             	lpi 	p3,OSMathLibrary-1									; use the library routine.
(1)   76/    9290 : C4 00                       ldi     (OSMATHLIBRARY-1) / 256
(1)   76/    9292 : 37                          xpah    P3
(1)   76/    9293 : C4 02                       ldi     (OSMATHLIBRARY-1) & 255
(1)   76/    9295 : 33                          xpal    P3
(1)   77/    9296 : C2 07               	ld 		operation+4(p2)										; get the operation
(1)   78/    9298 : D4 FC               	ani 	0xFC 												; is it 3C-3F which are < = > ?
(1)   79/    929A : E4 3C               	xri 	0x3C
(1)   80/    929C : 9C 06               	jnz 	__EE_IsLibraryOperator 								; use the library routine which supports those.
(1)   81/    929E : (MACRO)             	lpi 	p3,ExpressionComparison-1  							; instead.
(1)   81/    929E : C4 93                       ldi     (EXPRESSIONCOMPARISON-1) / 256
(1)   81/    92A0 : 37                          xpah    P3
(1)   81/    92A1 : C4 15                       ldi     (EXPRESSIONCOMPARISON-1) & 255
 AS V1.42 Beta [Bld 102] - source file vtl-2.asm(expression.asm) - page 14 - 12/12/2015 16:44:57


(1)   81/    92A3 : 33                          xpal    P3
(1)   82/    92A4 :                     __EE_IsLibraryOperator:
(1)   83/    92A4 : C2 07               	ld 		operation+4(p2)										; get the operation
(1)   84/    92A6 : 3F                  	xppc 	p3 													; execute the operation.
(1)   85/    92A7 : 06                  	csa 														; this has Carry Set = Error.
(1)   86/    92A8 : D4 80               	ani 	0x80
(1)   87/    92AA : 9C 92               	jnz 	__EE_TermErrorAndDrop 								; so fail on error.
(1)   88/    92AC :                     ;
(1)   89/    92AC :                     ;	If we have done division, copy the remainder to the % variable.
(1)   90/    92AC :                     ;
(1)   91/    92AC : C2 05               	ld 		operation+2(p2) 									; re-read the operation just done.
(1)   92/    92AE : E4 5C               	xri 	'\\'												; is it unsigned integer divide ?
(1)   93/    92B0 : 98 1B               	jz 		__EE_ProcessRemainder 								; if so, then go copy remainder.
(1)   94/    92B2 :                     ;
(1)   95/    92B2 :                     ;	Get the next operator, ending if we find the end of the string or a closing bracket. At the outer parenthesis
(1)   96/    92B2 :                     ;	level, this is a comment.
(1)   97/    92B2 :                     ;
(1)   98/    92B2 :                     __EE_Next:
(1)   99/    92B2 : 03                  	scl 														; successful exit.
(1)  100/    92B3 : C1 00               	ld 		(p1) 												; look for next operator and bump.
(1)  101/    92B5 : 98 8E               	jz 		__EE_Exit 											; exit okay when found \0 or ), leave P1 on it.
(1)  102/    92B7 : E4 29               	xri 	')'
(1)  103/    92B9 : 98 8A               	jz 		__EE_Exit 										
(1)  104/    92BB : C5 01               	ld 		@1(p1) 												; read, but advance pointer
(1)  105/    92BD : E4 20               	xri 	' '													; space, try next.
(1)  106/    92BF : 98 F1               	jz 		__EE_Next
(1)  107/    92C1 : C1 FF               	ld 		-1(p1) 												; read it again.
(1)  108/    92C3 :                     __EE_WriteAndLoop:
(1)  109/    92C3 : CA 05               	st 		operation+2(p2) 									; the new pending operator.
(1)  110/    92C5 : E4 2F               	xri 	'/' 												; is it divide
(1)  111/    92C7 : 9C A9               	jnz 	__EE_NextTerm 										; then go round again.
(1)  112/    92C9 : C4 5C               	ldi 	'\\' 												; use unsigned divide, not signed divide.
(1)  113/    92CB : 90 F6               	jmp 	__EE_WriteAndLoop
(1)  114/    92CD :                     
(1)  115/    92CD :                     ;
(1)  116/    92CD :                     ;	Copy the remainder from the division into the '%' variable.
(1)  117/    92CD :                     ;	
(1)  118/    92CD :                     __EE_ProcessRemainder:
(1)  119/    92CD : (MACRO)             	lpi 	p3,Variables+('%' & 0x3F) * 2 						; point P3 to remainder variable
(1)  119/    92CD : C4 0C                       ldi     (VARIABLES+('%' & 0X3F) * 2) / 256
(1)  119/    92CF : 37                          xpah    P3
(1)  119/    92D0 : C4 DA                       ldi     (VARIABLES+('%' & 0X3F) * 2) & 255
(1)  119/    92D2 : 33                          xpal    P3
(1)  120/    92D3 : C2 FE               	ld 		-2(p2)												; copy remainder value into remainder variable.
(1)  121/    92D5 : CB 00               	st 		0(p3)
(1)  122/    92D7 : C2 FF               	ld 		-1(p2)
(1)  123/    92D9 : CB 01               	st 		1(p3)
(1)  124/    92DB : 90 D5               	jmp 	__EE_Next 											; get next operator.
(1)  125/    92DD :                     ;
(1)  126/    92DD :                     ;	Found a non-numeric term.
(1)  127/    92DD :                     ;
(1)  128/    92DD :                     __EE_Variable:	
(1)  129/    92DD : C5 01               	ld 		@1(p1) 												; check it is in the range 32-95
(1)  130/    92DF : 03                  	scl
(1)  131/    92E0 : FC 20               	cai 	32
(1)  132/    92E2 : D4 C0               	ani 	0xC0 												; this will be zero for 00-63
(1)  133/    92E4 : 9C 29               	jnz 	__EE_GoTermError 
(1)  134/    92E6 : (MACRO)             	lpi 	p3,SpecialTermEvaluate-1 							; check for "specials"
(1)  134/    92E6 : C4 91                       ldi     (SPECIALTERMEVALUATE-1) / 256
(1)  134/    92E8 : 37                          xpah    P3
 AS V1.42 Beta [Bld 102] - source file vtl-2.asm(expression.asm) - page 15 - 12/12/2015 16:44:57


(1)  134/    92E9 : C4 86                       ldi     (SPECIALTERMEVALUATE-1) & 255
(1)  134/    92EB : 33                          xpal    P3
(1)  135/    92EC : C1 FF               	ld 		-1(p1)												; read character
(1)  136/    92EE : 3F                  	xppc 	p3
(1)  137/    92EF : 06                  	csa 														; if CY/L = 0 we have processed this
(1)  138/    92F0 : 94 1A               	jp 		__EE_SpecialProcess
(1)  139/    92F2 : C1 FF               	ld 		-1(p1)												; read it again
(1)  140/    92F4 : 02                  	ccl 														; double it
(1)  141/    92F5 : F1 FF               	add 	-1(p1)
(1)  142/    92F7 : D4 7E               	ani 	0x7E 												; and with $3F << 1, this is an offset
(1)  143/    92F9 : 01                  	xae 														; put in E
(1)  144/    92FA : (MACRO)             	lpi 	p3,Variables+1 										; offset from variables, read high byte first
(1)  144/    92FA : C4 0C                       ldi     (VARIABLES+1) / 256
(1)  144/    92FC : 37                          xpah    P3
(1)  144/    92FD : C4 91                       ldi     (VARIABLES+1) & 255
(1)  144/    92FF : 33                          xpal    P3
(1)  145/    9300 : C3 80               	ld 		-0x80(p3) 											; read high byte
(1)  146/    9302 : CE FF               	st 		@-1(p2) 											; push on stack
(1)  147/    9304 : C7 FF               	ld 		@-1(p3) 											; point to low byte
(1)  148/    9306 : C3 80               	ld 		-0x80(p3) 											; read it
(1)  149/    9308 : CE FF               	st 		@-1(p2) 											; push on stack.
(1)  150/    930A : 90 84               	jmp 	__EE_RunPendingOperation
(1)  151/    930C :                     
(1)  152/    930C :                     ;
(1)  153/    930C :                     ;	Get here. If E = 0 then okay and value on stack as normal. E != 0 then error, no value pushed.
(1)  154/    930C :                     ;
(1)  155/    930C :                     __EE_SpecialProcess:
(1)  156/    930C : 40                  	lde 														; check E
(1)  157/    930D : 98 81               	jz 		__EE_RunPendingOperation 							; if zero, carry on as normal.											
(1)  158/    930F :                     ;
(1)  159/    930F :                     ;	Jumping back to TERM error.
(1)  160/    930F :                     ;	
(1)  161/    930F :                     __EE_GoTermError:												; too far to jump.
(1)  162/    930F : (MACRO)             	lpi 	p3,__EE_TermError-1
(1)  162/    930F : C4 92                       ldi     (__EE_TERMERROR-1) / 256
(1)  162/    9311 : 37                          xpah    P3
(1)  162/    9312 : C4 3F                       ldi     (__EE_TERMERROR-1) & 255
(1)  162/    9314 : 33                          xpal    P3
(1)  163/    9315 : 3F                  	xppc 	p3
(1)  164/    9316 :                     
(1)  165/    9316 :                     ; op is <=>?
(1)  166/    9316 :                     ExpressionComparison:
(1)  167/    9316 : 03                  	scl
(1)  168/    9317 : 3F                  	xppc 	p3
      39/    9318 :                     
      40/    9318 :                     test:
      41/    9318 : 3A 33 29 00         	db 	":3)",0
 AS V1.42 Beta [Bld 102] - source file vtl-2.asm - page 16 - 12/12/2015 16:44:57


  symbol table (* = unused):
  ------------------------

*ARCHITECTURE :  i386-unknown-win32 - | *BIGENDIAN :                      0 - |
*BRANCHEXT :                      0 - | *CASESENSITIVE :                  0 - |
*CONSTPI :        3.141592653589793 - | *DATE :                  12/12/2015 - |
 EVALUATEEXPRESSION :          925B C |  EXPRESSIONCOMPARISON :        9316 C |
*FALSE :                          0 - | *FULLPMMU :                       1 - |
 GETCHAR :                     90FB C |  GETSTRING :                   911F C |
*HAS64 :                          1 - | *HASDSP :                         0 - |
*HASFPU :                         0 - | *HASPMMU :                        0 - |
*INEXTMODE :                      0 - | *INLWORDMODE :                    0 - |
*INMAXMODE :                      0 - | *INSRCMODE :                      0 - |
*INSUPMODE :                      0 - |  KEYBOARDBUFFER :               D10 - |
 KEYBOARDBUFFERSIZE :            50 - | *LISTON :                         1 - |
*MACEXP :                         1 - | *MOMCPU :                         C - |
*MOMCPUNAME :                 SC/MP - | *NESTMAX :                      100 - |
 OPERATION :                      3 - |  OSMATHLIBRARY :                  3 - |
*PACKING :                        0 - | *PADDING :                        1 - |
 PRINT :                       903B C | *RELAXED :                        0 - |
*RESULTHI :                       6 - | *RESULTLO :                       5 - |
 SCREENCURSOR :                 C80 - |  SCREENMIRROR :                 C00 - |
 SPECIALTERMEVALUATE :         9187 C |  STOP :                        9039 C |
 SYSTEMVARIABLES :              C90 - |  TEST :                        9318 C |
*TIME :                    16:44:57 - | *TRUE :                           1 - |
 VARIABLES :                    C90 - | *VERSION :                     142F - |
 WAIT5 :                       923C C |  __EE_EXIT :                   9245 C |
 __EE_GOTERMERROR :            930F C |  __EE_ISLIBRARYOPERATOR :      92A4 C |
 __EE_NEXT :                   92B2 C |  __EE_NEXTTERM :               9272 C |
 __EE_PROCESSREMAINDER :       92CD C |  __EE_RUNPENDINGOPERATION :    9290 C |
 __EE_SPECIALPROCESS :         930C C |  __EE_TERMERROR :              9240 C |
 __EE_TERMERRORANDDROP :       923E C |  __EE_VARIABLE :               92DD C |
 __EE_WRITEANDLOOP :           92C3 C |  __GCNOTLOWER [GETCHAR] :      911A C |
 __GCWAITKEY [GETCHAR] :       9100 C |  __GCWAITRELEASE [GETCHAR] :   9108 C |
 __GSBACKSPACE [GETSTRING] :   917A C |  __GSCONTROLKEY [GETSTRING] :  915D C |
 __GSLOOP [GETSTRING] :        912D C |  __PRCLEARFROMMOVETO [PRINT] : 90DB C |
 __PRCLEARLOOP [PRINT] :       90DD C |  __PRCLEARSCREEN [PRINT] :     90D9 C |
 __PRCOPY [PRINT] :            90E7 C |  __PREXIT [PRINT] :            909E C |
 __PREXITNOCHECK [PRINT] :     90A2 C |  __PRISCONTROLCHAR [PRINT] :   90B0 C |
 __PRISRETURN [PRINT] :        90D0 C |  __PRNOTASCII [PRINT] :        9078 C |
 __PRPRINTCHARACTERA [PRINT] : 905C C |  __PRPRINTSTRING [PRINT] :     904A C |
 __PRSCROLLLOOP [PRINT] :      9090 C |  __PRUPDATECURSOR [PRINT] :    9081 C |
 __STEARRAYORBRACKET :         91E7 C |  __STEEXIT :                   91D7 C |
*__STEIGNORE :                 91D6 C |  __STENOTARRAY :               922E C |
 __STENOTEXPRESSION :          91CE C |  __STETERMERROR :              9236 C |
 __STETERMERRORDROP :          9234 C |  __STETHROW :                  91E0 C |
 __STEWASPROCESSED :           91E3 C |  __STE_NOTKEYSTROKE :          91A6 C |

     88 symbols
     31 unused symbols

 AS V1.42 Beta [Bld 102] - source file vtl-2.asm - page 17 - 12/12/2015 16:44:57


  defined macros:
  ---------------

LPI                                   | PULLA                                
PULLE                                 | PULLP                                
PUSHA                                 | PUSHE                                
PUSHP                                 | SETV                                 

      8 macros

 AS V1.42 Beta [Bld 102] - source file vtl-2.asm - page 18 - 12/12/2015 16:44:57


  codepages:
  ----------

STANDARD (0 changed characters)


0.01 seconds assembly time

    744 lines source file
    887 lines incl. macro expansions
      2 passes
      0 errors
      0 warnings
