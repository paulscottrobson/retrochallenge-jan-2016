 AS V1.42 Beta [Bld 102] - source file vtl-2.asm - page 1 - 12/27/2015 20:56:40


       1/       0 :                     ; ****************************************************************************************************************
       2/       0 :                     ; ****************************************************************************************************************
       3/       0 :                     ;
       4/       0 :                     ;												VTL-2 ROM Image
       5/       0 :                     ;
       6/       0 :                     ; ****************************************************************************************************************
       7/       0 :                     ; ****************************************************************************************************************
       8/       0 :                     
       9/       0 :                     	cpu 	sc/mp
      10/       0 :                     
      11/       0 :                     	include source\memorymacros.asm 							; Memory allocation and Macro definition.	
(1)    1/       0 :                     ; ****************************************************************************************************************
(1)    2/       0 :                     ; ****************************************************************************************************************
(1)    3/       0 :                     ;
(1)    4/       0 :                     ;										Memory and Macro Allocation.
(1)    5/       0 :                     ;	
(1)    6/       0 :                     ; ****************************************************************************************************************
(1)    7/       0 :                     ; ****************************************************************************************************************
(1)    8/       0 :                     
(1)    9/       0 : =0x3                OSMathLibrary = 0x0003 											; the Maths library is here.
(1)   10/       0 :                     
(1)   11/       0 :                     ; ****************************************************************************************************************
(1)   12/       0 :                     ;												 Memory Allocation
(1)   13/       0 :                     ; ****************************************************************************************************************
(1)   14/       0 :                     
(1)   15/       0 : =0xC00              ScreenMirror = 0xC00 											; Screen mirror, 128 bytes, 256 byte page boundary.
(1)   16/       0 : =0xC80              ScreenCursor = ScreenMirror+0x80  								; Position on that screen (00..7F)
(1)   17/       0 :                     
(1)   18/       0 : =0xD00              SystemVariables = 0xD00 										; System variables start here.
(1)   19/       0 : =0xD00              Variables = SystemVariables 									; 128 16 bit variables start here.
(1)   20/       0 : =0xCFF              IsRunning = SystemVariables-1  									; Non-zero if free running, zero if stopped.
(1)   21/       0 :                     
(1)   22/       0 : =0xE00              KeyboardBuffer = 0xE00 											; Keyboard Buffer
(1)   23/       0 : =0x50               KeyboardBufferSize = 80 										; Size of keyboard Buffer
(1)   24/       0 :                     
(1)   25/       0 :                     ; ****************************************************************************************************************
(1)   26/       0 :                     ;														Macros
(1)   27/       0 :                     ; ****************************************************************************************************************
(1)   28/       0 :                     
(1)   29/       0 :                     lpi	macro	ptr,addr											; load pointer register with constant
(1)   30/       0 :                     	ldi 	(addr) / 256
(1)   31/       0 :                     	xpah 	ptr
(1)   32/       0 :                     	ldi 	(addr) & 255
(1)   33/       0 :                     	xpal 	ptr
(1)   34/       0 :                     	endm
(1)   35/       0 :                     
(1)   36/       0 :                     pushp macro ptr 												; push pointer register on stack
(1)   37/       0 :                     	xpah 	ptr
(1)   38/       0 :                     	st 		@-1(p2)
(1)   39/       0 :                     	xpal 	ptr
(1)   40/       0 :                     	st 		@-1(p2)
(1)   41/       0 :                     	endm
(1)   42/       0 :                     
(1)   43/       0 :                     pullp macro ptr 												; pull pointer register off stack
(1)   44/       0 :                     	ld 		@1(p2)
(1)   45/       0 :                     	xpal 	ptr
(1)   46/       0 :                     	ld 		@1(p2)
(1)   47/       0 :                     	xpah 	ptr
(1)   48/       0 :                     	endm
(1)   49/       0 :                     
 AS V1.42 Beta [Bld 102] - source file vtl-2.asm(memorymacros.asm) - page 2 - 12/27/2015 20:56:40


(1)   50/       0 :                     pushe macro 													; push E on stack
(1)   51/       0 :                     	lde
(1)   52/       0 :                     	st 		@-1(p2)
(1)   53/       0 :                     	endm
(1)   54/       0 :                     
(1)   55/       0 :                     pulle macro 													; pull E off stack
(1)   56/       0 :                     	ld 		@1(p2)
(1)   57/       0 :                     	xae
(1)   58/       0 :                     	endm
(1)   59/       0 :                     
(1)   60/       0 :                     pusha macro 													; push A on stack
(1)   61/       0 :                     	st 		@-1(p2)
(1)   62/       0 :                     	endm
(1)   63/       0 :                     
(1)   64/       0 :                     pulla macro
(1)   65/       0 :                     	ld 		@1(p2)
(1)   66/       0 :                     	endm
(1)   67/       0 :                     
(1)   68/       0 :                     setv macro ch,value 											; sets a variable to a value, assumes P3 = Variables.
(1)   69/       0 :                     	ldi 	(value) & 255
(1)   70/       0 :                     	st 		((ch) & 0x3F)*2(p3)
(1)   71/       0 :                     	ldi 	(value) / 256
(1)   72/       0 :                     	st 		((ch) & 0x3F)*2+1(p3)
(1)   73/       0 :                     	endm
(1)   74/       0 :                     
(1)   75/       0 :                     code macro lineNo,code 											; a debugging macro, which fakes up a line of code.
(1)   76/       0 :                     	db 		strlen(code)+4 										; one byte offset to next (0 = End of code)
(1)   77/       0 :                     	dw 		lineNo 												; two byte line number (low byte first)
(1)   78/       0 :                     	db 		code,0 												; ASCIIZ string
(1)   79/       0 :                     	endm
(1)   80/       0 :                     
(1)   81/       0 :                     special macro ch,method
(1)   82/       0 :                     	db 		ch
(1)   83/       0 :                     	dw 		(method)-1
(1)   84/       0 :                     	endm
      12/       0 :                     	include source\errors.asm 									; Error Codes
(1)    1/       0 :                     ; ****************************************************************************************************************
(1)    2/       0 :                     ; ****************************************************************************************************************
(1)    3/       0 :                     ;
(1)    4/       0 :                     ;												Errors
(1)    5/       0 :                     ;	
(1)    6/       0 :                     ; ****************************************************************************************************************
(1)    7/       0 :                     ; ****************************************************************************************************************
(1)    8/       0 :                     
(1)    9/       0 : =0x54               ERROR_SyntaxTerm = 'T' 											; Syntax error in term.
(1)   10/       0 : =0x5A               ERROR_DivideZero = 'Z'											; Divide by zero error.
(1)   11/       0 : =0x4F               ERROR_Operator = 'O'											; Operator error.
(1)   12/       0 : =0x42               ERROR_Bracket = 'B'												; Missing bracket error.
(1)   13/       0 : =0x53               ERROR_Syntax = 'S' 												; Syntax error in statement.
(1)   14/       0 : =0x52               ERROR_ReadOnly = 'R' 											; Variable is read only.
(1)   15/       0 :                     
      13/       0 :                     
      14/       0 :                     ; ****************************************************************************************************************
      15/       0 :                     ;													Main Program
      16/       0 :                     ; ****************************************************************************************************************
      17/       0 :                     
      18/    9000 :                     	org 	0x9000 												; the ROM starts here
      19/    9000 :                     
      20/    9000 : 68                  	db 		0x68												; this makes it boot straight into this ROM.
      21/    9001 : (MACRO)             	lpi 	p2,0xFF8											; set up stack default value
 AS V1.42 Beta [Bld 102] - source file vtl-2.asm - page 3 - 12/27/2015 20:56:40


      21/    9001 : C4 0F                       ldi     (0XFF8) / 256
      21/    9003 : 36                          xpah    P2
      21/    9004 : C4 F8                       ldi     (0XFF8) & 255
      21/    9006 : 32                          xpal    P2
      22/    9007 : (MACRO)             	lpi 	p3,Print-1 											; clear screen
      22/    9007 : C4 90                       ldi     (PRINT-1) / 256
      22/    9009 : 37                          xpah    P3
      22/    900A : C4 7A                       ldi     (PRINT-1) & 255
      22/    900C : 33                          xpal    P3
      23/    900D : C4 0C               	ldi 	12
      24/    900F : 3F                  	xppc 	p3
      25/    9010 :                     
      26/    9010 : (MACRO)             	lpi 	p3,Variables 										; set some variables
      26/    9010 : C4 0D                       ldi     (VARIABLES) / 256
      26/    9012 : 37                          xpah    P3
      26/    9013 : C4 00                       ldi     (VARIABLES) & 255
      26/    9015 : 33                          xpal    P3
      27/    9016 : (MACRO)             	setv 	'C',0x1382
      27/    9016 : C4 82                       ldi     (0X1382) & 255
      27/    9018 : CB 06                       st              (('C') & 0x3F)*2(p3)
      27/    901A : C4 13                       ldi     (0X1382) / 256
      27/    901C : CB 07                       st              (('C') & 0x3F)*2+1(p3)
      28/    901E : (MACRO)             	setv	'&',0x2F0
      28/    901E : C4 F0                       ldi     (0X2F0) & 255
      28/    9020 : CB 4C                       st              (('&') & 0x3F)*2(p3)
      28/    9022 : C4 02                       ldi     (0X2F0) / 256
      28/    9024 : CB 4D                       st              (('&') & 0x3F)*2+1(p3)
      29/    9026 : C4 01               	ldi 	1
      30/    9028 : CB FF               	st 		IsRunning-Variables(p3)	
      31/    902A :                     	
      32/    902A : (MACRO)             	lpi 	p3,ExecuteNextStatement-1							; execute statement
      32/    902A : C4 92                       ldi     (EXECUTENEXTSTATEMENT-1) / 256
      32/    902C : 37                          xpah    P3
      32/    902D : C4 1F                       ldi     (EXECUTENEXTSTATEMENT-1) & 255
      32/    902F : 33                          xpal    P3
      33/    9030 : (MACRO)             	lpi 	p1,test
      33/    9030 : C4 90                       ldi     (TEST) / 256
      33/    9032 : 35                          xpah    P1
      33/    9033 : C4 37                       ldi     (TEST) & 255
      33/    9035 : 31                          xpal    P1
      34/    9036 : 3F                  	xppc 	p3
      35/    9037 :                     
      36/    9037 :                     test:
      37/    9037 : (MACRO)             	code 	100,"$=42)( A COMMENT"
      37/    9037 : 14                          db              strlen("$=42)( A COMMENT")+4                                                                          ; one byte offset to next (0 = End of "$=42)( A COMMENT")
      37/    9038 : 64 00                       dw              100                                                                                          ; two byte line number (low byte first)
      37/    903A : 24 3D 34 32 29 28           db              "$=42)( A COMMENT",0                                                                                          ; ASCIIZ string
                    20 41 20 43 4F 4D 
                    4D 45 4E 54 00 
      38/    904B : (MACRO)             	code 	102,"$=33"
      38/    904B : 08                          db              strlen("$=33")+4                                                                          ; one byte offset to next (0 = End of "$=33")
      38/    904C : 66 00                       dw              102                                                                                          ; two byte line number (low byte first)
      38/    904E : 24 3D 33 33 00              db              "$=33",0                                                                                          ; ASCIIZ string
      39/    9053 : (MACRO)             	code 	110,"B=A-400"
      39/    9053 : 0B                          db              strlen("B=A-400")+4                                                                          ; one byte offset to next (0 = End of "B=A-400")
      39/    9054 : 6E 00                       dw              110                                                                                          ; two byte line number (low byte first)
      39/    9056 : 42 3D 41 2D 34 30           db              "B=A-400",0                                                                                          ; ASCIIZ string
                    30 00 
      40/    905E : (MACRO)             	code 	120,"C='"
      40/    905E : 07                          db              strlen("C='")+4                                                                          ; one byte offset to next (0 = End of "C='")
 AS V1.42 Beta [Bld 102] - source file vtl-2.asm - page 4 - 12/27/2015 20:56:40


      40/    905F : 78 00                       dw              120                                                                                          ; two byte line number (low byte first)
      40/    9061 : 43 3D 27 00                 db              "C='",0                                                                                          ; ASCIIZ string
      41/    9065 : (MACRO)             	code 	130,"D='/13*0+%"
      41/    9065 : 0E                          db              strlen("D='/13*0+%")+4                                                                          ; one byte offset to next (0 = End of "D='/13*0+%")
      41/    9066 : 82 00                       dw              130                                                                                          ; two byte line number (low byte first)
      41/    9068 : 44 3D 27 2F 31 33           db              "D='/13*0+%",0                                                                                          ; ASCIIZ string
                    2A 30 2B 25 00 
      42/    9073 : (MACRO)             	code 	140,"E=#"
      42/    9073 : 07                          db              strlen("E=#")+4                                                                          ; one byte offset to next (0 = End of "E=#")
      42/    9074 : 8C 00                       dw              140                                                                                          ; two byte line number (low byte first)
      42/    9076 : 45 3D 23 00                 db              "E=#",0                                                                                          ; ASCIIZ string
      43/    907A : 00                  	db 		0
      44/    907B :                     
      45/    907B :                     ; ****************************************************************************************************************
      46/    907B :                     ;													Source Files
      47/    907B :                     ; ****************************************************************************************************************
      48/    907B :                     
      49/    907B :                     	include source\screen.asm 									; screen I/O stuff.
(1)    1/    907B :                     ; ****************************************************************************************************************
(1)    2/    907B :                     ; ****************************************************************************************************************
(1)    3/    907B :                     ;
(1)    4/    907B :                     ;											Screen I/O, VTL-2 ROM
(1)    5/    907B :                     ;											=====================
(1)    6/    907B :                     ;
(1)    7/    907B :                     ;	Provides Character and String Input/Output functionality.
(1)    8/    907B :                     ;
(1)    9/    907B :                     ; ****************************************************************************************************************
(1)   10/    907B :                     ; ****************************************************************************************************************
(1)   11/    907B :                     
(1)   12/    907B :                     ; ****************************************************************************************************************
(1)   13/    907B :                     ; ****************************************************************************************************************
(1)   14/    907B :                     ;
(1)   15/    907B :                     ;	Print routine. Prints either character in A, or ASCIIZ string at P1 (if A is zero). Preserves all registers
(1)   16/    907B :                     ;	except if printing string, P1 points to the character after the NULL terminator.
(1)   17/    907B :                     ;
(1)   18/    907B :                     ;	Scrolls automatically. Understands character codes 32-255, 8 (Backspace) 12 (Clear Screen) 13 (Carriage
(1)   19/    907B :                     ;	Return). Others are currently ignored (except 0, see above). Note L/C values (97....) display those characters
(1)   20/    907B :                     ;	in the ROM font *not* lower case :)
(1)   21/    907B :                     ;
(1)   22/    907B :                     ; ****************************************************************************************************************
(1)   23/    907B :                     ; ****************************************************************************************************************
(1)   24/    907B :                     
(1)   25/    907B :                     Print:
(1)   26/    907B :                     	section 	Print
(1)   27/    907B :                     
(1)   28/    907B : (MACRO)             	pusha														; push registers on stack
(1)   28/    907B : CE FF                       st              @-1(p2)
(1)   29/    907D : (MACRO)             	pushp 	p1
(1)   29/    907D : 35                          xpah    P1
(1)   29/    907E : CE FF                       st              @-1(p2)
(1)   29/    9080 : 31                          xpal    P1
(1)   29/    9081 : CE FF                       st              @-1(p2)
(1)   30/    9083 : (MACRO)             	pushe
(1)   30/    9083 : 40                          lde
(1)   30/    9084 : CE FF                       st              @-1(p2)
(1)   31/    9086 :                     
(1)   32/    9086 : C2 03               	ld 		3(p2) 												; read character 
(1)   33/    9088 : 9C 12               	jnz 	__PRPrintCharacterA 								; if non zero print it on its own.
(1)   34/    908A :                     
(1)   35/    908A :                     __PRPrintString:
 AS V1.42 Beta [Bld 102] - source file vtl-2.asm(screen.asm) - page 5 - 12/27/2015 20:56:40


(1)   36/    908A : C2 01               	ld 		1(p2) 												; restore original P1
(1)   37/    908C : 31                  	xpal 	p1
(1)   38/    908D : C2 02               	ld 		2(p2)
(1)   39/    908F : 35                  	xpah 	p1 													; read character at P1.
(1)   40/    9090 : C5 01               	ld 		@1(p1)
(1)   41/    9092 : 01                  	xae 														; save in E.
(1)   42/    9093 : 35                  	xpah 	p1 													; write P1 back.
(1)   43/    9094 : CA 02               	st 		2(p2)
(1)   44/    9096 : 31                  	xpal 	p1
(1)   45/    9097 : CA 01               	st 		1(p2)
(1)   46/    9099 : 40                  	lde 														; get character from E
(1)   47/    909A : 98 46               	jz 		__PRExitNoCheck 									; exit without loop check.
(1)   48/    909C :                     ;
(1)   49/    909C :                     ;	Print character in A now ; throughout it is stored in E.
(1)   50/    909C :                     ;
(1)   51/    909C :                     __PRPrintCharacterA:
(1)   52/    909C : 01                  	xae 														; save character in E.
(1)   53/    909D :                     ;
(1)   54/    909D :                     ;	Read cursor and set P1 to that address
(1)   55/    909D :                     ;
(1)   56/    909D : C4 0C               	ldi 	ScreenCursor/256 									; set P1 to point to screen cursor
(1)   57/    909F : 35                  	xpah 	p1
(1)   58/    90A0 : C4 80               	ldi 	ScreenCursor&255
(1)   59/    90A2 : 31                  	xpal 	p1
(1)   60/    90A3 : C1 00               	ld 		0(p1) 												; put cursor position in P1.L
(1)   61/    90A5 : 31                  	xpal 	p1
(1)   62/    90A6 :                     ;
(1)   63/    90A6 :                     ;	Check for control
(1)   64/    90A6 :                     ;
(1)   65/    90A6 : 40                  	lde 														; look at character
(1)   66/    90A7 : D4 E0               	ani 	0xE0 												; is it code 0-31
(1)   67/    90A9 : 98 45               	jz 		__PRIsControlChar
(1)   68/    90AB :                     ;
(1)   69/    90AB :                     ;	Print non-control
(1)   70/    90AB :                     ;
(1)   71/    90AB : 40                  	lde 														; read character
(1)   72/    90AC : 03                  	scl 														; CY/L clear if < 96
(1)   73/    90AD : FC 60               	cai 	96 
(1)   74/    90AF : 06                  	csa 	 	 												; skip if carry set
(1)   75/    90B0 : E4 80               	xri 	0x80													
(1)   76/    90B2 : 94 04               	jp 		__PRNotASCII
(1)   77/    90B4 : 40                  	lde 														; if ASCII make 6 bit.
(1)   78/    90B5 : D4 3F               	ani 	0x3F
(1)   79/    90B7 : 01                  	xae
(1)   80/    90B8 :                     __PRNotASCII:
(1)   81/    90B8 : 40                  	lde 														; get character.
(1)   82/    90B9 : C9 00               	st 		(p1) 												; save in shadow memory
(1)   83/    90BB : 35                  	xpah 	p1 													; switch to VRAM, preserving A.
(1)   84/    90BC : C4 00               	ldi 	0 													
(1)   85/    90BE : 35                  	xpah 	p1
(1)   86/    90BF : CD 01               	st 		@1(p1) 												; save in screen memory, advance write position.
(1)   87/    90C1 :                     ;
(1)   88/    90C1 :                     ;	Write cursor position back from P1.L
(1)   89/    90C1 :                     ;
(1)   90/    90C1 :                     __PRUpdateCursor:
(1)   91/    90C1 : C4 0C               	ldi		ScreenCursor / 256 									; set P1 to point to screen cursor, restore position to P1
(1)   92/    90C3 : 35                  	xpah 	p1
(1)   93/    90C4 : C4 80               	ldi 	ScreenCursor & 255 
(1)   94/    90C6 : 31                  	xpal 	p1 													; after this, adjusted cursor position is in AC.
(1)   95/    90C7 : C9 00               	st 		(p1) 												; write back in cursor position
 AS V1.42 Beta [Bld 102] - source file vtl-2.asm(screen.asm) - page 6 - 12/27/2015 20:56:40


(1)   96/    90C9 : 94 13               	jp 		__PRExit 											; if position is off the bottom then scroll.
(1)   97/    90CB :                     ;
(1)   98/    90CB :                     ;	Scroll display
(1)   99/    90CB :                     ;
(1)  100/    90CB : C4 0C               	ldi 	(ScreenMirror+16) / 256 							; point P1 to 2nd line.
(1)  101/    90CD : 35                  	xpah 	p1
(1)  102/    90CE : C4 10               	ldi 	(ScreenMirror+16) & 255
(1)  103/    90D0 :                     __PRScrollLoop:
(1)  104/    90D0 : 31                  	xpal 	p1
(1)  105/    90D1 : C1 00               	ld 		0(p1) 												; copy char to previous line
(1)  106/    90D3 : C9 F0               	st 		-16(p1)
(1)  107/    90D5 : C5 01               	ld 		@1(p1) 												; bump pointer.
(1)  108/    90D7 : 31                  	xpal 	p1
(1)  109/    90D8 : 94 F6               	jp 		__PRScrollLoop
(1)  110/    90DA : C4 70               	ldi 	128-16 												; clear from and move to last line
(1)  111/    90DC : 90 3D               	jmp 	__PRClearFromMoveTo
(1)  112/    90DE :                     ;
(1)  113/    90DE :                     ;	Exit screen drawing routine.
(1)  114/    90DE :                     ;
(1)  115/    90DE :                     __PRExit:
(1)  116/    90DE : C2 03               	ld 		3(p2) 												; if character was zero, loop
(1)  117/    90E0 : 98 A8               	jz 		__PRPrintString 									; back as printing string at P1.
(1)  118/    90E2 :                     __PRExitNoCheck:
(1)  119/    90E2 : (MACRO)             	pulle 														; restore registers
(1)  119/    90E2 : C6 01                       ld              @1(p2)
(1)  119/    90E4 : 01                          xae
(1)  120/    90E5 : (MACRO)             	pullp 	p1
(1)  120/    90E5 : C6 01                       ld              @1(p2)
(1)  120/    90E7 : 31                          xpal    P1
(1)  120/    90E8 : C6 01                       ld              @1(p2)
(1)  120/    90EA : 35                          xpah    P1
(1)  121/    90EB : (MACRO)             	pulla
(1)  121/    90EB : C6 01                       ld              @1(p2)
(1)  122/    90ED : 3F                  	xppc 	p3 													; return
(1)  123/    90EE : 90 8B               	jmp 	Print 												; make re-entrant.
(1)  124/    90F0 :                     ;
(1)  125/    90F0 :                     ;	Check for supported control characters 8 (Backspace) 12 (Clear) 13 (Carriage Return)
(1)  126/    90F0 :                     ;
(1)  127/    90F0 :                     __PRIsControlChar:
(1)  128/    90F0 : 40                  	lde 														; restore character.
(1)  129/    90F1 : E4 0D               	xri 	13 													; carriage return ? (13)
(1)  130/    90F3 : 98 1B               	jz 		__PRIsReturn
(1)  131/    90F5 : E4 01               	xri 	13!12 												; form feed ? (12)
(1)  132/    90F7 : 98 20               	jz 		__PRClearScreen
(1)  133/    90F9 : E4 04               	xri 	12!8 												; backspace ? (8)
(1)  134/    90FB : 9C E1               	jnz 	__PRExit 
(1)  135/    90FD :                     ;
(1)  136/    90FD :                     ;	Handle backspace (8)
(1)  137/    90FD :                     ;
(1)  138/    90FD : 31                  	xpal 	p1 													; check cursor position is zero
(1)  139/    90FE : 98 DE               	jz 		__PRExit 											; if it is, cannot backspace so exit.
(1)  140/    9100 : 31                  	xpal 	p1  												; put it back
(1)  141/    9101 : C5 FF               	ld 		@-1(p1)												; move it back one
(1)  142/    9103 : C4 20               	ldi 	' '	 												; erase in shadow
(1)  143/    9105 : C9 00               	st 		(p1)
(1)  144/    9107 : C4 00               	ldi 	0 													; point P1 to VRAM
(1)  145/    9109 : 35                  	xpah 	p1
(1)  146/    910A : C4 20               	ldi 	' '													; erase in VRAM
(1)  147/    910C : C9 00               	st 		(p1)
(1)  148/    910E : 90 B1               	jmp 	__PRUpdateCursor 									; and exit
 AS V1.42 Beta [Bld 102] - source file vtl-2.asm(screen.asm) - page 7 - 12/27/2015 20:56:40


(1)  149/    9110 :                     ;
(1)  150/    9110 :                     ;	Handle carriage return (13)
(1)  151/    9110 :                     ;
(1)  152/    9110 :                     __PRIsReturn:
(1)  153/    9110 : 31                  	xpal 	p1 													; cursor position in A
(1)  154/    9111 : D4 F0               	ani 	0xF0 												; start of current line
(1)  155/    9113 : 02                  	ccl 														; down one line
(1)  156/    9114 : F4 10               	adi 	0x10 	
(1)  157/    9116 : 31                  	xpal 	p1 													; put it back in P1.
(1)  158/    9117 : 90 A8               	jmp 	__PRUpdateCursor
(1)  159/    9119 :                     ;
(1)  160/    9119 :                     ;	Handle clear screen (12)
(1)  161/    9119 :                     ;
(1)  162/    9119 :                     __PRClearScreen:
(1)  163/    9119 : C4 00               	ldi 	0 													; clear shadow memory from here.
(1)  164/    911B :                     ;
(1)  165/    911B :                     ;	From position A, clear the memory in the shadow screen to the end, copy the shadow screen to VRAM
(1)  166/    911B :                     ;	then use position A as the new cursor position.
(1)  167/    911B :                     ;
(1)  168/    911B :                     __PRClearFromMoveTo:
(1)  169/    911B : CE FF               	st 		@-1(p2) 											; save this position, the cursor goes here.
(1)  170/    911D :                     __PRClearLoop:
(1)  171/    911D : 31                  	xpal 	p1 													; save position in P1.
(1)  172/    911E : C4 20               	ldi 	' '													; write space there.
(1)  173/    9120 : CD 01               	st 		@1(p1)
(1)  174/    9122 : 31                  	xpal 	p1
(1)  175/    9123 : 94 F8               	jp 		__PRClearLoop 										; until reached shadow memory start.
(1)  176/    9125 : C4 00               	ldi 	0 													; now copy shadow memory to screen memory.
(1)  177/    9127 :                     __PRCopy:
(1)  178/    9127 : 31                  	xpal 	p1 													; set up P1.L
(1)  179/    9128 : C4 0C               	ldi 	ScreenMirror/256 									; point to shadow memory.
(1)  180/    912A : 35                  	xpah 	p1 													
(1)  181/    912B : C1 00               	ld 		(p1) 												; read shadow memory
(1)  182/    912D : 35                  	xpah 	p1 													; zero P1.H preserving A
(1)  183/    912E : C4 00               	ldi 	0
(1)  184/    9130 : 35                  	xpah 	p1
(1)  185/    9131 : CD 01               	st 		@1(p1) 												; save and increment p1
(1)  186/    9133 : 31                  	xpal 	p1 
(1)  187/    9134 : 94 F1               	jp 		__PRCopy 											; keep doing till all copied.
(1)  188/    9136 : C6 01               	ld 		@1(p2) 												; read cursor position
(1)  189/    9138 : 31                  	xpal 	p1 													; put in P1.L
(1)  190/    9139 : 90 86               	jmp 	__PRUpdateCursor
(1)  191/    913B :                     
(1)  192/    913B :                     	endsection 	Print
(1)  193/    913B :                     
(1)  194/    913B :                     ; ****************************************************************************************************************
(1)  195/    913B :                     ; ****************************************************************************************************************
(1)  196/    913B :                     ;
(1)  197/    913B :                     ;		Input a single character into A. Case is converted to Upper. All registers preserved except A
(1)  198/    913B :                     ;
(1)  199/    913B :                     ; ****************************************************************************************************************
(1)  200/    913B :                     ; ****************************************************************************************************************
(1)  201/    913B :                     
(1)  202/    913B :                     GetChar:
(1)  203/    913B :                     	section 	GetChar
(1)  204/    913B : C4 08               	ldi 	0x8 												; set P1 to $8xx, and save P1.H
(1)  205/    913D : 35                  	xpah 	p1
(1)  206/    913E : CE FF               	st 		@-1(p2)
(1)  207/    9140 :                     __GCWaitKey: 													; wait for key press
(1)  208/    9140 : C1 00               	ld 		0(p1)
 AS V1.42 Beta [Bld 102] - source file vtl-2.asm(screen.asm) - page 8 - 12/27/2015 20:56:40


(1)  209/    9142 : 94 FC               	jp 		__GCWaitKey
(1)  210/    9144 : D4 7F               	ani	 	0x7F 												; throw away the upper bit.
(1)  211/    9146 : CA FF               	st 		-1(p2) 												; save it below stack
(1)  212/    9148 :                     __GCWaitRelease:
(1)  213/    9148 : C1 00               	ld 		0(p1) 												; wait for release
(1)  214/    914A : D4 80               	ani 	0x80
(1)  215/    914C : 9C FA               	jnz 	__GCWaitRelease
(1)  216/    914E : C6 01               	ld 		@1(p2) 												; restore P1.H
(1)  217/    9150 : 35                  	xpah 	p1
(1)  218/    9151 : C2 FE               	ld 		-2(p2) 												; restore saved value
(1)  219/    9153 : 02                  	ccl
(1)  220/    9154 : F4 20               	adi 	0x20												; will make lower case -ve
(1)  221/    9156 : 94 02               	jp 		__GCNotLower
(1)  222/    9158 : FC 20               	cai 	0x20 												; capitalise
(1)  223/    915A :                     __GCNotLower:
(1)  224/    915A : F4 E0               	adi 	0xE0 												; fix up.
(1)  225/    915C : 3F                  	xppc 	p3 													; return
(1)  226/    915D : 90 DC               	jmp 	GetChar 											; make re-entrant
(1)  227/    915F :                     	endsection 	GetChar
(1)  228/    915F :                     
(1)  229/    915F :                     ; ****************************************************************************************************************
(1)  230/    915F :                     ; ****************************************************************************************************************
(1)  231/    915F :                     ;
(1)  232/    915F :                     ;			Read an ASCIIZ string from keyboard into P1 of length A maximum (excludes NULL terminator)
(1)  233/    915F :                     ;
(1)  234/    915F :                     ; ****************************************************************************************************************
(1)  235/    915F :                     ; ****************************************************************************************************************
(1)  236/    915F :                     
(1)  237/    915F :                     GetString:
(1)  238/    915F :                     	section GetString
(1)  239/    915F : (MACRO)             	pusha 														; save A,P3,E
(1)  239/    915F : CE FF                       st              @-1(p2)
(1)  240/    9161 : (MACRO)             	pushp 	p3
(1)  240/    9161 : 37                          xpah    P3
(1)  240/    9162 : CE FF                       st              @-1(p2)
(1)  240/    9164 : 33                          xpal    P3
(1)  240/    9165 : CE FF                       st              @-1(p2)
(1)  241/    9167 : (MACRO)             	pushe 
(1)  241/    9167 : 40                          lde
(1)  241/    9168 : CE FF                       st              @-1(p2)
(1)  242/    916A : C4 00               	ldi 	0 													; set E (current position) to A.
(1)  243/    916C : 01                  	xae
(1)  244/    916D :                     __GSLoop:
(1)  245/    916D : (MACRO)             	lpi 	p3,Print-1 											; print the prompt (half coloured square)
(1)  245/    916D : C4 90                       ldi     (PRINT-1) / 256
(1)  245/    916F : 37                          xpah    P3
(1)  245/    9170 : C4 7A                       ldi     (PRINT-1) & 255
(1)  245/    9172 : 33                          xpal    P3
(1)  246/    9173 : C4 9B               	ldi 	155
(1)  247/    9175 : 3F                  	xppc 	p3
(1)  248/    9176 : (MACRO)             	lpi 	p3,GetChar-1 										; get a character
(1)  248/    9176 : C4 91                       ldi     (GETCHAR-1) / 256
(1)  248/    9178 : 37                          xpah    P3
(1)  248/    9179 : C4 3A                       ldi     (GETCHAR-1) & 255
(1)  248/    917B : 33                          xpal    P3
(1)  249/    917C : 3F                  	xppc 	p3
(1)  250/    917D : C9 80               	st 		-0x80(p1) 											; save it in the current position.
(1)  251/    917F : (MACRO)             	lpi 	p3,Print-1 											; erase the prompt with backspace.
(1)  251/    917F : C4 90                       ldi     (PRINT-1) / 256
(1)  251/    9181 : 37                          xpah    P3
 AS V1.42 Beta [Bld 102] - source file vtl-2.asm(screen.asm) - page 9 - 12/27/2015 20:56:40


(1)  251/    9182 : C4 7A                       ldi     (PRINT-1) & 255
(1)  251/    9184 : 33                          xpal    P3
(1)  252/    9185 : C4 08               	ldi 	8
(1)  253/    9187 : 3F                  	xppc 	p3
(1)  254/    9188 : C1 80               	ld 		-0x80(p1) 											; re-read character
(1)  255/    918A : D4 E0               	ani 	0xE0 												; check if control key.
(1)  256/    918C : 98 0F               	jz 		__GSControlKey 
(1)  257/    918E : 40                  	lde 														; get current position.
(1)  258/    918F : E2 03               	xor 	3(p2) 												; reached maximum length of buffer ?
(1)  259/    9191 : 98 DA               	jz 		__GSLoop 											; if so, ignore the key and go round again.
(1)  260/    9193 : C1 80               	ld 		-0x80(p1) 											; get character and print it
(1)  261/    9195 : 3F                  	xppc 	p3
(1)  262/    9196 : C4 01               	ldi 	1 													; increment E
(1)  263/    9198 : 02                  	ccl
(1)  264/    9199 : 70                  	ade
(1)  265/    919A : 01                  	xae
(1)  266/    919B : 90 D0               	jmp 	__GSLoop 											; and go round again.
(1)  267/    919D :                     ;
(1)  268/    919D :                     ;	Handle control keys (0x00-0x1F)
(1)  269/    919D :                     ;
(1)  270/    919D :                     __GSControlKey:
(1)  271/    919D : C1 80               	ld 		-0x80(p1) 											; get typed in key
(1)  272/    919F : E4 08               	xri 	8 													; check for backspace.
(1)  273/    91A1 : 98 17               	jz 		__GSBackspace 			
(1)  274/    91A3 : E4 05               	xri 	8!13 												; check for CR
(1)  275/    91A5 : 9C C6               	jnz 	__GSLoop 											; if not, ignore the key.
(1)  276/    91A7 :                     ;
(1)  277/    91A7 :                     ;	Carriage Return, ending input.
(1)  278/    91A7 :                     ;
(1)  279/    91A7 : C9 80               	st 		-0x80(p1) 											; replace the CR written with NULL terminator.
(1)  280/    91A9 : C4 0D               	ldi 	13 													; print CR
(1)  281/    91AB : 3F                  	xppc 	p3
(1)  282/    91AC : (MACRO)             	pulle 														; restore E,P3,A
(1)  282/    91AC : C6 01                       ld              @1(p2)
(1)  282/    91AE : 01                          xae
(1)  283/    91AF : (MACRO)             	pullp	p3
(1)  283/    91AF : C6 01                       ld              @1(p2)
(1)  283/    91B1 : 33                          xpal    P3
(1)  283/    91B2 : C6 01                       ld              @1(p2)
(1)  283/    91B4 : 37                          xpah    P3
(1)  284/    91B5 : (MACRO)             	pulla
(1)  284/    91B5 : C6 01                       ld              @1(p2)
(1)  285/    91B7 : 3F                  	xppc 	p3 													; return
(1)  286/    91B8 : 90 A5               	jmp 	GetString 											; make re-entrant (probably unneccessary !!)
(1)  287/    91BA :                     ;
(1)  288/    91BA :                     ;	Backspace entered
(1)  289/    91BA :                     ;
(1)  290/    91BA :                     __GSBackspace
(1)  291/    91BA : 40                  	lde 														; if E = 0 we can't backspace any further.
(1)  292/    91BB : 98 B0               	jz 		__GSLoop
(1)  293/    91BD : C4 08               	ldi 	8 													; backspace on screen
(1)  294/    91BF : 3F                  	xppc 	p3
(1)  295/    91C0 : C4 FF               	ldi 	0xFF 												; decrement E
(1)  296/    91C2 : 02                  	ccl
(1)  297/    91C3 : 70                  	ade
(1)  298/    91C4 : 01                  	xae
(1)  299/    91C5 : 90 A6               	jmp 	__GSLoop 											; and go round again.
(1)  300/    91C7 :                     
(1)  301/    91C7 :                     	endsection GetString
(1)  302/    91C7 :                     
 AS V1.42 Beta [Bld 102] - source file vtl-2.asm(screen.asm) - page 10 - 12/27/2015 20:56:40


      50/    91C7 :                     	include source\statement.asm 								; statement interpreter.
(1)    1/    91C7 :                     ; ****************************************************************************************************************
(1)    2/    91C7 :                     ; ****************************************************************************************************************
(1)    3/    91C7 :                     ;
(1)    4/    91C7 :                     ;													Statement
(1)    5/    91C7 :                     ;
(1)    6/    91C7 :                     ; ****************************************************************************************************************
(1)    7/    91C7 :                     ; ****************************************************************************************************************
(1)    8/    91C7 :                     
(1)    9/    91C7 :                     ; ****************************************************************************************************************
(1)   10/    91C7 :                     ; ****************************************************************************************************************
(1)   11/    91C7 :                     ;
(1)   12/    91C7 :                     ;													Handlers
(1)   13/    91C7 :                     ;
(1)   14/    91C7 :                     ;	Special L-Expr handlers go here. Each is preceded with a jump to the end before the execution label, so
(1)   15/    91C7 :                     ;	code automatically falls through to execute next statement.
(1)   16/    91C7 :                     ;
(1)   17/    91C7 :                     ; ****************************************************************************************************************
(1)   18/    91C7 :                     ; ****************************************************************************************************************
(1)   19/    91C7 :                     
(1)   20/    91C7 :                     	include source\left_specials\readonly.asm
(2)    1/    91C7 :                     ; ****************************************************************************************************************
(2)    2/    91C7 :                     ; ****************************************************************************************************************
(2)    3/    91C7 :                     ;
(2)    4/    91C7 :                     ;												Read-Only Variable
(2)    5/    91C7 :                     ;
(2)    6/    91C7 :                     ; ****************************************************************************************************************
(2)    7/    91C7 :                     ; ****************************************************************************************************************
(2)    8/    91C7 :                     
(2)    9/    91C7 : 90 04               	jmp 	__STROV_End
(2)   10/    91C9 :                     
(2)   11/    91C9 :                     __ST_ReadOnlyVariable:
(2)   12/    91C9 : C4 52               	ldi 	ERROR_ReadOnly										; set error to E
(2)   13/    91CB : 01                  	xae 
(2)   14/    91CC : 02                  	ccl 														; return with carry clear indicating error
(2)   15/    91CD :                     
(2)   16/    91CD :                     __STROV_End:
(1)   21/    91CD :                     	include source\left_specials\machinecode.asm
(2)    1/    91CD :                     ; ****************************************************************************************************************
(2)    2/    91CD :                     ; ****************************************************************************************************************
(2)    3/    91CD :                     ;
(2)    4/    91CD :                     ;												> : Call Machine Code
(2)    5/    91CD :                     ;
(2)    6/    91CD :                     ; ****************************************************************************************************************
(2)    7/    91CD :                     ; ****************************************************************************************************************
(2)    8/    91CD :                     
(2)    9/    91CD : 90 27               	jmp 	__STMAC_End
(2)   10/    91CF :                     
(2)   11/    91CF :                     __ST_MachineCode:
(2)   12/    91CF : 3F                  	xppc 	p3 													; check for '='
(2)   13/    91D0 : 94 24               	jp 		__STMAC_End 										; if error, end.
(2)   14/    91D2 : 3F                  	xppc 	p3 													; evaluate rhs
(2)   15/    91D3 : C6 02               	ld 		@2(p2) 												; unstack the result.
(2)   16/    91D5 : 06                  	csa 														; end if there was an error.
(2)   17/    91D6 : 94 1E               	jp 		__STMAC_End
(2)   18/    91D8 :                     	
(2)   19/    91D8 : C2 FE               	ld 		-2(p2) 												; LSB -> E
(2)   20/    91DA : 01                  	xae
(2)   21/    91DB : C2 FF               	ld 		-1(p2) 												; MSB -> P3.H
(2)   22/    91DD : 37                  	xpah 	p3
 AS V1.42 Beta [Bld 102] - source file vtl-2.asm(machinecode.asm) - page 11 - 12/27/2015 20:56:40


(2)   23/    91DE : 40                  	lde 														; E -> P3.L	
(2)   24/    91DF : 33                  	xpal 	p3
(2)   25/    91E0 : C7 FF               	ld 		@-1(p3) 											; adjust for pre increment
(2)   26/    91E2 : (MACRO)             	pushp 	p1 													; point P1 to variables
(2)   26/    91E2 : 35                          xpah    P1
(2)   26/    91E3 : CE FF                       st              @-1(p2)
(2)   26/    91E5 : 31                          xpal    P1
(2)   26/    91E6 : CE FF                       st              @-1(p2)
(2)   27/    91E8 : (MACRO)             	lpi 	p1,Variables
(2)   27/    91E8 : C4 0D                       ldi     (VARIABLES) / 256
(2)   27/    91EA : 35                          xpah    P1
(2)   27/    91EB : C4 00                       ldi     (VARIABLES) & 255
(2)   27/    91ED : 31                          xpal    P1
(2)   28/    91EE : 3F                  	xppc 	p3 													; call routine
(2)   29/    91EF : (MACRO)             	pullp 	p1 													; restore P1
(2)   29/    91EF : C6 01                       ld              @1(p2)
(2)   29/    91F1 : 31                          xpal    P1
(2)   29/    91F2 : C6 01                       ld              @1(p2)
(2)   29/    91F4 : 35                          xpah    P1
(2)   30/    91F5 : 03                  	scl 														; result ok.
(2)   31/    91F6 :                     	
(2)   32/    91F6 :                     __STMAC_End:
(1)   22/    91F6 :                     	include source\left_specials\charout.asm
(2)    1/    91F6 :                     ; ****************************************************************************************************************
(2)    2/    91F6 :                     ; ****************************************************************************************************************
(2)    3/    91F6 :                     ;
(2)    4/    91F6 :                     ;												$ : Character Output
(2)    5/    91F6 :                     ;
(2)    6/    91F6 :                     ; ****************************************************************************************************************
(2)    7/    91F6 :                     ; ****************************************************************************************************************
(2)    8/    91F6 :                     
(2)    9/    91F6 : 90 13               	jmp 	__STCHO_End
(2)   10/    91F8 :                     
(2)   11/    91F8 :                     __ST_CharacterOut:
(2)   12/    91F8 : 3F                  	xppc 	p3 													; check for '='
(2)   13/    91F9 : 94 10               	jp 		__STCHO_End 										; if error, end.
(2)   14/    91FB : 3F                  	xppc 	p3 													; evaluate rhs
(2)   15/    91FC : C6 02               	ld 		@2(p2) 												; unstack the result.
(2)   16/    91FE : 06                  	csa 														; end if there was an error.
(2)   17/    91FF : 94 0A               	jp 		__STCHO_End
(2)   18/    9201 : (MACRO)             	lpi 	p3,Print-1 											; get print routine ptr
(2)   18/    9201 : C4 90                       ldi     (PRINT-1) / 256
(2)   18/    9203 : 37                          xpah    P3
(2)   18/    9204 : C4 7A                       ldi     (PRINT-1) & 255
(2)   18/    9206 : 33                          xpal    P3
(2)   19/    9207 : C2 FE               	ld 		-2(p2) 												; read the byte
(2)   20/    9209 : 3F                  	xppc 	p3 													; and print it.
(2)   21/    920A : 03                  	scl 														; no error occurred.
(2)   22/    920B :                     	
(2)   23/    920B :                     __STCHO_End:
(1)   23/    920B :                     
(1)   24/    920B :                     ; ****************************************************************************************************************
(1)   25/    920B :                     ;							Handler end. Test for error and skip rest of line if comment
(1)   26/    920B :                     ; ****************************************************************************************************************
(1)   27/    920B :                     
(1)   28/    920B : 06                  	csa 														; read Status Register
(1)   29/    920C : D4 80               	ani 	0x80 												; check if CY/L bit set, if so go to next statement
(1)   30/    920E : 9C 0C               	jnz 	SkipEndLineNextStatement
(1)   31/    9210 :                     __ENS_Stop:														; error has occurred in a handler.
(1)   32/    9210 : (MACRO)             	lpi 	p3,Variables 										; clear the is running flag
 AS V1.42 Beta [Bld 102] - source file vtl-2.asm(statement.asm) - page 12 - 12/27/2015 20:56:40


(1)   32/    9210 : C4 0D                       ldi     (VARIABLES) / 256
(1)   32/    9212 : 37                          xpah    P3
(1)   32/    9213 : C4 00                       ldi     (VARIABLES) & 255
(1)   32/    9215 : 33                          xpal    P3
(1)   33/    9216 : C4 00               	ldi 	0
(1)   34/    9218 : CB FF               	st 		IsRunning-Variables(p3)	
(1)   35/    921A :                     	;
(1)   36/    921A :                     	; TODO: Go to input from keyboard handler.
(1)   37/    921A :                     	;
(1)   38/    921A :                     wait2:
(1)   39/    921A : 90 FE               	jmp 	wait2
(1)   40/    921C :                     
(1)   41/    921C :                     SkipEndLineNextStatement: 										; find end of line if comment etc.
(1)   42/    921C : C5 01               	ld 		@1(p1)
(1)   43/    921E : 9C FC               	jnz 	SkipEndLineNextStatement
(1)   44/    9220 :                     
(1)   45/    9220 :                     ; ****************************************************************************************************************
(1)   46/    9220 :                     ; ****************************************************************************************************************
(1)   47/    9220 :                     ;
(1)   48/    9220 :                     ;					Execute the next statement. P1 points to the offset byte to next
(1)   49/    9220 :                     ;
(1)   50/    9220 :                     ; ****************************************************************************************************************
(1)   51/    9220 :                     ; ****************************************************************************************************************
(1)   52/    9220 :                     
(1)   53/    9220 : =0x27               RandomVariable = 0x27 											; Assembler does not like single quote.
(1)   54/    9220 :                     
(1)   55/    9220 :                     ExecuteNextStatement:
(1)   56/    9220 :                     
(1)   57/    9220 :                     ; ****************************************************************************************************************
(1)   58/    9220 :                     ;									Check to see if reached end of program
(1)   59/    9220 :                     ; ****************************************************************************************************************
(1)   60/    9220 :                     
(1)   61/    9220 : C5 01               	ld 		@1(p1) 												; look at length byte
(1)   62/    9222 : 03                  	scl 														; set CY/L so stops without error if zero.
(1)   63/    9223 : 98 EB               	jz 		__ENS_Stop 											; if zero, stop the program from running as at top of program.
(1)   64/    9225 :                     
(1)   65/    9225 :                     ; ****************************************************************************************************************
(1)   66/    9225 :                     ;				Check running flag and update # variable which contains current line number
(1)   67/    9225 :                     ; ****************************************************************************************************************
(1)   68/    9225 :                     
(1)   69/    9225 : (MACRO)             	lpi 	p3,Variables 										; look at variables.
(1)   69/    9225 : C4 0D                       ldi     (VARIABLES) / 256
(1)   69/    9227 : 37                          xpah    P3
(1)   69/    9228 : C4 00                       ldi     (VARIABLES) & 255
(1)   69/    922A : 33                          xpal    P3
(1)   70/    922B : C3 FF               	ld 		IsRunning-Variables(p3) 							; check is running flag
(1)   71/    922D : 98 E1               	jz 		__ENS_Stop 											; if zero, stop, still with CY/L set.
(1)   72/    922F :                     
(1)   73/    922F : C5 01               	ld 		@1(p1) 												; copy current line number to #
(1)   74/    9231 : CB 46               	st 		('#' & 0x3F)*2(p3)
(1)   75/    9233 : C5 01               	ld 		@1(p1)
(1)   76/    9235 : CB 47               	st 		('#' & 0x3F)*2+1(p3)
(1)   77/    9237 :                     
(1)   78/    9237 :                     ; ****************************************************************************************************************
(1)   79/    9237 :                     ;										Update the random number variable '
(1)   80/    9237 :                     ; ****************************************************************************************************************
(1)   81/    9237 :                     
(1)   82/    9237 : C3 4E               	ld 		(RandomVariable*2)(p3) 								; check random seed initialised
(1)   83/    9239 : DB 4F               	or 		(RandomVariable*2+1)(p3) 										
(1)   84/    923B : 9C 08               	jnz 	__ENS_RandomInitialised
 AS V1.42 Beta [Bld 102] - source file vtl-2.asm(statement.asm) - page 13 - 12/27/2015 20:56:40


(1)   85/    923D :                     
(1)   86/    923D : C4 E1               	ldi 	0xE1  												; if it is $0000, set it to $ACE1
(1)   87/    923F : CB 4E               	st 		(RandomVariable*2)(p3)
(1)   88/    9241 : C4 AC               	ldi 	0xAC
(1)   89/    9243 : CB 4F               	st 		(RandomVariable*2+1)(p3)
(1)   90/    9245 :                     __ENS_RandomInitialised:
(1)   91/    9245 :                     
(1)   92/    9245 : C3 4F               	ld 		(RandomVariable*2+1)(p3) 							; shift LFSR right
(1)   93/    9247 : 02                  	ccl
(1)   94/    9248 : 1F                  	rrl
(1)   95/    9249 : CB 4F               	st 		(RandomVariable*2+1)(p3)
(1)   96/    924B : C3 4E               	ld 		(RandomVariable*2)(p3)
(1)   97/    924D : 1F                  	rrl
(1)   98/    924E : CB 4E               	st 		(RandomVariable*2)(p3)
(1)   99/    9250 : 06                  	csa
(1)  100/    9251 : 94 06               	jp 		__ENS_NoToggleMask 									; if output bit is 1 appl the toggle mask.
(1)  101/    9253 : C3 4F               	ld 		(RandomVariable*2+1)(p3)
(1)  102/    9255 : E4 B4               	xri 	0xB4
(1)  103/    9257 : CB 4F               	st 		(RandomVariable*2+1)(p3)
(1)  104/    9259 :                     __ENS_NoToggleMask:
(1)  105/    9259 :                     
(1)  106/    9259 :                     ; ****************************************************************************************************************
(1)  107/    9259 :                     ;									Look at the first non space character
(1)  108/    9259 :                     ; ****************************************************************************************************************
(1)  109/    9259 :                     
(1)  110/    9259 :                     __ENS_GetFirstCharacter:
(1)  111/    9259 : C5 01               	ld 		@1(p1) 												; get first character of line.
(1)  112/    925B : 98 C3               	jz 		ExecuteNextStatement 								; if it is NULL the line is blank, so go to next one.
(1)  113/    925D : E4 20               	xri 	' '													; keep going till space not found
(1)  114/    925F : 98 F8               	jz 		__ENS_GetFirstCharacter
(1)  115/    9261 : C5 FF               	ld 		@-1(p1) 											; go back and reload first non space character
(1)  116/    9263 : D4 40               	ani 	0x40 												; same optimisation trick as RHS. If this bit set it is
(1)  117/    9265 : 98 32               	jz 		__ENS_CheckSpecials 								; a standard variable @A-Z[/]^_ (e.g. 64-91) so don't check specials.
(1)  118/    9267 :                     
(1)  119/    9267 :                     ; ****************************************************************************************************************
(1)  120/    9267 :                     ;									A standard assignment of the A=<expr> type
(1)  121/    9267 :                     ; ****************************************************************************************************************
(1)  122/    9267 :                     
(1)  123/    9267 :                     __ENS_StandardAssignment:
(1)  124/    9267 : C5 01               	ld 		@1(p1)												; get the variable and skip over it
(1)  125/    9269 : CE FF               	st 		@-1(p2) 											; save on stack for later usage.
(1)  126/    926B : (MACRO)             	lpi		p3,CheckEquals-1 									; check equals and spacing function
(1)  126/    926B : C4 92                       ldi     (CHECKEQUALS-1) / 256
(1)  126/    926D : 37                          xpah    P3
(1)  126/    926E : C4 B1                       ldi     (CHECKEQUALS-1) & 255
(1)  126/    9270 : 33                          xpal    P3
(1)  127/    9271 : 3F                  	xppc 	p3 													; call it.
(1)  128/    9272 : C6 01               	ld 		@1(p2) 												; drop variable, temporarily
(1)  129/    9274 : 06                  	csa
(1)  130/    9275 : 94 99               	jp 		__ENS_Stop 											; error trap
(1)  131/    9277 : C6 FF               	ld 		@-1(p2) 											; restore variable on stack. data still there.
(1)  132/    9279 : 3F                  	xppc 	p3 													; call it again to evaluate expression
(1)  133/    927A : C6 03               	ld 		@3(p2) 												; drop result and variable, though values still present
(1)  134/    927C : 06                  	csa
(1)  135/    927D : 94 91               	jp 		__ENS_Stop 											; error trap
(1)  136/    927F :                     
(1)  137/    927F : C2 FF               	ld 		-1(p2) 												; variable name
(1)  138/    9281 : 02                  	ccl 														; double it, 2 bytes each
(1)  139/    9282 : F2 FF               	add 	-1(p2) 
(1)  140/    9284 : D4 7E               	ani 	0x3F * 2 											; same as anding with 3F and doubling.
 AS V1.42 Beta [Bld 102] - source file vtl-2.asm(statement.asm) - page 14 - 12/27/2015 20:56:40


(1)  141/    9286 : 01                  	xae 														; put in E as an offset into variables
(1)  142/    9287 : (MACRO)             	lpi 	p3,Variables 										; point P3 to variables.
(1)  142/    9287 : C4 0D                       ldi     (VARIABLES) / 256
(1)  142/    9289 : 37                          xpah    P3
(1)  142/    928A : C4 00                       ldi     (VARIABLES) & 255
(1)  142/    928C : 33                          xpal    P3
(1)  143/    928D : C2 FD               	ld 		-3(p2) 												; get LSB of result
(1)  144/    928F : CB 80               	st 		-0x80(p3) 											; save it
(1)  145/    9291 : C7 01               	ld 		@1(p3) 												; bump P3
(1)  146/    9293 : C2 FE               	ld 		-2(p2) 												; get MSB of result
(1)  147/    9295 : CB 80               	st 		-0x80(p3) 											; save it.
(1)  148/    9297 : 90 83               	jmp 	SkipEndLineNextStatement 							; skip to end of line, if not there, and do next statement.
(1)  149/    9299 :                     
(1)  150/    9299 :                     ; ****************************************************************************************************************
(1)  151/    9299 :                     ;	P1 points to a character in the 32-63 range, which *might* be a special so we look it up in the specials table
(1)  152/    9299 :                     ; ****************************************************************************************************************
(1)  153/    9299 :                     
(1)  154/    9299 :                     __ENS_CheckSpecials:
(1)  155/    9299 : (MACRO)             	lpi 	p3,SpecialsTable 									; point P3 to the specials table.
(1)  155/    9299 : C4 94                       ldi     (SPECIALSTABLE) / 256
(1)  155/    929B : 37                          xpah    P3
(1)  155/    929C : C4 B9                       ldi     (SPECIALSTABLE) & 255
(1)  155/    929E : 33                          xpal    P3
(1)  156/    929F :                     __ENS_SearchSpecials:
(1)  157/    929F : C7 03               	ld 		@3(p3) 												; fetch, and point to next.
(1)  158/    92A1 : 98 C4               	jz 		__ENS_StandardAssignment 							; if end of table, then do as standard assignment
(1)  159/    92A3 : E1 00               	xor 	(p1) 												; found the character
(1)  160/    92A5 : 9C F8               	jnz 	__ENS_SearchSpecials 								; no, keep looking for it.
(1)  161/    92A7 :                     
(1)  162/    92A7 : C5 01               	ld 		@1(p1) 												; skip over specials character
(1)  163/    92A9 : C3 FE               	ld 		-2(p3) 												; read LSB of jump address to E
(1)  164/    92AB : 01                  	xae 
(1)  165/    92AC : C3 FF               	ld 		-1(p3) 												; read MSB of jump address to P3.H
(1)  166/    92AE : 37                  	xpah 	p3
(1)  167/    92AF : 40                  	lde 														; copy E to P3.L Predecrement is done by the macro
(1)  168/    92B0 : 33                  	xpal 	p3 
(1)  169/    92B1 :                     
(1)  170/    92B1 : 3F                  	xppc 	p3 													; and go to the handler. By doing this here we have 
(1)  171/    92B2 :                     																; and XPPC P3 for check equals and an XPPC P3 for 
(1)  172/    92B2 :                     																; expression with no P3 setup.
(1)  173/    92B2 :                     
(1)  174/    92B2 :                     ; ****************************************************************************************************************
(1)  175/    92B2 :                     ; ****************************************************************************************************************
(1)  176/    92B2 :                     ;
(1)  177/    92B2 :                     ;						Check for = <expression>, skip following and trailing spaces
(1)  178/    92B2 :                     ;
(1)  179/    92B2 :                     ; ****************************************************************************************************************
(1)  180/    92B2 :                     ; ****************************************************************************************************************
(1)  181/    92B2 :                     
(1)  182/    92B2 :                     CheckEquals:
(1)  183/    92B2 : C5 01               	ld 		@1(p1) 												; fetch and bump
(1)  184/    92B4 : 98 13               	jz 		__CEQ_Fail
(1)  185/    92B6 : E4 20               	xri 	' ' 
(1)  186/    92B8 : 98 F8               	jz 		CheckEquals 										; keep going if space found.
(1)  187/    92BA : E4 1D               	xri 	' ' ! '=' 											; if not found equals
(1)  188/    92BC : 9C 0B               	jnz 	__CEQ_Fail  										; then fail with Syntax error.
(1)  189/    92BE :                     
(1)  190/    92BE :                     __CEQ_SkipSpaces:
(1)  191/    92BE : C5 01               	ld 		@1(p1) 												; look at next after =
(1)  192/    92C0 : 98 07               	jz 		__CEQ_Fail 											; if NULL syntax error.
 AS V1.42 Beta [Bld 102] - source file vtl-2.asm(statement.asm) - page 15 - 12/27/2015 20:56:40


(1)  193/    92C2 : E4 20               	xri 	' ' 												; loop back if space.
(1)  194/    92C4 : 98 F8               	jz 		__CEQ_SkipSpaces
(1)  195/    92C6 : 03                  	scl 														; set CY/L flag as okay
(1)  196/    92C7 : 90 04               	jmp 	__CEQ_Exit
(1)  197/    92C9 :                     __CEQ_Fail:	
(1)  198/    92C9 : C4 53               	ldi 	ERROR_Syntax
(1)  199/    92CB : 01                  	xae
(1)  200/    92CC : 02                  	ccl 														; clear CY/L as error and return.
(1)  201/    92CD :                     __CEQ_Exit:
(1)  202/    92CD : C5 FF               	ld 		@-1(p1) 											; undo last fetch.
(1)  203/    92CF : 06                  	csa 														; copy result to A
(1)  204/    92D0 : 3F                  	xppc 	p3 													; return and fall through to evaluate expression
(1)  205/    92D1 :                     
(1)  206/    92D1 :                     ; ****************************************************************************************************************
(1)  207/    92D1 :                     ;	Expression follows directly as this and the CheckEquals function can be executed using XPPC P3 with no set up
(1)  208/    92D1 :                     ; ****************************************************************************************************************
(1)  209/    92D1 :                     
(1)  210/    92D1 :                     	include source\expression.asm 								; expression 
(2)    1/    92D1 :                     ; ****************************************************************************************************************
(2)    2/    92D1 :                     ; ****************************************************************************************************************
(2)    3/    92D1 :                     ;
(2)    4/    92D1 :                     ;										Expression Evaluation
(2)    5/    92D1 :                     ;										=====================
(2)    6/    92D1 :                     ;
(2)    7/    92D1 :                     ;	On entry, P1 points to the expression, on exit it points to ) or NULL if okay. Error in E. CY/L flag = 0
(2)    8/    92D1 :                     ;	indicates error, and this is already copied into A (e.g. CSA ; XPPC P3). A two byte result is stored on 
(2)    9/    92D1 :                     ;	the stack whatever happens but this is not a valid value unless CY/L = 1.
(2)   10/    92D1 :                     ;
(2)   11/    92D1 :                     ;	This code has the monitor maths library as a dependency.
(2)   12/    92D1 :                     ;	
(2)   13/    92D1 :                     ; ****************************************************************************************************************
(2)   14/    92D1 :                     ; ****************************************************************************************************************
(2)   15/    92D1 :                     
(2)   16/    92D1 :                     ; ****************************************************************************************************************
(2)   17/    92D1 :                     ; ****************************************************************************************************************
(2)   18/    92D1 :                     ;
(2)   19/    92D1 :                     ;											Expression Evaluation
(2)   20/    92D1 :                     ;
(2)   21/    92D1 :                     ; ****************************************************************************************************************
(2)   22/    92D1 :                     ; ****************************************************************************************************************
(2)   23/    92D1 :                     
(2)   24/    92D1 :                     EvaluateExpression:
(2)   25/    92D1 : (MACRO)             	pushp 	p3 													; save P3 on stack.
(2)   25/    92D1 : 37                          xpah    P3
(2)   25/    92D2 : CE FF                       st              @-1(p2)
(2)   25/    92D4 : 33                          xpal    P3
(2)   25/    92D5 : CE FF                       st              @-1(p2)
(2)   26/    92D7 : C4 2B               	ldi 	'+'													; push + on stack as pending operator
(2)   27/    92D9 : CE FF               	st 		@-1(p2)
(2)   28/    92DB : C4 00               	ldi 	0 													; push 0 (16 bit) on stack as current term.
(2)   29/    92DD : CE FF               	st 		@-1(p2)
(2)   30/    92DF : CE FF               	st 		@-1(p2)
(2)   31/    92E1 :                     
(2)   32/    92E1 :                     ; ****************************************************************************************************************
(2)   33/    92E1 :                     ;					Get the next term. This is the main loop. We pretend we have already done 0+
(2)   34/    92E1 :                     ; ****************************************************************************************************************
(2)   35/    92E1 :                     
(2)   36/    92E1 :                     __EE_NextTerm:	
(2)   37/    92E1 : C5 01               	ld 		@1(p1) 												; get next character and bump.
(2)   38/    92E3 : 98 1A               	jz 		__EE_ExitSyntax 									; fail with syntax error if nothing found
 AS V1.42 Beta [Bld 102] - source file vtl-2.asm(expression.asm) - page 16 - 12/27/2015 20:56:40


(2)   39/    92E5 : E4 20               	xri 	' ' 												; keep going, skipping over spaces.
(2)   40/    92E7 : 98 F8               	jz 		__EE_NextTerm
(2)   41/    92E9 : C5 FF               	ld 		@-1(p1) 											; get character, unpicking bump
(2)   42/    92EB : 02                  	ccl 														; add 128-'0' ; if +ve it is less than '0'
(2)   43/    92EC : F4 50               	adi 	128-'0'
(2)   44/    92EE : 94 29               	jp 		__EE_NotInteger
(2)   45/    92F0 : F4 76               	adi 	128-10 												; add 128-10 ; if +ve it is greater than '9'
(2)   46/    92F2 : 94 25               	jp 		__EE_NotInteger
(2)   47/    92F4 :                     
(2)   48/    92F4 :                     ; ****************************************************************************************************************
(2)   49/    92F4 :                     ;					Found an integer term, use the math library to extract the integer.
(2)   50/    92F4 :                     ; ****************************************************************************************************************
(2)   51/    92F4 :                     
(2)   52/    92F4 : (MACRO)             	lpi 	p3,OSMathLibrary-1 									; use math library function '?'
(2)   52/    92F4 : C4 00                       ldi     (OSMATHLIBRARY-1) / 256
(2)   52/    92F6 : 37                          xpah    P3
(2)   52/    92F7 : C4 02                       ldi     (OSMATHLIBRARY-1) & 255
(2)   52/    92F9 : 33                          xpal    P3
(2)   53/    92FA : C4 3F               	ldi 	'?'
(2)   54/    92FC : 3F                  	xppc 	p3 													; convert to an integer (cannot return an error)
(2)   55/    92FD : 90 4F               	jmp 	__EE_ProcessOperator 								; process the pending operator
(2)   56/    92FF :                     ;
(2)   57/    92FF :                     ;	Syntax errors, come here
(2)   58/    92FF :                     ;
(2)   59/    92FF :                     __EE_ExitSyntax:
(2)   60/    92FF : C4 54               	ldi 	ERROR_SyntaxTerm 									; E = Syntax Error in term.
(2)   61/    9301 : 01                  	xae
(2)   62/    9302 : 02                  	ccl
(2)   63/    9303 :                     ;
(2)   64/    9303 :                     ;	Any other error, or successful completion, come here.
(2)   65/    9303 :                     ;
(2)   66/    9303 :                     __EE_Exit:
(2)   67/    9303 : C6 03               	ld 		@3(p2) 												; drop result and pending operator space on stack
(2)   68/    9305 : (MACRO)             	pullp 	p3 													; restore P3
(2)   68/    9305 : C6 01                       ld              @1(p2)
(2)   68/    9307 : 33                          xpal    P3
(2)   68/    9308 : C6 01                       ld              @1(p2)
(2)   68/    930A : 37                          xpah    P3
(2)   69/    930B :                     
(2)   70/    930B : C2 FB               	ld 		-5(p2) 												; copy result to correct slot
(2)   71/    930D : CA FE               	st 		-2(p2)
(2)   72/    930F : C2 FC               	ld 		-4(p2)
(2)   73/    9311 : CA FF               	st 		-1(p2)
(2)   74/    9313 : C6 FE               	ld 		@-2(p2)												; make space for result, result always returned.
(2)   75/    9315 : 06                  	csa 														; get CY/L bit into A bit 7
(2)   76/    9316 : 3F                  	xppc 	p3 													; return
(2)   77/    9317 : 90 B8               	jmp 	EvaluateExpression 									; re-entrant.
(2)   78/    9319 :                     
(2)   79/    9319 :                     ; ****************************************************************************************************************
(2)   80/    9319 :                     ;	We know it is not a numeric constant, so check for special terms. First though we optimise it by 
(2)   81/    9319 :                     ;	checking bit 5 - if zero the code is @A-Z[\]^_ none of which are 'special' terms.
(2)   82/    9319 :                     ; ****************************************************************************************************************
(2)   83/    9319 :                     
(2)   84/    9319 :                     __EE_NotInteger:
(2)   85/    9319 : C1 00               	ld 		(p1) 												; look at character bit 5 (32)
(2)   86/    931B : D4 20               	ani 	32 													; if this is zero it cannot be a special term 
(2)   87/    931D : 98 13               	jz 		__EE_IsVariable 									; as they are 32-63.
(2)   88/    931F :                     
(2)   89/    931F : (MACRO)             	lpi 	p3,CheckSpecialTerms-1 								; call the special terms routine.
(2)   89/    931F : C4 93                       ldi     (CHECKSPECIALTERMS-1) / 256
 AS V1.42 Beta [Bld 102] - source file vtl-2.asm(expression.asm) - page 17 - 12/27/2015 20:56:40


(2)   89/    9321 : 37                          xpah    P3
(2)   89/    9322 : C4 F5                       ldi     (CHECKSPECIALTERMS-1) & 255
(2)   89/    9324 : 33                          xpal    P3
(2)   90/    9325 : 3F                  	xppc 	p3
(2)   91/    9326 : C6 02               	ld 		@2(p2) 												; drop the result
(2)   92/    9328 : 06                  	csa
(2)   93/    9329 : 94 D8               	jp 		__EE_Exit  											; if CY/L = 0 then an error has occurred, return it.
(2)   94/    932B : C6 FE               	ld 		@-2(p2) 											; restore result to TOS.
(2)   95/    932D : 40                  	lde  														; if E != 0 then the value has been processed and is on 
(2)   96/    932E : 9C 1E               	jnz 	__EE_ProcessOperator 								; the stack, so go process it
(2)   97/    9330 : C6 02               	ld 		@2(p2) 												; drop the TOS as it is not valid.
(2)   98/    9332 :                     
(2)   99/    9332 :                     ; ****************************************************************************************************************
(2)  100/    9332 :                     ;										We now know this is a variable.
(2)  101/    9332 :                     ; ****************************************************************************************************************
(2)  102/    9332 :                     
(2)  103/    9332 :                     __EE_IsVariable:
(2)  104/    9332 : C1 00               	ld 		(p1) 												; calculate twice the character
(2)  105/    9334 : 02                  	ccl 
(2)  106/    9335 : F5 01               	add 	@1(p1) 												; add with bump of variable.
(2)  107/    9337 : D4 7E               	ani 	(0x3F * 2)											; same as (n & 0x3F) * 2
(2)  108/    9339 : 01                  	xae 														; put in E, use this as an index.
(2)  109/    933A : (MACRO)             	lpi 	p3,Variables 										; point P3 to variables
(2)  109/    933A : C4 0D                       ldi     (VARIABLES) / 256
(2)  109/    933C : 37                          xpah    P3
(2)  109/    933D : C4 00                       ldi     (VARIABLES) & 255
(2)  109/    933F : 33                          xpal    P3
(2)  110/    9340 : C3 80               	ld 		-0x80(p3) 											; get low byte
(2)  111/    9342 : CE FE               	st 		@-2(p2) 											; push on stack, allow space for high byte
(2)  112/    9344 : C7 01               	ld 		@1(p3) 												; increment P3 to get high byte
(2)  113/    9346 : C3 80               	ld 		-0x80(p3) 											; get high byte
(2)  114/    9348 : CA 01               	st 		1(p2) 												; save on allocated stack space.
(2)  115/    934A : 90 02               	jmp 	__EE_ProcessOperator
(2)  116/    934C :                     
(2)  117/    934C :                     __EE_NextTerm2: 												; the jump is too large.
(2)  118/    934C : 90 93               	jmp 	__EE_NextTerm
(2)  119/    934E :                     
(2)  120/    934E :                     ; ****************************************************************************************************************
(2)  121/    934E :                     ;		We now have two values on the stack and an operator, so apply the operator to the two values.
(2)  122/    934E :                     ; ****************************************************************************************************************
(2)  123/    934E :                     
(2)  124/    934E :                     __EE_ProcessOperator:
(2)  125/    934E : (MACRO)             	lpi 	p3,OSMathLibrary-1 									; point P3 to the OS Math Library.
(2)  125/    934E : C4 00                       ldi     (OSMATHLIBRARY-1) / 256
(2)  125/    9350 : 37                          xpah    P3
(2)  125/    9351 : C4 02                       ldi     (OSMATHLIBRARY-1) & 255
(2)  125/    9353 : 33                          xpal    P3
(2)  126/    9354 : C2 04               	ld 		4(p2) 												; get operator
(2)  127/    9356 : D4 FC               	ani 	0xFC 												; clear bits 0,1
(2)  128/    9358 : E4 3C               	xri 	0x3C 												; now will be zero for 3C..3F which is < = > ?
(2)  129/    935A : 9C 06               	jnz 	__EE_NotComparison
(2)  130/    935C : (MACRO)             	lpi 	p3,CompareLibrary-1 								; if it is, we use this library instead
(2)  130/    935C : C4 93                       ldi     (COMPARELIBRARY-1) / 256
(2)  130/    935E : 37                          xpah    P3
(2)  130/    935F : C4 C0                       ldi     (COMPARELIBRARY-1) & 255
(2)  130/    9361 : 33                          xpal    P3
(2)  131/    9362 :                     __EE_NotComparison:
(2)  132/    9362 : C2 04               	ld 		4(p2) 												; get operator
(2)  133/    9364 : E4 2F               	xri 	'/'													; is it divide ?
(2)  134/    9366 : 9C 02               	jnz 	__EE_NotDivide
 AS V1.42 Beta [Bld 102] - source file vtl-2.asm(expression.asm) - page 18 - 12/27/2015 20:56:40


(2)  135/    9368 : E4 73               	xri 	'/'!'\\'											; if so, this will change it to \ unsigned divide for Math lib.
(2)  136/    936A :                     __EE_NotDivide:
(2)  137/    936A : E4 2F               	xri 	'/'													; unpick the test, but / will have changed to \ (backslash)
(2)  138/    936C : 3F                  	xppc 	p3 													; do the operation.
(2)  139/    936D : 06                  	csa 														; check for error.
(2)  140/    936E : 94 08               	jp 		__EE_GetNextOperator 								; CY/L = 1, error
(2)  141/    9370 : C6 02               	ld 		@2(p2) 												; drop TOS - if divide by zero then stack unchanged.
(2)  142/    9372 : C4 5A               	ldi 	ERROR_DivideZero 									; prepare for division by zero error.
(2)  143/    9374 : 01                  	xae 														; the only error the Math Library can return from + - * /
(2)  144/    9375 : 02                  	ccl 														; return error flag.
(2)  145/    9376 :                     __EE_Exit2:
(2)  146/    9376 : 90 8B               	jmp 	__EE_Exit 											; return if error.
(2)  147/    9378 :                     
(2)  148/    9378 :                     ; ****************************************************************************************************************
(2)  149/    9378 :                     ;	Have successfully performed operation. First check if we have done division, and if so, save the remainder.
(2)  150/    9378 :                     ; ****************************************************************************************************************
(2)  151/    9378 :                     
(2)  152/    9378 :                     __EE_GetNextOperator:
(2)  153/    9378 : C2 02               	ld 		2(p2) 												; was it divide ?
(2)  154/    937A : E4 2F               	xri 	'/'
(2)  155/    937C : 9C 0E               	jnz 	__EE_FindNextOperator
(2)  156/    937E : (MACRO)             	lpi 	p3,Variables+('%' & 0x3F)*2 						; point P3 to remainder variable
(2)  156/    937E : C4 0D                       ldi     (VARIABLES+('%' & 0X3F)*2) / 256
(2)  156/    9380 : 37                          xpah    P3
(2)  156/    9381 : C4 4A                       ldi     (VARIABLES+('%' & 0X3F)*2) & 255
(2)  156/    9383 : 33                          xpal    P3
(2)  157/    9384 : C2 FE               	ld 		-2(p2)												; copy remainder there.
(2)  158/    9386 : CB 00               	st 		(p3)
(2)  159/    9388 : C2 FF               	ld 		-1(p2)
(2)  160/    938A : CB 01               	st 		1(p3)
(2)  161/    938C :                     
(2)  162/    938C :                     ; ****************************************************************************************************************
(2)  163/    938C :                     ;							Now find the next operator. NULL or ) ends an expression.
(2)  164/    938C :                     ; ****************************************************************************************************************
(2)  165/    938C :                     
(2)  166/    938C :                     __EE_FindNextOperator:
(2)  167/    938C : 03                  	scl 														; prepare for successful exit.
(2)  168/    938D : C1 00               	ld 		(p1) 												; get next operator
(2)  169/    938F : 98 E5               	jz 		__EE_Exit2 											; if end of line, exit
(2)  170/    9391 : E4 29               	xri 	')' 												; if close parenthesis, exit.
(2)  171/    9393 : 98 E1               	jz 		__EE_Exit2
(2)  172/    9395 : C5 01               	ld 		@1(p1) 												; refetch and bump
(2)  173/    9397 : E4 20               	xri 	' ' 												; loop back if spaces
(2)  174/    9399 : 98 F1               	jz 		__EE_FindNextOperator
(2)  175/    939B :                     
(2)  176/    939B : C1 FF               	ld 		-1(p1) 												; reload old character.
(2)  177/    939D : CA 02               	st 		2(p2) 												; save as pending operation.
(2)  178/    939F :                     
(2)  179/    939F : E4 2B               	xri 	'+'
(2)  180/    93A1 : 98 A9               	jz 		__EE_NextTerm2 										; go to next term if a valid operator.
(2)  181/    93A3 : E4 06               	xri 	'-'!'+'
(2)  182/    93A5 : 98 A5               	jz 		__EE_NextTerm2
(2)  183/    93A7 : E4 07               	xri 	'*'!'-'
(2)  184/    93A9 : 98 A1               	jz 		__EE_NextTerm2
(2)  185/    93AB : E4 05               	xri 	'/'!'*'
(2)  186/    93AD : 98 9D               	jz 		__EE_NextTerm2
(2)  187/    93AF : E4 13               	xri 	'<'!'/'
(2)  188/    93B1 : 98 99               	jz 		__EE_NextTerm2
(2)  189/    93B3 : E4 01               	xri 	'='!'<'
(2)  190/    93B5 : 98 95               	jz 		__EE_NextTerm2
 AS V1.42 Beta [Bld 102] - source file vtl-2.asm(expression.asm) - page 19 - 12/27/2015 20:56:40


(2)  191/    93B7 : E4 03               	xri 	'>'!'='
(2)  192/    93B9 : 98 91               	jz 		__EE_NextTerm2
(2)  193/    93BB :                     
(2)  194/    93BB : C4 4F               	ldi 	ERROR_Operator 										; bad operator error
(2)  195/    93BD : 01                  	xae
(2)  196/    93BE : 02                  	ccl
(2)  197/    93BF : 90 B5               	jmp 	__EE_Exit2
(2)  198/    93C1 :                     
(2)  199/    93C1 :                     ; ****************************************************************************************************************
(2)  200/    93C1 :                     ;	
(2)  201/    93C1 :                     ;							This library provides functionality for >, = and <.
(2)  202/    93C1 :                     ;
(2)  203/    93C1 :                     ; ****************************************************************************************************************
(2)  204/    93C1 :                     
(2)  205/    93C1 :                     CompareLibrary:
(2)  206/    93C1 : 03                  	scl 														; calculate Stack2 - Stack1
(2)  207/    93C2 : C2 02               	ld 		2(p2) 												; lower byte
(2)  208/    93C4 : FA 00               	cad 	0(p2)
(2)  209/    93C6 : 01                  	xae 														; save in E
(2)  210/    93C7 : C2 03               	ld 		3(p2) 												; upper byte
(2)  211/    93C9 : FA 01               	cad 	1(p2)
(2)  212/    93CB : 58                  	ore 														; or into E, now zero if equal.
(2)  213/    93CC : 98 02               	jz 		__CL_ResultZero 
(2)  214/    93CE : C4 01               	ldi 	1  													
(2)  215/    93D0 :                     __CL_ResultZero:												; A = 0 if result same, A = 1 if result different
(2)  216/    93D0 : E4 01               	xri 	1 													; A = 1 if result same, A = 1 if result different
(2)  217/    93D2 : 01                  	xae 														; put in E
(2)  218/    93D3 : C2 04               	ld 		4(p2) 												; get comparator
(2)  219/    93D5 : E4 3D               	xri 	'=' 												; if it is '=', exit with E
(2)  220/    93D7 : 98 12               	jz 		__CL_ExitE
(2)  221/    93D9 :                     
(2)  222/    93D9 : 06                  	csa 														; get not borrow from subtraction
(2)  223/    93DA : D4 80               	ani 	0x80 												; isolate carry
(2)  224/    93DC : 98 02               	jz 		__CL_CarryClear
(2)  225/    93DE : C4 01               	ldi 	1
(2)  226/    93E0 :                     __CL_CarryClear:												; now A = 1 : Carry set, A = 0 : Carry Clear
(2)  227/    93E0 : 01                   	xae 														; in E
(2)  228/    93E1 : C2 04                	ld 		4(p2) 												; if it is '>', exit with this value
(2)  229/    93E3 : E4 3E                	xri 	'>'
(2)  230/    93E5 : 98 04                	jz 		__CL_ExitE
(2)  231/    93E7 : 40                   	lde 														; toggle E bit 0, e.g. reversing result.
(2)  232/    93E8 : E4 01                	xri 	1
(2)  233/    93EA : 01                   	xae
(2)  234/    93EB :                     __CL_ExitE:
(2)  235/    93EB : C6 02               	ld 		@2(p2) 												; pop a value off
(2)  236/    93ED : 40                  	lde 														; save E as LSB
(2)  237/    93EE : CA 00               	st 		0(p2)
(2)  238/    93F0 : C4 00               	ldi 	0 													; MSB is zero, result is 0 or 1.
(2)  239/    93F2 : CA 01               	st 		1(p2)
(2)  240/    93F4 : 02                  	ccl 														; clear carry because we must to be okay, matches behaviour
(2)  241/    93F5 : 3F                  	xppc 	p3 													; of Maths library.
(2)  242/    93F6 :                     
(1)  211/    93F6 :                     	include source\right_special.asm 							; r-expr specials (parenthesis,array,key,line)
(2)    1/    93F6 :                     ; ****************************************************************************************************************
(2)    2/    93F6 :                     ; ****************************************************************************************************************
(2)    3/    93F6 :                     ;
(2)    4/    93F6 :                     ;										Special Terms (Right Hand Side)
(2)    5/    93F6 :                     ;
(2)    6/    93F6 :                     ; ****************************************************************************************************************
(2)    7/    93F6 :                     ; ****************************************************************************************************************
 AS V1.42 Beta [Bld 102] - source file vtl-2.asm(right_special.asm) - page 20 - 12/27/2015 20:56:40


(2)    8/    93F6 :                     ;
(2)    9/    93F6 :                     ;	(<expr>)					Parenthesised expression
(2)   10/    93F6 :                     ;	:<expr>)					Array access (relative to '&')
(2)   11/    93F6 :                     ;	$ 							Read character from keyboard
(2)   12/    93F6 :                     ;	?							Read line and evaluate expression.
(2)   13/    93F6 :                     ;
(2)   14/    93F6 :                     ; ****************************************************************************************************************
(2)   15/    93F6 :                     ; ****************************************************************************************************************
(2)   16/    93F6 :                     ;
(2)   17/    93F6 :                     ;	This function does special terms for the Right Hand Side. Returns CY/L = 0 Error, S -> A
(2)   18/    93F6 :                     ;	If No Error is reported, E != 0 if processed, E = 0 if variable. If Error reported E is the Error Number.
(2)   19/    93F6 :                     ;	Always returns a value on the stack.
(2)   20/    93F6 :                     ;
(2)   21/    93F6 :                     ; ****************************************************************************************************************
(2)   22/    93F6 :                     ; ****************************************************************************************************************
(2)   23/    93F6 :                     
(2)   24/    93F6 :                     CheckSpecialTerms:
(2)   25/    93F6 : C4 00               	ldi 	0
(2)   26/    93F8 : CE FF               	st 		@-1(p2) 											; allocate space for result and clear it
(2)   27/    93FA : CE FF               	st 		@-1(p2)
(2)   28/    93FC : (MACRO)             	pushp 	p3 													; save P3.
(2)   28/    93FC : 37                          xpah    P3
(2)   28/    93FD : CE FF                       st              @-1(p2)
(2)   28/    93FF : 33                          xpal    P3
(2)   28/    9400 : CE FF                       st              @-1(p2)
(2)   29/    9402 :                     
(2)   30/    9402 : C5 01               	ld 		@1(p1) 												; get character and skip over it
(2)   31/    9404 : E4 24               	xri 	'$'													; is it character in ?
(2)   32/    9406 : 9C 0E               	jnz 	__CST_NotCharacter
(2)   33/    9408 :                     
(2)   34/    9408 :                     ; ****************************************************************************************************************
(2)   35/    9408 :                     ;												$ Get Keystroke
(2)   36/    9408 :                     ; ****************************************************************************************************************
(2)   37/    9408 :                     
(2)   38/    9408 : (MACRO)             	lpi 	p3,GetChar-1 										; get character subroutine
(2)   38/    9408 : C4 91                       ldi     (GETCHAR-1) / 256
(2)   38/    940A : 37                          xpah    P3
(2)   38/    940B : C4 3A                       ldi     (GETCHAR-1) & 255
(2)   38/    940D : 33                          xpal    P3
(2)   39/    940E : 3F                  	xppc 	p3 													; call it
(2)   40/    940F : CA 02               	st 		2(p2) 												; save in return slot
(2)   41/    9411 :                     __CST_ReturnDone:
(2)   42/    9411 : C4 01               	ldi 	1 													; set E to nonzero
(2)   43/    9413 : 01                  	xae
(2)   44/    9414 : 90 41               	jmp 	__CST_SCLAndExit 									; set carry and exit.
(2)   45/    9416 :                     ;
(2)   46/    9416 :                     __CST_NotCharacter:
(2)   47/    9416 : E4 1B               	xri 	'?'!'$'												; is it expression in ?
(2)   48/    9418 : 9C 30               	jnz 	__CST_NotInput 
(2)   49/    941A :                     
(2)   50/    941A :                     ; ****************************************************************************************************************
(2)   51/    941A :                     ;											? Get Line and evaluate it.
(2)   52/    941A :                     ; ****************************************************************************************************************
(2)   53/    941A :                     
(2)   54/    941A : (MACRO)             	pushp 	p1 													; save P1
(2)   54/    941A : 35                          xpah    P1
(2)   54/    941B : CE FF                       st              @-1(p2)
(2)   54/    941D : 31                          xpal    P1
(2)   54/    941E : CE FF                       st              @-1(p2)
(2)   55/    9420 : (MACRO)             	lpi 	p3,GetString-1 										; read string from keyboard
 AS V1.42 Beta [Bld 102] - source file vtl-2.asm(right_special.asm) - page 21 - 12/27/2015 20:56:40


(2)   55/    9420 : C4 91                       ldi     (GETSTRING-1) / 256
(2)   55/    9422 : 37                          xpah    P3
(2)   55/    9423 : C4 5E                       ldi     (GETSTRING-1) & 255
(2)   55/    9425 : 33                          xpal    P3
(2)   56/    9426 : (MACRO)             	lpi 	p1,KeyboardBuffer 								
(2)   56/    9426 : C4 0E                       ldi     (KEYBOARDBUFFER) / 256
(2)   56/    9428 : 35                          xpah    P1
(2)   56/    9429 : C4 00                       ldi     (KEYBOARDBUFFER) & 255
(2)   56/    942B : 31                          xpal    P1
(2)   57/    942C : C4 50               	ldi 	KeyboardBufferSize 
(2)   58/    942E : 3F                  	xppc 	p3 
(2)   59/    942F : (MACRO)             	lpi 	p3,EvaluateExpression-1 							; evaluate this
(2)   59/    942F : C4 92                       ldi     (EVALUATEEXPRESSION-1) / 256
(2)   59/    9431 : 37                          xpah    P3
(2)   59/    9432 : C4 D0                       ldi     (EVALUATEEXPRESSION-1) & 255
(2)   59/    9434 : 33                          xpal    P3
(2)   60/    9435 : 3F                  	xppc 	p3
(2)   61/    9436 : 94 08               	jp 		__CST_EvaluateCont 									; if error, don't copy result.
(2)   62/    9438 : C2 00               	ld 		0(p2) 												; copy result
(2)   63/    943A : CA 06               	st 		6(p2)
(2)   64/    943C : C2 01               	ld 		1(p2)
(2)   65/    943E : CA 07               	st 		7(p2)
(2)   66/    9440 :                     __CST_EvaluateCont:
(2)   67/    9440 : C6 02               	ld 		@2(p2) 												; drop the return result.
(2)   68/    9442 : (MACRO)             	pullp 	p1 													; restore P1
(2)   68/    9442 : C6 01                       ld              @1(p2)
(2)   68/    9444 : 31                          xpal    P1
(2)   68/    9445 : C6 01                       ld              @1(p2)
(2)   68/    9447 : 35                          xpah    P1
(2)   69/    9448 : 90 C7               	jmp 	__CST_ReturnDone									; exit successfully.
(2)   70/    944A :                     ;
(2)   71/    944A :                     ;	Check for : or (
(2)   72/    944A :                     ;
(2)   73/    944A :                     __CST_NotInput:
(2)   74/    944A : E4 05               	xri 	':'!'?'												; is it the array marker
(2)   75/    944C : 98 12               	jz 		__CST_ArrayOrParenthesis
(2)   76/    944E : E4 12               	xri 	':'!'('												; or the parenthesis (open bracket)
(2)   77/    9450 : 98 0E               	jz 		__CST_ArrayOrParenthesis
(2)   78/    9452 : C5 FF               	ld 		@-1(p1) 											; undo the bump.
(2)   79/    9454 : C4 00               	ldi 	0 													; E = 0 not processed
(2)   80/    9456 : 01                  	xae
(2)   81/    9457 :                     __CST_SCLAndExit:
(2)   82/    9457 : 03                  	scl 														; CY/L = 1 no error.
(2)   83/    9458 :                     __CST_Exit:
(2)   84/    9458 : (MACRO)             	pullp 	p3 													; restore P3
(2)   84/    9458 : C6 01                       ld              @1(p2)
(2)   84/    945A : 33                          xpal    P3
(2)   84/    945B : C6 01                       ld              @1(p2)
(2)   84/    945D : 37                          xpah    P3
(2)   85/    945E : 06                  	csa 														; copy error flag to A.
(2)   86/    945F : 3F                  	xppc 	p3
(2)   87/    9460 :                     
(2)   88/    9460 :                     ; ****************************************************************************************************************
(2)   89/    9460 :                     ;	:<expr> or (<expr>) - both evaluate and check the parenthesis value, then array does the array access
(2)   90/    9460 :                     ; ****************************************************************************************************************
(2)   91/    9460 :                     
(2)   92/    9460 :                     __CST_ArrayOrParenthesis:
(2)   93/    9460 : C1 FF               	ld 		-1(p1) 												; get the type (array or parenthesis)
(2)   94/    9462 : CE FF               	st 		@-1(p2) 											; push on the stack so we know what type it was for later.
(2)   95/    9464 : (MACRO)             	lpi 	p3,EvaluateExpression-1								; call the expression evaluator recursively.
 AS V1.42 Beta [Bld 102] - source file vtl-2.asm(right_special.asm) - page 22 - 12/27/2015 20:56:40


(2)   95/    9464 : C4 92                       ldi     (EVALUATEEXPRESSION-1) / 256
(2)   95/    9466 : 37                          xpah    P3
(2)   95/    9467 : C4 D0                       ldi     (EVALUATEEXPRESSION-1) & 255
(2)   95/    9469 : 33                          xpal    P3
(2)   96/    946A : 3F                  	xppc 	p3
(2)   97/    946B : C6 03               	ld 		@3(p2) 												; drop the type and result, but they are still physically there.
(2)   98/    946D : 06                  	csa 														; check for error
(2)   99/    946E : 94 E8               	jp 		__CST_Exit 											; if error occurred, then exit 
(2)  100/    9470 : C4 42               	ldi 	ERROR_Bracket 										; set E for missing close bracket error.
(2)  101/    9472 : 01                  	xae
(2)  102/    9473 : 02                  	ccl 														; clear carry , this means error.
(2)  103/    9474 :                     
(2)  104/    9474 : C1 00               	ld 		(p1) 												; get terminating character
(2)  105/    9476 : E4 29               	xri 	')'													; which should be a close bracket
(2)  106/    9478 : 9C DE               	jnz 	__CST_Exit 											; if not, exit with a missing close bracket error.
(2)  107/    947A : C5 01               	ld 		@1(p1) 												; skip over the closing bracket.
(2)  108/    947C :                     
(2)  109/    947C : C2 FF               	ld 		-1(p2) 												; get the operator ( or :
(2)  110/    947E : 01                  	xae 														; save in E
(2)  111/    947F : C2 FD               	ld 		-3(p2) 												; move value to correct position.
(2)  112/    9481 : CA 02               	st 		2(p2)
(2)  113/    9483 : C2 FE               	ld 		-2(p2)
(2)  114/    9485 : CA 03               	st 		3(p2)
(2)  115/    9487 : 40                  	lde 														; get E
(2)  116/    9488 : E4 28               	xri 	'(' 												; is it parenthesised expression
(2)  117/    948A : 98 CB               	jz 		__CST_SCLAndExit 									; if so, exit with E != 0 and CY/L = 1
(2)  118/    948C :                     
(2)  119/    948C :                     ; ****************************************************************************************************************
(2)  120/    948C :                     ;	Now we know we had :<expr>) - so calculate & + <expr> * 2 and read what is there.
(2)  121/    948C :                     ; ****************************************************************************************************************
(2)  122/    948C :                     
(2)  123/    948C : 02                  	ccl 	
(2)  124/    948D : C2 02               	ld 		2(p2) 												; double the offset
(2)  125/    948F : F2 02               	add 	2(p2)
(2)  126/    9491 : CA 02               	st 		2(p2)
(2)  127/    9493 : C2 03               	ld 		3(p2)
(2)  128/    9495 : F2 03               	add 	3(p2)
(2)  129/    9497 : CA 03               	st 		3(p2)
(2)  130/    9499 :                     
(2)  131/    9499 : (MACRO)             	lpi 	p3,Variables+('&' & 0x3F) * 2 						; point P3 to '&'
(2)  131/    9499 : C4 0D                       ldi     (VARIABLES+('&' & 0X3F) * 2) / 256
(2)  131/    949B : 37                          xpah    P3
(2)  131/    949C : C4 4C                       ldi     (VARIABLES+('&' & 0X3F) * 2) & 255
(2)  131/    949E : 33                          xpal    P3
(2)  132/    949F : 02                  	ccl
(2)  133/    94A0 : C2 02               	ld 		2(p2) 												; add &.Low to offset.low -> E
(2)  134/    94A2 : F3 00               	add 	0(p3)
(2)  135/    94A4 : 01                  	xae
(2)  136/    94A5 : C2 03               	ld 		3(p2) 												; add &.High to offset.high -> P3.H
(2)  137/    94A7 : F3 01               	add 	1(p3)
(2)  138/    94A9 : 37                  	xpah 	p3
(2)  139/    94AA : 40                  	lde 														; E->P3.L ; P3 is now & + (offset * 2)
(2)  140/    94AB : 33                  	xpal 	p3
(2)  141/    94AC : C3 00               	ld 		0(p3) 												; access array, store in return 
(2)  142/    94AE : CA 02               	st 		2(p2)
(2)  143/    94B0 : C3 01               	ld 		1(p3)
(2)  144/    94B2 : CA 03               	st 		3(p2)
(2)  145/    94B4 : C4 FF               	ldi 	0xFF 												; set E to non-zero and exit.
(2)  146/    94B6 : 01                  	xae
(2)  147/    94B7 : 90 9E               	jmp 	__CST_SCLAndExit
 AS V1.42 Beta [Bld 102] - source file vtl-2.asm(right_special.asm) - page 23 - 12/27/2015 20:56:40


(2)  148/    94B9 :                     
(1)  212/    94B9 :                     
(1)  213/    94B9 :                     ; TODO List
(1)  214/    94B9 :                     ;	:<expr>)					Array access (relative to '&')
(1)  215/    94B9 :                     ;	?							Write number and/or literal to screen
(1)  216/    94B9 :                     ;	#							Jump to new line
(1)  217/    94B9 :                     ;	) 							Comment
(1)  218/    94B9 :                     ;
(1)  219/    94B9 :                     
(1)  220/    94B9 :                     SpecialsTable:
(1)  221/    94B9 : (MACRO)             	special '$',__ST_CharacterOut 								; $ is write direct to output.
(1)  221/    94B9 : 24                          db              '$'
(1)  221/    94BA : F7 91                       dw              (__ST_CHARACTEROUT)-1
(1)  222/    94BC : (MACRO)             	special '>',__ST_MachineCode 								; > is call machine code.
(1)  222/    94BC : 3E                          db              '>'
(1)  222/    94BD : CE 91                       dw              (__ST_MACHINECODE)-1
(1)  223/    94BF : (MACRO)             	special ')',SkipEndLineNextStatement 						; ) is a comment.
(1)  223/    94BF : 29                          db              ')'
(1)  223/    94C0 : 1B 92                       dw              (SKIPENDLINENEXTSTATEMENT)-1
(1)  224/    94C2 : (MACRO)             	special '&',__ST_ReadOnlyVariable-1							; & is read only.
(1)  224/    94C2 : 26                          db              '&'
(1)  224/    94C3 : C7 91                       dw              (__ST_READONLYVARIABLE-1)-1
(1)  225/    94C5 : 00                  	db 		0 													; end marker.
(1)  226/    94C6 :                     
      51/    94C6 :                     
 AS V1.42 Beta [Bld 102] - source file vtl-2.asm - page 24 - 12/27/2015 20:56:40


  symbol table (* = unused):
  ------------------------

*ARCHITECTURE :  i386-unknown-win32 - | *BIGENDIAN :                      0 - |
*BRANCHEXT :                      0 - | *CASESENSITIVE :                  0 - |
 CHECKEQUALS :                 92B2 C |  CHECKSPECIALTERMS :           93F6 C |
 COMPARELIBRARY :              93C1 C | *CONSTPI :        3.141592653589793 - |
*DATE :                  12/27/2015 - |  ERROR_BRACKET :                 42 - |
 ERROR_DIVIDEZERO :              5A - |  ERROR_OPERATOR :                4F - |
 ERROR_READONLY :                52 - |  ERROR_SYNTAX :                  53 - |
 ERROR_SYNTAXTERM :              54 - |  EVALUATEEXPRESSION :          92D1 C |
 EXECUTENEXTSTATEMENT :        9220 C | *FALSE :                          0 - |
*FULLPMMU :                       1 - |  GETCHAR :                     913B C |
 GETSTRING :                   915F C | *HAS64 :                          1 - |
*HASDSP :                         0 - | *HASFPU :                         0 - |
*HASPMMU :                        0 - | *INEXTMODE :                      0 - |
*INLWORDMODE :                    0 - | *INMAXMODE :                      0 - |
*INSRCMODE :                      0 - | *INSUPMODE :                      0 - |
 ISRUNNING :                    CFF - |  KEYBOARDBUFFER :               E00 - |
 KEYBOARDBUFFERSIZE :            50 - | *LISTON :                         1 - |
*MACEXP :                         1 - | *MOMCPU :                         C - |
*MOMCPUNAME :                 SC/MP - | *NESTMAX :                      100 - |
 OSMATHLIBRARY :                  3 - | *PACKING :                        0 - |
*PADDING :                        1 - |  PRINT :                       907B C |
 RANDOMVARIABLE :                27 - | *RELAXED :                        0 - |
 SCREENCURSOR :                 C80 - |  SCREENMIRROR :                 C00 - |
 SKIPENDLINENEXTSTATEMENT :    921C C |  SPECIALSTABLE :               94B9 C |
 SYSTEMVARIABLES :              D00 - |  TEST :                        9037 C |
*TIME :                    20:56:40 - | *TRUE :                           1 - |
 VARIABLES :                    D00 - | *VERSION :                     142F - |
 WAIT2 :                       921A C |  __CEQ_EXIT :                  92CD C |
 __CEQ_FAIL :                  92C9 C |  __CEQ_SKIPSPACES :            92BE C |
 __CL_CARRYCLEAR :             93E0 C |  __CL_EXITE :                  93EB C |
 __CL_RESULTZERO :             93D0 C |  __CST_ARRAYORPARENTHESIS :    9460 C |
 __CST_EVALUATECONT :          9440 C |  __CST_EXIT :                  9458 C |
 __CST_NOTCHARACTER :          9416 C |  __CST_NOTINPUT :              944A C |
 __CST_RETURNDONE :            9411 C |  __CST_SCLANDEXIT :            9457 C |
 __EE_EXIT :                   9303 C |  __EE_EXIT2 :                  9376 C |
 __EE_EXITSYNTAX :             92FF C |  __EE_FINDNEXTOPERATOR :       938C C |
 __EE_GETNEXTOPERATOR :        9378 C |  __EE_ISVARIABLE :             9332 C |
 __EE_NEXTTERM :               92E1 C |  __EE_NEXTTERM2 :              934C C |
 __EE_NOTCOMPARISON :          9362 C |  __EE_NOTDIVIDE :              936A C |
 __EE_NOTINTEGER :             9319 C |  __EE_PROCESSOPERATOR :        934E C |
 __ENS_CHECKSPECIALS :         9299 C |  __ENS_GETFIRSTCHARACTER :     9259 C |
 __ENS_NOTOGGLEMASK :          9259 C |  __ENS_RANDOMINITIALISED :     9245 C |
 __ENS_SEARCHSPECIALS :        929F C |  __ENS_STANDARDASSIGNMENT :    9267 C |
 __ENS_STOP :                  9210 C |  __GCNOTLOWER [GETCHAR] :      915A C |
 __GCWAITKEY [GETCHAR] :       9140 C |  __GCWAITRELEASE [GETCHAR] :   9148 C |
 __GSBACKSPACE [GETSTRING] :   91BA C |  __GSCONTROLKEY [GETSTRING] :  919D C |
 __GSLOOP [GETSTRING] :        916D C |  __PRCLEARFROMMOVETO [PRINT] : 911B C |
 __PRCLEARLOOP [PRINT] :       911D C |  __PRCLEARSCREEN [PRINT] :     9119 C |
 __PRCOPY [PRINT] :            9127 C |  __PREXIT [PRINT] :            90DE C |
 __PREXITNOCHECK [PRINT] :     90E2 C |  __PRISCONTROLCHAR [PRINT] :   90F0 C |
 __PRISRETURN [PRINT] :        9110 C |  __PRNOTASCII [PRINT] :        90B8 C |
 __PRPRINTCHARACTERA [PRINT] : 909C C |  __PRPRINTSTRING [PRINT] :     908A C |
 __PRSCROLLLOOP [PRINT] :      90D0 C |  __PRUPDATECURSOR [PRINT] :    90C1 C |
 __STCHO_END :                 920B C |  __STMAC_END :                 91F6 C |
 __STROV_END :                 91CD C |  __ST_CHARACTEROUT :           91F8 C |
 __ST_MACHINECODE :            91CF C |  __ST_READONLYVARIABLE :       91C9 C |

 AS V1.42 Beta [Bld 102] - source file vtl-2.asm - page 25 - 12/27/2015 20:56:40


    112 symbols
     28 unused symbols

 AS V1.42 Beta [Bld 102] - source file vtl-2.asm - page 26 - 12/27/2015 20:56:40


  defined macros:
  ---------------

CODE                                  | LPI                                  
PULLA                                 | PULLE                                
PULLP                                 | PUSHA                                
PUSHE                                 | PUSHP                                
SETV                                  | SPECIAL                              

     10 macros

 AS V1.42 Beta [Bld 102] - source file vtl-2.asm - page 27 - 12/27/2015 20:56:40


  codepages:
  ----------

STANDARD (0 changed characters)


0.01 seconds assembly time

   1139 lines source file
   1341 lines incl. macro expansions
      2 passes
      0 errors
      0 warnings
