 AS V1.42 Beta [Bld 102] - source file vtl-2.asm - page 1 - 12/14/2015 17:58:16


       1/       0 :                     ; ****************************************************************************************************************
       2/       0 :                     ; ****************************************************************************************************************
       3/       0 :                     ;
       4/       0 :                     ;												VTL-2 ROM Image
       5/       0 :                     ;
       6/       0 :                     ; ****************************************************************************************************************
       7/       0 :                     ; ****************************************************************************************************************
       8/       0 :                     
       9/       0 :                     	cpu 	sc/mp
      10/       0 :                     
      11/       0 :                     	include source\memorymacros.asm 							; Memory allocation and Macro definition.	
(1)    1/       0 :                     ; ****************************************************************************************************************
(1)    2/       0 :                     ; ****************************************************************************************************************
(1)    3/       0 :                     ;
(1)    4/       0 :                     ;										Memory and Macro Allocation.
(1)    5/       0 :                     ;	
(1)    6/       0 :                     ; ****************************************************************************************************************
(1)    7/       0 :                     ; ****************************************************************************************************************
(1)    8/       0 :                     
(1)    9/       0 : =0x3                OSMathLibrary = 0x0003 											; the Maths library is here.
(1)   10/       0 :                     
(1)   11/       0 :                     ; ****************************************************************************************************************
(1)   12/       0 :                     ;												 Memory Allocation
(1)   13/       0 :                     ; ****************************************************************************************************************
(1)   14/       0 :                     
(1)   15/       0 : =0xC00              ScreenMirror = 0xC00 											; Screen mirror, 128 bytes, 256 byte page boundary.
(1)   16/       0 : =0xC80              ScreenCursor = ScreenMirror+0x80  								; Position on that screen (00..7F)
(1)   17/       0 :                     
(1)   18/       0 : =0xC90              SystemVariables = 0xC90 										; System variables start here.
(1)   19/       0 :                     
(1)   20/       0 : =0xC90              Variables = SystemVariables 									; 64 x 2 byte system variables, 6 bit ASCII (@,A,B,C...)
(1)   21/       0 :                     
(1)   22/       0 : =0xD10              KeyboardBuffer = SystemVariables+128							; Keyboard buffer.
(1)   23/       0 : =0x50               KeyboardBufferSize = 80
(1)   24/       0 :                     
(1)   25/       0 : =0xC8F              IsRunningProgram = SystemVariables-1 							; Non zero if in 'run' mode.
(1)   26/       0 : =0xC8D              ProgramBase = SystemVariables-3 								; (Low,High) Base of Program
(1)   27/       0 :                     
(1)   28/       0 :                     ; ****************************************************************************************************************
(1)   29/       0 :                     ;														Macros
(1)   30/       0 :                     ; ****************************************************************************************************************
(1)   31/       0 :                     
(1)   32/       0 :                     lpi	macro	ptr,addr											; load pointer register with constant
(1)   33/       0 :                     	ldi 	(addr) / 256
(1)   34/       0 :                     	xpah 	ptr
(1)   35/       0 :                     	ldi 	(addr) & 255
(1)   36/       0 :                     	xpal 	ptr
(1)   37/       0 :                     	endm
(1)   38/       0 :                     
(1)   39/       0 :                     pushp macro ptr 												; push pointer register on stack
(1)   40/       0 :                     	xpah 	ptr
(1)   41/       0 :                     	st 		@-1(p2)
(1)   42/       0 :                     	xpal 	ptr
(1)   43/       0 :                     	st 		@-1(p2)
(1)   44/       0 :                     	endm
(1)   45/       0 :                     
(1)   46/       0 :                     pullp macro ptr 												; pull pointer register off stack
(1)   47/       0 :                     	ld 		@1(p2)
(1)   48/       0 :                     	xpal 	ptr
(1)   49/       0 :                     	ld 		@1(p2)
 AS V1.42 Beta [Bld 102] - source file vtl-2.asm(memorymacros.asm) - page 2 - 12/14/2015 17:58:16


(1)   50/       0 :                     	xpah 	ptr
(1)   51/       0 :                     	endm
(1)   52/       0 :                     
(1)   53/       0 :                     pushe macro 													; push E on stack
(1)   54/       0 :                     	lde
(1)   55/       0 :                     	st 		@-1(p2)
(1)   56/       0 :                     	endm
(1)   57/       0 :                     
(1)   58/       0 :                     pulle macro 													; pull E off stack
(1)   59/       0 :                     	ld 		@1(p2)
(1)   60/       0 :                     	xae
(1)   61/       0 :                     	endm
(1)   62/       0 :                     
(1)   63/       0 :                     pusha macro 													; push A on stack
(1)   64/       0 :                     	st 		@-1(p2)
(1)   65/       0 :                     	endm
(1)   66/       0 :                     
(1)   67/       0 :                     pulla macro
(1)   68/       0 :                     	ld 		@1(p2)
(1)   69/       0 :                     	endm
(1)   70/       0 :                     
(1)   71/       0 :                     setv macro var,value											; a debugging macro, to set a variable value.
(1)   72/       0 :                     	ldi 	value & 255											; P3 points to variables
(1)   73/       0 :                     	st 		((var & 0x3F)*2)(p3)
(1)   74/       0 :                     	ldi 	value/256
(1)   75/       0 :                     	st 		((var & 0x3F)*2+1)(p3)
(1)   76/       0 :                     	endm
(1)   77/       0 :                     
(1)   78/       0 :                     
(1)   79/       0 :                     vtl macro lineNo,code 											; a debugging macro, which fakes up a line of code.
(1)   80/       0 :                     	db 		strlen(code)+4
(1)   81/       0 :                     	dw 		lineNo
(1)   82/       0 :                     	db 		code,0
(1)   83/       0 :                     	endm
(1)   84/       0 :                     
      12/       0 :                     
      13/       0 :                     ; ****************************************************************************************************************
      14/       0 :                     ;													Main Program
      15/       0 :                     ; ****************************************************************************************************************
      16/       0 :                     
      17/    9000 :                     	org 	0x9000 												; the ROM starts here
      18/    9000 :                     
      19/    9000 : 68                  	db 		0x68												; this makes it boot straight into this ROM.
      20/    9001 :                     
      21/    9001 : (MACRO)             	lpi 	p3,Variables
      21/    9001 : C4 0C                       ldi     (VARIABLES) / 256
      21/    9003 : 37                          xpah    P3
      21/    9004 : C4 90                       ldi     (VARIABLES) & 255
      21/    9006 : 33                          xpal    P3
      22/    9007 : (MACRO)             	setv 	'&',0xE03 											; set array pointer/top of memory fudge.
      22/    9007 : C4 03                       ldi     0XE03 & 255                                                                                     ; P3 points to variables
      22/    9009 : CB 4C                       st              (('&' & 0x3F)*2)(p3)
      22/    900B : C4 0E                       ldi     0XE03/256
      22/    900D : CB 4D                       st              (('&' & 0x3F)*2+1)(p3)
      23/    900F : C4 FF               	ldi 	0xFF 												; sets the running flag .
      24/    9011 : CB FF               	st 		-1(p3)
      25/    9013 : (MACRO)             	lpi 	p2,0xFF8											; set up stack
      25/    9013 : C4 0F                       ldi     (0XFF8) / 256
      25/    9015 : 36                          xpah    P2
      25/    9016 : C4 F8                       ldi     (0XFF8) & 255
 AS V1.42 Beta [Bld 102] - source file vtl-2.asm - page 3 - 12/14/2015 17:58:16


      25/    9018 : 32                          xpal    P2
      26/    9019 :                     	
      27/    9019 :                     	; TODO: Proper stack detection.
      28/    9019 :                     	; TODO: Proper program initialisation.
      29/    9019 : (MACRO)             	lpi 	p1,StartProgram 									; internal code for testing
      29/    9019 : C4 95                       ldi     (STARTPROGRAM) / 256
      29/    901B : 35                          xpah    P1
      29/    901C : C4 74                       ldi     (STARTPROGRAM) & 255
      29/    901E : 31                          xpal    P1
      30/    901F :                     Next:
      31/    901F : (MACRO)             	lpi 	p3,ExecuteStatement-1 								; execute a statement
      31/    901F : C4 91                       ldi     (EXECUTESTATEMENT-1) / 256
      31/    9021 : 37                          xpah    P3
      31/    9022 : C4 A0                       ldi     (EXECUTESTATEMENT-1) & 255
      31/    9024 : 33                          xpal    P3
      32/    9025 : 3F                  	xppc 	p3
      33/    9026 : 01                  	xae
      34/    9027 : 06                  	csa
      35/    9028 : 94 0A               	jp 		stop
      36/    902A : (MACRO)             	lpi 	p3,IsRunningProgram
      36/    902A : C4 0C                       ldi     (ISRUNNINGPROGRAM) / 256
      36/    902C : 37                          xpah    P3
      36/    902D : C4 8F                       ldi     (ISRUNNINGPROGRAM) & 255
      36/    902F : 33                          xpal    P3
      37/    9030 : C3 00               	ld 		(p3)
      38/    9032 : 9C EB               	jnz		Next
      39/    9034 : 90 FE               stop:jmp 	stop
      40/    9036 :                     
      41/    9036 :                     	include source\screen.asm 									; screen I/O stuff.
(1)    1/    9036 :                     ; ****************************************************************************************************************
(1)    2/    9036 :                     ; ****************************************************************************************************************
(1)    3/    9036 :                     ;
(1)    4/    9036 :                     ;											Screen I/O, VTL-2 ROM
(1)    5/    9036 :                     ;											=====================
(1)    6/    9036 :                     ;
(1)    7/    9036 :                     ;	Provides Character and String Input/Output functionality.
(1)    8/    9036 :                     ;
(1)    9/    9036 :                     ; ****************************************************************************************************************
(1)   10/    9036 :                     ; ****************************************************************************************************************
(1)   11/    9036 :                     
(1)   12/    9036 :                     ; ****************************************************************************************************************
(1)   13/    9036 :                     ; ****************************************************************************************************************
(1)   14/    9036 :                     ;
(1)   15/    9036 :                     ;	Print routine. Prints either character in A, or ASCIIZ string at P1 (if A is zero). Preserves all registers
(1)   16/    9036 :                     ;	except if printing string, P1 points to the character after the NULL terminator.
(1)   17/    9036 :                     ;
(1)   18/    9036 :                     ;	Scrolls automatically. Understands character codes 32-255, 8 (Backspace) 12 (Clear Screen) 13 (Carriage
(1)   19/    9036 :                     ;	Return). Others are currently ignored (except 0, see above). Note L/C values (97....) display those characters
(1)   20/    9036 :                     ;	in the ROM font *not* lower case :)
(1)   21/    9036 :                     ;
(1)   22/    9036 :                     ; ****************************************************************************************************************
(1)   23/    9036 :                     ; ****************************************************************************************************************
(1)   24/    9036 :                     
(1)   25/    9036 :                     Print:
(1)   26/    9036 :                     	section 	Print
(1)   27/    9036 :                     
(1)   28/    9036 : (MACRO)             	pusha														; push registers on stack
(1)   28/    9036 : CE FF                       st              @-1(p2)
(1)   29/    9038 : (MACRO)             	pushp 	p1
(1)   29/    9038 : 35                          xpah    P1
 AS V1.42 Beta [Bld 102] - source file vtl-2.asm(screen.asm) - page 4 - 12/14/2015 17:58:16


(1)   29/    9039 : CE FF                       st              @-1(p2)
(1)   29/    903B : 31                          xpal    P1
(1)   29/    903C : CE FF                       st              @-1(p2)
(1)   30/    903E : (MACRO)             	pushe
(1)   30/    903E : 40                          lde
(1)   30/    903F : CE FF                       st              @-1(p2)
(1)   31/    9041 :                     
(1)   32/    9041 : C2 03               	ld 		3(p2) 												; read character 
(1)   33/    9043 : 9C 12               	jnz 	__PRPrintCharacterA 								; if non zero print it on its own.
(1)   34/    9045 :                     
(1)   35/    9045 :                     __PRPrintString:
(1)   36/    9045 : C2 01               	ld 		1(p2) 												; restore original P1
(1)   37/    9047 : 31                  	xpal 	p1
(1)   38/    9048 : C2 02               	ld 		2(p2)
(1)   39/    904A : 35                  	xpah 	p1 													; read character at P1.
(1)   40/    904B : C5 01               	ld 		@1(p1)
(1)   41/    904D : 01                  	xae 														; save in E.
(1)   42/    904E : 35                  	xpah 	p1 													; write P1 back.
(1)   43/    904F : CA 02               	st 		2(p2)
(1)   44/    9051 : 31                  	xpal 	p1
(1)   45/    9052 : CA 01               	st 		1(p2)
(1)   46/    9054 : 40                  	lde 														; get character from E
(1)   47/    9055 : 98 46               	jz 		__PRExitNoCheck 									; exit without loop check.
(1)   48/    9057 :                     ;
(1)   49/    9057 :                     ;	Print character in A now ; throughout it is stored in E.
(1)   50/    9057 :                     ;
(1)   51/    9057 :                     __PRPrintCharacterA:
(1)   52/    9057 : 01                  	xae 														; save character in E.
(1)   53/    9058 :                     ;
(1)   54/    9058 :                     ;	Read cursor and set P1 to that address
(1)   55/    9058 :                     ;
(1)   56/    9058 : C4 0C               	ldi 	ScreenCursor/256 									; set P1 to point to screen cursor
(1)   57/    905A : 35                  	xpah 	p1
(1)   58/    905B : C4 80               	ldi 	ScreenCursor&255
(1)   59/    905D : 31                  	xpal 	p1
(1)   60/    905E : C1 00               	ld 		0(p1) 												; put cursor position in P1.L
(1)   61/    9060 : 31                  	xpal 	p1
(1)   62/    9061 :                     ;
(1)   63/    9061 :                     ;	Check for control
(1)   64/    9061 :                     ;
(1)   65/    9061 : 40                  	lde 														; look at character
(1)   66/    9062 : D4 E0               	ani 	0xE0 												; is it code 0-31
(1)   67/    9064 : 98 45               	jz 		__PRIsControlChar
(1)   68/    9066 :                     ;
(1)   69/    9066 :                     ;	Print non-control
(1)   70/    9066 :                     ;
(1)   71/    9066 : 40                  	lde 														; read character
(1)   72/    9067 : 03                  	scl 														; CY/L clear if < 96
(1)   73/    9068 : FC 60               	cai 	96 
(1)   74/    906A : 06                  	csa 	 	 												; skip if carry set
(1)   75/    906B : E4 80               	xri 	0x80													
(1)   76/    906D : 94 04               	jp 		__PRNotASCII
(1)   77/    906F : 40                  	lde 														; if ASCII make 6 bit.
(1)   78/    9070 : D4 3F               	ani 	0x3F
(1)   79/    9072 : 01                  	xae
(1)   80/    9073 :                     __PRNotASCII:
(1)   81/    9073 : 40                  	lde 														; get character.
(1)   82/    9074 : C9 00               	st 		(p1) 												; save in shadow memory
(1)   83/    9076 : 35                  	xpah 	p1 													; switch to VRAM, preserving A.
(1)   84/    9077 : C4 00               	ldi 	0 													
 AS V1.42 Beta [Bld 102] - source file vtl-2.asm(screen.asm) - page 5 - 12/14/2015 17:58:16


(1)   85/    9079 : 35                  	xpah 	p1
(1)   86/    907A : CD 01               	st 		@1(p1) 												; save in screen memory, advance write position.
(1)   87/    907C :                     ;
(1)   88/    907C :                     ;	Write cursor position back from P1.L
(1)   89/    907C :                     ;
(1)   90/    907C :                     __PRUpdateCursor:
(1)   91/    907C : C4 0C               	ldi		ScreenCursor / 256 									; set P1 to point to screen cursor, restore position to P1
(1)   92/    907E : 35                  	xpah 	p1
(1)   93/    907F : C4 80               	ldi 	ScreenCursor & 255 
(1)   94/    9081 : 31                  	xpal 	p1 													; after this, adjusted cursor position is in AC.
(1)   95/    9082 : C9 00               	st 		(p1) 												; write back in cursor position
(1)   96/    9084 : 94 13               	jp 		__PRExit 											; if position is off the bottom then scroll.
(1)   97/    9086 :                     ;
(1)   98/    9086 :                     ;	Scroll display
(1)   99/    9086 :                     ;
(1)  100/    9086 : C4 0C               	ldi 	(ScreenMirror+16) / 256 							; point P1 to 2nd line.
(1)  101/    9088 : 35                  	xpah 	p1
(1)  102/    9089 : C4 10               	ldi 	(ScreenMirror+16) & 255
(1)  103/    908B :                     __PRScrollLoop:
(1)  104/    908B : 31                  	xpal 	p1
(1)  105/    908C : C1 00               	ld 		0(p1) 												; copy char to previous line
(1)  106/    908E : C9 F0               	st 		-16(p1)
(1)  107/    9090 : C5 01               	ld 		@1(p1) 												; bump pointer.
(1)  108/    9092 : 31                  	xpal 	p1
(1)  109/    9093 : 94 F6               	jp 		__PRScrollLoop
(1)  110/    9095 : C4 70               	ldi 	128-16 												; clear from and move to last line
(1)  111/    9097 : 90 3D               	jmp 	__PRClearFromMoveTo
(1)  112/    9099 :                     ;
(1)  113/    9099 :                     ;	Exit screen drawing routine.
(1)  114/    9099 :                     ;
(1)  115/    9099 :                     __PRExit:
(1)  116/    9099 : C2 03               	ld 		3(p2) 												; if character was zero, loop
(1)  117/    909B : 98 A8               	jz 		__PRPrintString 									; back as printing string at P1.
(1)  118/    909D :                     __PRExitNoCheck:
(1)  119/    909D : (MACRO)             	pulle 														; restore registers
(1)  119/    909D : C6 01                       ld              @1(p2)
(1)  119/    909F : 01                          xae
(1)  120/    90A0 : (MACRO)             	pullp 	p1
(1)  120/    90A0 : C6 01                       ld              @1(p2)
(1)  120/    90A2 : 31                          xpal    P1
(1)  120/    90A3 : C6 01                       ld              @1(p2)
(1)  120/    90A5 : 35                          xpah    P1
(1)  121/    90A6 : (MACRO)             	pulla
(1)  121/    90A6 : C6 01                       ld              @1(p2)
(1)  122/    90A8 : 3F                  	xppc 	p3 													; return
(1)  123/    90A9 : 90 8B               	jmp 	Print 												; make re-entrant.
(1)  124/    90AB :                     ;
(1)  125/    90AB :                     ;	Check for supported control characters 8 (Backspace) 12 (Clear) 13 (Carriage Return)
(1)  126/    90AB :                     ;
(1)  127/    90AB :                     __PRIsControlChar:
(1)  128/    90AB : 40                  	lde 														; restore character.
(1)  129/    90AC : E4 0D               	xri 	13 													; carriage return ? (13)
(1)  130/    90AE : 98 1B               	jz 		__PRIsReturn
(1)  131/    90B0 : E4 01               	xri 	13!12 												; form feed ? (12)
(1)  132/    90B2 : 98 20               	jz 		__PRClearScreen
(1)  133/    90B4 : E4 04               	xri 	12!8 												; backspace ? (8)
(1)  134/    90B6 : 9C E1               	jnz 	__PRExit 
(1)  135/    90B8 :                     ;
(1)  136/    90B8 :                     ;	Handle backspace (8)
(1)  137/    90B8 :                     ;
 AS V1.42 Beta [Bld 102] - source file vtl-2.asm(screen.asm) - page 6 - 12/14/2015 17:58:16


(1)  138/    90B8 : 31                  	xpal 	p1 													; check cursor position is zero
(1)  139/    90B9 : 98 DE               	jz 		__PRExit 											; if it is, cannot backspace so exit.
(1)  140/    90BB : 31                  	xpal 	p1  												; put it back
(1)  141/    90BC : C5 FF               	ld 		@-1(p1)												; move it back one
(1)  142/    90BE : C4 20               	ldi 	' '	 												; erase in shadow
(1)  143/    90C0 : C9 00               	st 		(p1)
(1)  144/    90C2 : C4 00               	ldi 	0 													; point P1 to VRAM
(1)  145/    90C4 : 35                  	xpah 	p1
(1)  146/    90C5 : C4 20               	ldi 	' '													; erase in VRAM
(1)  147/    90C7 : C9 00               	st 		(p1)
(1)  148/    90C9 : 90 B1               	jmp 	__PRUpdateCursor 									; and exit
(1)  149/    90CB :                     ;
(1)  150/    90CB :                     ;	Handle carriage return (13)
(1)  151/    90CB :                     ;
(1)  152/    90CB :                     __PRIsReturn:
(1)  153/    90CB : 31                  	xpal 	p1 													; cursor position in A
(1)  154/    90CC : D4 F0               	ani 	0xF0 												; start of current line
(1)  155/    90CE : 02                  	ccl 														; down one line
(1)  156/    90CF : F4 10               	adi 	0x10 	
(1)  157/    90D1 : 31                  	xpal 	p1 													; put it back in P1.
(1)  158/    90D2 : 90 A8               	jmp 	__PRUpdateCursor
(1)  159/    90D4 :                     ;
(1)  160/    90D4 :                     ;	Handle clear screen (12)
(1)  161/    90D4 :                     ;
(1)  162/    90D4 :                     __PRClearScreen:
(1)  163/    90D4 : C4 00               	ldi 	0 													; clear shadow memory from here.
(1)  164/    90D6 :                     ;
(1)  165/    90D6 :                     ;	From position A, clear the memory in the shadow screen to the end, copy the shadow screen to VRAM
(1)  166/    90D6 :                     ;	then use position A as the new cursor position.
(1)  167/    90D6 :                     ;
(1)  168/    90D6 :                     __PRClearFromMoveTo:
(1)  169/    90D6 : CE FF               	st 		@-1(p2) 											; save this position, the cursor goes here.
(1)  170/    90D8 :                     __PRClearLoop:
(1)  171/    90D8 : 31                  	xpal 	p1 													; save position in P1.
(1)  172/    90D9 : C4 20               	ldi 	' '													; write space there.
(1)  173/    90DB : CD 01               	st 		@1(p1)
(1)  174/    90DD : 31                  	xpal 	p1
(1)  175/    90DE : 94 F8               	jp 		__PRClearLoop 										; until reached shadow memory start.
(1)  176/    90E0 : C4 00               	ldi 	0 													; now copy shadow memory to screen memory.
(1)  177/    90E2 :                     __PRCopy:
(1)  178/    90E2 : 31                  	xpal 	p1 													; set up P1.L
(1)  179/    90E3 : C4 0C               	ldi 	ScreenMirror/256 									; point to shadow memory.
(1)  180/    90E5 : 35                  	xpah 	p1 													
(1)  181/    90E6 : C1 00               	ld 		(p1) 												; read shadow memory
(1)  182/    90E8 : 35                  	xpah 	p1 													; zero P1.H preserving A
(1)  183/    90E9 : C4 00               	ldi 	0
(1)  184/    90EB : 35                  	xpah 	p1
(1)  185/    90EC : CD 01               	st 		@1(p1) 												; save and increment p1
(1)  186/    90EE : 31                  	xpal 	p1 
(1)  187/    90EF : 94 F1               	jp 		__PRCopy 											; keep doing till all copied.
(1)  188/    90F1 : C6 01               	ld 		@1(p2) 												; read cursor position
(1)  189/    90F3 : 31                  	xpal 	p1 													; put in P1.L
(1)  190/    90F4 : 90 86               	jmp 	__PRUpdateCursor
(1)  191/    90F6 :                     
(1)  192/    90F6 :                     	endsection 	Print
(1)  193/    90F6 :                     
(1)  194/    90F6 :                     ; ****************************************************************************************************************
(1)  195/    90F6 :                     ; ****************************************************************************************************************
(1)  196/    90F6 :                     ;
(1)  197/    90F6 :                     ;		Input a single character into A. Case is converted to Upper. All registers preserved except A
 AS V1.42 Beta [Bld 102] - source file vtl-2.asm(screen.asm) - page 7 - 12/14/2015 17:58:16


(1)  198/    90F6 :                     ;
(1)  199/    90F6 :                     ; ****************************************************************************************************************
(1)  200/    90F6 :                     ; ****************************************************************************************************************
(1)  201/    90F6 :                     
(1)  202/    90F6 :                     GetChar:
(1)  203/    90F6 :                     	section 	GetChar
(1)  204/    90F6 : C4 08               	ldi 	0x8 												; set P1 to $8xx, and save P1.H
(1)  205/    90F8 : 35                  	xpah 	p1
(1)  206/    90F9 : CE FF               	st 		@-1(p2)
(1)  207/    90FB :                     __GCWaitKey: 													; wait for key press
(1)  208/    90FB : C1 00               	ld 		0(p1)
(1)  209/    90FD : 94 FC               	jp 		__GCWaitKey
(1)  210/    90FF : D4 7F               	ani	 	0x7F 												; throw away the upper bit.
(1)  211/    9101 : CA FF               	st 		-1(p2) 												; save it below stack
(1)  212/    9103 :                     __GCWaitRelease:
(1)  213/    9103 : C1 00               	ld 		0(p1) 												; wait for release
(1)  214/    9105 : D4 80               	ani 	0x80
(1)  215/    9107 : 9C FA               	jnz 	__GCWaitRelease
(1)  216/    9109 : C6 01               	ld 		@1(p2) 												; restore P1.H
(1)  217/    910B : 35                  	xpah 	p1
(1)  218/    910C : C2 FE               	ld 		-2(p2) 												; restore saved value
(1)  219/    910E : 02                  	ccl
(1)  220/    910F : F4 20               	adi 	0x20												; will make lower case -ve
(1)  221/    9111 : 94 02               	jp 		__GCNotLower
(1)  222/    9113 : FC 20               	cai 	0x20 												; capitalise
(1)  223/    9115 :                     __GCNotLower:
(1)  224/    9115 : F4 E0               	adi 	0xE0 												; fix up.
(1)  225/    9117 : 3F                  	xppc 	p3 													; return
(1)  226/    9118 : 90 DC               	jmp 	GetChar 											; make re-entrant
(1)  227/    911A :                     	endsection 	GetChar
(1)  228/    911A :                     
(1)  229/    911A :                     ; ****************************************************************************************************************
(1)  230/    911A :                     ; ****************************************************************************************************************
(1)  231/    911A :                     ;
(1)  232/    911A :                     ;			Read an ASCIIZ string from keyboard into P1 of length A maximum (excludes NULL terminator)
(1)  233/    911A :                     ;
(1)  234/    911A :                     ; ****************************************************************************************************************
(1)  235/    911A :                     ; ****************************************************************************************************************
(1)  236/    911A :                     
(1)  237/    911A :                     GetString:
(1)  238/    911A :                     	section GetString
(1)  239/    911A : (MACRO)             	pusha 														; save A,P3,E
(1)  239/    911A : CE FF                       st              @-1(p2)
(1)  240/    911C : (MACRO)             	pushp 	p3
(1)  240/    911C : 37                          xpah    P3
(1)  240/    911D : CE FF                       st              @-1(p2)
(1)  240/    911F : 33                          xpal    P3
(1)  240/    9120 : CE FF                       st              @-1(p2)
(1)  241/    9122 : (MACRO)             	pushe 
(1)  241/    9122 : 40                          lde
(1)  241/    9123 : CE FF                       st              @-1(p2)
(1)  242/    9125 : C4 00               	ldi 	0 													; set E (current position) to A.
(1)  243/    9127 : 01                  	xae
(1)  244/    9128 :                     __GSLoop:
(1)  245/    9128 : (MACRO)             	lpi 	p3,Print-1 											; print the prompt (half coloured square)
(1)  245/    9128 : C4 90                       ldi     (PRINT-1) / 256
(1)  245/    912A : 37                          xpah    P3
(1)  245/    912B : C4 35                       ldi     (PRINT-1) & 255
(1)  245/    912D : 33                          xpal    P3
(1)  246/    912E : C4 9B               	ldi 	155
 AS V1.42 Beta [Bld 102] - source file vtl-2.asm(screen.asm) - page 8 - 12/14/2015 17:58:16


(1)  247/    9130 : 3F                  	xppc 	p3
(1)  248/    9131 : (MACRO)             	lpi 	p3,GetChar-1 										; get a character
(1)  248/    9131 : C4 90                       ldi     (GETCHAR-1) / 256
(1)  248/    9133 : 37                          xpah    P3
(1)  248/    9134 : C4 F5                       ldi     (GETCHAR-1) & 255
(1)  248/    9136 : 33                          xpal    P3
(1)  249/    9137 : 3F                  	xppc 	p3
(1)  250/    9138 : C9 80               	st 		-0x80(p1) 											; save it in the current position.
(1)  251/    913A : (MACRO)             	lpi 	p3,Print-1 											; erase the prompt with backspace.
(1)  251/    913A : C4 90                       ldi     (PRINT-1) / 256
(1)  251/    913C : 37                          xpah    P3
(1)  251/    913D : C4 35                       ldi     (PRINT-1) & 255
(1)  251/    913F : 33                          xpal    P3
(1)  252/    9140 : C4 08               	ldi 	8
(1)  253/    9142 : 3F                  	xppc 	p3
(1)  254/    9143 : C1 80               	ld 		-0x80(p1) 											; re-read character
(1)  255/    9145 : D4 E0               	ani 	0xE0 												; check if control key.
(1)  256/    9147 : 98 0F               	jz 		__GSControlKey 
(1)  257/    9149 : 40                  	lde 														; get current position.
(1)  258/    914A : E2 03               	xor 	3(p2) 												; reached maximum length of buffer ?
(1)  259/    914C : 98 DA               	jz 		__GSLoop 											; if so, ignore the key and go round again.
(1)  260/    914E : C1 80               	ld 		-0x80(p1) 											; get character and print it
(1)  261/    9150 : 3F                  	xppc 	p3
(1)  262/    9151 : C4 01               	ldi 	1 													; increment E
(1)  263/    9153 : 02                  	ccl
(1)  264/    9154 : 70                  	ade
(1)  265/    9155 : 01                  	xae
(1)  266/    9156 : 90 D0               	jmp 	__GSLoop 											; and go round again.
(1)  267/    9158 :                     ;
(1)  268/    9158 :                     ;	Handle control keys (0x00-0x1F)
(1)  269/    9158 :                     ;
(1)  270/    9158 :                     __GSControlKey:
(1)  271/    9158 : C1 80               	ld 		-0x80(p1) 											; get typed in key
(1)  272/    915A : E4 08               	xri 	8 													; check for backspace.
(1)  273/    915C : 98 17               	jz 		__GSBackspace 			
(1)  274/    915E : E4 05               	xri 	8!13 												; check for CR
(1)  275/    9160 : 9C C6               	jnz 	__GSLoop 											; if not, ignore the key.
(1)  276/    9162 :                     ;
(1)  277/    9162 :                     ;	Carriage Return, ending input.
(1)  278/    9162 :                     ;
(1)  279/    9162 : C9 80               	st 		-0x80(p1) 											; replace the CR written with NULL terminator.
(1)  280/    9164 : C4 0D               	ldi 	13 													; print CR
(1)  281/    9166 : 3F                  	xppc 	p3
(1)  282/    9167 : (MACRO)             	pulle 														; restore E,P3,A
(1)  282/    9167 : C6 01                       ld              @1(p2)
(1)  282/    9169 : 01                          xae
(1)  283/    916A : (MACRO)             	pullp	p3
(1)  283/    916A : C6 01                       ld              @1(p2)
(1)  283/    916C : 33                          xpal    P3
(1)  283/    916D : C6 01                       ld              @1(p2)
(1)  283/    916F : 37                          xpah    P3
(1)  284/    9170 : (MACRO)             	pulla
(1)  284/    9170 : C6 01                       ld              @1(p2)
(1)  285/    9172 : 3F                  	xppc 	p3 													; return
(1)  286/    9173 : 90 A5               	jmp 	GetString 											; make re-entrant (probably unneccessary !!)
(1)  287/    9175 :                     ;
(1)  288/    9175 :                     ;	Backspace entered
(1)  289/    9175 :                     ;
(1)  290/    9175 :                     __GSBackspace
(1)  291/    9175 : 40                  	lde 														; if E = 0 we can't backspace any further.
 AS V1.42 Beta [Bld 102] - source file vtl-2.asm(screen.asm) - page 9 - 12/14/2015 17:58:16


(1)  292/    9176 : 98 B0               	jz 		__GSLoop
(1)  293/    9178 : C4 08               	ldi 	8 													; backspace on screen
(1)  294/    917A : 3F                  	xppc 	p3
(1)  295/    917B : C4 FF               	ldi 	0xFF 												; decrement E
(1)  296/    917D : 02                  	ccl
(1)  297/    917E : 70                  	ade
(1)  298/    917F : 01                  	xae
(1)  299/    9180 : 90 A6               	jmp 	__GSLoop 											; and go round again.
(1)  300/    9182 :                     
(1)  301/    9182 :                     	endsection GetString
(1)  302/    9182 :                     
      42/    9182 :                     	include source\statement.asm 								; assignment statement (e.g. LHS)
(1)    1/    9182 :                     ; ****************************************************************************************************************
(1)    2/    9182 :                     ; ****************************************************************************************************************
(1)    3/    9182 :                     ;
(1)    4/    9182 :                     ;												Statement Processing
(1)    5/    9182 :                     ;
(1)    6/    9182 :                     ; ****************************************************************************************************************
(1)    7/    9182 :                     ; ****************************************************************************************************************
(1)    8/    9182 :                     
(1)    9/    9182 :                     ; ****************************************************************************************************************
(1)   10/    9182 :                     ;
(1)   11/    9182 :                     ;	Execute current line. P1 points to <Total Length>,<Line# Low>,<Line# High> <Text> ....,0
(1)   12/    9182 :                     ;
(1)   13/    9182 :                     ;	Returns CY/L = 1 okay, CY/L = 0 Error, code in 'A'. On exit P1 points to the next line, if this is
(1)   14/    9182 :                     ;	at the top of memory the program is automatically stopped.
(1)   15/    9182 :                     ;
(1)   16/    9182 :                     ;	# [35]	if non zero, save current line number + 1 in ! and find line, stopping if too high, in run mode otherwise.
(1)   17/    9182 :                     ; 	? [63]	Print string constants, numbers
(1)   18/    9182 :                     ;	$ [36]	Print single characters
(1)   19/    9182 :                     ;	& [38]	First free program byte, when set does a "NEW", stop always.
(1)   20/    9182 :                     ;	: [58]	Array update :<expr>) =
(1)   21/    9182 :                     ;	> [62]	Execute program at RHS (machine code)
(1)   22/    9182 :                     ;
(1)   23/    9182 :                     ;	Handle NULL/Comment lines seperately.
(1)   24/    9182 :                     ;	
(1)   25/    9182 :                     ;	Random Number processing is done on every execution.
(1)   26/    9182 :                     ;
(1)   27/    9182 :                     ; ****************************************************************************************************************
(1)   28/    9182 :                     
(1)   29/    9182 :                     ;
(1)   30/    9182 :                     ;	Find the next line and then exit.
(1)   31/    9182 :                     ;
(1)   32/    9182 :                     __EX_EndLineAndExit:
(1)   33/    9182 : C5 01               	ld 		@1(p1) 												; read and bump
(1)   34/    9184 : 9C FC               	jnz 	__EX_EndLineAndExit
(1)   35/    9186 :                     ;
(1)   36/    9186 :                     ;	Come here if P1 already pointing to the next instruction ()
(1)   37/    9186 :                     ;
(1)   38/    9186 :                     __EX_ExecuteExit:
(1)   39/    9186 : 03                  	scl 														; Set carry Flag
(1)   40/    9187 : C1 00               	ld 		(p1) 												; look at the instruction length byte, 0 if end.
(1)   41/    9189 : 9C 0A               	jnz 	__EX_LeaveExecution 		
(1)   42/    918B :                     __EX_StopOnError:			
(1)   43/    918B : (MACRO)             	lpi 	p3,IsRunningProgram 								; clear the 'is running program' flag.
(1)   43/    918B : C4 0C                       ldi     (ISRUNNINGPROGRAM) / 256
(1)   43/    918D : 37                          xpah    P3
(1)   43/    918E : C4 8F                       ldi     (ISRUNNINGPROGRAM) & 255
(1)   43/    9190 : 33                          xpal    P3
(1)   44/    9191 : C4 00               	ldi 	0
 AS V1.42 Beta [Bld 102] - source file vtl-2.asm(statement.asm) - page 10 - 12/14/2015 17:58:16


(1)   45/    9193 : CB 00               	st 		(p3)
(1)   46/    9195 :                     ;
(1)   47/    9195 :                     ;	Leave anyway
(1)   48/    9195 :                     ;
(1)   49/    9195 :                     __EX_LeaveExecution:
(1)   50/    9195 : (MACRO)             	pullp 	p3 													; restore A,E,P3
(1)   50/    9195 : C6 01                       ld              @1(p2)
(1)   50/    9197 : 33                          xpal    P3
(1)   50/    9198 : C6 01                       ld              @1(p2)
(1)   50/    919A : 37                          xpah    P3
(1)   51/    919B : (MACRO)             	pulle
(1)   51/    919B : C6 01                       ld              @1(p2)
(1)   51/    919D : 01                          xae
(1)   52/    919E : (MACRO)             	pulla
(1)   52/    919E : C6 01                       ld              @1(p2)
(1)   53/    91A0 : 3F                  	xppc 	p3
(1)   54/    91A1 :                     ;
(1)   55/    91A1 :                     ;	Execute an A = B statement type (which is all of them !)
(1)   56/    91A1 :                     ;
(1)   57/    91A1 :                     ExecuteStatement:
(1)   58/    91A1 : (MACRO)             	pusha 	 													; save A,E,P3
(1)   58/    91A1 : CE FF                       st              @-1(p2)
(1)   59/    91A3 : (MACRO)             	pushe
(1)   59/    91A3 : 40                          lde
(1)   59/    91A4 : CE FF                       st              @-1(p2)
(1)   60/    91A6 : (MACRO)             	pushp 	p3
(1)   60/    91A6 : 37                          xpah    P3
(1)   60/    91A7 : CE FF                       st              @-1(p2)
(1)   60/    91A9 : 33                          xpal    P3
(1)   60/    91AA : CE FF                       st              @-1(p2)
(1)   61/    91AC : C1 00               	ld 		(p1) 												; check if already at end.
(1)   62/    91AE : 98 D6               	jz 		__EX_ExecuteExit 									; if length was zero already at last line of memory, stop
(1)   63/    91B0 : C5 03               	ld 		@3(p1) 												; skip over length and line number.
(1)   64/    91B2 : (MACRO)             	lpi 	p3,RandomProcess-1 									; change the Random Number done every program line.
(1)   64/    91B2 : C4 93                       ldi     (RANDOMPROCESS-1) / 256
(1)   64/    91B4 : 37                          xpah    P3
(1)   64/    91B5 : C4 3F                       ldi     (RANDOMPROCESS-1) & 255
(1)   64/    91B7 : 33                          xpal    P3
(1)   65/    91B8 : 3F                  	xppc 	p3
(1)   66/    91B9 :                     __ES_SkipSpaces:
(1)   67/    91B9 : C5 01               	ld 		@1(p1) 												; read next character in line and skip it
(1)   68/    91BB : 98 C9               	jz 		__EX_ExecuteExit 									; if it is zero, it will now point to the next line, exit.
(1)   69/    91BD : E4 29               	xri 	')'													; is it a comment ?
(1)   70/    91BF : 98 C1               	jz 		__EX_EndLineAndExit 								; skip the rest of the line and exit.	
(1)   71/    91C1 : E4 09               	xri 	')'!' ' 											; is it space ? if so, go back.
(1)   72/    91C3 : 98 F4               	jz 		__ES_SkipSpaces 									; first line of character now at -1(p1)
(1)   73/    91C5 :                     
(1)   74/    91C5 : C5 FF               	ld 		@-1(p1) 											; point P1 to first character and read it.
(1)   75/    91C7 : 03                  	scl  														; valid values are 32-95.
(1)   76/    91C8 : FC 20               	cai 	32 													; valid values are 0-63 now.
(1)   77/    91CA : D4 C0               	ani 	0xC0 												; which means this must be zero
(1)   78/    91CC : 98 09               	jz 		__ES_LegalAssignment  									
(1)   79/    91CE : C4 41               	ldi 	'A'													; illegal assignment
(1)   80/    91D0 : 33                  	xpal 	p3
(1)   81/    91D1 :                     __ES_ReturnErrorP3Low:
(1)   82/    91D1 : 33                  	xpal 	p3
(1)   83/    91D2 :                     __ES_ReturnErrorA:
(1)   84/    91D2 : CA 03               	st 		3(p2) 												; this overrides stacked value with the returned A value.
(1)   85/    91D4 : 02                  	ccl 														; return with error flag 
(1)   86/    91D5 : 90 B4               	jmp 	__EX_StopOnError
 AS V1.42 Beta [Bld 102] - source file vtl-2.asm(statement.asm) - page 11 - 12/14/2015 17:58:16


(1)   87/    91D7 :                     
(1)   88/    91D7 :                     __ES_LegalAssignment:
(1)   89/    91D7 : C1 00               	ld 		(p1) 												; get ASCII character code.
(1)   90/    91D9 : D4 40               	ani 	0x40 												; look at bit $40. 
(1)   91/    91DB : 9C 14               	jnz 	__ES_NotSpecial 									; if set, it is @A-Z range so can't be "special"
(1)   92/    91DD : (MACRO)             	lpi 	p3,SpecialAssignment-1 								; check for "special assignments" (see above list)
(1)   92/    91DD : C4 92                       ldi     (SPECIALASSIGNMENT-1) / 256
(1)   92/    91DF : 37                          xpah    P3
(1)   92/    91E0 : C4 4E                       ldi     (SPECIALASSIGNMENT-1) & 255
(1)   92/    91E2 : 33                          xpal    P3
(1)   93/    91E3 : C1 00               	ld 		(p1) 												; get the character code
(1)   94/    91E5 : 3F                  	xppc 	p3					 								; check
(1)   95/    91E6 : 01                  	xae 														; error code in E now (if any)
(1)   96/    91E7 : 06                  	csa 														; check return flag.
(1)   97/    91E8 : D4 80               	ani 	0x80
(1)   98/    91EA : 9C 05               	jnz 	__ES_NotSpecial 									; if returned CY/L = 1 didn't process it so normal var.
(1)   99/    91EC :                     
(1)  100/    91EC : 40                  	lde 														; processed it, check error flag.
(1)  101/    91ED : 9C E3               	jnz 	__ES_ReturnErrorA 									; if non zero return with that error code.
(1)  102/    91EF :                     __EX_EndLineAndExit2:
(1)  103/    91EF : 90 91               	jmp 	__EX_EndLineAndExit 								; otherwise just find EOL and exit as it was okay.
(1)  104/    91F1 :                     ;
(1)  105/    91F1 :                     ;	"Non Special" variables - e.g. straight copy expression value into memory stuff.
(1)  106/    91F1 :                     ;
(1)  107/    91F1 :                     __ES_NotSpecial:
(1)  108/    91F1 : C5 01               	ld 		@1(p1) 												; it is a normal assignment.
(1)  109/    91F3 : D4 3F               	ani 	0x3F 												; variable number
(1)  110/    91F5 : 01                  	xae 														; double it as two byte variables.
(1)  111/    91F6 : 02                  	ccl
(1)  112/    91F7 : 40                  	lde
(1)  113/    91F8 : 70                  	ade
(1)  114/    91F9 : 01                  	xae 														; save in E
(1)  115/    91FA : (MACRO)             	lpi 	p3,CheckEqualsAndEvaluate-1 						; check '=' and evaluate RHS.
(1)  115/    91FA : C4 92                       ldi     (CHECKEQUALSANDEVALUATE-1) / 256
(1)  115/    91FC : 37                          xpah    P3
(1)  115/    91FD : C4 18                       ldi     (CHECKEQUALSANDEVALUATE-1) & 255
(1)  115/    91FF : 33                          xpal    P3
(1)  116/    9200 : 3F                  	xppc 	p3
(1)  117/    9201 : 33                  	xpal 	p3 													; save error code in P3.L, if there was one :)
(1)  118/    9202 : C6 02               	ld 		@2(p2) 												; drop the result.
(1)  119/    9204 : 06                  	csa
(1)  120/    9205 : 94 CA               	jp 		__ES_ReturnErrorP3Low 								; if +ve (CY/L = 0) then error (in P3.L) occurred
(1)  121/    9207 :                     
(1)  122/    9207 : (MACRO)             	lpi 	p3,Variables 										; E(p3) points to correct variable.
(1)  122/    9207 : C4 0C                       ldi     (VARIABLES) / 256
(1)  122/    9209 : 37                          xpah    P3
(1)  122/    920A : C4 90                       ldi     (VARIABLES) & 255
(1)  122/    920C : 33                          xpal    P3
(1)  123/    920D : C2 FE               	ld 		-2(p2) 												; unstack LSB
(1)  124/    920F : CB 80               	st 		-0x80(p3)
(1)  125/    9211 : C7 01               	ld 		@1(p3) 												; bump P3 easier than bumping E :)
(1)  126/    9213 : C2 FF               	ld 		-1(p2) 												; unstack MSB
(1)  127/    9215 : CB 80               	st 		-0x80(p3)
(1)  128/    9217 : 90 D6               	jmp 	__EX_EndLineAndExit2 								; and done :)
(1)  129/    9219 :                     
(1)  130/    9219 :                     ; ****************************************************************************************************************
(1)  131/    9219 :                     ;
(1)  132/    9219 :                     ;	Test to see if the following character is '=' and evaluate the expression following it. Returns CY/L = 0 and
(1)  133/    9219 :                     ;	A = error code on error, if CY/L = 1 . Value is always returned on stack whatever.
(1)  134/    9219 :                     ;
 AS V1.42 Beta [Bld 102] - source file vtl-2.asm(statement.asm) - page 12 - 12/14/2015 17:58:16


(1)  135/    9219 :                     ; ****************************************************************************************************************
(1)  136/    9219 :                     
(1)  137/    9219 :                     CheckEqualsAndEvaluate:
(1)  138/    9219 : CE FE               	st 		@-2(p2) 											; save result for answer, if any.
(1)  139/    921B :                     __CEE_FindEquals:
(1)  140/    921B : C1 00               	ld 		(p1) 												; check if EOS
(1)  141/    921D : 98 0A               	jz 		__CEEFailEquals
(1)  142/    921F : C5 01               	ld 		@1(p1) 												; fetch and bump.
(1)  143/    9221 : E4 20               	xri 	' '													; keep trying if space.
(1)  144/    9223 : 98 F6               	jz 		__CEE_FindEquals
(1)  145/    9225 : E4 1D               	xri 	' ' ! '='											; okay, if equals.
(1)  146/    9227 : 98 04               	jz 		__CEE_FoundEqual
(1)  147/    9229 :                     __CEEFailEquals:
(1)  148/    9229 : C4 45               	ldi 	'E'													; E Error
(1)  149/    922B : 02                  	ccl
(1)  150/    922C : 3F                  	xppc 	p3
(1)  151/    922D :                     
(1)  152/    922D :                     __CEE_FoundEqual:
(1)  153/    922D : (MACRO)             	pusha 														; save A and P3
(1)  153/    922D : CE FF                       st              @-1(p2)
(1)  154/    922F : (MACRO)             	pushp 	p3
(1)  154/    922F : 37                          xpah    P3
(1)  154/    9230 : CE FF                       st              @-1(p2)
(1)  154/    9232 : 33                          xpal    P3
(1)  154/    9233 : CE FF                       st              @-1(p2)
(1)  155/    9235 : (MACRO)             	lpi 	p3,EvaluateExpression-1 							; evaluate the expression.
(1)  155/    9235 : C4 93                       ldi     (EVALUATEEXPRESSION-1) / 256
(1)  155/    9237 : 37                          xpah    P3
(1)  155/    9238 : C4 B8                       ldi     (EVALUATEEXPRESSION-1) & 255
(1)  155/    923A : 33                          xpal    P3
(1)  156/    923B : 3F                  	xppc 	p3
(1)  157/    923C : CA 04               	st  	4(p2) 												; save error code overwriting A.
(1)  158/    923E : C6 01               	ld 		@1(p2) 												; copy result over.
(1)  159/    9240 : CA 04               	st 		4(p2)
(1)  160/    9242 : C6 01               	ld 		@1(p2)
(1)  161/    9244 : CA 04               	st 		4(p2)
(1)  162/    9246 : (MACRO)             	pullp 	p3 													; restore P3
(1)  162/    9246 : C6 01                       ld              @1(p2)
(1)  162/    9248 : 33                          xpal    P3
(1)  162/    9249 : C6 01                       ld              @1(p2)
(1)  162/    924B : 37                          xpah    P3
(1)  163/    924C : (MACRO)             	pulla 														; restore A
(1)  163/    924C : C6 01                       ld              @1(p2)
(1)  164/    924E : 3F                  	xppc 	p3
(1)  165/    924F :                     
(1)  166/    924F :                     ; ****************************************************************************************************************
(1)  167/    924F :                     ;
(1)  168/    924F :                     ;		Special assignment tests, e.g. those with a side effect. On entrance (p1) points to the assignment.
(1)  169/    924F :                     ;		On exit CY/L = 0 means processed and the value is on the TOS. CY/L = 1 means did not process, so should
(1)  170/    924F :                     ;		be processed as variable assignment. If processed then A contains the error code, which is zero if successful.
(1)  171/    924F :                     ;
(1)  172/    924F :                     ; ****************************************************************************************************************
(1)  173/    924F :                     
(1)  174/    924F :                     ; TODO # ? :
(1)  175/    924F :                     
(1)  176/    924F :                     SpecialAssignment:
(1)  177/    924F : (MACRO)             	pusha
(1)  177/    924F : CE FF                       st              @-1(p2)
(1)  178/    9251 : (MACRO)             	pushp 	p3
(1)  178/    9251 : 37                          xpah    P3
 AS V1.42 Beta [Bld 102] - source file vtl-2.asm(statement.asm) - page 13 - 12/14/2015 17:58:16


(1)  178/    9252 : CE FF                       st              @-1(p2)
(1)  178/    9254 : 33                          xpal    P3
(1)  178/    9255 : CE FF                       st              @-1(p2)
(1)  179/    9257 : (MACRO)             	lpi 	p3,__SA_Table 										; point P3 to the table of special assignments
(1)  179/    9257 : C4 93                       ldi     (__SA_TABLE) / 256
(1)  179/    9259 : 37                          xpah    P3
(1)  179/    925A : C4 33                       ldi     (__SA_TABLE) & 255
(1)  179/    925C : 33                          xpal    P3
(1)  180/    925D :                     __SA_Find:
(1)  181/    925D : C7 03               	ld 		@3(p3) 												; get next table entry
(1)  182/    925F : 98 11               	jz 		__SA_NotFound
(1)  183/    9261 : E1 00               	xor 	(p1) 												; is it the one we've found.
(1)  184/    9263 : 9C F8               	jnz 	__SA_Find 											; no, try again.
(1)  185/    9265 :                     
(1)  186/    9265 : C5 01               	ld 		@1(p1) 												; skip P1 over the assignment charactr.
(1)  187/    9267 : C3 FE               	ld 		-2(p3) 												; get LSB of vector
(1)  188/    9269 : 01                  	xae
(1)  189/    926A : C3 FF               	ld 		-1(p3) 												; get MSB of vector to P3.H
(1)  190/    926C : 37                  	xpah 	p3
(1)  191/    926D : 40                  	lde 														; copy LSB from E to P3.L
(1)  192/    926E : 33                  	xpal 	p3
(1)  193/    926F : 3F                  	xppc 	p3 													; and go there.
(1)  194/    9270 : 90 A7               	jmp 	CheckEqualsAndEvaluate 								; set up so a further xppc p3 goes here immediately.
(1)  195/    9272 :                     ;
(1)  196/    9272 :                     ;	Nothing found in the specials table.
(1)  197/    9272 :                     ;
(1)  198/    9272 :                     __SA_NotFound:
(1)  199/    9272 : 03                  	scl 														; set CY/L as nothing processed.
(1)  200/    9273 :                     __SA_Exit:
(1)  201/    9273 : (MACRO)             	pullp 	p3
(1)  201/    9273 : C6 01                       ld              @1(p2)
(1)  201/    9275 : 33                          xpal    P3
(1)  201/    9276 : C6 01                       ld              @1(p2)
(1)  201/    9278 : 37                          xpah    P3
(1)  202/    9279 : (MACRO)             	pulla
(1)  202/    9279 : C6 01                       ld              @1(p2)
(1)  203/    927B : 3F                  	xppc 	p3 												
(1)  204/    927C :                     ;
(1)  205/    927C :                     ;	Error occurred on expression evaluation, E contains error code.
(1)  206/    927C :                     ;
(1)  207/    927C :                     __SA_ExpressionError:
(1)  208/    927C : 02                  	ccl
(1)  209/    927D : 40                  	lde 														; get error code
(1)  210/    927E : CA 02               	st 		2(p2) 												; save error code on stack.
(1)  211/    9280 : 90 F1               	jmp 	__SA_Exit
(1)  212/    9282 :                     
(1)  213/    9282 :                     ; ****************************************************************************************************************
(1)  214/    9282 :                     ;								$ = nn Prints the low byte of nn as a character
(1)  215/    9282 :                     ; ****************************************************************************************************************
(1)  216/    9282 :                     
(1)  217/    9282 :                     __SA_CO_Enter:													; $ right hand side.
(1)  218/    9282 : 3F                  	xppc 	p3 													; evaluate RHS
(1)  219/    9283 : 01                  	xae															; save error code if any
(1)  220/    9284 : C6 02               	ld 		@2(p2) 												; drop the return value
(1)  221/    9286 : 06                  	csa 														; error check
(1)  222/    9287 : 94 F3               	jp 		__SA_ExpressionError 								; go here if failed.
(1)  223/    9289 : (MACRO)             	lpi 	p3,Print-1											; print character
(1)  223/    9289 : C4 90                       ldi     (PRINT-1) / 256
(1)  223/    928B : 37                          xpah    P3
(1)  223/    928C : C4 35                       ldi     (PRINT-1) & 255
 AS V1.42 Beta [Bld 102] - source file vtl-2.asm(statement.asm) - page 14 - 12/14/2015 17:58:16


(1)  223/    928E : 33                          xpal    P3
(1)  224/    928F : C2 FE               	ld 		-2(p2) 												; get LSB of value
(1)  225/    9291 : 98 01               	jz 		__SA_CO_NoPrint 									; don't print if $00
(1)  226/    9293 : 3F                  	xppc 	p3 													; print character
(1)  227/    9294 :                     __SA_CO_NoPrint:
(1)  228/    9294 :                     ;
(1)  229/    9294 :                     ;	Come here when special case has been completed successfully.
(1)  230/    9294 :                     ;
(1)  231/    9294 :                     __SA_Completed:	
(1)  232/    9294 : C4 00               	ldi 	0 													; clear A return value
(1)  233/    9296 : CA 02               	st 		2(p2)
(1)  234/    9298 : 02                  	ccl 														; clear carry flag, processed successfully.
(1)  235/    9299 : 90 D8               	jmp 	__SA_Exit
(1)  236/    929B :                     
(1)  237/    929B :                     ; ****************************************************************************************************************
(1)  238/    929B :                     ; 							> = nn Call routine at nn with P1 pointing to variables.
(1)  239/    929B :                     ; ****************************************************************************************************************
(1)  240/    929B :                     
(1)  241/    929B :                     __SA_CO_Call:
(1)  242/    929B : 3F                  	xppc 	p3 													; evaluate RHS
(1)  243/    929C : 01                  	xae															; save error code if any
(1)  244/    929D : C6 02               	ld 		@2(p2) 												; drop the return value
(1)  245/    929F : 06                  	csa 														; error check
(1)  246/    92A0 : 94 DA               	jp 		__SA_ExpressionError 								; go here if failed.
(1)  247/    92A2 : C2 FE               	ld 		-2(p2) 												; put value into P3.L
(1)  248/    92A4 : 33                  	xpal 	p3
(1)  249/    92A5 : C2 FF               	ld 		-1(p2)
(1)  250/    92A7 : 37                  	xpah 	p3
(1)  251/    92A8 : C7 FF               	ld 		@-1(p3) 											; adjust call address for preincrement
(1)  252/    92AA : (MACRO)             	pushp 	p1 													; save P1 on stack
(1)  252/    92AA : 35                          xpah    P1
(1)  252/    92AB : CE FF                       st              @-1(p2)
(1)  252/    92AD : 31                          xpal    P1
(1)  252/    92AE : CE FF                       st              @-1(p2)
(1)  253/    92B0 : (MACRO)             	lpi 	p1,Variables 										; point P1 to system variables
(1)  253/    92B0 : C4 0C                       ldi     (VARIABLES) / 256
(1)  253/    92B2 : 35                          xpah    P1
(1)  253/    92B3 : C4 90                       ldi     (VARIABLES) & 255
(1)  253/    92B5 : 31                          xpal    P1
(1)  254/    92B6 : 3F                  	xppc 	p3 													; call routine
(1)  255/    92B7 : (MACRO)             	pullp 	p1 													; restore P1
(1)  255/    92B7 : C6 01                       ld              @1(p2)
(1)  255/    92B9 : 31                          xpal    P1
(1)  255/    92BA : C6 01                       ld              @1(p2)
(1)  255/    92BC : 35                          xpah    P1
(1)  256/    92BD : 90 D5               	jmp 	__SA_Completed
(1)  257/    92BF :                     
(1)  258/    92BF :                     ; ****************************************************************************************************************
(1)  259/    92BF :                     ; 							  & = nn Set end of program pointer (actually start !)
(1)  260/    92BF :                     ; ****************************************************************************************************************
(1)  261/    92BF :                     
(1)  262/    92BF :                     __SA_CO_New:
(1)  263/    92BF : 3F                  	xppc 	p3 													; evaluate RHS
(1)  264/    92C0 : 01                  	xae															; save error code if any
(1)  265/    92C1 : C6 02               	ld 		@2(p2) 												; drop the return value
(1)  266/    92C3 : 06                  	csa 														; error check
(1)  267/    92C4 : 94 B6               	jp 		__SA_ExpressionError 								; go here if failed.
(1)  268/    92C6 : (MACRO)             	lpi 	p3,Variables+('&' & 0x3F) * 2 						; point P3 to & variable.
(1)  268/    92C6 : C4 0C                       ldi     (VARIABLES+('&' & 0X3F) * 2) / 256
(1)  268/    92C8 : 37                          xpah    P3
 AS V1.42 Beta [Bld 102] - source file vtl-2.asm(statement.asm) - page 15 - 12/14/2015 17:58:16


(1)  268/    92C9 : C4 DC                       ldi     (VARIABLES+('&' & 0X3F) * 2) & 255
(1)  268/    92CB : 33                          xpal    P3
(1)  269/    92CC : C2 FE               	ld 		-2(p2) 												; copy value into &
(1)  270/    92CE : CB 00               	st 		0(p3)
(1)  271/    92D0 : C2 FF               	ld 		-1(p2)
(1)  272/    92D2 : CB 01               	st 		1(p3)
(1)  273/    92D4 : (MACRO)             	lpi 	p3,NewProgram-1 									; New program routine
(1)  273/    92D4 : C4 93                       ldi     (NEWPROGRAM-1) / 256
(1)  273/    92D6 : 37                          xpah    P3
(1)  273/    92D7 : C4 74                       ldi     (NEWPROGRAM-1) & 255
(1)  273/    92D9 : 33                          xpal    P3
(1)  274/    92DA : 3F                  	xppc 	p3
(1)  275/    92DB :                     
(1)  276/    92DB :                     __SA_Completed2:
(1)  277/    92DB : 90 B7               	jmp 	__SA_Completed
(1)  278/    92DD :                     __SA_ExpressionError2:
(1)  279/    92DD : 90 9D               	jmp 	__SA_ExpressionError
(1)  280/    92DF :                     
(1)  281/    92DF :                     ; ****************************************************************************************************************
(1)  282/    92DF :                     ;												:<expr>) Array Access
(1)  283/    92DF :                     ; ****************************************************************************************************************
(1)  284/    92DF :                     
(1)  285/    92DF :                     __SA_CO_Array:
(1)  286/    92DF : (MACRO)             	lpi 	p3,EvaluateExpression-1 							; get expression value (array index)
(1)  286/    92DF : C4 93                       ldi     (EVALUATEEXPRESSION-1) / 256
(1)  286/    92E1 : 37                          xpah    P3
(1)  286/    92E2 : C4 B8                       ldi     (EVALUATEEXPRESSION-1) & 255
(1)  286/    92E4 : 33                          xpal    P3
(1)  287/    92E5 : 3F                  	xppc 	p3 													; evaluate RHS
(1)  288/    92E6 : 01                  	xae															; save error code if any
(1)  289/    92E7 : C6 02               	ld 		@2(p2) 												; drop the return value
(1)  290/    92E9 : 06                  	csa 														; error check
(1)  291/    92EA : 94 90               	jp 		__SA_ExpressionError 								; go here if failed.
(1)  292/    92EC : C1 00               	ld 		(p1) 												; if next character not ) that's an error.
(1)  293/    92EE : E4 29               	xri 	')'
(1)  294/    92F0 : 9C 8A               	jnz 	__SA_ExpressionError
(1)  295/    92F2 : 02                  	ccl
(1)  296/    92F3 : C6 FE               	ld 		@-2(p2) 											; double array index as words, and keep on stack.
(1)  297/    92F5 : F2 00               	add 	0(p2)
(1)  298/    92F7 : CA 00               	st 		0(p2)
(1)  299/    92F9 : C2 01               	ld 		1(p2)
(1)  300/    92FB : F2 01               	add 	1(p2)
(1)  301/    92FD : CA 01               	st 		1(p2)
(1)  302/    92FF : (MACRO)             	lpi 	p3,Variables+('&' & 0x3F) * 2 						; point P3 to & variable.
(1)  302/    92FF : C4 0C                       ldi     (VARIABLES+('&' & 0X3F) * 2) / 256
(1)  302/    9301 : 37                          xpah    P3
(1)  302/    9302 : C4 DC                       ldi     (VARIABLES+('&' & 0X3F) * 2) & 255
(1)  302/    9304 : 33                          xpal    P3
(1)  303/    9305 : 02                  	ccl 	
(1)  304/    9306 : C3 00               	ld 		0(p3) 												; add that variable's value to the index
(1)  305/    9308 : F2 00               	add 	0(p2)												; this will make this stack value where the 
(1)  306/    930A : CA 00               	st 		0(p2)												; expression is going to be written to.
(1)  307/    930C : C3 01               	ld 		1(p3)
(1)  308/    930E : F2 01               	add 	1(p2)
(1)  309/    9310 : CA 01               	st 		1(p2)
(1)  310/    9312 : C5 01               	ld 		@1(p1) 												; skip over the closing bracket, already tested.
(1)  311/    9314 : (MACRO)             	lpi 	p3,CheckEqualsAndEvaluate-1 						; check = nnnn and evaluate.
(1)  311/    9314 : C4 92                       ldi     (CHECKEQUALSANDEVALUATE-1) / 256
(1)  311/    9316 : 37                          xpah    P3
(1)  311/    9317 : C4 18                       ldi     (CHECKEQUALSANDEVALUATE-1) & 255
 AS V1.42 Beta [Bld 102] - source file vtl-2.asm(statement.asm) - page 16 - 12/14/2015 17:58:16


(1)  311/    9319 : 33                          xpal    P3
(1)  312/    931A : 3F                  	xppc	p3 													; call it
(1)  313/    931B : 01                  	xae 														; save error
(1)  314/    931C : C6 04               	ld 		@4(p2) 												; drop address and data
(1)  315/    931E : 06                  	csa 														; check CY/L
(1)  316/    931F : 94 BC               	jp 		__SA_ExpressionError2 								; error exit.
(1)  317/    9321 : C2 FE               	ld 		-2(p2)												; load address into P3.
(1)  318/    9323 : 01                  	xae
(1)  319/    9324 : C2 FF               	ld 		-1(p2)
(1)  320/    9326 : 37                  	xpah 	p3
(1)  321/    9327 : 40                  	lde
(1)  322/    9328 : 33                  	xpal 	p3
(1)  323/    9329 : C2 FC               	ld 		-4(p2)												; write out to array memory
(1)  324/    932B : CB 00               	st 		0(p3)
(1)  325/    932D : C2 FD               	ld 		-3(p2)
(1)  326/    932F : CB 01               	st 		1(p3)
(1)  327/    9331 : 90 A8               	jmp 	__SA_Completed2	
(1)  328/    9333 :                     
(1)  329/    9333 :                     ; ****************************************************************************************************************
(1)  330/    9333 :                     ;											Special Assignment Jump Table.
(1)  331/    9333 :                     ; ****************************************************************************************************************
(1)  332/    9333 :                     
(1)  333/    9333 :                     __SA_Entry macro ch,code
(1)  334/    9333 :                     	db 		ch
(1)  335/    9333 :                     	dw 		code-1
(1)  336/    9333 :                     	endm
(1)  337/    9333 :                     
(1)  338/    9333 :                     __SA_Table:
(1)  339/    9333 : (MACRO)             	__SA_Entry	'$',__SA_CO_Enter
(1)  339/    9333 : 24                          db              '$'
(1)  339/    9334 : 81 92                       dw              __SA_CO_ENTER-1
(1)  340/    9336 : (MACRO)             	__SA_Entry  '>',__SA_CO_Call
(1)  340/    9336 : 3E                          db              '>'
(1)  340/    9337 : 9A 92                       dw              __SA_CO_CALL-1
(1)  341/    9339 : (MACRO)             	__SA_Entry 	'&',__SA_CO_New
(1)  341/    9339 : 26                          db              '&'
(1)  341/    933A : BE 92                       dw              __SA_CO_NEW-1
(1)  342/    933C : (MACRO)             	__SA_Entry 	':',__SA_CO_Array
(1)  342/    933C : 3A                          db              ':'
(1)  342/    933D : DE 92                       dw              __SA_CO_ARRAY-1
(1)  343/    933F : 00                  	db 			0												; marks end of table.
(1)  344/    9340 :                     
(1)  345/    9340 :                     ; ****************************************************************************************************************
(1)  346/    9340 :                     ;
(1)  347/    9340 :                     ;						Update the random seed, initialising if required. Galois LFSR
(1)  348/    9340 :                     ;
(1)  349/    9340 :                     ; ****************************************************************************************************************
(1)  350/    9340 :                     
(1)  351/    9340 :                     RandomProcess:
(1)  352/    9340 : (MACRO)             	pushp 	p3 													; save P3
(1)  352/    9340 : 37                          xpah    P3
(1)  352/    9341 : CE FF                       st              @-1(p2)
(1)  352/    9343 : 33                          xpal    P3
(1)  352/    9344 : CE FF                       st              @-1(p2)
(1)  353/    9346 : (MACRO)             	lpi 	p3,Variables+(0x27 & 0x3F) * 2 						; point P3 to random variable (' mark)
(1)  353/    9346 : C4 0C                       ldi     (VARIABLES+(0X27 & 0X3F) * 2) / 256
(1)  353/    9348 : 37                          xpah    P3
(1)  353/    9349 : C4 DE                       ldi     (VARIABLES+(0X27 & 0X3F) * 2) & 255
(1)  353/    934B : 33                          xpal    P3
(1)  354/    934C : C3 00               	ld 		0(p3) 												; check to see if seed is zero.
 AS V1.42 Beta [Bld 102] - source file vtl-2.asm(statement.asm) - page 17 - 12/14/2015 17:58:16


(1)  355/    934E : DB 01               	or 		1(p3)
(1)  356/    9350 : 9C 08               	jnz 	__RPNoInitialise
(1)  357/    9352 : C4 E1               	ldi 	0xE1 												; initialise to $ACE1
(1)  358/    9354 : CB 00               	st 		0(p3)
(1)  359/    9356 : C4 AC               	ldi 	0xAC
(1)  360/    9358 : CB 01               	st 		1(p3)
(1)  361/    935A :                     __RPNoInitialise:
(1)  362/    935A : 02                  	ccl 														; rotate seed right.
(1)  363/    935B : C3 01               	ld 		1(p3)
(1)  364/    935D : 1F                  	rrl
(1)  365/    935E : CB 01               	st 		1(p3)
(1)  366/    9360 : C3 00               	ld 		0(p3)
(1)  367/    9362 : 1F                  	rrl
(1)  368/    9363 : CB 00               	st 		0(p3)
(1)  369/    9365 : 06                  	csa  														; this is the dropped bit
(1)  370/    9366 : 94 06               	jp 		__RPNoToggle 	
(1)  371/    9368 : C3 01               	ld 		1(p3) 												; if it is set xor ms byte with $B4
(1)  372/    936A : E4 B4               	xri 	0xB4
(1)  373/    936C : CB 01               	st 		1(p3)
(1)  374/    936E :                     __RPNoToggle:
(1)  375/    936E : (MACRO)             	pullp 	p3 													; restore P3 and exit
(1)  375/    936E : C6 01                       ld              @1(p2)
(1)  375/    9370 : 33                          xpal    P3
(1)  375/    9371 : C6 01                       ld              @1(p2)
(1)  375/    9373 : 37                          xpah    P3
(1)  376/    9374 : 3F                  	xppc 	p3
(1)  377/    9375 :                     
(1)  378/    9375 :                     ; ****************************************************************************************************************
(1)  379/    9375 :                     ;
(1)  380/    9375 :                     ;							Set the bottom program address to the value in variable '&'
(1)  381/    9375 :                     ;
(1)  382/    9375 :                     ; ****************************************************************************************************************
(1)  383/    9375 :                     
(1)  384/    9375 :                     NewProgram:
(1)  385/    9375 : (MACRO)             	pushp 	p3
(1)  385/    9375 : 37                          xpah    P3
(1)  385/    9376 : CE FF                       st              @-1(p2)
(1)  385/    9378 : 33                          xpal    P3
(1)  385/    9379 : CE FF                       st              @-1(p2)
(1)  386/    937B : (MACRO)             	lpi 	p3,Variables 										; point P3 to & variable.
(1)  386/    937B : C4 0C                       ldi     (VARIABLES) / 256
(1)  386/    937D : 37                          xpah    P3
(1)  386/    937E : C4 90                       ldi     (VARIABLES) & 255
(1)  386/    9380 : 33                          xpal    P3
(1)  387/    9381 : C4 00               	ldi 	0 													; reset is program running flag
(1)  388/    9383 : CB FF               	st 		IsRunningProgram-Variables(p3)
(1)  389/    9385 : C3 4C               	ld  	('&' & 0x3F)*2(p3) 									; read low value of P3
(1)  390/    9387 : CB FD               	st 		ProgramBase-Variables(p3) 							; copy into program base
(1)  391/    9389 : 01                  	xae 														; save in E
(1)  392/    938A : C3 4D               	ld  	('&' & 0x3F)*2+1(p3) 								; read high value of P3
(1)  393/    938C : CB FE               	st 		ProgramBase+1-Variables(p3) 						; copy into program base
(1)  394/    938E : 37                  	xpah 	p3 													; put into P3.H
(1)  395/    938F : 40                  	lde 														; put low address into P3.L
(1)  396/    9390 : 33                  	xpal 	p3
(1)  397/    9391 : C4 00               	ldi 	0
(1)  398/    9393 : CB 00               	st 		(p3) 												; put a $00 there, indicating line length = 0 final line.
(1)  399/    9395 : (MACRO)             	pullp 	p3
(1)  399/    9395 : C6 01                       ld              @1(p2)
(1)  399/    9397 : 33                          xpal    P3
(1)  399/    9398 : C6 01                       ld              @1(p2)
 AS V1.42 Beta [Bld 102] - source file vtl-2.asm(statement.asm) - page 18 - 12/14/2015 17:58:16


(1)  399/    939A : 37                          xpah    P3
(1)  400/    939B : 3F                  	xppc 	p3 													; return
(1)  401/    939C :                     
      43/    939C :                     	include source\expression.asm 								; expression evaluator (e.g. RHS)
(1)    1/    939C :                     ; ****************************************************************************************************************
(1)    2/    939C :                     ; ****************************************************************************************************************
(1)    3/    939C :                     ;
(1)    4/    939C :                     ;						Expression Evaluation. Returns CY/L = 0 on Error, A = Error Code
(1)    5/    939C :                     ;	
(1)    6/    939C :                     ; ****************************************************************************************************************
(1)    7/    939C :                     ; ****************************************************************************************************************
(1)    8/    939C :                     
(1)    9/    939C : =0x3                operation = 3													; pending operation
(1)   10/    939C : =0x5                resultLo = 5
(1)   11/    939C : =0x6                resultHi = 6
(1)   12/    939C :                     
(1)   13/    939C :                     ;
(1)   14/    939C :                     ;	Come here when the binary operator (+,-,*,/,>,=,<) fails. There are the two values still on the stack
(1)   15/    939C :                     ;	so drop one and exit.
(1)   16/    939C :                     ;
(1)   17/    939C :                     __EE_TermErrorAndDrop:
(1)   18/    939C : C6 02               	ld 		@2(p2) 												; reduce back to one number on the stack.
(1)   19/    939E :                     ;
(1)   20/    939E :                     ;	Return with a Term Error.
(1)   21/    939E :                     ;
(1)   22/    939E :                     __EE_TermError:
(1)   23/    939E : 02                  	ccl
(1)   24/    939F : C4 54               	ldi 	'T'													; 'T' is Term Error.
(1)   25/    93A1 : CA 06               	st 		6(p2) 												; return the term error in A register
(1)   26/    93A3 :                     __EE_Exit:
(1)   27/    93A3 : C6 01               	ld 		@1(p2)												; copy result to final target
(1)   28/    93A5 : CA 06               	st 		6(p2)
(1)   29/    93A7 : C6 01               	ld 		@1(p2)
(1)   30/    93A9 : CA 06               	st 		6(p2)
(1)   31/    93AB : (MACRO)             	pullp 	p3													; restore registers
(1)   31/    93AB : C6 01                       ld              @1(p2)
(1)   31/    93AD : 33                          xpal    P3
(1)   31/    93AE : C6 01                       ld              @1(p2)
(1)   31/    93B0 : 37                          xpah    P3
(1)   32/    93B1 : (MACRO)             	pulle 	
(1)   32/    93B1 : C6 01                       ld              @1(p2)
(1)   32/    93B3 : 01                          xae
(1)   33/    93B4 : (MACRO)             	pulla 	 													; this is pending operation
(1)   33/    93B4 : C6 01                       ld              @1(p2)
(1)   34/    93B6 : (MACRO)             	pulla 	
(1)   34/    93B6 : C6 01                       ld              @1(p2)
(1)   35/    93B8 : 3F                  	xppc 	p3
(1)   36/    93B9 :                     
(1)   37/    93B9 :                     EvaluateExpression:
(1)   38/    93B9 : CE FE               	st 		@-2(p2)												; 2 byte final result
(1)   39/    93BB : (MACRO)             	pusha 														; save A
(1)   39/    93BB : CE FF                       st              @-1(p2)
(1)   40/    93BD : C4 2B               	ldi 	'+' 												; save pending operation.
(1)   41/    93BF : CE FF               	st 		@-1(p2)
(1)   42/    93C1 : (MACRO)             	pushe 														; save E and P3.
(1)   42/    93C1 : 40                          lde
(1)   42/    93C2 : CE FF                       st              @-1(p2)
(1)   43/    93C4 : (MACRO)             	pushp 	p3
(1)   43/    93C4 : 37                          xpah    P3
(1)   43/    93C5 : CE FF                       st              @-1(p2)
 AS V1.42 Beta [Bld 102] - source file vtl-2.asm(expression.asm) - page 19 - 12/14/2015 17:58:16


(1)   43/    93C7 : 33                          xpal    P3
(1)   43/    93C8 : CE FF                       st              @-1(p2)
(1)   44/    93CA : C4 00               	ldi 	0 													; clear current value, push 0 on the stack.
(1)   45/    93CC : CE FF               	st 		@-1(p2)
(1)   46/    93CE : CE FF               	st		@-1(p2)
(1)   47/    93D0 :                     ;
(1)   48/    93D0 :                     ;	Get a new term to complete pending operation.
(1)   49/    93D0 :                     ;
(1)   50/    93D0 :                     __EE_NextTerm:
(1)   51/    93D0 : C1 00               	ld 		(p1) 												; read P1
(1)   52/    93D2 : 98 CA               	jz 		__EE_TermError 										; term not found error.
(1)   53/    93D4 : C5 01               	ld 		@1(p1)												; fetch and skip over any spaces.
(1)   54/    93D6 : E4 20               	xri 	' '
(1)   55/    93D8 : 98 F6               	jz 		__EE_NextTerm
(1)   56/    93DA :                     ;
(1)   57/    93DA :                     ;	Check if it is a numeric constant
(1)   58/    93DA :                     ;
(1)   59/    93DA : C5 FF               	ld 		@-1(p1) 											; re-read first non space character.
(1)   60/    93DC : 02                  	ccl
(1)   61/    93DD : F4 50               	adi 	128-'0'												; will be +ve if < '0'
(1)   62/    93DF : 94 5A               	jp 		__EE_Variable
(1)   63/    93E1 : F4 76               	adi 	255-0x89 											; will be +ve if > '9'
(1)   64/    93E3 : 94 56               	jp 		__EE_Variable
(1)   65/    93E5 :                     ;
(1)   66/    93E5 :                     ;	Using the pending operation, the old value, and the new value, do the operation. Choice of either the
(1)   67/    93E5 :                     ;	OS built in routines or a seperate function for < = and >.
(1)   68/    93E5 :                     ;
(1)   69/    93E5 : (MACRO)             	lpi 	p3,OSMathLibrary-1 									; use the maths library to convert to an integer
(1)   69/    93E5 : C4 00                       ldi     (OSMATHLIBRARY-1) / 256
(1)   69/    93E7 : 37                          xpah    P3
(1)   69/    93E8 : C4 02                       ldi     (OSMATHLIBRARY-1) & 255
(1)   69/    93EA : 33                          xpal    P3
(1)   70/    93EB : C4 3F               	ldi	 	'?' 												; this is that function.
(1)   71/    93ED : 3F                  	xppc 	p3
(1)   72/    93EE :                     __EE_RunPendingOperation:										; now two values on the stack that we operate on.
(1)   73/    93EE : (MACRO)             	lpi 	p3,OSMathLibrary-1									; use the library routine.
(1)   73/    93EE : C4 00                       ldi     (OSMATHLIBRARY-1) / 256
(1)   73/    93F0 : 37                          xpah    P3
(1)   73/    93F1 : C4 02                       ldi     (OSMATHLIBRARY-1) & 255
(1)   73/    93F3 : 33                          xpal    P3
(1)   74/    93F4 : C2 07               	ld 		operation+4(p2)										; get the operation
(1)   75/    93F6 : D4 FC               	ani 	0xFC 												; is it 3C-3F which are < = > ?
(1)   76/    93F8 : E4 3C               	xri 	0x3C
(1)   77/    93FA : 9C 06               	jnz 	__EE_IsLibraryOperator 								; use the library routine which supports those.
(1)   78/    93FC : (MACRO)             	lpi 	p3,ExpressionComparison-1  							; instead.
(1)   78/    93FC : C4 94                       ldi     (EXPRESSIONCOMPARISON-1) / 256
(1)   78/    93FE : 37                          xpah    P3
(1)   78/    93FF : C4 73                       ldi     (EXPRESSIONCOMPARISON-1) & 255
(1)   78/    9401 : 33                          xpal    P3
(1)   79/    9402 :                     __EE_IsLibraryOperator:
(1)   80/    9402 : C2 07               	ld 		operation+4(p2)										; get the operation
(1)   81/    9404 : 3F                  	xppc 	p3 													; execute the operation.
(1)   82/    9405 : 06                  	csa 														; this has Carry Set = Error.
(1)   83/    9406 : D4 80               	ani 	0x80
(1)   84/    9408 : 9C 92               	jnz 	__EE_TermErrorAndDrop 								; so fail on error.
(1)   85/    940A :                     ;
(1)   86/    940A :                     ;	If we have done division, copy the remainder to the % variable.
(1)   87/    940A :                     ;
(1)   88/    940A : C2 05               	ld 		operation+2(p2) 									; re-read the operation just done.
(1)   89/    940C : E4 5C               	xri 	'\\'												; is it unsigned integer divide ?
 AS V1.42 Beta [Bld 102] - source file vtl-2.asm(expression.asm) - page 20 - 12/14/2015 17:58:16


(1)   90/    940E : 98 1B               	jz 		__EE_ProcessRemainder 								; if so, then go copy remainder.
(1)   91/    9410 :                     ;
(1)   92/    9410 :                     ;	Get the next operator, ending if we find the end of the string or a closing bracket. At the outer parenthesis
(1)   93/    9410 :                     ;	level, this is a comment.
(1)   94/    9410 :                     ;
(1)   95/    9410 :                     __EE_Next:
(1)   96/    9410 : 03                  	scl 														; successful exit.
(1)   97/    9411 : C1 00               	ld 		(p1) 												; look for next operator and bump.
(1)   98/    9413 : 98 8E               	jz 		__EE_Exit 											; exit okay when found \0 or ), leave P1 on it.
(1)   99/    9415 : E4 29               	xri 	')'
(1)  100/    9417 : 98 8A               	jz 		__EE_Exit 										
(1)  101/    9419 : C5 01               	ld 		@1(p1) 												; read, but advance pointer
(1)  102/    941B : E4 20               	xri 	' '													; space, try next.
(1)  103/    941D : 98 F1               	jz 		__EE_Next
(1)  104/    941F : C1 FF               	ld 		-1(p1) 												; read it again.
(1)  105/    9421 :                     __EE_WriteAndLoop:
(1)  106/    9421 : CA 05               	st 		operation+2(p2) 									; the new pending operator.
(1)  107/    9423 : E4 2F               	xri 	'/' 												; is it divide
(1)  108/    9425 : 9C A9               	jnz 	__EE_NextTerm 										; then go round again.
(1)  109/    9427 : C4 5C               	ldi 	'\\' 												; use unsigned divide, not signed divide.
(1)  110/    9429 : 90 F6               	jmp 	__EE_WriteAndLoop
(1)  111/    942B :                     
(1)  112/    942B :                     ;
(1)  113/    942B :                     ;	Copy the remainder from the division into the '%' variable.
(1)  114/    942B :                     ;	
(1)  115/    942B :                     __EE_ProcessRemainder:
(1)  116/    942B : (MACRO)             	lpi 	p3,Variables+('%' & 0x3F) * 2 						; point P3 to remainder variable
(1)  116/    942B : C4 0C                       ldi     (VARIABLES+('%' & 0X3F) * 2) / 256
(1)  116/    942D : 37                          xpah    P3
(1)  116/    942E : C4 DA                       ldi     (VARIABLES+('%' & 0X3F) * 2) & 255
(1)  116/    9430 : 33                          xpal    P3
(1)  117/    9431 : C2 FE               	ld 		-2(p2)												; copy remainder value into remainder variable.
(1)  118/    9433 : CB 00               	st 		0(p3)
(1)  119/    9435 : C2 FF               	ld 		-1(p2)
(1)  120/    9437 : CB 01               	st 		1(p3)
(1)  121/    9439 : 90 D5               	jmp 	__EE_Next 											; get next operator.
(1)  122/    943B :                     ;
(1)  123/    943B :                     ;	Found a non-numeric term.
(1)  124/    943B :                     ;
(1)  125/    943B :                     __EE_Variable:	
(1)  126/    943B : C5 01               	ld 		@1(p1) 												; check it is in the range 32-95
(1)  127/    943D : 03                  	scl
(1)  128/    943E : FC 20               	cai 	32
(1)  129/    9440 : D4 C0               	ani 	0xC0 												; this will be zero for 00-63
(1)  130/    9442 : 9C 29               	jnz 	__EE_GoTermError 
(1)  131/    9444 : (MACRO)             	lpi 	p3,SpecialTermEvaluate-1 							; check for "specials"
(1)  131/    9444 : C4 94                       ldi     (SPECIALTERMEVALUATE-1) / 256
(1)  131/    9446 : 37                          xpah    P3
(1)  131/    9447 : C4 B2                       ldi     (SPECIALTERMEVALUATE-1) & 255
(1)  131/    9449 : 33                          xpal    P3
(1)  132/    944A : C1 FF               	ld 		-1(p1)												; read character
(1)  133/    944C : 3F                  	xppc 	p3
(1)  134/    944D : 06                  	csa 														; if CY/L = 0 we have processed this
(1)  135/    944E : 94 1A               	jp 		__EE_SpecialProcess
(1)  136/    9450 : C1 FF               	ld 		-1(p1)												; read it again
(1)  137/    9452 : 02                  	ccl 														; double it
(1)  138/    9453 : F1 FF               	add 	-1(p1)
(1)  139/    9455 : D4 7E               	ani 	0x7E 												; and with $3F << 1, this is an offset
(1)  140/    9457 : 01                  	xae 														; put in E
(1)  141/    9458 : (MACRO)             	lpi 	p3,Variables+1 										; offset from variables, read high byte first
 AS V1.42 Beta [Bld 102] - source file vtl-2.asm(expression.asm) - page 21 - 12/14/2015 17:58:16


(1)  141/    9458 : C4 0C                       ldi     (VARIABLES+1) / 256
(1)  141/    945A : 37                          xpah    P3
(1)  141/    945B : C4 91                       ldi     (VARIABLES+1) & 255
(1)  141/    945D : 33                          xpal    P3
(1)  142/    945E : C3 80               	ld 		-0x80(p3) 											; read high byte
(1)  143/    9460 : CE FF               	st 		@-1(p2) 											; push on stack
(1)  144/    9462 : C7 FF               	ld 		@-1(p3) 											; point to low byte
(1)  145/    9464 : C3 80               	ld 		-0x80(p3) 											; read it
(1)  146/    9466 : CE FF               	st 		@-1(p2) 											; push on stack.
(1)  147/    9468 : 90 84               	jmp 	__EE_RunPendingOperation
(1)  148/    946A :                     
(1)  149/    946A :                     ;
(1)  150/    946A :                     ;	Get here. If E = 0 then okay and value on stack as normal. E != 0 then error, no value pushed.
(1)  151/    946A :                     ;
(1)  152/    946A :                     __EE_SpecialProcess:
(1)  153/    946A : 40                  	lde 														; check E
(1)  154/    946B : 98 81               	jz 		__EE_RunPendingOperation 							; if zero, carry on as normal.											
(1)  155/    946D :                     ;
(1)  156/    946D :                     ;	Jumping back to TERM error.
(1)  157/    946D :                     ;	
(1)  158/    946D :                     __EE_GoTermError:												; too far to jump.
(1)  159/    946D : (MACRO)             	lpi 	p3,__EE_TermError-1
(1)  159/    946D : C4 93                       ldi     (__EE_TERMERROR-1) / 256
(1)  159/    946F : 37                          xpah    P3
(1)  159/    9470 : C4 9D                       ldi     (__EE_TERMERROR-1) & 255
(1)  159/    9472 : 33                          xpal    P3
(1)  160/    9473 : 3F                  	xppc 	p3
(1)  161/    9474 :                     
(1)  162/    9474 :                     ; ****************************************************************************************************************
(1)  163/    9474 :                     ;	Perform operation A on the top 2 values on the stack.  NOTE: this returns CY/L = 1 = error unlike
(1)  164/    9474 :                     ; 	the functions here but like the functions in the maths library. Only receives < = > ? as binary operators.
(1)  165/    9474 :                     ; ****************************************************************************************************************
(1)  166/    9474 :                     
(1)  167/    9474 :                     ExpressionComparison:
(1)  168/    9474 : 01                  	xae															; save in E and reload.
(1)  169/    9475 : 40                  	lde
(1)  170/    9476 : E4 3D               	xri 	'='													; check for equals.
(1)  171/    9478 : 98 06               	jz 		__EC_Equals
(1)  172/    947A : E4 02               	xri 	'='!'?'												; if it wasn't ? it must've been < or >
(1)  173/    947C : 9C 1E               	jnz 	__EC_GLCompare
(1)  174/    947E : 03                  	scl 														; return with an error, as we sent in '?'
(1)  175/    947F : 3F                  	xppc 	p3
(1)  176/    9480 :                     ;
(1)  177/    9480 :                     ;	Equality test.
(1)  178/    9480 :                     ;
(1)  179/    9480 :                     __EC_Equals:
(1)  180/    9480 : C2 00               	ld 		0(p2)
(1)  181/    9482 : E2 02               	xor 	2(p2)
(1)  182/    9484 : 9C 12               	jnz 	__EC_Fail
(1)  183/    9486 : C2 01               	ld 		1(p2)
(1)  184/    9488 : E2 03               	xor 	3(p2)
(1)  185/    948A : 9C 0C               	jnz 	__EC_Fail
(1)  186/    948C :                     __EC_Succeed:
(1)  187/    948C : C4 01               	ldi 	1 													; return value 1
(1)  188/    948E :                     __EC_ReturnA:
(1)  189/    948E : CE 02               	st 		@2(p2) 												; drop TOS (save is irrelevant)
(1)  190/    9490 : CA 00               	st 		0(p2) 												; save in LSB
(1)  191/    9492 : C4 00               	ldi 	0
(1)  192/    9494 : CA 01               	st 		1(p2) 												; zero LSB
(1)  193/    9496 : 02                  	ccl 														; it's okay
 AS V1.42 Beta [Bld 102] - source file vtl-2.asm(expression.asm) - page 22 - 12/14/2015 17:58:16


(1)  194/    9497 : 3F                  	xppc 	p3
(1)  195/    9498 :                     ;
(1)  196/    9498 :                     __EC_Fail:
(1)  197/    9498 : C4 00               	ldi 	0 													; same as succeed, return 0.
(1)  198/    949A : 90 F2               	jmp 	__EC_ReturnA
(1)  199/    949C :                     ;
(1)  200/    949C :                     ;	>= or < test
(1)  201/    949C :                     ;
(1)  202/    949C :                     __EC_GLCompare:
(1)  203/    949C : 03                  	scl 														; subtract, don't care about the result.
(1)  204/    949D : C2 02               	ld 		2(p2)
(1)  205/    949F : FA 00               	cad 	0(p2)
(1)  206/    94A1 : C2 03               	ld 		3(p2)
(1)  207/    94A3 : FA 01               	cad 	1(p2)
(1)  208/    94A5 : 40                  	lde 														; get original operator
(1)  209/    94A6 : E4 3C               	xri 	'<'													; will be 0 if <, #0 if >(=)
(1)  210/    94A8 : 98 02               	jz 		__EC_IsLessThan
(1)  211/    94AA : C4 80               	ldi 	0x80 												; now will be 0 if <, 0x80 if >(=) 	
(1)  212/    94AC :                     __EC_IsLessThan:
(1)  213/    94AC : 01                  	xae 														; put in E
(1)  214/    94AD : 06                  	csa 														; get CY/L
(1)  215/    94AE : 60                  	xre 														; invert CY/L if it was >(=)
(1)  216/    94AF : 94 DB               	jp 		__EC_Succeed 										; true
(1)  217/    94B1 : 90 E5               	jmp 	__EC_Fail 											; false
(1)  218/    94B3 :                     
      44/    94B3 :                     	include source\special_terms.asm 							; RHS special terms (things like ?, $, ! a)
(1)    1/    94B3 :                     ; ****************************************************************************************************************
(1)    2/    94B3 :                     ; ****************************************************************************************************************
(1)    3/    94B3 :                     ;
(1)    4/    94B3 :                     ;										Special Term Evaluation
(1)    5/    94B3 :                     ;	
(1)    6/    94B3 :                     ; ****************************************************************************************************************
(1)    7/    94B3 :                     ; ****************************************************************************************************************
(1)    8/    94B3 :                     
(1)    9/    94B3 :                     ; ****************************************************************************************************************
(1)   10/    94B3 :                     ; ****************************************************************************************************************
(1)   11/    94B3 :                     ;
(1)   12/    94B3 :                     ;			Handle Special Non-Standard Terms. Standard terms are numeric constants and variables. 
(1)   13/    94B3 :                     ;
(1)   14/    94B3 :                     ;	Non standard terms are more complex than simple variable access or have side effects.
(1)   15/    94B3 :                     ;
(1)   16/    94B3 :                     ;	Accept pointer to term 2nd char in P1, first char in A.  Returns CY/L = 0 if processed, CY/L = 1 if ignored.
(1)   17/    94B3 :                     ;
(1)   18/    94B3 :                     ;										if processed correctly, value is on stack and E = 0.
(1)   19/    94B3 :                     ;										if error occurred when processing, E != 0, no value on stack.
(1)   20/    94B3 :                     ;	Non re-entrant:
(1)   21/    94B3 :                     ;
(1)   22/    94B3 :                     ;	Supported Terms are (at present) :
(1)   23/    94B3 :                     ;
(1)   24/    94B3 :                     ;		$ 			Read a single keystroke from keyboard, return ASCII value		(Not implemented)
(1)   25/    94B3 :                     ;		?			Read a string from the keyboard, evaluate as expression			(Not implemented)
(1)   26/    94B3 :                     ;		:<exp>)		Array access.													(Not implemented)
(1)   27/    94B3 :                     ;		(<exp>)		Parenthesised expression.										(Not implemented)
(1)   28/    94B3 :                     ;
(1)   29/    94B3 :                     ; ****************************************************************************************************************
(1)   30/    94B3 :                     ; ****************************************************************************************************************
(1)   31/    94B3 :                     
(1)   32/    94B3 :                     SpecialTermEvaluate:
(1)   33/    94B3 : CE FE               	st 		@-2(p2) 											; save A allocating space for result.
(1)   34/    94B5 : (MACRO)             	pushp 	p3													; save P3
 AS V1.42 Beta [Bld 102] - source file vtl-2.asm(special_terms.asm) - page 23 - 12/14/2015 17:58:16


(1)   34/    94B5 : 37                          xpah    P3
(1)   34/    94B6 : CE FF                       st              @-1(p2)
(1)   34/    94B8 : 33                          xpal    P3
(1)   34/    94B9 : CE FF                       st              @-1(p2)
(1)   35/    94BB : C2 02               	ld 		2(p2) 												; get original A
(1)   36/    94BD : E4 24               	xri 	'$'													; check for $ (get a key stroke.)
(1)   37/    94BF : 9C 11               	jnz 	__STE_NotKeyStroke
(1)   38/    94C1 :                     
(1)   39/    94C1 :                     ; ****************************************************************************************************************
(1)   40/    94C1 :                     ;										$ Read Character from keyboard
(1)   41/    94C1 :                     ; ****************************************************************************************************************
(1)   42/    94C1 : (MACRO)             	lpi 	p3,GetChar-1 										; read a keystroke.
(1)   42/    94C1 : C4 90                       ldi     (GETCHAR-1) / 256
(1)   42/    94C3 : 37                          xpah    P3
(1)   42/    94C4 : C4 F5                       ldi     (GETCHAR-1) & 255
(1)   42/    94C6 : 33                          xpal    P3
(1)   43/    94C7 : 3F                  	xppc 	p3 													; call it
(1)   44/    94C8 : CA 02               	st 		2(p2) 												; save result in LSB
(1)   45/    94CA : C4 00               	ldi 	0
(1)   46/    94CC : CA 03               	st 		3(p2) 												; save zero in MSB
(1)   47/    94CE : 01                  	xae 														; E = 0
(1)   48/    94CF : 02                  	ccl 														; CY/L = 1 => processed
(1)   49/    94D0 : 90 3D               	jmp 	__STEExit
(1)   50/    94D2 :                     
(1)   51/    94D2 :                     __STE_NotKeyStroke:
(1)   52/    94D2 : E4 1B               	xri 	'$'!'?'												; check for ? (read an expression)
(1)   53/    94D4 : 9C 30               	jnz 	__STENotExpression
(1)   54/    94D6 :                     
(1)   55/    94D6 :                     ; ****************************************************************************************************************
(1)   56/    94D6 :                     ;										? Read Expression from Keyboard
(1)   57/    94D6 :                     ; ****************************************************************************************************************
(1)   58/    94D6 :                     
(1)   59/    94D6 : (MACRO)             	pushp 	p1 													; save P1
(1)   59/    94D6 : 35                          xpah    P1
(1)   59/    94D7 : CE FF                       st              @-1(p2)
(1)   59/    94D9 : 31                          xpal    P1
(1)   59/    94DA : CE FF                       st              @-1(p2)
(1)   60/    94DC : (MACRO)             	lpi 	p3,GetString-1 										; read a string
(1)   60/    94DC : C4 91                       ldi     (GETSTRING-1) / 256
(1)   60/    94DE : 37                          xpah    P3
(1)   60/    94DF : C4 19                       ldi     (GETSTRING-1) & 255
(1)   60/    94E1 : 33                          xpal    P3
(1)   61/    94E2 : (MACRO)             	lpi 	p1,KeyboardBuffer 									; into keyboard buffer
(1)   61/    94E2 : C4 0D                       ldi     (KEYBOARDBUFFER) / 256
(1)   61/    94E4 : 35                          xpah    P1
(1)   61/    94E5 : C4 10                       ldi     (KEYBOARDBUFFER) & 255
(1)   61/    94E7 : 31                          xpal    P1
(1)   62/    94E8 : C4 50               	ldi 	KeyboardBufferSize 									; max length.
(1)   63/    94EA : 3F                  	xppc 	p3
(1)   64/    94EB : (MACRO)             	lpi 	p3,EvaluateExpression-1 							; evaluate it
(1)   64/    94EB : C4 93                       ldi     (EVALUATEEXPRESSION-1) / 256
(1)   64/    94ED : 37                          xpah    P3
(1)   64/    94EE : C4 B8                       ldi     (EVALUATEEXPRESSION-1) & 255
(1)   64/    94F0 : 33                          xpal    P3
(1)   65/    94F1 : 3F                  	xppc 	p3
(1)   66/    94F2 : C6 01               	ld 		@1(p2)												; copy result
(1)   67/    94F4 : CA 05               	st 		5(p2)
(1)   68/    94F6 : C6 01               	ld 		@1(p2)
(1)   69/    94F8 : CA 05               	st 		5(p2)
(1)   70/    94FA : (MACRO)             	pullp 	p1 													; restore P1
 AS V1.42 Beta [Bld 102] - source file vtl-2.asm(special_terms.asm) - page 24 - 12/14/2015 17:58:16


(1)   70/    94FA : C6 01                       ld              @1(p2)
(1)   70/    94FC : 31                          xpal    P1
(1)   70/    94FD : C6 01                       ld              @1(p2)
(1)   70/    94FF : 35                          xpah    P1
(1)   71/    9500 : C4 00               	ldi 	0 													; and exit ignoring errors.
(1)   72/    9502 : 01                  	xae 	
(1)   73/    9503 : 02                  	ccl 	
(1)   74/    9504 : 90 09               	jmp 	__STEExit
(1)   75/    9506 :                     
(1)   76/    9506 :                     __STENotExpression:
(1)   77/    9506 : E4 05               	xri 	'?'!':'												; check if it is array or parenthesis
(1)   78/    9508 : 98 15               	jz 		__STEArrayOrBracket
(1)   79/    950A : E4 12               	xri 	':'!'('
(1)   80/    950C : 98 11               	jz 		__STEArrayOrBracket
(1)   81/    950E :                     
(1)   82/    950E :                     __STEIgnore:
(1)   83/    950E : 03                  	scl 														; A = 0, CY/L = 1 => last option.
(1)   84/    950F :                     __STEExit:
(1)   85/    950F : (MACRO)             	pullp 	p3
(1)   85/    950F : C6 01                       ld              @1(p2)
(1)   85/    9511 : 33                          xpal    P3
(1)   85/    9512 : C6 01                       ld              @1(p2)
(1)   85/    9514 : 37                          xpah    P3
(1)   86/    9515 : 06                  	csa 														; if CY/L = 0,
(1)   87/    9516 : 94 03               	jp 		__STEWasProcessed 									; then maybe keep result
(1)   88/    9518 :                     __STEThrow:
(1)   89/    9518 : C6 02               	ld 		@2(p2) 												; remove result off stack.
(1)   90/    951A : 3F                  	xppc 	p3
(1)   91/    951B :                     
(1)   92/    951B :                     __STEWasProcessed:
(1)   93/    951B : 40                  	lde 														; if E != 0, throw result.
(1)   94/    951C : 9C FA               	jnz 	__STEThrow
(1)   95/    951E : 3F                  	xppc 	p3 													; return with result still on stack.
(1)   96/    951F :                     
(1)   97/    951F :                     ; ****************************************************************************************************************
(1)   98/    951F :                     ;							(<expr>), parenthesis or :<expr>), array lookup
(1)   99/    951F :                     ; ****************************************************************************************************************
(1)  100/    951F :                     
(1)  101/    951F :                     
(1)  102/    951F :                     __STEArrayOrBracket:
(1)  103/    951F : (MACRO)             	lpi 	p3,EvaluateExpression-1 							; evaluate expression
(1)  103/    951F : C4 93                       ldi     (EVALUATEEXPRESSION-1) / 256
(1)  103/    9521 : 37                          xpah    P3
(1)  103/    9522 : C4 B8                       ldi     (EVALUATEEXPRESSION-1) & 255
(1)  103/    9524 : 33                          xpal    P3
(1)  104/    9525 : 3F                  	xppc 	p3
(1)  105/    9526 : 01                  	xae 														; error code in E
(1)  106/    9527 : 06                  	csa 	
(1)  107/    9528 : 94 42               	jp 		__STETermErrorDrop 									; error in parenthesis expression.
(1)  108/    952A :                     
(1)  109/    952A : C2 04               	ld 		4(p2) 												; get first character original
(1)  110/    952C : 01                  	xae 														; save in E
(1)  111/    952D : C6 01               	ld 		@1(p2)												; copy result
(1)  112/    952F : CA 03               	st 		3(p2)
(1)  113/    9531 : C6 01               	ld 		@1(p2)
(1)  114/    9533 : CA 03               	st 		3(p2)
(1)  115/    9535 : C1 00               	ld 		(p1) 												; if next character NIL
(1)  116/    9537 : 98 35               	jz 		__STETermError
(1)  117/    9539 : C5 01               	ld 		@1(p1) 												; if next character ) then okay.
(1)  118/    953B : E4 29               	xri 	')'
 AS V1.42 Beta [Bld 102] - source file vtl-2.asm(special_terms.asm) - page 25 - 12/14/2015 17:58:16


(1)  119/    953D : 9C 2F               	jnz 	__STETermError
(1)  120/    953F :                     
(1)  121/    953F : 40                  	lde															; check first character to see if : or (
(1)  122/    9540 : E4 28               	xri 	'('
(1)  123/    9542 : 98 22               	jz 		__STENotArray
(1)  124/    9544 :                     ;
(1)  125/    9544 :                     ;	This section is difference between :3) and (3) - it doubles the value, adds to the value in the &
(1)  126/    9544 :                     ;	variable and reads the word there.
(1)  127/    9544 :                     ;
(1)  128/    9544 : (MACRO)             	lpi 	p3,Variables+('&' & 0x3F) * 2 						; point P3 to top of memory variable.
(1)  128/    9544 : C4 0C                       ldi     (VARIABLES+('&' & 0X3F) * 2) / 256
(1)  128/    9546 : 37                          xpah    P3
(1)  128/    9547 : C4 DC                       ldi     (VARIABLES+('&' & 0X3F) * 2) & 255
(1)  128/    9549 : 33                          xpal    P3
(1)  129/    954A : C2 02               	ld 		2(p2) 												; double value being returned (word index)
(1)  130/    954C : 02                  	ccl
(1)  131/    954D : F2 02               	add 	2(p2)
(1)  132/    954F : 01                  	xae 														; save Low Value in E
(1)  133/    9550 : C2 03               	ld 		3(p2)
(1)  134/    9552 : F2 03               	add 	3(p2)
(1)  135/    9554 : 01                  	xae 														; High value in E, Low Value in A.
(1)  136/    9555 : 02                  	ccl
(1)  137/    9556 : F3 00               	add 	0(p3) 												; low address
(1)  138/    9558 : 01                  	xae 														; save in E, get high value.
(1)  139/    9559 : F3 01               	add 	1(p3)  												; add high base.
(1)  140/    955B : 37                  	xpah 	p3 													; put in P3.H
(1)  141/    955C : 40                  	lde 														; put low address in P3.L
(1)  142/    955D : 33                  	xpal 	p3
(1)  143/    955E : C3 00               	ld 		0(p3) 												; copy this into stack position
(1)  144/    9560 : CA 02               	st 		2(p2)
(1)  145/    9562 : C3 01               	ld 		1(p3)
(1)  146/    9564 : CA 03               	st 		3(p2)
(1)  147/    9566 :                     __STENotArray:
(1)  148/    9566 : C4 00               	ldi 	0
(1)  149/    9568 : 01                  	xae 														; E = 0
(1)  150/    9569 : 02                  	ccl 														; clear CY/L indicating processed.
(1)  151/    956A : 90 A3               	jmp 	__STEExit 
(1)  152/    956C :                     
(1)  153/    956C :                     __STETermErrorDrop:
(1)  154/    956C : C6 02               	ld 		@2(p2)
(1)  155/    956E :                     
(1)  156/    956E :                     __STETermError:
(1)  157/    956E : C4 50               	ldi 	'P'													; P error
(1)  158/    9570 : 01                  	xae 
(1)  159/    9571 : 02                  	ccl
(1)  160/    9572 : 90 9B               	jmp 	__STEExit
(1)  161/    9574 :                     	
      45/    9574 :                     
      46/    9574 :                     StartProgram:
      47/    9574 : (MACRO)             	vtl 	100,":3)=11*11"
      47/    9574 : 0D                          db              strlen(":3)=11*11")+4
      47/    9575 : 64 00                       dw              100
      47/    9577 : 3A 33 29 3D 31 31           db              ":3)=11*11",0
                    2A 31 31 00 
      48/    9581 : (MACRO)             	vtl 	102,":2)=:3)+256"
      48/    9581 : 0F                          db              strlen(":2)=:3)+256")+4
      48/    9582 : 66 00                       dw              102
      48/    9584 : 3A 32 29 3D 3A 33           db              ":2)=:3)+256",0
                    29 2B 32 35 36 00 
      49/    9590 : (MACRO)             	vtl 	105,"$=12"
 AS V1.42 Beta [Bld 102] - source file vtl-2.asm - page 26 - 12/14/2015 17:58:16


      49/    9590 : 08                          db              strlen("$=12")+4
      49/    9591 : 69 00                       dw              105
      49/    9593 : 24 3D 31 32 00              db              "$=12",0
      50/    9598 : (MACRO)             	vtl 	108,"$=63"
      50/    9598 : 08                          db              strlen("$=63")+4
      50/    9599 : 6C 00                       dw              108
      50/    959B : 24 3D 36 33 00              db              "$=63",0
      51/    95A0 : (MACRO)             	vtl 	110,"A=?"
      51/    95A0 : 07                          db              strlen("A=?")+4
      51/    95A1 : 6E 00                       dw              110
      51/    95A3 : 41 3D 3F 00                 db              "A=?",0
      52/    95A7 : (MACRO)             	vtl 	120,"B=A*A"
      52/    95A7 : 09                          db              strlen("B=A*A")+4
      52/    95A8 : 78 00                       dw              120
      52/    95AA : 42 3D 41 2A 41 00           db              "B=A*A",0
      53/    95B0 : (MACRO)             	vtl 	130,"C='"
      53/    95B0 : 07                          db              strlen("C='")+4
      53/    95B1 : 82 00                       dw              130
      53/    95B3 : 43 3D 27 00                 db              "C='",0
      54/    95B7 : (MACRO)             	vtl 	140,"D=(A<10)*20"
      54/    95B7 : 0F                          db              strlen("D=(A<10)*20")+4
      54/    95B8 : 8C 00                       dw              140
      54/    95BA : 44 3D 28 41 3C 31           db              "D=(A<10)*20",0
                    30 29 2A 32 30 00 
      55/    95C6 :                     EndProgram:
      56/    95C6 : 00                  	db 		0
      57/    95C7 :                     
 AS V1.42 Beta [Bld 102] - source file vtl-2.asm - page 27 - 12/14/2015 17:58:16


  symbol table (* = unused):
  ------------------------

*ARCHITECTURE :  i386-unknown-win32 - | *BIGENDIAN :                      0 - |
*BRANCHEXT :                      0 - | *CASESENSITIVE :                  0 - |
 CHECKEQUALSANDEVALUATE :      9219 C | *CONSTPI :        3.141592653589793 - |
*DATE :                  12/14/2015 - | *ENDPROGRAM :                  95C6 C |
 EVALUATEEXPRESSION :          93B9 C |  EXECUTESTATEMENT :            91A1 C |
 EXPRESSIONCOMPARISON :        9474 C | *FALSE :                          0 - |
*FULLPMMU :                       1 - |  GETCHAR :                     90F6 C |
 GETSTRING :                   911A C | *HAS64 :                          1 - |
*HASDSP :                         0 - | *HASFPU :                         0 - |
*HASPMMU :                        0 - | *INEXTMODE :                      0 - |
*INLWORDMODE :                    0 - | *INMAXMODE :                      0 - |
*INSRCMODE :                      0 - | *INSUPMODE :                      0 - |
 ISRUNNINGPROGRAM :             C8F - |  KEYBOARDBUFFER :               D10 - |
 KEYBOARDBUFFERSIZE :            50 - | *LISTON :                         1 - |
*MACEXP :                         1 - | *MOMCPU :                         C - |
*MOMCPUNAME :                 SC/MP - | *NESTMAX :                      100 - |
 NEWPROGRAM :                  9375 C |  NEXT :                        901F C |
 OPERATION :                      3 - |  OSMATHLIBRARY :                  3 - |
*PACKING :                        0 - | *PADDING :                        1 - |
 PRINT :                       9036 C |  PROGRAMBASE :                  C8D - |
 RANDOMPROCESS :               9340 C | *RELAXED :                        0 - |
*RESULTHI :                       6 - | *RESULTLO :                       5 - |
 SCREENCURSOR :                 C80 - |  SCREENMIRROR :                 C00 - |
 SPECIALASSIGNMENT :           924F C |  SPECIALTERMEVALUATE :         94B3 C |
 STARTPROGRAM :                9574 C |  STOP :                        9034 C |
 SYSTEMVARIABLES :              C90 - | *TIME :                    17:58:16 - |
*TRUE :                           1 - |  VARIABLES :                    C90 - |
*VERSION :                     142F - |  __CEEFAILEQUALS :             9229 C |
 __CEE_FINDEQUALS :            921B C |  __CEE_FOUNDEQUAL :            922D C |
 __EC_EQUALS :                 9480 C |  __EC_FAIL :                   9498 C |
 __EC_GLCOMPARE :              949C C |  __EC_ISLESSTHAN :             94AC C |
 __EC_RETURNA :                948E C |  __EC_SUCCEED :                948C C |
 __EE_EXIT :                   93A3 C |  __EE_GOTERMERROR :            946D C |
 __EE_ISLIBRARYOPERATOR :      9402 C |  __EE_NEXT :                   9410 C |
 __EE_NEXTTERM :               93D0 C |  __EE_PROCESSREMAINDER :       942B C |
 __EE_RUNPENDINGOPERATION :    93EE C |  __EE_SPECIALPROCESS :         946A C |
 __EE_TERMERROR :              939E C |  __EE_TERMERRORANDDROP :       939C C |
 __EE_VARIABLE :               943B C |  __EE_WRITEANDLOOP :           9421 C |
 __ES_LEGALASSIGNMENT :        91D7 C |  __ES_NOTSPECIAL :             91F1 C |
 __ES_RETURNERRORA :           91D2 C |  __ES_RETURNERRORP3LOW :       91D1 C |
 __ES_SKIPSPACES :             91B9 C |  __EX_ENDLINEANDEXIT :         9182 C |
 __EX_ENDLINEANDEXIT2 :        91EF C |  __EX_EXECUTEEXIT :            9186 C |
 __EX_LEAVEEXECUTION :         9195 C |  __EX_STOPONERROR :            918B C |
 __GCNOTLOWER [GETCHAR] :      9115 C |  __GCWAITKEY [GETCHAR] :       90FB C |
 __GCWAITRELEASE [GETCHAR] :   9103 C |  __GSBACKSPACE [GETSTRING] :   9175 C |
 __GSCONTROLKEY [GETSTRING] :  9158 C |  __GSLOOP [GETSTRING] :        9128 C |
 __PRCLEARFROMMOVETO [PRINT] : 90D6 C |  __PRCLEARLOOP [PRINT] :       90D8 C |
 __PRCLEARSCREEN [PRINT] :     90D4 C |  __PRCOPY [PRINT] :            90E2 C |
 __PREXIT [PRINT] :            9099 C |  __PREXITNOCHECK [PRINT] :     909D C |
 __PRISCONTROLCHAR [PRINT] :   90AB C |  __PRISRETURN [PRINT] :        90CB C |
 __PRNOTASCII [PRINT] :        9073 C |  __PRPRINTCHARACTERA [PRINT] : 9057 C |
 __PRPRINTSTRING [PRINT] :     9045 C |  __PRSCROLLLOOP [PRINT] :      908B C |
 __PRUPDATECURSOR [PRINT] :    907C C |  __RPNOINITIALISE :            935A C |
 __RPNOTOGGLE :                936E C |  __SA_COMPLETED :              9294 C |
 __SA_COMPLETED2 :             92DB C |  __SA_CO_ARRAY :               92DF C |
 __SA_CO_CALL :                929B C |  __SA_CO_ENTER :               9282 C |
 __SA_CO_NEW :                 92BF C |  __SA_CO_NOPRINT :             9294 C |
 AS V1.42 Beta [Bld 102] - source file vtl-2.asm - page 28 - 12/14/2015 17:58:16


 __SA_EXIT :                   9273 C |  __SA_EXPRESSIONERROR :        927C C |
 __SA_EXPRESSIONERROR2 :       92DD C |  __SA_FIND :                   925D C |
 __SA_NOTFOUND :               9272 C |  __SA_TABLE :                  9333 C |
 __STEARRAYORBRACKET :         951F C |  __STEEXIT :                   950F C |
*__STEIGNORE :                 950E C |  __STENOTARRAY :               9566 C |
 __STENOTEXPRESSION :          9506 C |  __STETERMERROR :              956E C |
 __STETERMERRORDROP :          956C C |  __STETHROW :                  9518 C |
 __STEWASPROCESSED :           951B C |  __STE_NOTKEYSTROKE :          94D2 C |

    130 symbols
     32 unused symbols

 AS V1.42 Beta [Bld 102] - source file vtl-2.asm - page 29 - 12/14/2015 17:58:16


  defined macros:
  ---------------

LPI                                   | PULLA                                
PULLE                                 | PULLP                                
PUSHA                                 | PUSHE                                
PUSHP                                 | SETV                                 
VTL                                   | __SA_ENTRY                           

     10 macros

 AS V1.42 Beta [Bld 102] - source file vtl-2.asm - page 30 - 12/14/2015 17:58:16


  codepages:
  ----------

STANDARD (0 changed characters)


0.02 seconds assembly time

   1223 lines source file
   1524 lines incl. macro expansions
      2 passes
      0 errors
      0 warnings
