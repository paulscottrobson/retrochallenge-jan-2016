 AS V1.42 Beta [Bld 102] - source file vtl-2.asm - page 1 - 12/15/2015 11:45:13


       1/       0 :                     ; ****************************************************************************************************************
       2/       0 :                     ; ****************************************************************************************************************
       3/       0 :                     ;
       4/       0 :                     ;												VTL-2 ROM Image
       5/       0 :                     ;
       6/       0 :                     ; ****************************************************************************************************************
       7/       0 :                     ; ****************************************************************************************************************
       8/       0 :                     
       9/       0 :                     	cpu 	sc/mp
      10/       0 :                     
      11/       0 :                     	include source\memorymacros.asm 							; Memory allocation and Macro definition.	
(1)    1/       0 :                     ; ****************************************************************************************************************
(1)    2/       0 :                     ; ****************************************************************************************************************
(1)    3/       0 :                     ;
(1)    4/       0 :                     ;										Memory and Macro Allocation.
(1)    5/       0 :                     ;	
(1)    6/       0 :                     ; ****************************************************************************************************************
(1)    7/       0 :                     ; ****************************************************************************************************************
(1)    8/       0 :                     
(1)    9/       0 : =0x3                OSMathLibrary = 0x0003 											; the Maths library is here.
(1)   10/       0 :                     
(1)   11/       0 :                     ; ****************************************************************************************************************
(1)   12/       0 :                     ;												 Memory Allocation
(1)   13/       0 :                     ; ****************************************************************************************************************
(1)   14/       0 :                     
(1)   15/       0 : =0xC00              ScreenMirror = 0xC00 											; Screen mirror, 128 bytes, 256 byte page boundary.
(1)   16/       0 : =0xC80              ScreenCursor = ScreenMirror+0x80  								; Position on that screen (00..7F)
(1)   17/       0 :                     
(1)   18/       0 : =0xC90              SystemVariables = 0xC90 										; System variables start here.
(1)   19/       0 :                     
(1)   20/       0 : =0xC90              Variables = SystemVariables 									; 64 x 2 byte system variables, 6 bit ASCII (@,A,B,C...)
(1)   21/       0 :                     
(1)   22/       0 : =0xD10              KeyboardBuffer = SystemVariables+128							; Keyboard buffer.
(1)   23/       0 : =0x50               KeyboardBufferSize = 80
(1)   24/       0 :                     
(1)   25/       0 : =0xC8F              IsRunningProgram = SystemVariables-1 							; Non zero if in 'run' mode.
(1)   26/       0 : =0xC8D              ProgramBase = SystemVariables-3 								; (Low,High) Base of Program
(1)   27/       0 :                     
(1)   28/       0 :                     ; ****************************************************************************************************************
(1)   29/       0 :                     ;														Macros
(1)   30/       0 :                     ; ****************************************************************************************************************
(1)   31/       0 :                     
(1)   32/       0 :                     lpi	macro	ptr,addr											; load pointer register with constant
(1)   33/       0 :                     	ldi 	(addr) / 256
(1)   34/       0 :                     	xpah 	ptr
(1)   35/       0 :                     	ldi 	(addr) & 255
(1)   36/       0 :                     	xpal 	ptr
(1)   37/       0 :                     	endm
(1)   38/       0 :                     
(1)   39/       0 :                     pushp macro ptr 												; push pointer register on stack
(1)   40/       0 :                     	xpah 	ptr
(1)   41/       0 :                     	st 		@-1(p2)
(1)   42/       0 :                     	xpal 	ptr
(1)   43/       0 :                     	st 		@-1(p2)
(1)   44/       0 :                     	endm
(1)   45/       0 :                     
(1)   46/       0 :                     pullp macro ptr 												; pull pointer register off stack
(1)   47/       0 :                     	ld 		@1(p2)
(1)   48/       0 :                     	xpal 	ptr
(1)   49/       0 :                     	ld 		@1(p2)
 AS V1.42 Beta [Bld 102] - source file vtl-2.asm(memorymacros.asm) - page 2 - 12/15/2015 11:45:13


(1)   50/       0 :                     	xpah 	ptr
(1)   51/       0 :                     	endm
(1)   52/       0 :                     
(1)   53/       0 :                     pushe macro 													; push E on stack
(1)   54/       0 :                     	lde
(1)   55/       0 :                     	st 		@-1(p2)
(1)   56/       0 :                     	endm
(1)   57/       0 :                     
(1)   58/       0 :                     pulle macro 													; pull E off stack
(1)   59/       0 :                     	ld 		@1(p2)
(1)   60/       0 :                     	xae
(1)   61/       0 :                     	endm
(1)   62/       0 :                     
(1)   63/       0 :                     pusha macro 													; push A on stack
(1)   64/       0 :                     	st 		@-1(p2)
(1)   65/       0 :                     	endm
(1)   66/       0 :                     
(1)   67/       0 :                     pulla macro
(1)   68/       0 :                     	ld 		@1(p2)
(1)   69/       0 :                     	endm
(1)   70/       0 :                     
(1)   71/       0 :                     setv macro var,value											; a debugging macro, to set a variable value.
(1)   72/       0 :                     	ldi 	value & 255											; P3 points to variables
(1)   73/       0 :                     	st 		((var & 0x3F)*2)(p3)
(1)   74/       0 :                     	ldi 	value/256
(1)   75/       0 :                     	st 		((var & 0x3F)*2+1)(p3)
(1)   76/       0 :                     	endm
(1)   77/       0 :                     
(1)   78/       0 :                     
(1)   79/       0 :                     vtl macro lineNo,code 											; a debugging macro, which fakes up a line of code.
(1)   80/       0 :                     	db 		strlen(code)+4
(1)   81/       0 :                     	dw 		lineNo
(1)   82/       0 :                     	db 		code,0
(1)   83/       0 :                     	endm
(1)   84/       0 :                     
      12/       0 :                     
      13/       0 :                     ; ****************************************************************************************************************
      14/       0 :                     ;													Main Program
      15/       0 :                     ; ****************************************************************************************************************
      16/       0 :                     
      17/    9000 :                     	org 	0x9000 												; the ROM starts here
      18/    9000 :                     
      19/    9000 : 68                  	db 		0x68												; this makes it boot straight into this ROM.
      20/    9001 :                     
      21/    9001 : (MACRO)             	lpi 	p3,Variables
      21/    9001 : C4 0C                       ldi     (VARIABLES) / 256
      21/    9003 : 37                          xpah    P3
      21/    9004 : C4 90                       ldi     (VARIABLES) & 255
      21/    9006 : 33                          xpal    P3
      22/    9007 : (MACRO)             	setv 	'&',0xE03 											; set array pointer/top of memory fudge.
      22/    9007 : C4 03                       ldi     0XE03 & 255                                                                                     ; P3 points to variables
      22/    9009 : CB 4C                       st              (('&' & 0x3F)*2)(p3)
      22/    900B : C4 0E                       ldi     0XE03/256
      22/    900D : CB 4D                       st              (('&' & 0x3F)*2+1)(p3)
      23/    900F : C4 FF               	ldi 	0xFF 												; sets the running flag .
      24/    9011 : CB FF               	st 		-1(p3)
      25/    9013 : C4 96               	ldi 	StartProgram/256
      26/    9015 : CB FE               	st 		-2(p3) 												; set start program address.
      27/    9017 : C4 70               	ldi 	StartProgram&255
      28/    9019 : CB FD               	st 		-3(p3)
 AS V1.42 Beta [Bld 102] - source file vtl-2.asm - page 3 - 12/15/2015 11:45:13


      29/    901B : (MACRO)             	lpi 	p2,0xFF8											; set up stack
      29/    901B : C4 0F                       ldi     (0XFF8) / 256
      29/    901D : 36                          xpah    P2
      29/    901E : C4 F8                       ldi     (0XFF8) & 255
      29/    9020 : 32                          xpal    P2
      30/    9021 :                     
      31/    9021 :                     	; TODO: Proper stack detection.
      32/    9021 :                     	; TODO: Proper program initialisation.
      33/    9021 :                     
      34/    9021 : (MACRO)             	lpi 	p1,StartProgram 									; internal code for testing
      34/    9021 : C4 96                       ldi     (STARTPROGRAM) / 256
      34/    9023 : 35                          xpah    P1
      34/    9024 : C4 70                       ldi     (STARTPROGRAM) & 255
      34/    9026 : 31                          xpal    P1
      35/    9027 :                     Next:
      36/    9027 : (MACRO)             	lpi 	p3,ExecuteStatement-1 								; execute a statement
      36/    9027 : C4 91                       ldi     (EXECUTESTATEMENT-1) / 256
      36/    9029 : 37                          xpah    P3
      36/    902A : C4 A8                       ldi     (EXECUTESTATEMENT-1) & 255
      36/    902C : 33                          xpal    P3
      37/    902D : 3F                  	xppc 	p3
      38/    902E : 01                  	xae
      39/    902F : 06                  	csa
      40/    9030 : 94 0A               	jp 		stop
      41/    9032 : (MACRO)             	lpi 	p3,IsRunningProgram
      41/    9032 : C4 0C                       ldi     (ISRUNNINGPROGRAM) / 256
      41/    9034 : 37                          xpah    P3
      41/    9035 : C4 8F                       ldi     (ISRUNNINGPROGRAM) & 255
      41/    9037 : 33                          xpal    P3
      42/    9038 : C3 00               	ld 		(p3)
      43/    903A : 9C EB               	jnz		Next
      44/    903C : 90 FE               stop:jmp 	stop
      45/    903E :                     
      46/    903E :                     	include source\screen.asm 									; screen I/O stuff.
(1)    1/    903E :                     ; ****************************************************************************************************************
(1)    2/    903E :                     ; ****************************************************************************************************************
(1)    3/    903E :                     ;
(1)    4/    903E :                     ;											Screen I/O, VTL-2 ROM
(1)    5/    903E :                     ;											=====================
(1)    6/    903E :                     ;
(1)    7/    903E :                     ;	Provides Character and String Input/Output functionality.
(1)    8/    903E :                     ;
(1)    9/    903E :                     ; ****************************************************************************************************************
(1)   10/    903E :                     ; ****************************************************************************************************************
(1)   11/    903E :                     
(1)   12/    903E :                     ; ****************************************************************************************************************
(1)   13/    903E :                     ; ****************************************************************************************************************
(1)   14/    903E :                     ;
(1)   15/    903E :                     ;	Print routine. Prints either character in A, or ASCIIZ string at P1 (if A is zero). Preserves all registers
(1)   16/    903E :                     ;	except if printing string, P1 points to the character after the NULL terminator.
(1)   17/    903E :                     ;
(1)   18/    903E :                     ;	Scrolls automatically. Understands character codes 32-255, 8 (Backspace) 12 (Clear Screen) 13 (Carriage
(1)   19/    903E :                     ;	Return). Others are currently ignored (except 0, see above). Note L/C values (97....) display those characters
(1)   20/    903E :                     ;	in the ROM font *not* lower case :)
(1)   21/    903E :                     ;
(1)   22/    903E :                     ; ****************************************************************************************************************
(1)   23/    903E :                     ; ****************************************************************************************************************
(1)   24/    903E :                     
(1)   25/    903E :                     Print:
(1)   26/    903E :                     	section 	Print
 AS V1.42 Beta [Bld 102] - source file vtl-2.asm(screen.asm) - page 4 - 12/15/2015 11:45:13


(1)   27/    903E :                     
(1)   28/    903E : (MACRO)             	pusha														; push registers on stack
(1)   28/    903E : CE FF                       st              @-1(p2)
(1)   29/    9040 : (MACRO)             	pushp 	p1
(1)   29/    9040 : 35                          xpah    P1
(1)   29/    9041 : CE FF                       st              @-1(p2)
(1)   29/    9043 : 31                          xpal    P1
(1)   29/    9044 : CE FF                       st              @-1(p2)
(1)   30/    9046 : (MACRO)             	pushe
(1)   30/    9046 : 40                          lde
(1)   30/    9047 : CE FF                       st              @-1(p2)
(1)   31/    9049 :                     
(1)   32/    9049 : C2 03               	ld 		3(p2) 												; read character 
(1)   33/    904B : 9C 12               	jnz 	__PRPrintCharacterA 								; if non zero print it on its own.
(1)   34/    904D :                     
(1)   35/    904D :                     __PRPrintString:
(1)   36/    904D : C2 01               	ld 		1(p2) 												; restore original P1
(1)   37/    904F : 31                  	xpal 	p1
(1)   38/    9050 : C2 02               	ld 		2(p2)
(1)   39/    9052 : 35                  	xpah 	p1 													; read character at P1.
(1)   40/    9053 : C5 01               	ld 		@1(p1)
(1)   41/    9055 : 01                  	xae 														; save in E.
(1)   42/    9056 : 35                  	xpah 	p1 													; write P1 back.
(1)   43/    9057 : CA 02               	st 		2(p2)
(1)   44/    9059 : 31                  	xpal 	p1
(1)   45/    905A : CA 01               	st 		1(p2)
(1)   46/    905C : 40                  	lde 														; get character from E
(1)   47/    905D : 98 46               	jz 		__PRExitNoCheck 									; exit without loop check.
(1)   48/    905F :                     ;
(1)   49/    905F :                     ;	Print character in A now ; throughout it is stored in E.
(1)   50/    905F :                     ;
(1)   51/    905F :                     __PRPrintCharacterA:
(1)   52/    905F : 01                  	xae 														; save character in E.
(1)   53/    9060 :                     ;
(1)   54/    9060 :                     ;	Read cursor and set P1 to that address
(1)   55/    9060 :                     ;
(1)   56/    9060 : C4 0C               	ldi 	ScreenCursor/256 									; set P1 to point to screen cursor
(1)   57/    9062 : 35                  	xpah 	p1
(1)   58/    9063 : C4 80               	ldi 	ScreenCursor&255
(1)   59/    9065 : 31                  	xpal 	p1
(1)   60/    9066 : C1 00               	ld 		0(p1) 												; put cursor position in P1.L
(1)   61/    9068 : 31                  	xpal 	p1
(1)   62/    9069 :                     ;
(1)   63/    9069 :                     ;	Check for control
(1)   64/    9069 :                     ;
(1)   65/    9069 : 40                  	lde 														; look at character
(1)   66/    906A : D4 E0               	ani 	0xE0 												; is it code 0-31
(1)   67/    906C : 98 45               	jz 		__PRIsControlChar
(1)   68/    906E :                     ;
(1)   69/    906E :                     ;	Print non-control
(1)   70/    906E :                     ;
(1)   71/    906E : 40                  	lde 														; read character
(1)   72/    906F : 03                  	scl 														; CY/L clear if < 96
(1)   73/    9070 : FC 60               	cai 	96 
(1)   74/    9072 : 06                  	csa 	 	 												; skip if carry set
(1)   75/    9073 : E4 80               	xri 	0x80													
(1)   76/    9075 : 94 04               	jp 		__PRNotASCII
(1)   77/    9077 : 40                  	lde 														; if ASCII make 6 bit.
(1)   78/    9078 : D4 3F               	ani 	0x3F
(1)   79/    907A : 01                  	xae
 AS V1.42 Beta [Bld 102] - source file vtl-2.asm(screen.asm) - page 5 - 12/15/2015 11:45:13


(1)   80/    907B :                     __PRNotASCII:
(1)   81/    907B : 40                  	lde 														; get character.
(1)   82/    907C : C9 00               	st 		(p1) 												; save in shadow memory
(1)   83/    907E : 35                  	xpah 	p1 													; switch to VRAM, preserving A.
(1)   84/    907F : C4 00               	ldi 	0 													
(1)   85/    9081 : 35                  	xpah 	p1
(1)   86/    9082 : CD 01               	st 		@1(p1) 												; save in screen memory, advance write position.
(1)   87/    9084 :                     ;
(1)   88/    9084 :                     ;	Write cursor position back from P1.L
(1)   89/    9084 :                     ;
(1)   90/    9084 :                     __PRUpdateCursor:
(1)   91/    9084 : C4 0C               	ldi		ScreenCursor / 256 									; set P1 to point to screen cursor, restore position to P1
(1)   92/    9086 : 35                  	xpah 	p1
(1)   93/    9087 : C4 80               	ldi 	ScreenCursor & 255 
(1)   94/    9089 : 31                  	xpal 	p1 													; after this, adjusted cursor position is in AC.
(1)   95/    908A : C9 00               	st 		(p1) 												; write back in cursor position
(1)   96/    908C : 94 13               	jp 		__PRExit 											; if position is off the bottom then scroll.
(1)   97/    908E :                     ;
(1)   98/    908E :                     ;	Scroll display
(1)   99/    908E :                     ;
(1)  100/    908E : C4 0C               	ldi 	(ScreenMirror+16) / 256 							; point P1 to 2nd line.
(1)  101/    9090 : 35                  	xpah 	p1
(1)  102/    9091 : C4 10               	ldi 	(ScreenMirror+16) & 255
(1)  103/    9093 :                     __PRScrollLoop:
(1)  104/    9093 : 31                  	xpal 	p1
(1)  105/    9094 : C1 00               	ld 		0(p1) 												; copy char to previous line
(1)  106/    9096 : C9 F0               	st 		-16(p1)
(1)  107/    9098 : C5 01               	ld 		@1(p1) 												; bump pointer.
(1)  108/    909A : 31                  	xpal 	p1
(1)  109/    909B : 94 F6               	jp 		__PRScrollLoop
(1)  110/    909D : C4 70               	ldi 	128-16 												; clear from and move to last line
(1)  111/    909F : 90 3D               	jmp 	__PRClearFromMoveTo
(1)  112/    90A1 :                     ;
(1)  113/    90A1 :                     ;	Exit screen drawing routine.
(1)  114/    90A1 :                     ;
(1)  115/    90A1 :                     __PRExit:
(1)  116/    90A1 : C2 03               	ld 		3(p2) 												; if character was zero, loop
(1)  117/    90A3 : 98 A8               	jz 		__PRPrintString 									; back as printing string at P1.
(1)  118/    90A5 :                     __PRExitNoCheck:
(1)  119/    90A5 : (MACRO)             	pulle 														; restore registers
(1)  119/    90A5 : C6 01                       ld              @1(p2)
(1)  119/    90A7 : 01                          xae
(1)  120/    90A8 : (MACRO)             	pullp 	p1
(1)  120/    90A8 : C6 01                       ld              @1(p2)
(1)  120/    90AA : 31                          xpal    P1
(1)  120/    90AB : C6 01                       ld              @1(p2)
(1)  120/    90AD : 35                          xpah    P1
(1)  121/    90AE : (MACRO)             	pulla
(1)  121/    90AE : C6 01                       ld              @1(p2)
(1)  122/    90B0 : 3F                  	xppc 	p3 													; return
(1)  123/    90B1 : 90 8B               	jmp 	Print 												; make re-entrant.
(1)  124/    90B3 :                     ;
(1)  125/    90B3 :                     ;	Check for supported control characters 8 (Backspace) 12 (Clear) 13 (Carriage Return)
(1)  126/    90B3 :                     ;
(1)  127/    90B3 :                     __PRIsControlChar:
(1)  128/    90B3 : 40                  	lde 														; restore character.
(1)  129/    90B4 : E4 0D               	xri 	13 													; carriage return ? (13)
(1)  130/    90B6 : 98 1B               	jz 		__PRIsReturn
(1)  131/    90B8 : E4 01               	xri 	13!12 												; form feed ? (12)
(1)  132/    90BA : 98 20               	jz 		__PRClearScreen
 AS V1.42 Beta [Bld 102] - source file vtl-2.asm(screen.asm) - page 6 - 12/15/2015 11:45:13


(1)  133/    90BC : E4 04               	xri 	12!8 												; backspace ? (8)
(1)  134/    90BE : 9C E1               	jnz 	__PRExit 
(1)  135/    90C0 :                     ;
(1)  136/    90C0 :                     ;	Handle backspace (8)
(1)  137/    90C0 :                     ;
(1)  138/    90C0 : 31                  	xpal 	p1 													; check cursor position is zero
(1)  139/    90C1 : 98 DE               	jz 		__PRExit 											; if it is, cannot backspace so exit.
(1)  140/    90C3 : 31                  	xpal 	p1  												; put it back
(1)  141/    90C4 : C5 FF               	ld 		@-1(p1)												; move it back one
(1)  142/    90C6 : C4 20               	ldi 	' '	 												; erase in shadow
(1)  143/    90C8 : C9 00               	st 		(p1)
(1)  144/    90CA : C4 00               	ldi 	0 													; point P1 to VRAM
(1)  145/    90CC : 35                  	xpah 	p1
(1)  146/    90CD : C4 20               	ldi 	' '													; erase in VRAM
(1)  147/    90CF : C9 00               	st 		(p1)
(1)  148/    90D1 : 90 B1               	jmp 	__PRUpdateCursor 									; and exit
(1)  149/    90D3 :                     ;
(1)  150/    90D3 :                     ;	Handle carriage return (13)
(1)  151/    90D3 :                     ;
(1)  152/    90D3 :                     __PRIsReturn:
(1)  153/    90D3 : 31                  	xpal 	p1 													; cursor position in A
(1)  154/    90D4 : D4 F0               	ani 	0xF0 												; start of current line
(1)  155/    90D6 : 02                  	ccl 														; down one line
(1)  156/    90D7 : F4 10               	adi 	0x10 	
(1)  157/    90D9 : 31                  	xpal 	p1 													; put it back in P1.
(1)  158/    90DA : 90 A8               	jmp 	__PRUpdateCursor
(1)  159/    90DC :                     ;
(1)  160/    90DC :                     ;	Handle clear screen (12)
(1)  161/    90DC :                     ;
(1)  162/    90DC :                     __PRClearScreen:
(1)  163/    90DC : C4 00               	ldi 	0 													; clear shadow memory from here.
(1)  164/    90DE :                     ;
(1)  165/    90DE :                     ;	From position A, clear the memory in the shadow screen to the end, copy the shadow screen to VRAM
(1)  166/    90DE :                     ;	then use position A as the new cursor position.
(1)  167/    90DE :                     ;
(1)  168/    90DE :                     __PRClearFromMoveTo:
(1)  169/    90DE : CE FF               	st 		@-1(p2) 											; save this position, the cursor goes here.
(1)  170/    90E0 :                     __PRClearLoop:
(1)  171/    90E0 : 31                  	xpal 	p1 													; save position in P1.
(1)  172/    90E1 : C4 20               	ldi 	' '													; write space there.
(1)  173/    90E3 : CD 01               	st 		@1(p1)
(1)  174/    90E5 : 31                  	xpal 	p1
(1)  175/    90E6 : 94 F8               	jp 		__PRClearLoop 										; until reached shadow memory start.
(1)  176/    90E8 : C4 00               	ldi 	0 													; now copy shadow memory to screen memory.
(1)  177/    90EA :                     __PRCopy:
(1)  178/    90EA : 31                  	xpal 	p1 													; set up P1.L
(1)  179/    90EB : C4 0C               	ldi 	ScreenMirror/256 									; point to shadow memory.
(1)  180/    90ED : 35                  	xpah 	p1 													
(1)  181/    90EE : C1 00               	ld 		(p1) 												; read shadow memory
(1)  182/    90F0 : 35                  	xpah 	p1 													; zero P1.H preserving A
(1)  183/    90F1 : C4 00               	ldi 	0
(1)  184/    90F3 : 35                  	xpah 	p1
(1)  185/    90F4 : CD 01               	st 		@1(p1) 												; save and increment p1
(1)  186/    90F6 : 31                  	xpal 	p1 
(1)  187/    90F7 : 94 F1               	jp 		__PRCopy 											; keep doing till all copied.
(1)  188/    90F9 : C6 01               	ld 		@1(p2) 												; read cursor position
(1)  189/    90FB : 31                  	xpal 	p1 													; put in P1.L
(1)  190/    90FC : 90 86               	jmp 	__PRUpdateCursor
(1)  191/    90FE :                     
(1)  192/    90FE :                     	endsection 	Print
 AS V1.42 Beta [Bld 102] - source file vtl-2.asm(screen.asm) - page 7 - 12/15/2015 11:45:13


(1)  193/    90FE :                     
(1)  194/    90FE :                     ; ****************************************************************************************************************
(1)  195/    90FE :                     ; ****************************************************************************************************************
(1)  196/    90FE :                     ;
(1)  197/    90FE :                     ;		Input a single character into A. Case is converted to Upper. All registers preserved except A
(1)  198/    90FE :                     ;
(1)  199/    90FE :                     ; ****************************************************************************************************************
(1)  200/    90FE :                     ; ****************************************************************************************************************
(1)  201/    90FE :                     
(1)  202/    90FE :                     GetChar:
(1)  203/    90FE :                     	section 	GetChar
(1)  204/    90FE : C4 08               	ldi 	0x8 												; set P1 to $8xx, and save P1.H
(1)  205/    9100 : 35                  	xpah 	p1
(1)  206/    9101 : CE FF               	st 		@-1(p2)
(1)  207/    9103 :                     __GCWaitKey: 													; wait for key press
(1)  208/    9103 : C1 00               	ld 		0(p1)
(1)  209/    9105 : 94 FC               	jp 		__GCWaitKey
(1)  210/    9107 : D4 7F               	ani	 	0x7F 												; throw away the upper bit.
(1)  211/    9109 : CA FF               	st 		-1(p2) 												; save it below stack
(1)  212/    910B :                     __GCWaitRelease:
(1)  213/    910B : C1 00               	ld 		0(p1) 												; wait for release
(1)  214/    910D : D4 80               	ani 	0x80
(1)  215/    910F : 9C FA               	jnz 	__GCWaitRelease
(1)  216/    9111 : C6 01               	ld 		@1(p2) 												; restore P1.H
(1)  217/    9113 : 35                  	xpah 	p1
(1)  218/    9114 : C2 FE               	ld 		-2(p2) 												; restore saved value
(1)  219/    9116 : 02                  	ccl
(1)  220/    9117 : F4 20               	adi 	0x20												; will make lower case -ve
(1)  221/    9119 : 94 02               	jp 		__GCNotLower
(1)  222/    911B : FC 20               	cai 	0x20 												; capitalise
(1)  223/    911D :                     __GCNotLower:
(1)  224/    911D : F4 E0               	adi 	0xE0 												; fix up.
(1)  225/    911F : 3F                  	xppc 	p3 													; return
(1)  226/    9120 : 90 DC               	jmp 	GetChar 											; make re-entrant
(1)  227/    9122 :                     	endsection 	GetChar
(1)  228/    9122 :                     
(1)  229/    9122 :                     ; ****************************************************************************************************************
(1)  230/    9122 :                     ; ****************************************************************************************************************
(1)  231/    9122 :                     ;
(1)  232/    9122 :                     ;			Read an ASCIIZ string from keyboard into P1 of length A maximum (excludes NULL terminator)
(1)  233/    9122 :                     ;
(1)  234/    9122 :                     ; ****************************************************************************************************************
(1)  235/    9122 :                     ; ****************************************************************************************************************
(1)  236/    9122 :                     
(1)  237/    9122 :                     GetString:
(1)  238/    9122 :                     	section GetString
(1)  239/    9122 : (MACRO)             	pusha 														; save A,P3,E
(1)  239/    9122 : CE FF                       st              @-1(p2)
(1)  240/    9124 : (MACRO)             	pushp 	p3
(1)  240/    9124 : 37                          xpah    P3
(1)  240/    9125 : CE FF                       st              @-1(p2)
(1)  240/    9127 : 33                          xpal    P3
(1)  240/    9128 : CE FF                       st              @-1(p2)
(1)  241/    912A : (MACRO)             	pushe 
(1)  241/    912A : 40                          lde
(1)  241/    912B : CE FF                       st              @-1(p2)
(1)  242/    912D : C4 00               	ldi 	0 													; set E (current position) to A.
(1)  243/    912F : 01                  	xae
(1)  244/    9130 :                     __GSLoop:
(1)  245/    9130 : (MACRO)             	lpi 	p3,Print-1 											; print the prompt (half coloured square)
 AS V1.42 Beta [Bld 102] - source file vtl-2.asm(screen.asm) - page 8 - 12/15/2015 11:45:13


(1)  245/    9130 : C4 90                       ldi     (PRINT-1) / 256
(1)  245/    9132 : 37                          xpah    P3
(1)  245/    9133 : C4 3D                       ldi     (PRINT-1) & 255
(1)  245/    9135 : 33                          xpal    P3
(1)  246/    9136 : C4 9B               	ldi 	155
(1)  247/    9138 : 3F                  	xppc 	p3
(1)  248/    9139 : (MACRO)             	lpi 	p3,GetChar-1 										; get a character
(1)  248/    9139 : C4 90                       ldi     (GETCHAR-1) / 256
(1)  248/    913B : 37                          xpah    P3
(1)  248/    913C : C4 FD                       ldi     (GETCHAR-1) & 255
(1)  248/    913E : 33                          xpal    P3
(1)  249/    913F : 3F                  	xppc 	p3
(1)  250/    9140 : C9 80               	st 		-0x80(p1) 											; save it in the current position.
(1)  251/    9142 : (MACRO)             	lpi 	p3,Print-1 											; erase the prompt with backspace.
(1)  251/    9142 : C4 90                       ldi     (PRINT-1) / 256
(1)  251/    9144 : 37                          xpah    P3
(1)  251/    9145 : C4 3D                       ldi     (PRINT-1) & 255
(1)  251/    9147 : 33                          xpal    P3
(1)  252/    9148 : C4 08               	ldi 	8
(1)  253/    914A : 3F                  	xppc 	p3
(1)  254/    914B : C1 80               	ld 		-0x80(p1) 											; re-read character
(1)  255/    914D : D4 E0               	ani 	0xE0 												; check if control key.
(1)  256/    914F : 98 0F               	jz 		__GSControlKey 
(1)  257/    9151 : 40                  	lde 														; get current position.
(1)  258/    9152 : E2 03               	xor 	3(p2) 												; reached maximum length of buffer ?
(1)  259/    9154 : 98 DA               	jz 		__GSLoop 											; if so, ignore the key and go round again.
(1)  260/    9156 : C1 80               	ld 		-0x80(p1) 											; get character and print it
(1)  261/    9158 : 3F                  	xppc 	p3
(1)  262/    9159 : C4 01               	ldi 	1 													; increment E
(1)  263/    915B : 02                  	ccl
(1)  264/    915C : 70                  	ade
(1)  265/    915D : 01                  	xae
(1)  266/    915E : 90 D0               	jmp 	__GSLoop 											; and go round again.
(1)  267/    9160 :                     ;
(1)  268/    9160 :                     ;	Handle control keys (0x00-0x1F)
(1)  269/    9160 :                     ;
(1)  270/    9160 :                     __GSControlKey:
(1)  271/    9160 : C1 80               	ld 		-0x80(p1) 											; get typed in key
(1)  272/    9162 : E4 08               	xri 	8 													; check for backspace.
(1)  273/    9164 : 98 17               	jz 		__GSBackspace 			
(1)  274/    9166 : E4 05               	xri 	8!13 												; check for CR
(1)  275/    9168 : 9C C6               	jnz 	__GSLoop 											; if not, ignore the key.
(1)  276/    916A :                     ;
(1)  277/    916A :                     ;	Carriage Return, ending input.
(1)  278/    916A :                     ;
(1)  279/    916A : C9 80               	st 		-0x80(p1) 											; replace the CR written with NULL terminator.
(1)  280/    916C : C4 0D               	ldi 	13 													; print CR
(1)  281/    916E : 3F                  	xppc 	p3
(1)  282/    916F : (MACRO)             	pulle 														; restore E,P3,A
(1)  282/    916F : C6 01                       ld              @1(p2)
(1)  282/    9171 : 01                          xae
(1)  283/    9172 : (MACRO)             	pullp	p3
(1)  283/    9172 : C6 01                       ld              @1(p2)
(1)  283/    9174 : 33                          xpal    P3
(1)  283/    9175 : C6 01                       ld              @1(p2)
(1)  283/    9177 : 37                          xpah    P3
(1)  284/    9178 : (MACRO)             	pulla
(1)  284/    9178 : C6 01                       ld              @1(p2)
(1)  285/    917A : 3F                  	xppc 	p3 													; return
(1)  286/    917B : 90 A5               	jmp 	GetString 											; make re-entrant (probably unneccessary !!)
 AS V1.42 Beta [Bld 102] - source file vtl-2.asm(screen.asm) - page 9 - 12/15/2015 11:45:13


(1)  287/    917D :                     ;
(1)  288/    917D :                     ;	Backspace entered
(1)  289/    917D :                     ;
(1)  290/    917D :                     __GSBackspace
(1)  291/    917D : 40                  	lde 														; if E = 0 we can't backspace any further.
(1)  292/    917E : 98 B0               	jz 		__GSLoop
(1)  293/    9180 : C4 08               	ldi 	8 													; backspace on screen
(1)  294/    9182 : 3F                  	xppc 	p3
(1)  295/    9183 : C4 FF               	ldi 	0xFF 												; decrement E
(1)  296/    9185 : 02                  	ccl
(1)  297/    9186 : 70                  	ade
(1)  298/    9187 : 01                  	xae
(1)  299/    9188 : 90 A6               	jmp 	__GSLoop 											; and go round again.
(1)  300/    918A :                     
(1)  301/    918A :                     	endsection GetString
(1)  302/    918A :                     
      47/    918A :                     	include source\statement.asm 								; assignment statement (e.g. LHS)
(1)    1/    918A :                     ; ****************************************************************************************************************
(1)    2/    918A :                     ; ****************************************************************************************************************
(1)    3/    918A :                     ;
(1)    4/    918A :                     ;												Statement Processing
(1)    5/    918A :                     ;
(1)    6/    918A :                     ; ****************************************************************************************************************
(1)    7/    918A :                     ; ****************************************************************************************************************
(1)    8/    918A :                     
(1)    9/    918A :                     ; ****************************************************************************************************************
(1)   10/    918A :                     ;
(1)   11/    918A :                     ;	Execute current line. P1 points to <Total Length>,<Line# Low>,<Line# High> <Text> ....,0
(1)   12/    918A :                     ;
(1)   13/    918A :                     ;	Returns CY/L = 1 okay, CY/L = 0 Error, code in 'A'. On exit P1 points to the next line, if this is
(1)   14/    918A :                     ;	at the top of memory the program is automatically stopped.
(1)   15/    918A :                     ;
(1)   16/    918A :                     ;	# [35]	if non zero, save current line number + 1 in ! and find line, stopping if too high, in run mode otherwise.
(1)   17/    918A :                     ; 	? [63]	Print string constants, numbers
(1)   18/    918A :                     ;	$ [36]	Print single characters
(1)   19/    918A :                     ;	& [38]	First free program byte, when set does a "NEW", stop always.
(1)   20/    918A :                     ;	: [58]	Array update :<expr>) =
(1)   21/    918A :                     ;	> [62]	Execute program at RHS (machine code)
(1)   22/    918A :                     ;
(1)   23/    918A :                     ;	Handle NULL/Comment lines seperately.
(1)   24/    918A :                     ;	
(1)   25/    918A :                     ;	Random Number processing is done on every execution.
(1)   26/    918A :                     ;
(1)   27/    918A :                     ; ****************************************************************************************************************
(1)   28/    918A :                     
(1)   29/    918A :                     ;
(1)   30/    918A :                     ;	Find the next line and then exit.
(1)   31/    918A :                     ;
(1)   32/    918A :                     __EX_EndLineAndExit:
(1)   33/    918A : C5 01               	ld 		@1(p1) 												; read and bump
(1)   34/    918C : 9C FC               	jnz 	__EX_EndLineAndExit
(1)   35/    918E :                     ;
(1)   36/    918E :                     ;	Come here if P1 already pointing to the next instruction ()
(1)   37/    918E :                     ;
(1)   38/    918E :                     __EX_ExecuteExit:
(1)   39/    918E : 03                  	scl 														; Set carry Flag
(1)   40/    918F : C1 00               	ld 		(p1) 												; look at the instruction length byte, 0 if end.
(1)   41/    9191 : 9C 0A               	jnz 	__EX_LeaveExecution 		
(1)   42/    9193 :                     __EX_StopOnError:			
(1)   43/    9193 : (MACRO)             	lpi 	p3,IsRunningProgram 								; clear the 'is running program' flag.
 AS V1.42 Beta [Bld 102] - source file vtl-2.asm(statement.asm) - page 10 - 12/15/2015 11:45:13


(1)   43/    9193 : C4 0C                       ldi     (ISRUNNINGPROGRAM) / 256
(1)   43/    9195 : 37                          xpah    P3
(1)   43/    9196 : C4 8F                       ldi     (ISRUNNINGPROGRAM) & 255
(1)   43/    9198 : 33                          xpal    P3
(1)   44/    9199 : C4 00               	ldi 	0
(1)   45/    919B : CB 00               	st 		(p3)
(1)   46/    919D :                     ;
(1)   47/    919D :                     ;	Leave anyway
(1)   48/    919D :                     ;
(1)   49/    919D :                     __EX_LeaveExecution:
(1)   50/    919D : (MACRO)             	pullp 	p3 													; restore A,E,P3
(1)   50/    919D : C6 01                       ld              @1(p2)
(1)   50/    919F : 33                          xpal    P3
(1)   50/    91A0 : C6 01                       ld              @1(p2)
(1)   50/    91A2 : 37                          xpah    P3
(1)   51/    91A3 : (MACRO)             	pulle
(1)   51/    91A3 : C6 01                       ld              @1(p2)
(1)   51/    91A5 : 01                          xae
(1)   52/    91A6 : (MACRO)             	pulla
(1)   52/    91A6 : C6 01                       ld              @1(p2)
(1)   53/    91A8 : 3F                  	xppc 	p3
(1)   54/    91A9 :                     ;
(1)   55/    91A9 :                     ;	Execute an A = B statement type (which is all of them !)
(1)   56/    91A9 :                     ;
(1)   57/    91A9 :                     ExecuteStatement:
(1)   58/    91A9 : (MACRO)             	pusha 	 													; save A,E,P3
(1)   58/    91A9 : CE FF                       st              @-1(p2)
(1)   59/    91AB : (MACRO)             	pushe
(1)   59/    91AB : 40                          lde
(1)   59/    91AC : CE FF                       st              @-1(p2)
(1)   60/    91AE : (MACRO)             	pushp 	p3
(1)   60/    91AE : 37                          xpah    P3
(1)   60/    91AF : CE FF                       st              @-1(p2)
(1)   60/    91B1 : 33                          xpal    P3
(1)   60/    91B2 : CE FF                       st              @-1(p2)
(1)   61/    91B4 : C1 00               	ld 		(p1) 												; check if already at end.
(1)   62/    91B6 : 98 D6               	jz 		__EX_ExecuteExit 									; if length was zero already at last line of memory, stop
(1)   63/    91B8 : (MACRO)             	lpi 	p3,('#' & 0x3F)*2+Variables 						; update # variable with current line number
(1)   63/    91B8 : C4 0C                       ldi     (('#' & 0X3F)*2+VARIABLES) / 256
(1)   63/    91BA : 37                          xpah    P3
(1)   63/    91BB : C4 D6                       ldi     (('#' & 0X3F)*2+VARIABLES) & 255
(1)   63/    91BD : 33                          xpal    P3
(1)   64/    91BE : C1 01               	ld 		1(p1)
(1)   65/    91C0 : CB 00               	st 		0(p3)
(1)   66/    91C2 : C1 02               	ld 		2(p1)
(1)   67/    91C4 : CB 01               	st 		1(p3)
(1)   68/    91C6 : C5 03               	ld 		@3(p1) 												; skip over length and line number.
(1)   69/    91C8 : (MACRO)             	lpi 	p3,RandomProcess-1 									; change the Random Number done every program line.
(1)   69/    91C8 : C4 94                       ldi     (RANDOMPROCESS-1) / 256
(1)   69/    91CA : 37                          xpah    P3
(1)   69/    91CB : C4 3B                       ldi     (RANDOMPROCESS-1) & 255
(1)   69/    91CD : 33                          xpal    P3
(1)   70/    91CE : 3F                  	xppc 	p3
(1)   71/    91CF :                     __ES_SkipSpaces:
(1)   72/    91CF : C5 01               	ld 		@1(p1) 												; read next character in line and skip it
(1)   73/    91D1 : 98 BB               	jz 		__EX_ExecuteExit 									; if it is zero, it will now point to the next line, exit.
(1)   74/    91D3 : E4 29               	xri 	')'													; is it a comment ?
(1)   75/    91D5 : 98 B3               	jz 		__EX_EndLineAndExit 								; skip the rest of the line and exit.	
(1)   76/    91D7 : E4 09               	xri 	')'!' ' 											; is it space ? if so, go back.
(1)   77/    91D9 : 98 F4               	jz 		__ES_SkipSpaces 									; first line of character now at -1(p1)
 AS V1.42 Beta [Bld 102] - source file vtl-2.asm(statement.asm) - page 11 - 12/15/2015 11:45:13


(1)   78/    91DB :                     
(1)   79/    91DB : C5 FF               	ld 		@-1(p1) 											; point P1 to first character and read it.
(1)   80/    91DD : 03                  	scl  														; valid values are 32-95.
(1)   81/    91DE : FC 20               	cai 	32 													; valid values are 0-63 now.
(1)   82/    91E0 : D4 C0               	ani 	0xC0 												; which means this must be zero
(1)   83/    91E2 : 98 09               	jz 		__ES_LegalAssignment  									
(1)   84/    91E4 : C4 41               	ldi 	'A'													; illegal assignment
(1)   85/    91E6 : 33                  	xpal 	p3
(1)   86/    91E7 :                     __ES_ReturnErrorP3Low:
(1)   87/    91E7 : 33                  	xpal 	p3
(1)   88/    91E8 :                     __ES_ReturnErrorA:
(1)   89/    91E8 : CA 03               	st 		3(p2) 												; this overrides stacked value with the returned A value.
(1)   90/    91EA : 02                  	ccl 														; return with error flag 
(1)   91/    91EB : 90 A6               	jmp 	__EX_StopOnError
(1)   92/    91ED :                     
(1)   93/    91ED :                     __ES_LegalAssignment:
(1)   94/    91ED : C1 00               	ld 		(p1) 												; get ASCII character code.
(1)   95/    91EF : D4 40               	ani 	0x40 												; look at bit $40. 
(1)   96/    91F1 : 9C 14               	jnz 	__ES_NotSpecial 									; if set, it is @A-Z range so can't be "special"
(1)   97/    91F3 : (MACRO)             	lpi 	p3,SpecialAssignment-1 								; check for "special assignments" (see above list)
(1)   97/    91F3 : C4 92                       ldi     (SPECIALASSIGNMENT-1) / 256
(1)   97/    91F5 : 37                          xpah    P3
(1)   97/    91F6 : C4 64                       ldi     (SPECIALASSIGNMENT-1) & 255
(1)   97/    91F8 : 33                          xpal    P3
(1)   98/    91F9 : C1 00               	ld 		(p1) 												; get the character code
(1)   99/    91FB : 3F                  	xppc 	p3					 								; check
(1)  100/    91FC : 01                  	xae 														; error code in E now (if any)
(1)  101/    91FD : 06                  	csa 														; check return flag.
(1)  102/    91FE : D4 80               	ani 	0x80
(1)  103/    9200 : 9C 05               	jnz 	__ES_NotSpecial 									; if returned CY/L = 1 didn't process it so normal var.
(1)  104/    9202 :                     
(1)  105/    9202 : 40                  	lde 														; processed it, check error flag.
(1)  106/    9203 : 9C E3               	jnz 	__ES_ReturnErrorA 									; if non zero return with that error code.
(1)  107/    9205 :                     __EX_EndLineAndExit2:
(1)  108/    9205 : 90 83               	jmp 	__EX_EndLineAndExit 								; otherwise just find EOL and exit as it was okay.
(1)  109/    9207 :                     ;
(1)  110/    9207 :                     ;	"Non Special" variables - e.g. straight copy expression value into memory stuff.
(1)  111/    9207 :                     ;
(1)  112/    9207 :                     __ES_NotSpecial:
(1)  113/    9207 : C5 01               	ld 		@1(p1) 												; it is a normal assignment.
(1)  114/    9209 : D4 3F               	ani 	0x3F 												; variable number
(1)  115/    920B : 01                  	xae 														; double it as two byte variables.
(1)  116/    920C : 02                  	ccl
(1)  117/    920D : 40                  	lde
(1)  118/    920E : 70                  	ade
(1)  119/    920F : 01                  	xae 														; save in E
(1)  120/    9210 : (MACRO)             	lpi 	p3,CheckEqualsAndEvaluate-1 						; check '=' and evaluate RHS.
(1)  120/    9210 : C4 92                       ldi     (CHECKEQUALSANDEVALUATE-1) / 256
(1)  120/    9212 : 37                          xpah    P3
(1)  120/    9213 : C4 2E                       ldi     (CHECKEQUALSANDEVALUATE-1) & 255
(1)  120/    9215 : 33                          xpal    P3
(1)  121/    9216 : 3F                  	xppc 	p3
(1)  122/    9217 : 33                  	xpal 	p3 													; save error code in P3.L, if there was one :)
(1)  123/    9218 : C6 02               	ld 		@2(p2) 												; drop the result.
(1)  124/    921A : 06                  	csa
(1)  125/    921B : 94 CA               	jp 		__ES_ReturnErrorP3Low 								; if +ve (CY/L = 0) then error (in P3.L) occurred
(1)  126/    921D :                     
(1)  127/    921D : (MACRO)             	lpi 	p3,Variables 										; E(p3) points to correct variable.
(1)  127/    921D : C4 0C                       ldi     (VARIABLES) / 256
(1)  127/    921F : 37                          xpah    P3
 AS V1.42 Beta [Bld 102] - source file vtl-2.asm(statement.asm) - page 12 - 12/15/2015 11:45:13


(1)  127/    9220 : C4 90                       ldi     (VARIABLES) & 255
(1)  127/    9222 : 33                          xpal    P3
(1)  128/    9223 : C2 FE               	ld 		-2(p2) 												; unstack LSB
(1)  129/    9225 : CB 80               	st 		-0x80(p3)
(1)  130/    9227 : C7 01               	ld 		@1(p3) 												; bump P3 easier than bumping E :)
(1)  131/    9229 : C2 FF               	ld 		-1(p2) 												; unstack MSB
(1)  132/    922B : CB 80               	st 		-0x80(p3)
(1)  133/    922D : 90 D6               	jmp 	__EX_EndLineAndExit2 								; and done :)
(1)  134/    922F :                     
(1)  135/    922F :                     ; ****************************************************************************************************************
(1)  136/    922F :                     ;
(1)  137/    922F :                     ;	Test to see if the following character is '=' and evaluate the expression following it. Returns CY/L = 0 and
(1)  138/    922F :                     ;	A = error code on error, if CY/L = 1 . Value is always returned on stack whatever.
(1)  139/    922F :                     ;
(1)  140/    922F :                     ; ****************************************************************************************************************
(1)  141/    922F :                     
(1)  142/    922F :                     CheckEqualsAndEvaluate:
(1)  143/    922F : CE FE               	st 		@-2(p2) 											; save result for answer, if any.
(1)  144/    9231 :                     __CEE_FindEquals:
(1)  145/    9231 : C1 00               	ld 		(p1) 												; check if EOS
(1)  146/    9233 : 98 0A               	jz 		__CEEFailEquals
(1)  147/    9235 : C5 01               	ld 		@1(p1) 												; fetch and bump.
(1)  148/    9237 : E4 20               	xri 	' '													; keep trying if space.
(1)  149/    9239 : 98 F6               	jz 		__CEE_FindEquals
(1)  150/    923B : E4 1D               	xri 	' ' ! '='											; okay, if equals.
(1)  151/    923D : 98 04               	jz 		__CEE_FoundEqual
(1)  152/    923F :                     __CEEFailEquals:
(1)  153/    923F : C4 45               	ldi 	'E'													; E Error
(1)  154/    9241 : 02                  	ccl
(1)  155/    9242 : 3F                  	xppc 	p3
(1)  156/    9243 :                     
(1)  157/    9243 :                     __CEE_FoundEqual:
(1)  158/    9243 : (MACRO)             	pusha 														; save A and P3
(1)  158/    9243 : CE FF                       st              @-1(p2)
(1)  159/    9245 : (MACRO)             	pushp 	p3
(1)  159/    9245 : 37                          xpah    P3
(1)  159/    9246 : CE FF                       st              @-1(p2)
(1)  159/    9248 : 33                          xpal    P3
(1)  159/    9249 : CE FF                       st              @-1(p2)
(1)  160/    924B : (MACRO)             	lpi 	p3,EvaluateExpression-1 							; evaluate the expression.
(1)  160/    924B : C4 94                       ldi     (EVALUATEEXPRESSION-1) / 256
(1)  160/    924D : 37                          xpah    P3
(1)  160/    924E : C4 B4                       ldi     (EVALUATEEXPRESSION-1) & 255
(1)  160/    9250 : 33                          xpal    P3
(1)  161/    9251 : 3F                  	xppc 	p3
(1)  162/    9252 : CA 04               	st  	4(p2) 												; save error code overwriting A.
(1)  163/    9254 : C6 01               	ld 		@1(p2) 												; copy result over.
(1)  164/    9256 : CA 04               	st 		4(p2)
(1)  165/    9258 : C6 01               	ld 		@1(p2)
(1)  166/    925A : CA 04               	st 		4(p2)
(1)  167/    925C : (MACRO)             	pullp 	p3 													; restore P3
(1)  167/    925C : C6 01                       ld              @1(p2)
(1)  167/    925E : 33                          xpal    P3
(1)  167/    925F : C6 01                       ld              @1(p2)
(1)  167/    9261 : 37                          xpah    P3
(1)  168/    9262 : (MACRO)             	pulla 														; restore A
(1)  168/    9262 : C6 01                       ld              @1(p2)
(1)  169/    9264 : 3F                  	xppc 	p3
(1)  170/    9265 :                     
(1)  171/    9265 :                     ; ****************************************************************************************************************
 AS V1.42 Beta [Bld 102] - source file vtl-2.asm(statement.asm) - page 13 - 12/15/2015 11:45:13


(1)  172/    9265 :                     ;
(1)  173/    9265 :                     ;		Special assignment tests, e.g. those with a side effect. On entrance (p1) points to the assignment.
(1)  174/    9265 :                     ;		On exit CY/L = 0 means processed and the value is on the TOS. CY/L = 1 means did not process, so should
(1)  175/    9265 :                     ;		be processed as variable assignment. If processed then A contains the error code, which is zero if successful.
(1)  176/    9265 :                     ;
(1)  177/    9265 :                     ; ****************************************************************************************************************
(1)  178/    9265 :                     
(1)  179/    9265 :                     SpecialAssignment:
(1)  180/    9265 : (MACRO)             	pusha
(1)  180/    9265 : CE FF                       st              @-1(p2)
(1)  181/    9267 : (MACRO)             	pushp 	p3
(1)  181/    9267 : 37                          xpah    P3
(1)  181/    9268 : CE FF                       st              @-1(p2)
(1)  181/    926A : 33                          xpal    P3
(1)  181/    926B : CE FF                       st              @-1(p2)
(1)  182/    926D : (MACRO)             	lpi 	p3,__SA_Table 										; point P3 to the table of special assignments
(1)  182/    926D : C4 94                       ldi     (__SA_TABLE) / 256
(1)  182/    926F : 37                          xpah    P3
(1)  182/    9270 : C4 29                       ldi     (__SA_TABLE) & 255
(1)  182/    9272 : 33                          xpal    P3
(1)  183/    9273 :                     __SA_Find:
(1)  184/    9273 : C7 03               	ld 		@3(p3) 												; get next table entry
(1)  185/    9275 : 98 11               	jz 		__SA_NotFound
(1)  186/    9277 : E1 00               	xor 	(p1) 												; is it the one we've found.
(1)  187/    9279 : 9C F8               	jnz 	__SA_Find 											; no, try again.
(1)  188/    927B :                     
(1)  189/    927B : C5 01               	ld 		@1(p1) 												; skip P1 over the assignment charactr.
(1)  190/    927D : C3 FE               	ld 		-2(p3) 												; get LSB of vector
(1)  191/    927F : 01                  	xae
(1)  192/    9280 : C3 FF               	ld 		-1(p3) 												; get MSB of vector to P3.H
(1)  193/    9282 : 37                  	xpah 	p3
(1)  194/    9283 : 40                  	lde 														; copy LSB from E to P3.L
(1)  195/    9284 : 33                  	xpal 	p3
(1)  196/    9285 : 3F                  	xppc 	p3 													; and go there.
(1)  197/    9286 : 90 A7               	jmp 	CheckEqualsAndEvaluate 								; set up so a further xppc p3 goes here immediately.
(1)  198/    9288 :                     ;
(1)  199/    9288 :                     ;	Nothing found in the specials table.
(1)  200/    9288 :                     ;
(1)  201/    9288 :                     __SA_NotFound:
(1)  202/    9288 : 03                  	scl 														; set CY/L as nothing processed.
(1)  203/    9289 :                     __SA_Exit:
(1)  204/    9289 : (MACRO)             	pullp 	p3
(1)  204/    9289 : C6 01                       ld              @1(p2)
(1)  204/    928B : 33                          xpal    P3
(1)  204/    928C : C6 01                       ld              @1(p2)
(1)  204/    928E : 37                          xpah    P3
(1)  205/    928F : (MACRO)             	pulla
(1)  205/    928F : C6 01                       ld              @1(p2)
(1)  206/    9291 : 3F                  	xppc 	p3 												
(1)  207/    9292 :                     ;
(1)  208/    9292 :                     ;	Error occurred on expression evaluation, E contains error code.
(1)  209/    9292 :                     ;
(1)  210/    9292 :                     __SA_ExpressionError:
(1)  211/    9292 : 02                  	ccl
(1)  212/    9293 : 40                  	lde 														; get error code
(1)  213/    9294 : CA 02               	st 		2(p2) 												; save error code on stack.
(1)  214/    9296 : 90 F1               	jmp 	__SA_Exit
(1)  215/    9298 :                     
(1)  216/    9298 :                     ; ****************************************************************************************************************
(1)  217/    9298 :                     ;								$ = nn Prints the low byte of nn as a character
 AS V1.42 Beta [Bld 102] - source file vtl-2.asm(statement.asm) - page 14 - 12/15/2015 11:45:13


(1)  218/    9298 :                     ; ****************************************************************************************************************
(1)  219/    9298 :                     
(1)  220/    9298 :                     __SA_CO_Enter:													; $ right hand side.
(1)  221/    9298 : 3F                  	xppc 	p3 													; evaluate RHS
(1)  222/    9299 : 01                  	xae															; save error code if any
(1)  223/    929A : C6 02               	ld 		@2(p2) 												; drop the return value
(1)  224/    929C : 06                  	csa 														; error check
(1)  225/    929D : 94 F3               	jp 		__SA_ExpressionError 								; go here if failed.
(1)  226/    929F : (MACRO)             	lpi 	p3,Print-1											; print character
(1)  226/    929F : C4 90                       ldi     (PRINT-1) / 256
(1)  226/    92A1 : 37                          xpah    P3
(1)  226/    92A2 : C4 3D                       ldi     (PRINT-1) & 255
(1)  226/    92A4 : 33                          xpal    P3
(1)  227/    92A5 : C2 FE               	ld 		-2(p2) 												; get LSB of value
(1)  228/    92A7 : 98 01               	jz 		__SA_CO_NoPrint 									; don't print if $00
(1)  229/    92A9 : 3F                  	xppc 	p3 													; print character
(1)  230/    92AA :                     __SA_CO_NoPrint:
(1)  231/    92AA :                     ;
(1)  232/    92AA :                     ;	Come here when special case has been completed successfully.
(1)  233/    92AA :                     ;
(1)  234/    92AA :                     __SA_Completed:	
(1)  235/    92AA : C4 00               	ldi 	0 													; clear A return value
(1)  236/    92AC : CA 02               	st 		2(p2)
(1)  237/    92AE : 02                  	ccl 														; clear carry flag, processed successfully.
(1)  238/    92AF : 90 D8               	jmp 	__SA_Exit
(1)  239/    92B1 :                     
(1)  240/    92B1 :                     ; ****************************************************************************************************************
(1)  241/    92B1 :                     ; 							> = nn Call routine at nn with P1 pointing to variables.
(1)  242/    92B1 :                     ; ****************************************************************************************************************
(1)  243/    92B1 :                     
(1)  244/    92B1 :                     __SA_CO_Call:
(1)  245/    92B1 : 3F                  	xppc 	p3 													; evaluate RHS
(1)  246/    92B2 : 01                  	xae															; save error code if any
(1)  247/    92B3 : C6 02               	ld 		@2(p2) 												; drop the return value
(1)  248/    92B5 : 06                  	csa 														; error check
(1)  249/    92B6 : 94 DA               	jp 		__SA_ExpressionError 								; go here if failed.
(1)  250/    92B8 : C2 FE               	ld 		-2(p2) 												; put value into P3.L
(1)  251/    92BA : 33                  	xpal 	p3
(1)  252/    92BB : C2 FF               	ld 		-1(p2)
(1)  253/    92BD : 37                  	xpah 	p3
(1)  254/    92BE : C7 FF               	ld 		@-1(p3) 											; adjust call address for preincrement
(1)  255/    92C0 : (MACRO)             	pushp 	p1 													; save P1 on stack
(1)  255/    92C0 : 35                          xpah    P1
(1)  255/    92C1 : CE FF                       st              @-1(p2)
(1)  255/    92C3 : 31                          xpal    P1
(1)  255/    92C4 : CE FF                       st              @-1(p2)
(1)  256/    92C6 : (MACRO)             	lpi 	p1,Variables 										; point P1 to system variables
(1)  256/    92C6 : C4 0C                       ldi     (VARIABLES) / 256
(1)  256/    92C8 : 35                          xpah    P1
(1)  256/    92C9 : C4 90                       ldi     (VARIABLES) & 255
(1)  256/    92CB : 31                          xpal    P1
(1)  257/    92CC : 3F                  	xppc 	p3 													; call routine
(1)  258/    92CD : (MACRO)             	pullp 	p1 													; restore P1
(1)  258/    92CD : C6 01                       ld              @1(p2)
(1)  258/    92CF : 31                          xpal    P1
(1)  258/    92D0 : C6 01                       ld              @1(p2)
(1)  258/    92D2 : 35                          xpah    P1
(1)  259/    92D3 : 90 D5               	jmp 	__SA_Completed
(1)  260/    92D5 :                     
(1)  261/    92D5 :                     ; ****************************************************************************************************************
 AS V1.42 Beta [Bld 102] - source file vtl-2.asm(statement.asm) - page 15 - 12/15/2015 11:45:13


(1)  262/    92D5 :                     ; 							  & = nn Set end of program pointer (actually start !)
(1)  263/    92D5 :                     ; ****************************************************************************************************************
(1)  264/    92D5 :                     
(1)  265/    92D5 :                     __SA_CO_New:
(1)  266/    92D5 : 3F                  	xppc 	p3 													; evaluate RHS
(1)  267/    92D6 : 01                  	xae															; save error code if any
(1)  268/    92D7 : C6 02               	ld 		@2(p2) 												; drop the return value
(1)  269/    92D9 : 06                  	csa 														; error check
(1)  270/    92DA : 94 B6               	jp 		__SA_ExpressionError 								; go here if failed.
(1)  271/    92DC : (MACRO)             	lpi 	p3,Variables+('&' & 0x3F) * 2 						; point P3 to & variable.
(1)  271/    92DC : C4 0C                       ldi     (VARIABLES+('&' & 0X3F) * 2) / 256
(1)  271/    92DE : 37                          xpah    P3
(1)  271/    92DF : C4 DC                       ldi     (VARIABLES+('&' & 0X3F) * 2) & 255
(1)  271/    92E1 : 33                          xpal    P3
(1)  272/    92E2 : C2 FE               	ld 		-2(p2) 												; copy value into &
(1)  273/    92E4 : CB 00               	st 		0(p3)
(1)  274/    92E6 : C2 FF               	ld 		-1(p2)
(1)  275/    92E8 : CB 01               	st 		1(p3)
(1)  276/    92EA : (MACRO)             	lpi 	p3,NewProgram-1 									; New program routine
(1)  276/    92EA : C4 94                       ldi     (NEWPROGRAM-1) / 256
(1)  276/    92EC : 37                          xpah    P3
(1)  276/    92ED : C4 70                       ldi     (NEWPROGRAM-1) & 255
(1)  276/    92EF : 33                          xpal    P3
(1)  277/    92F0 : 3F                  	xppc 	p3
(1)  278/    92F1 :                     
(1)  279/    92F1 :                     __SA_Completed2:
(1)  280/    92F1 : 90 B7               	jmp 	__SA_Completed
(1)  281/    92F3 :                     __SA_ExpressionError2:
(1)  282/    92F3 : 90 9D               	jmp 	__SA_ExpressionError
(1)  283/    92F5 :                     
(1)  284/    92F5 :                     ; ****************************************************************************************************************
(1)  285/    92F5 :                     ;												:<expr>) Array Access
(1)  286/    92F5 :                     ; ****************************************************************************************************************
(1)  287/    92F5 :                     
(1)  288/    92F5 :                     __SA_CO_Array:
(1)  289/    92F5 : (MACRO)             	lpi 	p3,EvaluateExpression-1 							; get expression value (array index)
(1)  289/    92F5 : C4 94                       ldi     (EVALUATEEXPRESSION-1) / 256
(1)  289/    92F7 : 37                          xpah    P3
(1)  289/    92F8 : C4 B4                       ldi     (EVALUATEEXPRESSION-1) & 255
(1)  289/    92FA : 33                          xpal    P3
(1)  290/    92FB : 3F                  	xppc 	p3 													; evaluate RHS
(1)  291/    92FC : 01                  	xae															; save error code if any
(1)  292/    92FD : C6 02               	ld 		@2(p2) 												; drop the return value
(1)  293/    92FF : 06                  	csa 														; error check
(1)  294/    9300 : 94 90               	jp 		__SA_ExpressionError 								; go here if failed.
(1)  295/    9302 : C1 00               	ld 		(p1) 												; if next character not ) that's an error.
(1)  296/    9304 : E4 29               	xri 	')'
(1)  297/    9306 : 9C 8A               	jnz 	__SA_ExpressionError
(1)  298/    9308 : 02                  	ccl
(1)  299/    9309 : C6 FE               	ld 		@-2(p2) 											; double array index as words, and keep on stack.
(1)  300/    930B : F2 00               	add 	0(p2)
(1)  301/    930D : CA 00               	st 		0(p2)
(1)  302/    930F : C2 01               	ld 		1(p2)
(1)  303/    9311 : F2 01               	add 	1(p2)
(1)  304/    9313 : CA 01               	st 		1(p2)
(1)  305/    9315 : (MACRO)             	lpi 	p3,Variables+('&' & 0x3F) * 2 						; point P3 to & variable.
(1)  305/    9315 : C4 0C                       ldi     (VARIABLES+('&' & 0X3F) * 2) / 256
(1)  305/    9317 : 37                          xpah    P3
(1)  305/    9318 : C4 DC                       ldi     (VARIABLES+('&' & 0X3F) * 2) & 255
(1)  305/    931A : 33                          xpal    P3
 AS V1.42 Beta [Bld 102] - source file vtl-2.asm(statement.asm) - page 16 - 12/15/2015 11:45:13


(1)  306/    931B : 02                  	ccl 	
(1)  307/    931C : C3 00               	ld 		0(p3) 												; add that variable's value to the index
(1)  308/    931E : F2 00               	add 	0(p2)												; this will make this stack value where the 
(1)  309/    9320 : CA 00               	st 		0(p2)												; expression is going to be written to.
(1)  310/    9322 : C3 01               	ld 		1(p3)
(1)  311/    9324 : F2 01               	add 	1(p2)
(1)  312/    9326 : CA 01               	st 		1(p2)
(1)  313/    9328 : C5 01               	ld 		@1(p1) 												; skip over the closing bracket, already tested.
(1)  314/    932A : (MACRO)             	lpi 	p3,CheckEqualsAndEvaluate-1 						; check = nnnn and evaluate.
(1)  314/    932A : C4 92                       ldi     (CHECKEQUALSANDEVALUATE-1) / 256
(1)  314/    932C : 37                          xpah    P3
(1)  314/    932D : C4 2E                       ldi     (CHECKEQUALSANDEVALUATE-1) & 255
(1)  314/    932F : 33                          xpal    P3
(1)  315/    9330 : 3F                  	xppc	p3 													; call it
(1)  316/    9331 : 01                  	xae 														; save error
(1)  317/    9332 : C6 04               	ld 		@4(p2) 												; drop address and data
(1)  318/    9334 : 06                  	csa 														; check CY/L
(1)  319/    9335 : 94 BC               	jp 		__SA_ExpressionError2 								; error exit.
(1)  320/    9337 : C2 FE               	ld 		-2(p2)												; load address into P3.
(1)  321/    9339 : 01                  	xae
(1)  322/    933A : C2 FF               	ld 		-1(p2)
(1)  323/    933C : 37                  	xpah 	p3
(1)  324/    933D : 40                  	lde
(1)  325/    933E : 33                  	xpal 	p3
(1)  326/    933F : C2 FC               	ld 		-4(p2)												; write out to array memory
(1)  327/    9341 : CB 00               	st 		0(p3)
(1)  328/    9343 : C2 FD               	ld 		-3(p2)
(1)  329/    9345 : CB 01               	st 		1(p3)
(1)  330/    9347 :                     __SA_Completed3:
(1)  331/    9347 : 90 A8               	jmp 	__SA_Completed2	
(1)  332/    9349 :                     
(1)  333/    9349 :                     ; ****************************************************************************************************************
(1)  334/    9349 :                     ;									? Print either ?=<expr> or ?="<text>"[;]
(1)  335/    9349 :                     ; ****************************************************************************************************************
(1)  336/    9349 :                     
(1)  337/    9349 :                     __SA_CO_Print:
(1)  338/    9349 : C1 00               	ld 		(p1)												; look for =
(1)  339/    934B : 98 0A               	jz 		__SA_PR_Error
(1)  340/    934D : C5 01               	ld 		@1(p1) 												; fetch and bump
(1)  341/    934F : E4 20               	xri 	' '
(1)  342/    9351 : 98 F6               	jz 		__SA_CO_Print
(1)  343/    9353 : E4 1D               	xri 	' '!'=' 											; if found equals, go to that code.
(1)  344/    9355 : 98 05               	jz 		__SA_PR_FoundEquals
(1)  345/    9357 :                     __SA_PR_Error:													; report a P error
(1)  346/    9357 : C4 50               	ldi 	'P'
(1)  347/    9359 : 01                  	xae
(1)  348/    935A :                     __SA_ExpressionError3:
(1)  349/    935A : 90 97               	jmp 	__SA_ExpressionError2
(1)  350/    935C :                     
(1)  351/    935C :                     __SA_PR_FoundEquals:											; now look for a non-space character
(1)  352/    935C : C1 00               	ld 		(p1)
(1)  353/    935E : 98 F7               	jz 		__SA_PR_Error
(1)  354/    9360 : C5 01               	ld 		@1(p1)
(1)  355/    9362 : E4 20               	xri 	' '
(1)  356/    9364 : 98 F6               	jz 		__SA_PR_FoundEquals
(1)  357/    9366 : E4 02               	xri 	' '!'"'												; have we found a quote mark. 
(1)  358/    9368 : 9C 28               	jnz 	__SA_PR_Expression
(1)  359/    936A :                     ;
(1)  360/    936A :                     ;	?="<literal>"[;]
(1)  361/    936A :                     ;
 AS V1.42 Beta [Bld 102] - source file vtl-2.asm(statement.asm) - page 17 - 12/15/2015 11:45:13


(1)  362/    936A : (MACRO)             	lpi 	p3,Print-1 											; print character routine
(1)  362/    936A : C4 90                       ldi     (PRINT-1) / 256
(1)  362/    936C : 37                          xpah    P3
(1)  362/    936D : C4 3D                       ldi     (PRINT-1) & 255
(1)  362/    936F : 33                          xpal    P3
(1)  363/    9370 :                     __SA_PR_Literal:
(1)  364/    9370 : C1 00               	ld 		(p1) 												; check end of string
(1)  365/    9372 : 98 D3               	jz 		__SA_Completed3 
(1)  366/    9374 : C5 01               	ld 		@1(p1) 												; fetch and bump.
(1)  367/    9376 : E4 22               	xri 	'"'													; found quote mark.
(1)  368/    9378 : 98 05               	jz 		__SA_CheckSemicolon	 								; if found check for semicolon following.
(1)  369/    937A : C1 FF               	ld 		-1(p1) 												; fetch previous character
(1)  370/    937C : 3F                  	xppc 	p3 													; print the character
(1)  371/    937D : 90 F1               	jmp 	__SA_PR_Literal										; and go back.
(1)  372/    937F :                     ;
(1)  373/    937F :                     ;	Found ending quote mark, check for semicolon and print CR if absent
(1)  374/    937F :                     ;
(1)  375/    937F :                     __SA_CheckSemicolon:
(1)  376/    937F : C1 00               	ld 		(p1) 												; check EOS
(1)  377/    9381 : 98 0A               	jz 		__SA_PrintReturn
(1)  378/    9383 : C5 01               	ld 		@1(p1) 												; fetch and bump
(1)  379/    9385 : E4 20               	xri 	' ' 												; loop back if space
(1)  380/    9387 : 98 F6               	jz 		__SA_CheckSemicolon
(1)  381/    9389 : E4 1B               	xri 	' '!';'												; exit if semicolon
(1)  382/    938B : 98 BA               	jz 		__SA_Completed3 
(1)  383/    938D :                     __SA_PrintReturn:
(1)  384/    938D : C4 0D               	ldi 	13 													; print CR 													
(1)  385/    938F : 3F                  	xppc 	p3
(1)  386/    9390 :                     __SA_Completed4:
(1)  387/    9390 : 90 B5               	jmp 	__SA_Completed3
(1)  388/    9392 :                     ;
(1)  389/    9392 :                     ;	Expression not literal
(1)  390/    9392 :                     ;
(1)  391/    9392 :                     __SA_PR_Expression:
(1)  392/    9392 : C5 FF               	ld 		@-1(p1) 											; point to start of literal
(1)  393/    9394 : (MACRO)             	lpi 	p3,EvaluateExpression-1 							; evaluate expression.
(1)  393/    9394 : C4 94                       ldi     (EVALUATEEXPRESSION-1) / 256
(1)  393/    9396 : 37                          xpah    P3
(1)  393/    9397 : C4 B4                       ldi     (EVALUATEEXPRESSION-1) & 255
(1)  393/    9399 : 33                          xpal    P3
(1)  394/    939A : 3F                  	xppc 	p3 													; do it
(1)  395/    939B : 01                  	xae
(1)  396/    939C : C6 02               	ld 		@2(p2) 												; drop value off stack
(1)  397/    939E : 06                  	csa 	
(1)  398/    939F : 94 B9               	jp 		__SA_ExpressionError3
(1)  399/    93A1 : C2 FE               	ld 		-2(p2) 												; copy dropped value one level down.
(1)  400/    93A3 : CA FC               	st 		-4(p2)
(1)  401/    93A5 : C2 FF               	ld 		-1(p2)
(1)  402/    93A7 : CA FD               	st 		-3(p2)
(1)  403/    93A9 : (MACRO)             	pushp 	p1 													; save P1 on stack.
(1)  403/    93A9 : 35                          xpah    P1
(1)  403/    93AA : CE FF                       st              @-1(p2)
(1)  403/    93AC : 31                          xpal    P1
(1)  403/    93AD : CE FF                       st              @-1(p2)
(1)  404/    93AF : C6 FE               	ld 		@-2(p2) 											; pushes the dropped value on the stack.
(1)  405/    93B1 : (MACRO)             	lpi 	p1,KeyboardBuffer+8 								; temporary space for string to decode
(1)  405/    93B1 : C4 0D                       ldi     (KEYBOARDBUFFER+8) / 256
(1)  405/    93B3 : 35                          xpah    P1
(1)  405/    93B4 : C4 18                       ldi     (KEYBOARDBUFFER+8) & 255
(1)  405/    93B6 : 31                          xpal    P1
 AS V1.42 Beta [Bld 102] - source file vtl-2.asm(statement.asm) - page 18 - 12/15/2015 11:45:13


(1)  406/    93B7 : (MACRO)             	lpi 	p3,OSMathLibrary-1 									; Maths library.
(1)  406/    93B7 : C4 00                       ldi     (OSMATHLIBRARY-1) / 256
(1)  406/    93B9 : 37                          xpah    P3
(1)  406/    93BA : C4 02                       ldi     (OSMATHLIBRARY-1) & 255
(1)  406/    93BC : 33                          xpal    P3
(1)  407/    93BD : C4 24               	ldi 	'$'													; convert to ASCII.
(1)  408/    93BF : 3F                  	xppc 	p3 													; go do it.
(1)  409/    93C0 : (MACRO)             	lpi 	p3,Print-1 											; print the string
(1)  409/    93C0 : C4 90                       ldi     (PRINT-1) / 256
(1)  409/    93C2 : 37                          xpah    P3
(1)  409/    93C3 : C4 3D                       ldi     (PRINT-1) & 255
(1)  409/    93C5 : 33                          xpal    P3
(1)  410/    93C6 : C4 00               	ldi 	0													; at P1
(1)  411/    93C8 : 3F                  	xppc 	p3 	
(1)  412/    93C9 : (MACRO)             	pullp 	p1 													; restore P1.
(1)  412/    93C9 : C6 01                       ld              @1(p2)
(1)  412/    93CB : 31                          xpal    P1
(1)  412/    93CC : C6 01                       ld              @1(p2)
(1)  412/    93CE : 35                          xpah    P1
(1)  413/    93CF : 90 BF               	jmp 	__SA_Completed4
(1)  414/    93D1 :                     
(1)  415/    93D1 :                     ; ****************************************************************************************************************
(1)  416/    93D1 :                     ;												# = <expr> GOTO
(1)  417/    93D1 :                     ; ****************************************************************************************************************
(1)  418/    93D1 :                     
(1)  419/    93D1 :                     __SA_CO_Goto:
(1)  420/    93D1 : 3F                  	xppc 	p3 													; evaluate RHS
(1)  421/    93D2 : 01                  	xae															; save error code if any
(1)  422/    93D3 : C6 02               	ld 		@2(p2) 												; drop the return value
(1)  423/    93D5 : 06                  	csa 														; error check
(1)  424/    93D6 : 94 82               	jp 		__SA_ExpressionError3 								; go here if failed.
(1)  425/    93D8 : C2 FE               	ld 		-2(p2) 												; check if expression was zero
(1)  426/    93DA : DA FF               	or 		-1(p2)
(1)  427/    93DC : 98 B2               	jz 		__SA_Completed4 									; if so, don't do anything at all.
(1)  428/    93DE : (MACRO)             	lpi 	p3,Variables 										; access variables.
(1)  428/    93DE : C4 0C                       ldi     (VARIABLES) / 256
(1)  428/    93E0 : 37                          xpah    P3
(1)  428/    93E1 : C4 90                       ldi     (VARIABLES) & 255
(1)  428/    93E3 : 33                          xpal    P3
(1)  429/    93E4 : C3 46               	ld 		('#' & 0x3F)*2(p3)									; get old line number, add one, store in '!'
(1)  430/    93E6 : 02                  	ccl 														; this is the return address.
(1)  431/    93E7 : F4 01               	adi 	1
(1)  432/    93E9 : CB 42               	st 		('!' & 0x3F)*2(p3)
(1)  433/    93EB : C3 47               	ld 		('#' & 0x3F)*2+1(p3)								; do the MSB
(1)  434/    93ED : F4 00               	adi 	0
(1)  435/    93EF : CB 43               	st 		('!' & 0x3F)*2+1(p3)
(1)  436/    93F1 : C2 FE               	ld 		-2(p2) 												; copy evaluated expression to '#' variable.
(1)  437/    93F3 : CB 46               	st 		('#' & 0x3F)*2(p3)
(1)  438/    93F5 : C2 FF               	ld 		-1(p2)
(1)  439/    93F7 : CB 47               	st 		('#' & 0x3F)*2+1(p3)
(1)  440/    93F9 : C4 00               	ldi 	0  													; stop running - start again if we find the line.
(1)  441/    93FB : CB FF               	st 		IsRunningProgram-Variables(p3) 					
(1)  442/    93FD :                     
(1)  443/    93FD : C3 FD               	ld 		ProgramBase-Variables(p3) 							; now load the program base into P1 to line search
(1)  444/    93FF : 31                  	xpal 	p1
(1)  445/    9400 : C3 FE               	ld 		ProgramBase-Variables+1(p3)
(1)  446/    9402 : 35                  	xpah 	p1
(1)  447/    9403 :                     __SA_GO_FindLine:
(1)  448/    9403 : C1 00               	ld 		(p1) 												; if length byte = 0 then didn't find line.
(1)  449/    9405 : 98 89               	jz 		__SA_Completed4 									; so the command ends with the program stopped.
 AS V1.42 Beta [Bld 102] - source file vtl-2.asm(statement.asm) - page 19 - 12/15/2015 11:45:13


(1)  450/    9407 : C1 01               	ld 		1(p1) 												; calculate current line# - search line #
(1)  451/    9409 : 03                  	scl 														; (result doesn't matter.)
(1)  452/    940A : FA FE               	cad 	-2(p2)
(1)  453/    940C : C1 02               	ld 		2(p1)
(1)  454/    940E : FA FF               	cad 	-1(p2)
(1)  455/    9410 : 06                  	csa
(1)  456/    9411 : 94 0D               	jp 		__SA_GO_NextLine 									; if CY/L = 0 then < search line, go to next.
(1)  457/    9413 :                     
(1)  458/    9413 : C4 01               	ldi 	1 													; set the running flag.
(1)  459/    9415 : CB FF               	st 		IsRunningProgram-Variables(p3) 					
(1)  460/    9417 : C6 03               	ld 		@3(p2) 												; we have to jump out here rather than return because
(1)  461/    9419 :                     																; the normal exit does EOL scan. Drop stack values
(1)  462/    9419 : (MACRO)             	lpi 	p3,__EX_ExecuteExit-1 								; and jump out.
(1)  462/    9419 : C4 91                       ldi     (__EX_EXECUTEEXIT-1) / 256
(1)  462/    941B : 37                          xpah    P3
(1)  462/    941C : C4 8D                       ldi     (__EX_EXECUTEEXIT-1) & 255
(1)  462/    941E : 33                          xpal    P3
(1)  463/    941F : 3F                  	xppc 	p3
(1)  464/    9420 :                     
(1)  465/    9420 :                     __SA_GO_NextLine:
(1)  466/    9420 : C1 00               	ld 		(p1) 												; length byte in E
(1)  467/    9422 : 01                  	xae
(1)  468/    9423 : C5 80               	ld 		@-0x80(p1) 											; add that length byte to go to next instruction.
(1)  469/    9425 : 90 DC               	jmp 	__SA_GO_FindLine 									; and keep searching.
(1)  470/    9427 :                     	
(1)  471/    9427 :                     wait4:
(1)  472/    9427 : 90 FE               	jmp 	wait4
(1)  473/    9429 :                     
(1)  474/    9429 :                     ; ****************************************************************************************************************
(1)  475/    9429 :                     ;											Special Assignment Jump Table.
(1)  476/    9429 :                     ; ****************************************************************************************************************
(1)  477/    9429 :                     
(1)  478/    9429 :                     __SA_Entry macro ch,code
(1)  479/    9429 :                     	db 		ch
(1)  480/    9429 :                     	dw 		code-1
(1)  481/    9429 :                     	endm
(1)  482/    9429 :                     
(1)  483/    9429 :                     __SA_Table:
(1)  484/    9429 : (MACRO)             	__SA_Entry	'#',__SA_CO_Goto
(1)  484/    9429 : 23                          db              '#'
(1)  484/    942A : D0 93                       dw              __SA_CO_GOTO-1
(1)  485/    942C : (MACRO)             	__SA_Entry	'$',__SA_CO_Enter
(1)  485/    942C : 24                          db              '$'
(1)  485/    942D : 97 92                       dw              __SA_CO_ENTER-1
(1)  486/    942F : (MACRO)             	__SA_Entry  '>',__SA_CO_Call
(1)  486/    942F : 3E                          db              '>'
(1)  486/    9430 : B0 92                       dw              __SA_CO_CALL-1
(1)  487/    9432 : (MACRO)             	__SA_Entry 	'&',__SA_CO_New
(1)  487/    9432 : 26                          db              '&'
(1)  487/    9433 : D4 92                       dw              __SA_CO_NEW-1
(1)  488/    9435 : (MACRO)             	__SA_Entry 	':',__SA_CO_Array
(1)  488/    9435 : 3A                          db              ':'
(1)  488/    9436 : F4 92                       dw              __SA_CO_ARRAY-1
(1)  489/    9438 : (MACRO)             	__SA_Entry  '?',__SA_CO_Print
(1)  489/    9438 : 3F                          db              '?'
(1)  489/    9439 : 48 93                       dw              __SA_CO_PRINT-1
(1)  490/    943B : 00                  	db 			0												; marks end of table.
(1)  491/    943C :                     
(1)  492/    943C :                     ; ****************************************************************************************************************
(1)  493/    943C :                     ;
 AS V1.42 Beta [Bld 102] - source file vtl-2.asm(statement.asm) - page 20 - 12/15/2015 11:45:13


(1)  494/    943C :                     ;						Update the random seed, initialising if required. Galois LFSR
(1)  495/    943C :                     ;
(1)  496/    943C :                     ; ****************************************************************************************************************
(1)  497/    943C :                     
(1)  498/    943C :                     RandomProcess:
(1)  499/    943C : (MACRO)             	pushp 	p3 													; save P3
(1)  499/    943C : 37                          xpah    P3
(1)  499/    943D : CE FF                       st              @-1(p2)
(1)  499/    943F : 33                          xpal    P3
(1)  499/    9440 : CE FF                       st              @-1(p2)
(1)  500/    9442 : (MACRO)             	lpi 	p3,Variables+(0x27 & 0x3F) * 2 						; point P3 to random variable (' mark)
(1)  500/    9442 : C4 0C                       ldi     (VARIABLES+(0X27 & 0X3F) * 2) / 256
(1)  500/    9444 : 37                          xpah    P3
(1)  500/    9445 : C4 DE                       ldi     (VARIABLES+(0X27 & 0X3F) * 2) & 255
(1)  500/    9447 : 33                          xpal    P3
(1)  501/    9448 : C3 00               	ld 		0(p3) 												; check to see if seed is zero.
(1)  502/    944A : DB 01               	or 		1(p3)
(1)  503/    944C : 9C 08               	jnz 	__RPNoInitialise
(1)  504/    944E : C4 E1               	ldi 	0xE1 												; initialise to $ACE1
(1)  505/    9450 : CB 00               	st 		0(p3)
(1)  506/    9452 : C4 AC               	ldi 	0xAC
(1)  507/    9454 : CB 01               	st 		1(p3)
(1)  508/    9456 :                     __RPNoInitialise:
(1)  509/    9456 : 02                  	ccl 														; rotate seed right.
(1)  510/    9457 : C3 01               	ld 		1(p3)
(1)  511/    9459 : 1F                  	rrl
(1)  512/    945A : CB 01               	st 		1(p3)
(1)  513/    945C : C3 00               	ld 		0(p3)
(1)  514/    945E : 1F                  	rrl
(1)  515/    945F : CB 00               	st 		0(p3)
(1)  516/    9461 : 06                  	csa  														; this is the dropped bit
(1)  517/    9462 : 94 06               	jp 		__RPNoToggle 	
(1)  518/    9464 : C3 01               	ld 		1(p3) 												; if it is set xor ms byte with $B4
(1)  519/    9466 : E4 B4               	xri 	0xB4
(1)  520/    9468 : CB 01               	st 		1(p3)
(1)  521/    946A :                     __RPNoToggle:
(1)  522/    946A : (MACRO)             	pullp 	p3 													; restore P3 and exit
(1)  522/    946A : C6 01                       ld              @1(p2)
(1)  522/    946C : 33                          xpal    P3
(1)  522/    946D : C6 01                       ld              @1(p2)
(1)  522/    946F : 37                          xpah    P3
(1)  523/    9470 : 3F                  	xppc 	p3
(1)  524/    9471 :                     
(1)  525/    9471 :                     ; ****************************************************************************************************************
(1)  526/    9471 :                     ;
(1)  527/    9471 :                     ;							Set the bottom program address to the value in variable '&'
(1)  528/    9471 :                     ;
(1)  529/    9471 :                     ; ****************************************************************************************************************
(1)  530/    9471 :                     
(1)  531/    9471 :                     NewProgram:
(1)  532/    9471 : (MACRO)             	pushp 	p3
(1)  532/    9471 : 37                          xpah    P3
(1)  532/    9472 : CE FF                       st              @-1(p2)
(1)  532/    9474 : 33                          xpal    P3
(1)  532/    9475 : CE FF                       st              @-1(p2)
(1)  533/    9477 : (MACRO)             	lpi 	p3,Variables 										; point P3 to & variable.
(1)  533/    9477 : C4 0C                       ldi     (VARIABLES) / 256
(1)  533/    9479 : 37                          xpah    P3
(1)  533/    947A : C4 90                       ldi     (VARIABLES) & 255
(1)  533/    947C : 33                          xpal    P3
 AS V1.42 Beta [Bld 102] - source file vtl-2.asm(statement.asm) - page 21 - 12/15/2015 11:45:13


(1)  534/    947D : C4 00               	ldi 	0 													; reset is program running flag
(1)  535/    947F : CB FF               	st 		IsRunningProgram-Variables(p3)
(1)  536/    9481 : C3 4C               	ld  	('&' & 0x3F)*2(p3) 									; read low value of P3
(1)  537/    9483 : CB FD               	st 		ProgramBase-Variables(p3) 							; copy into program base
(1)  538/    9485 : 01                  	xae 														; save in E
(1)  539/    9486 : C3 4D               	ld  	('&' & 0x3F)*2+1(p3) 								; read high value of P3
(1)  540/    9488 : CB FE               	st 		ProgramBase+1-Variables(p3) 						; copy into program base
(1)  541/    948A : 37                  	xpah 	p3 													; put into P3.H
(1)  542/    948B : 40                  	lde 														; put low address into P3.L
(1)  543/    948C : 33                  	xpal 	p3
(1)  544/    948D : C4 00               	ldi 	0
(1)  545/    948F : CB 00               	st 		(p3) 												; put a $00 there, indicating line length = 0 final line.
(1)  546/    9491 : (MACRO)             	pullp 	p3
(1)  546/    9491 : C6 01                       ld              @1(p2)
(1)  546/    9493 : 33                          xpal    P3
(1)  546/    9494 : C6 01                       ld              @1(p2)
(1)  546/    9496 : 37                          xpah    P3
(1)  547/    9497 : 3F                  	xppc 	p3 													; return
(1)  548/    9498 :                     
      48/    9498 :                     	include source\expression.asm 								; expression evaluator (e.g. RHS)
(1)    1/    9498 :                     ; ****************************************************************************************************************
(1)    2/    9498 :                     ; ****************************************************************************************************************
(1)    3/    9498 :                     ;
(1)    4/    9498 :                     ;						Expression Evaluation. Returns CY/L = 0 on Error, A = Error Code
(1)    5/    9498 :                     ;	
(1)    6/    9498 :                     ; ****************************************************************************************************************
(1)    7/    9498 :                     ; ****************************************************************************************************************
(1)    8/    9498 :                     
(1)    9/    9498 : =0x3                operation = 3													; pending operation
(1)   10/    9498 : =0x5                resultLo = 5
(1)   11/    9498 : =0x6                resultHi = 6
(1)   12/    9498 :                     
(1)   13/    9498 :                     ;
(1)   14/    9498 :                     ;	Come here when the binary operator (+,-,*,/,>,=,<) fails. There are the two values still on the stack
(1)   15/    9498 :                     ;	so drop one and exit.
(1)   16/    9498 :                     ;
(1)   17/    9498 :                     __EE_TermErrorAndDrop:
(1)   18/    9498 : C6 02               	ld 		@2(p2) 												; reduce back to one number on the stack.
(1)   19/    949A :                     ;
(1)   20/    949A :                     ;	Return with a Term Error.
(1)   21/    949A :                     ;
(1)   22/    949A :                     __EE_TermError:
(1)   23/    949A : 02                  	ccl
(1)   24/    949B : C4 54               	ldi 	'T'													; 'T' is Term Error.
(1)   25/    949D : CA 06               	st 		6(p2) 												; return the term error in A register
(1)   26/    949F :                     __EE_Exit:
(1)   27/    949F : C6 01               	ld 		@1(p2)												; copy result to final target
(1)   28/    94A1 : CA 06               	st 		6(p2)
(1)   29/    94A3 : C6 01               	ld 		@1(p2)
(1)   30/    94A5 : CA 06               	st 		6(p2)
(1)   31/    94A7 : (MACRO)             	pullp 	p3													; restore registers
(1)   31/    94A7 : C6 01                       ld              @1(p2)
(1)   31/    94A9 : 33                          xpal    P3
(1)   31/    94AA : C6 01                       ld              @1(p2)
(1)   31/    94AC : 37                          xpah    P3
(1)   32/    94AD : (MACRO)             	pulle 	
(1)   32/    94AD : C6 01                       ld              @1(p2)
(1)   32/    94AF : 01                          xae
(1)   33/    94B0 : (MACRO)             	pulla 	 													; this is pending operation
(1)   33/    94B0 : C6 01                       ld              @1(p2)
 AS V1.42 Beta [Bld 102] - source file vtl-2.asm(expression.asm) - page 22 - 12/15/2015 11:45:13


(1)   34/    94B2 : (MACRO)             	pulla 	
(1)   34/    94B2 : C6 01                       ld              @1(p2)
(1)   35/    94B4 : 3F                  	xppc 	p3
(1)   36/    94B5 :                     
(1)   37/    94B5 :                     EvaluateExpression:
(1)   38/    94B5 : CE FE               	st 		@-2(p2)												; 2 byte final result
(1)   39/    94B7 : (MACRO)             	pusha 														; save A
(1)   39/    94B7 : CE FF                       st              @-1(p2)
(1)   40/    94B9 : C4 2B               	ldi 	'+' 												; save pending operation.
(1)   41/    94BB : CE FF               	st 		@-1(p2)
(1)   42/    94BD : (MACRO)             	pushe 														; save E and P3.
(1)   42/    94BD : 40                          lde
(1)   42/    94BE : CE FF                       st              @-1(p2)
(1)   43/    94C0 : (MACRO)             	pushp 	p3
(1)   43/    94C0 : 37                          xpah    P3
(1)   43/    94C1 : CE FF                       st              @-1(p2)
(1)   43/    94C3 : 33                          xpal    P3
(1)   43/    94C4 : CE FF                       st              @-1(p2)
(1)   44/    94C6 : C4 00               	ldi 	0 													; clear current value, push 0 on the stack.
(1)   45/    94C8 : CE FF               	st 		@-1(p2)
(1)   46/    94CA : CE FF               	st		@-1(p2)
(1)   47/    94CC :                     ;
(1)   48/    94CC :                     ;	Get a new term to complete pending operation.
(1)   49/    94CC :                     ;
(1)   50/    94CC :                     __EE_NextTerm:
(1)   51/    94CC : C1 00               	ld 		(p1) 												; read P1
(1)   52/    94CE : 98 CA               	jz 		__EE_TermError 										; term not found error.
(1)   53/    94D0 : C5 01               	ld 		@1(p1)												; fetch and skip over any spaces.
(1)   54/    94D2 : E4 20               	xri 	' '
(1)   55/    94D4 : 98 F6               	jz 		__EE_NextTerm
(1)   56/    94D6 :                     ;
(1)   57/    94D6 :                     ;	Check if it is a numeric constant
(1)   58/    94D6 :                     ;
(1)   59/    94D6 : C5 FF               	ld 		@-1(p1) 											; re-read first non space character.
(1)   60/    94D8 : 02                  	ccl
(1)   61/    94D9 : F4 50               	adi 	128-'0'												; will be +ve if < '0'
(1)   62/    94DB : 94 5A               	jp 		__EE_Variable
(1)   63/    94DD : F4 76               	adi 	255-0x89 											; will be +ve if > '9'
(1)   64/    94DF : 94 56               	jp 		__EE_Variable
(1)   65/    94E1 :                     ;
(1)   66/    94E1 :                     ;	Using the pending operation, the old value, and the new value, do the operation. Choice of either the
(1)   67/    94E1 :                     ;	OS built in routines or a seperate function for < = and >.
(1)   68/    94E1 :                     ;
(1)   69/    94E1 : (MACRO)             	lpi 	p3,OSMathLibrary-1 									; use the maths library to convert to an integer
(1)   69/    94E1 : C4 00                       ldi     (OSMATHLIBRARY-1) / 256
(1)   69/    94E3 : 37                          xpah    P3
(1)   69/    94E4 : C4 02                       ldi     (OSMATHLIBRARY-1) & 255
(1)   69/    94E6 : 33                          xpal    P3
(1)   70/    94E7 : C4 3F               	ldi	 	'?' 												; this is that function.
(1)   71/    94E9 : 3F                  	xppc 	p3
(1)   72/    94EA :                     __EE_RunPendingOperation:										; now two values on the stack that we operate on.
(1)   73/    94EA : (MACRO)             	lpi 	p3,OSMathLibrary-1									; use the library routine.
(1)   73/    94EA : C4 00                       ldi     (OSMATHLIBRARY-1) / 256
(1)   73/    94EC : 37                          xpah    P3
(1)   73/    94ED : C4 02                       ldi     (OSMATHLIBRARY-1) & 255
(1)   73/    94EF : 33                          xpal    P3
(1)   74/    94F0 : C2 07               	ld 		operation+4(p2)										; get the operation
(1)   75/    94F2 : D4 FC               	ani 	0xFC 												; is it 3C-3F which are < = > ?
(1)   76/    94F4 : E4 3C               	xri 	0x3C
(1)   77/    94F6 : 9C 06               	jnz 	__EE_IsLibraryOperator 								; use the library routine which supports those.
 AS V1.42 Beta [Bld 102] - source file vtl-2.asm(expression.asm) - page 23 - 12/15/2015 11:45:13


(1)   78/    94F8 : (MACRO)             	lpi 	p3,ExpressionComparison-1  							; instead.
(1)   78/    94F8 : C4 95                       ldi     (EXPRESSIONCOMPARISON-1) / 256
(1)   78/    94FA : 37                          xpah    P3
(1)   78/    94FB : C4 6F                       ldi     (EXPRESSIONCOMPARISON-1) & 255
(1)   78/    94FD : 33                          xpal    P3
(1)   79/    94FE :                     __EE_IsLibraryOperator:
(1)   80/    94FE : C2 07               	ld 		operation+4(p2)										; get the operation
(1)   81/    9500 : 3F                  	xppc 	p3 													; execute the operation.
(1)   82/    9501 : 06                  	csa 														; this has Carry Set = Error.
(1)   83/    9502 : D4 80               	ani 	0x80
(1)   84/    9504 : 9C 92               	jnz 	__EE_TermErrorAndDrop 								; so fail on error.
(1)   85/    9506 :                     ;
(1)   86/    9506 :                     ;	If we have done division, copy the remainder to the % variable.
(1)   87/    9506 :                     ;
(1)   88/    9506 : C2 05               	ld 		operation+2(p2) 									; re-read the operation just done.
(1)   89/    9508 : E4 5C               	xri 	'\\'												; is it unsigned integer divide ?
(1)   90/    950A : 98 1B               	jz 		__EE_ProcessRemainder 								; if so, then go copy remainder.
(1)   91/    950C :                     ;
(1)   92/    950C :                     ;	Get the next operator, ending if we find the end of the string or a closing bracket. At the outer parenthesis
(1)   93/    950C :                     ;	level, this is a comment.
(1)   94/    950C :                     ;
(1)   95/    950C :                     __EE_Next:
(1)   96/    950C : 03                  	scl 														; successful exit.
(1)   97/    950D : C1 00               	ld 		(p1) 												; look for next operator and bump.
(1)   98/    950F : 98 8E               	jz 		__EE_Exit 											; exit okay when found \0 or ), leave P1 on it.
(1)   99/    9511 : E4 29               	xri 	')'
(1)  100/    9513 : 98 8A               	jz 		__EE_Exit 										
(1)  101/    9515 : C5 01               	ld 		@1(p1) 												; read, but advance pointer
(1)  102/    9517 : E4 20               	xri 	' '													; space, try next.
(1)  103/    9519 : 98 F1               	jz 		__EE_Next
(1)  104/    951B : C1 FF               	ld 		-1(p1) 												; read it again.
(1)  105/    951D :                     __EE_WriteAndLoop:
(1)  106/    951D : CA 05               	st 		operation+2(p2) 									; the new pending operator.
(1)  107/    951F : E4 2F               	xri 	'/' 												; is it divide
(1)  108/    9521 : 9C A9               	jnz 	__EE_NextTerm 										; then go round again.
(1)  109/    9523 : C4 5C               	ldi 	'\\' 												; use unsigned divide, not signed divide.
(1)  110/    9525 : 90 F6               	jmp 	__EE_WriteAndLoop
(1)  111/    9527 :                     
(1)  112/    9527 :                     ;
(1)  113/    9527 :                     ;	Copy the remainder from the division into the '%' variable.
(1)  114/    9527 :                     ;	
(1)  115/    9527 :                     __EE_ProcessRemainder:
(1)  116/    9527 : (MACRO)             	lpi 	p3,Variables+('%' & 0x3F) * 2 						; point P3 to remainder variable
(1)  116/    9527 : C4 0C                       ldi     (VARIABLES+('%' & 0X3F) * 2) / 256
(1)  116/    9529 : 37                          xpah    P3
(1)  116/    952A : C4 DA                       ldi     (VARIABLES+('%' & 0X3F) * 2) & 255
(1)  116/    952C : 33                          xpal    P3
(1)  117/    952D : C2 FE               	ld 		-2(p2)												; copy remainder value into remainder variable.
(1)  118/    952F : CB 00               	st 		0(p3)
(1)  119/    9531 : C2 FF               	ld 		-1(p2)
(1)  120/    9533 : CB 01               	st 		1(p3)
(1)  121/    9535 : 90 D5               	jmp 	__EE_Next 											; get next operator.
(1)  122/    9537 :                     ;
(1)  123/    9537 :                     ;	Found a non-numeric term.
(1)  124/    9537 :                     ;
(1)  125/    9537 :                     __EE_Variable:	
(1)  126/    9537 : C5 01               	ld 		@1(p1) 												; check it is in the range 32-95
(1)  127/    9539 : 03                  	scl
(1)  128/    953A : FC 20               	cai 	32
(1)  129/    953C : D4 C0               	ani 	0xC0 												; this will be zero for 00-63
 AS V1.42 Beta [Bld 102] - source file vtl-2.asm(expression.asm) - page 24 - 12/15/2015 11:45:13


(1)  130/    953E : 9C 29               	jnz 	__EE_GoTermError 
(1)  131/    9540 : (MACRO)             	lpi 	p3,SpecialTermEvaluate-1 							; check for "specials"
(1)  131/    9540 : C4 95                       ldi     (SPECIALTERMEVALUATE-1) / 256
(1)  131/    9542 : 37                          xpah    P3
(1)  131/    9543 : C4 AE                       ldi     (SPECIALTERMEVALUATE-1) & 255
(1)  131/    9545 : 33                          xpal    P3
(1)  132/    9546 : C1 FF               	ld 		-1(p1)												; read character
(1)  133/    9548 : 3F                  	xppc 	p3
(1)  134/    9549 : 06                  	csa 														; if CY/L = 0 we have processed this
(1)  135/    954A : 94 1A               	jp 		__EE_SpecialProcess
(1)  136/    954C : C1 FF               	ld 		-1(p1)												; read it again
(1)  137/    954E : 02                  	ccl 														; double it
(1)  138/    954F : F1 FF               	add 	-1(p1)
(1)  139/    9551 : D4 7E               	ani 	0x7E 												; and with $3F << 1, this is an offset
(1)  140/    9553 : 01                  	xae 														; put in E
(1)  141/    9554 : (MACRO)             	lpi 	p3,Variables+1 										; offset from variables, read high byte first
(1)  141/    9554 : C4 0C                       ldi     (VARIABLES+1) / 256
(1)  141/    9556 : 37                          xpah    P3
(1)  141/    9557 : C4 91                       ldi     (VARIABLES+1) & 255
(1)  141/    9559 : 33                          xpal    P3
(1)  142/    955A : C3 80               	ld 		-0x80(p3) 											; read high byte
(1)  143/    955C : CE FF               	st 		@-1(p2) 											; push on stack
(1)  144/    955E : C7 FF               	ld 		@-1(p3) 											; point to low byte
(1)  145/    9560 : C3 80               	ld 		-0x80(p3) 											; read it
(1)  146/    9562 : CE FF               	st 		@-1(p2) 											; push on stack.
(1)  147/    9564 : 90 84               	jmp 	__EE_RunPendingOperation
(1)  148/    9566 :                     
(1)  149/    9566 :                     ;
(1)  150/    9566 :                     ;	Get here. If E = 0 then okay and value on stack as normal. E != 0 then error, no value pushed.
(1)  151/    9566 :                     ;
(1)  152/    9566 :                     __EE_SpecialProcess:
(1)  153/    9566 : 40                  	lde 														; check E
(1)  154/    9567 : 98 81               	jz 		__EE_RunPendingOperation 							; if zero, carry on as normal.											
(1)  155/    9569 :                     ;
(1)  156/    9569 :                     ;	Jumping back to TERM error.
(1)  157/    9569 :                     ;	
(1)  158/    9569 :                     __EE_GoTermError:												; too far to jump.
(1)  159/    9569 : (MACRO)             	lpi 	p3,__EE_TermError-1
(1)  159/    9569 : C4 94                       ldi     (__EE_TERMERROR-1) / 256
(1)  159/    956B : 37                          xpah    P3
(1)  159/    956C : C4 99                       ldi     (__EE_TERMERROR-1) & 255
(1)  159/    956E : 33                          xpal    P3
(1)  160/    956F : 3F                  	xppc 	p3
(1)  161/    9570 :                     
(1)  162/    9570 :                     ; ****************************************************************************************************************
(1)  163/    9570 :                     ;	Perform operation A on the top 2 values on the stack.  NOTE: this returns CY/L = 1 = error unlike
(1)  164/    9570 :                     ; 	the functions here but like the functions in the maths library. Only receives < = > ? as binary operators.
(1)  165/    9570 :                     ; ****************************************************************************************************************
(1)  166/    9570 :                     
(1)  167/    9570 :                     ExpressionComparison:
(1)  168/    9570 : 01                  	xae															; save in E and reload.
(1)  169/    9571 : 40                  	lde
(1)  170/    9572 : E4 3D               	xri 	'='													; check for equals.
(1)  171/    9574 : 98 06               	jz 		__EC_Equals
(1)  172/    9576 : E4 02               	xri 	'='!'?'												; if it wasn't ? it must've been < or >
(1)  173/    9578 : 9C 1E               	jnz 	__EC_GLCompare
(1)  174/    957A : 03                  	scl 														; return with an error, as we sent in '?'
(1)  175/    957B : 3F                  	xppc 	p3
(1)  176/    957C :                     ;
(1)  177/    957C :                     ;	Equality test.
 AS V1.42 Beta [Bld 102] - source file vtl-2.asm(expression.asm) - page 25 - 12/15/2015 11:45:13


(1)  178/    957C :                     ;
(1)  179/    957C :                     __EC_Equals:
(1)  180/    957C : C2 00               	ld 		0(p2)
(1)  181/    957E : E2 02               	xor 	2(p2)
(1)  182/    9580 : 9C 12               	jnz 	__EC_Fail
(1)  183/    9582 : C2 01               	ld 		1(p2)
(1)  184/    9584 : E2 03               	xor 	3(p2)
(1)  185/    9586 : 9C 0C               	jnz 	__EC_Fail
(1)  186/    9588 :                     __EC_Succeed:
(1)  187/    9588 : C4 01               	ldi 	1 													; return value 1
(1)  188/    958A :                     __EC_ReturnA:
(1)  189/    958A : CE 02               	st 		@2(p2) 												; drop TOS (save is irrelevant)
(1)  190/    958C : CA 00               	st 		0(p2) 												; save in LSB
(1)  191/    958E : C4 00               	ldi 	0
(1)  192/    9590 : CA 01               	st 		1(p2) 												; zero LSB
(1)  193/    9592 : 02                  	ccl 														; it's okay
(1)  194/    9593 : 3F                  	xppc 	p3
(1)  195/    9594 :                     ;
(1)  196/    9594 :                     __EC_Fail:
(1)  197/    9594 : C4 00               	ldi 	0 													; same as succeed, return 0.
(1)  198/    9596 : 90 F2               	jmp 	__EC_ReturnA
(1)  199/    9598 :                     ;
(1)  200/    9598 :                     ;	>= or < test
(1)  201/    9598 :                     ;
(1)  202/    9598 :                     __EC_GLCompare:
(1)  203/    9598 : 03                  	scl 														; subtract, don't care about the result.
(1)  204/    9599 : C2 02               	ld 		2(p2)
(1)  205/    959B : FA 00               	cad 	0(p2)
(1)  206/    959D : C2 03               	ld 		3(p2)
(1)  207/    959F : FA 01               	cad 	1(p2)
(1)  208/    95A1 : 40                  	lde 														; get original operator
(1)  209/    95A2 : E4 3C               	xri 	'<'													; will be 0 if <, #0 if >(=)
(1)  210/    95A4 : 98 02               	jz 		__EC_IsLessThan
(1)  211/    95A6 : C4 80               	ldi 	0x80 												; now will be 0 if <, 0x80 if >(=) 	
(1)  212/    95A8 :                     __EC_IsLessThan:
(1)  213/    95A8 : 01                  	xae 														; put in E
(1)  214/    95A9 : 06                  	csa 														; get CY/L
(1)  215/    95AA : 60                  	xre 														; invert CY/L if it was >(=)
(1)  216/    95AB : 94 DB               	jp 		__EC_Succeed 										; true
(1)  217/    95AD : 90 E5               	jmp 	__EC_Fail 											; false
(1)  218/    95AF :                     
      49/    95AF :                     	include source\special_terms.asm 							; RHS special terms (things like ?, $, ! a)
(1)    1/    95AF :                     ; ****************************************************************************************************************
(1)    2/    95AF :                     ; ****************************************************************************************************************
(1)    3/    95AF :                     ;
(1)    4/    95AF :                     ;										Special Term Evaluation
(1)    5/    95AF :                     ;	
(1)    6/    95AF :                     ; ****************************************************************************************************************
(1)    7/    95AF :                     ; ****************************************************************************************************************
(1)    8/    95AF :                     
(1)    9/    95AF :                     ; ****************************************************************************************************************
(1)   10/    95AF :                     ; ****************************************************************************************************************
(1)   11/    95AF :                     ;
(1)   12/    95AF :                     ;			Handle Special Non-Standard Terms. Standard terms are numeric constants and variables. 
(1)   13/    95AF :                     ;
(1)   14/    95AF :                     ;	Non standard terms are more complex than simple variable access or have side effects.
(1)   15/    95AF :                     ;
(1)   16/    95AF :                     ;	Accept pointer to term 2nd char in P1, first char in A.  Returns CY/L = 0 if processed, CY/L = 1 if ignored.
(1)   17/    95AF :                     ;
(1)   18/    95AF :                     ;										if processed correctly, value is on stack and E = 0.
 AS V1.42 Beta [Bld 102] - source file vtl-2.asm(special_terms.asm) - page 26 - 12/15/2015 11:45:13


(1)   19/    95AF :                     ;										if error occurred when processing, E != 0, no value on stack.
(1)   20/    95AF :                     ;	Non re-entrant:
(1)   21/    95AF :                     ;
(1)   22/    95AF :                     ;	Supported Terms are (at present) :
(1)   23/    95AF :                     ;
(1)   24/    95AF :                     ;		$ 			Read a single keystroke from keyboard, return ASCII value		(Not implemented)
(1)   25/    95AF :                     ;		?			Read a string from the keyboard, evaluate as expression			(Not implemented)
(1)   26/    95AF :                     ;		:<exp>)		Array access.													(Not implemented)
(1)   27/    95AF :                     ;		(<exp>)		Parenthesised expression.										(Not implemented)
(1)   28/    95AF :                     ;
(1)   29/    95AF :                     ; ****************************************************************************************************************
(1)   30/    95AF :                     ; ****************************************************************************************************************
(1)   31/    95AF :                     
(1)   32/    95AF :                     SpecialTermEvaluate:
(1)   33/    95AF : CE FE               	st 		@-2(p2) 											; save A allocating space for result.
(1)   34/    95B1 : (MACRO)             	pushp 	p3													; save P3
(1)   34/    95B1 : 37                          xpah    P3
(1)   34/    95B2 : CE FF                       st              @-1(p2)
(1)   34/    95B4 : 33                          xpal    P3
(1)   34/    95B5 : CE FF                       st              @-1(p2)
(1)   35/    95B7 : C2 02               	ld 		2(p2) 												; get original A
(1)   36/    95B9 : E4 24               	xri 	'$'													; check for $ (get a key stroke.)
(1)   37/    95BB : 9C 11               	jnz 	__STE_NotKeyStroke
(1)   38/    95BD :                     
(1)   39/    95BD :                     ; ****************************************************************************************************************
(1)   40/    95BD :                     ;										$ Read Character from keyboard
(1)   41/    95BD :                     ; ****************************************************************************************************************
(1)   42/    95BD : (MACRO)             	lpi 	p3,GetChar-1 										; read a keystroke.
(1)   42/    95BD : C4 90                       ldi     (GETCHAR-1) / 256
(1)   42/    95BF : 37                          xpah    P3
(1)   42/    95C0 : C4 FD                       ldi     (GETCHAR-1) & 255
(1)   42/    95C2 : 33                          xpal    P3
(1)   43/    95C3 : 3F                  	xppc 	p3 													; call it
(1)   44/    95C4 : CA 02               	st 		2(p2) 												; save result in LSB
(1)   45/    95C6 : C4 00               	ldi 	0
(1)   46/    95C8 : CA 03               	st 		3(p2) 												; save zero in MSB
(1)   47/    95CA : 01                  	xae 														; E = 0
(1)   48/    95CB : 02                  	ccl 														; CY/L = 1 => processed
(1)   49/    95CC : 90 3D               	jmp 	__STEExit
(1)   50/    95CE :                     
(1)   51/    95CE :                     __STE_NotKeyStroke:
(1)   52/    95CE : E4 1B               	xri 	'$'!'?'												; check for ? (read an expression)
(1)   53/    95D0 : 9C 30               	jnz 	__STENotExpression
(1)   54/    95D2 :                     
(1)   55/    95D2 :                     ; ****************************************************************************************************************
(1)   56/    95D2 :                     ;										? Read Expression from Keyboard
(1)   57/    95D2 :                     ; ****************************************************************************************************************
(1)   58/    95D2 :                     
(1)   59/    95D2 : (MACRO)             	pushp 	p1 													; save P1
(1)   59/    95D2 : 35                          xpah    P1
(1)   59/    95D3 : CE FF                       st              @-1(p2)
(1)   59/    95D5 : 31                          xpal    P1
(1)   59/    95D6 : CE FF                       st              @-1(p2)
(1)   60/    95D8 : (MACRO)             	lpi 	p3,GetString-1 										; read a string
(1)   60/    95D8 : C4 91                       ldi     (GETSTRING-1) / 256
(1)   60/    95DA : 37                          xpah    P3
(1)   60/    95DB : C4 21                       ldi     (GETSTRING-1) & 255
(1)   60/    95DD : 33                          xpal    P3
(1)   61/    95DE : (MACRO)             	lpi 	p1,KeyboardBuffer 									; into keyboard buffer
(1)   61/    95DE : C4 0D                       ldi     (KEYBOARDBUFFER) / 256
 AS V1.42 Beta [Bld 102] - source file vtl-2.asm(special_terms.asm) - page 27 - 12/15/2015 11:45:13


(1)   61/    95E0 : 35                          xpah    P1
(1)   61/    95E1 : C4 10                       ldi     (KEYBOARDBUFFER) & 255
(1)   61/    95E3 : 31                          xpal    P1
(1)   62/    95E4 : C4 50               	ldi 	KeyboardBufferSize 									; max length.
(1)   63/    95E6 : 3F                  	xppc 	p3
(1)   64/    95E7 : (MACRO)             	lpi 	p3,EvaluateExpression-1 							; evaluate it
(1)   64/    95E7 : C4 94                       ldi     (EVALUATEEXPRESSION-1) / 256
(1)   64/    95E9 : 37                          xpah    P3
(1)   64/    95EA : C4 B4                       ldi     (EVALUATEEXPRESSION-1) & 255
(1)   64/    95EC : 33                          xpal    P3
(1)   65/    95ED : 3F                  	xppc 	p3
(1)   66/    95EE : C6 01               	ld 		@1(p2)												; copy result
(1)   67/    95F0 : CA 05               	st 		5(p2)
(1)   68/    95F2 : C6 01               	ld 		@1(p2)
(1)   69/    95F4 : CA 05               	st 		5(p2)
(1)   70/    95F6 : (MACRO)             	pullp 	p1 													; restore P1
(1)   70/    95F6 : C6 01                       ld              @1(p2)
(1)   70/    95F8 : 31                          xpal    P1
(1)   70/    95F9 : C6 01                       ld              @1(p2)
(1)   70/    95FB : 35                          xpah    P1
(1)   71/    95FC : C4 00               	ldi 	0 													; and exit ignoring errors.
(1)   72/    95FE : 01                  	xae 	
(1)   73/    95FF : 02                  	ccl 	
(1)   74/    9600 : 90 09               	jmp 	__STEExit
(1)   75/    9602 :                     
(1)   76/    9602 :                     __STENotExpression:
(1)   77/    9602 : E4 05               	xri 	'?'!':'												; check if it is array or parenthesis
(1)   78/    9604 : 98 15               	jz 		__STEArrayOrBracket
(1)   79/    9606 : E4 12               	xri 	':'!'('
(1)   80/    9608 : 98 11               	jz 		__STEArrayOrBracket
(1)   81/    960A :                     
(1)   82/    960A :                     __STEIgnore:
(1)   83/    960A : 03                  	scl 														; A = 0, CY/L = 1 => last option.
(1)   84/    960B :                     __STEExit:
(1)   85/    960B : (MACRO)             	pullp 	p3
(1)   85/    960B : C6 01                       ld              @1(p2)
(1)   85/    960D : 33                          xpal    P3
(1)   85/    960E : C6 01                       ld              @1(p2)
(1)   85/    9610 : 37                          xpah    P3
(1)   86/    9611 : 06                  	csa 														; if CY/L = 0,
(1)   87/    9612 : 94 03               	jp 		__STEWasProcessed 									; then maybe keep result
(1)   88/    9614 :                     __STEThrow:
(1)   89/    9614 : C6 02               	ld 		@2(p2) 												; remove result off stack.
(1)   90/    9616 : 3F                  	xppc 	p3
(1)   91/    9617 :                     
(1)   92/    9617 :                     __STEWasProcessed:
(1)   93/    9617 : 40                  	lde 														; if E != 0, throw result.
(1)   94/    9618 : 9C FA               	jnz 	__STEThrow
(1)   95/    961A : 3F                  	xppc 	p3 													; return with result still on stack.
(1)   96/    961B :                     
(1)   97/    961B :                     ; ****************************************************************************************************************
(1)   98/    961B :                     ;							(<expr>), parenthesis or :<expr>), array lookup
(1)   99/    961B :                     ; ****************************************************************************************************************
(1)  100/    961B :                     
(1)  101/    961B :                     
(1)  102/    961B :                     __STEArrayOrBracket:
(1)  103/    961B : (MACRO)             	lpi 	p3,EvaluateExpression-1 							; evaluate expression
(1)  103/    961B : C4 94                       ldi     (EVALUATEEXPRESSION-1) / 256
(1)  103/    961D : 37                          xpah    P3
(1)  103/    961E : C4 B4                       ldi     (EVALUATEEXPRESSION-1) & 255
 AS V1.42 Beta [Bld 102] - source file vtl-2.asm(special_terms.asm) - page 28 - 12/15/2015 11:45:13


(1)  103/    9620 : 33                          xpal    P3
(1)  104/    9621 : 3F                  	xppc 	p3
(1)  105/    9622 : 01                  	xae 														; error code in E
(1)  106/    9623 : 06                  	csa 	
(1)  107/    9624 : 94 42               	jp 		__STETermErrorDrop 									; error in parenthesis expression.
(1)  108/    9626 :                     
(1)  109/    9626 : C2 04               	ld 		4(p2) 												; get first character original
(1)  110/    9628 : 01                  	xae 														; save in E
(1)  111/    9629 : C6 01               	ld 		@1(p2)												; copy result
(1)  112/    962B : CA 03               	st 		3(p2)
(1)  113/    962D : C6 01               	ld 		@1(p2)
(1)  114/    962F : CA 03               	st 		3(p2)
(1)  115/    9631 : C1 00               	ld 		(p1) 												; if next character NIL
(1)  116/    9633 : 98 35               	jz 		__STETermError
(1)  117/    9635 : C5 01               	ld 		@1(p1) 												; if next character ) then okay.
(1)  118/    9637 : E4 29               	xri 	')'
(1)  119/    9639 : 9C 2F               	jnz 	__STETermError
(1)  120/    963B :                     
(1)  121/    963B : 40                  	lde															; check first character to see if : or (
(1)  122/    963C : E4 28               	xri 	'('
(1)  123/    963E : 98 22               	jz 		__STENotArray
(1)  124/    9640 :                     ;
(1)  125/    9640 :                     ;	This section is difference between :3) and (3) - it doubles the value, adds to the value in the &
(1)  126/    9640 :                     ;	variable and reads the word there.
(1)  127/    9640 :                     ;
(1)  128/    9640 : (MACRO)             	lpi 	p3,Variables+('&' & 0x3F) * 2 						; point P3 to top of memory variable.
(1)  128/    9640 : C4 0C                       ldi     (VARIABLES+('&' & 0X3F) * 2) / 256
(1)  128/    9642 : 37                          xpah    P3
(1)  128/    9643 : C4 DC                       ldi     (VARIABLES+('&' & 0X3F) * 2) & 255
(1)  128/    9645 : 33                          xpal    P3
(1)  129/    9646 : C2 02               	ld 		2(p2) 												; double value being returned (word index)
(1)  130/    9648 : 02                  	ccl
(1)  131/    9649 : F2 02               	add 	2(p2)
(1)  132/    964B : 01                  	xae 														; save Low Value in E
(1)  133/    964C : C2 03               	ld 		3(p2)
(1)  134/    964E : F2 03               	add 	3(p2)
(1)  135/    9650 : 01                  	xae 														; High value in E, Low Value in A.
(1)  136/    9651 : 02                  	ccl
(1)  137/    9652 : F3 00               	add 	0(p3) 												; low address
(1)  138/    9654 : 01                  	xae 														; save in E, get high value.
(1)  139/    9655 : F3 01               	add 	1(p3)  												; add high base.
(1)  140/    9657 : 37                  	xpah 	p3 													; put in P3.H
(1)  141/    9658 : 40                  	lde 														; put low address in P3.L
(1)  142/    9659 : 33                  	xpal 	p3
(1)  143/    965A : C3 00               	ld 		0(p3) 												; copy this into stack position
(1)  144/    965C : CA 02               	st 		2(p2)
(1)  145/    965E : C3 01               	ld 		1(p3)
(1)  146/    9660 : CA 03               	st 		3(p2)
(1)  147/    9662 :                     __STENotArray:
(1)  148/    9662 : C4 00               	ldi 	0
(1)  149/    9664 : 01                  	xae 														; E = 0
(1)  150/    9665 : 02                  	ccl 														; clear CY/L indicating processed.
(1)  151/    9666 : 90 A3               	jmp 	__STEExit 
(1)  152/    9668 :                     
(1)  153/    9668 :                     __STETermErrorDrop:
(1)  154/    9668 : C6 02               	ld 		@2(p2)
(1)  155/    966A :                     
(1)  156/    966A :                     __STETermError:
(1)  157/    966A : C4 50               	ldi 	'P'													; P error
(1)  158/    966C : 01                  	xae 
 AS V1.42 Beta [Bld 102] - source file vtl-2.asm(special_terms.asm) - page 29 - 12/15/2015 11:45:13


(1)  159/    966D : 02                  	ccl
(1)  160/    966E : 90 9B               	jmp 	__STEExit
(1)  161/    9670 :                     	
      50/    9670 :                     
      51/    9670 :                     StartProgram:
      52/    9670 : (MACRO)             	vtl 	5,"$=12"
      52/    9670 : 08                          db              strlen("$=12")+4
      52/    9671 : 05 00                       dw              5
      52/    9673 : 24 3D 31 32 00              db              "$=12",0
      53/    9678 : (MACRO)             	vtl 	10,"A=0"
      53/    9678 : 07                          db              strlen("A=0")+4
      53/    9679 : 0A 00                       dw              10
      53/    967B : 41 3D 30 00                 db              "A=0",0
      54/    967F : (MACRO)             	vtl 	20,"B=1"
      54/    967F : 07                          db              strlen("B=1")+4
      54/    9680 : 14 00                       dw              20
      54/    9682 : 42 3D 31 00                 db              "B=1",0
      55/    9686 : (MACRO)             	vtl 	30,"?=A"
      55/    9686 : 07                          db              strlen("?=A")+4
      55/    9687 : 1E 00                       dw              30
      55/    9689 : 3F 3D 41 00                 db              "?=A",0
      56/    968D : (MACRO)             	vtl 	40,"?=\"! \";"
      56/    968D : 0B                          db              strlen("?=\"! \";")+4
      56/    968E : 28 00                       dw              40
      56/    9690 : 3F 3D 22 21 20 22           db              "?=\"! \";",0
                    3B 00 
      57/    9698 : (MACRO)             	vtl 	50,"?=B"
      57/    9698 : 07                          db              strlen("?=B")+4
      57/    9699 : 32 00                       dw              50
      57/    969B : 3F 3D 42 00                 db              "?=B",0
      58/    969F : (MACRO)             	vtl 	60,"?=\"\""
      58/    969F : 08                          db              strlen("?=\"\"")+4
      58/    96A0 : 3C 00                       dw              60
      58/    96A2 : 3F 3D 22 22 00              db              "?=\"\"",0
      59/    96A7 : (MACRO)             	vtl 	70,"A=A+1"
      59/    96A7 : 09                          db              strlen("A=A+1")+4
      59/    96A8 : 46 00                       dw              70
      59/    96AA : 41 3D 41 2B 31 00           db              "A=A+1",0
      60/    96B0 : (MACRO)             	vtl 	80,"B=B*A"
      60/    96B0 : 09                          db              strlen("B=B*A")+4
      60/    96B1 : 50 00                       dw              80
      60/    96B3 : 42 3D 42 2A 41 00           db              "B=B*A",0
      61/    96B9 : (MACRO)             	vtl 	90,"#=A<9*30"
      61/    96B9 : 0C                          db              strlen("#=A<9*30")+4
      61/    96BA : 5A 00                       dw              90
      61/    96BC : 23 3D 41 3C 39 2A           db              "#=A<9*30",0
                    33 30 00 
      62/    96C5 :                     EndProgram:
      63/    96C5 : 00                  	db 		0
      64/    96C6 :                     
 AS V1.42 Beta [Bld 102] - source file vtl-2.asm - page 30 - 12/15/2015 11:45:13


  symbol table (* = unused):
  ------------------------

*ARCHITECTURE :  i386-unknown-win32 - | *BIGENDIAN :                      0 - |
*BRANCHEXT :                      0 - | *CASESENSITIVE :                  0 - |
 CHECKEQUALSANDEVALUATE :      922F C | *CONSTPI :        3.141592653589793 - |
*DATE :                  12/15/2015 - | *ENDPROGRAM :                  96C5 C |
 EVALUATEEXPRESSION :          94B5 C |  EXECUTESTATEMENT :            91A9 C |
 EXPRESSIONCOMPARISON :        9570 C | *FALSE :                          0 - |
*FULLPMMU :                       1 - |  GETCHAR :                     90FE C |
 GETSTRING :                   9122 C | *HAS64 :                          1 - |
*HASDSP :                         0 - | *HASFPU :                         0 - |
*HASPMMU :                        0 - | *INEXTMODE :                      0 - |
*INLWORDMODE :                    0 - | *INMAXMODE :                      0 - |
*INSRCMODE :                      0 - | *INSUPMODE :                      0 - |
 ISRUNNINGPROGRAM :             C8F - |  KEYBOARDBUFFER :               D10 - |
 KEYBOARDBUFFERSIZE :            50 - | *LISTON :                         1 - |
*MACEXP :                         1 - | *MOMCPU :                         C - |
*MOMCPUNAME :                 SC/MP - | *NESTMAX :                      100 - |
 NEWPROGRAM :                  9471 C |  NEXT :                        9027 C |
 OPERATION :                      3 - |  OSMATHLIBRARY :                  3 - |
*PACKING :                        0 - | *PADDING :                        1 - |
 PRINT :                       903E C |  PROGRAMBASE :                  C8D - |
 RANDOMPROCESS :               943C C | *RELAXED :                        0 - |
*RESULTHI :                       6 - | *RESULTLO :                       5 - |
 SCREENCURSOR :                 C80 - |  SCREENMIRROR :                 C00 - |
 SPECIALASSIGNMENT :           9265 C |  SPECIALTERMEVALUATE :         95AF C |
 STARTPROGRAM :                9670 C |  STOP :                        903C C |
 SYSTEMVARIABLES :              C90 - | *TIME :                    11:45:13 - |
*TRUE :                           1 - |  VARIABLES :                    C90 - |
*VERSION :                     142F - |  WAIT4 :                       9427 C |
 __CEEFAILEQUALS :             923F C |  __CEE_FINDEQUALS :            9231 C |
 __CEE_FOUNDEQUAL :            9243 C |  __EC_EQUALS :                 957C C |
 __EC_FAIL :                   9594 C |  __EC_GLCOMPARE :              9598 C |
 __EC_ISLESSTHAN :             95A8 C |  __EC_RETURNA :                958A C |
 __EC_SUCCEED :                9588 C |  __EE_EXIT :                   949F C |
 __EE_GOTERMERROR :            9569 C |  __EE_ISLIBRARYOPERATOR :      94FE C |
 __EE_NEXT :                   950C C |  __EE_NEXTTERM :               94CC C |
 __EE_PROCESSREMAINDER :       9527 C |  __EE_RUNPENDINGOPERATION :    94EA C |
 __EE_SPECIALPROCESS :         9566 C |  __EE_TERMERROR :              949A C |
 __EE_TERMERRORANDDROP :       9498 C |  __EE_VARIABLE :               9537 C |
 __EE_WRITEANDLOOP :           951D C |  __ES_LEGALASSIGNMENT :        91ED C |
 __ES_NOTSPECIAL :             9207 C |  __ES_RETURNERRORA :           91E8 C |
 __ES_RETURNERRORP3LOW :       91E7 C |  __ES_SKIPSPACES :             91CF C |
 __EX_ENDLINEANDEXIT :         918A C |  __EX_ENDLINEANDEXIT2 :        9205 C |
 __EX_EXECUTEEXIT :            918E C |  __EX_LEAVEEXECUTION :         919D C |
 __EX_STOPONERROR :            9193 C |  __GCNOTLOWER [GETCHAR] :      911D C |
 __GCWAITKEY [GETCHAR] :       9103 C |  __GCWAITRELEASE [GETCHAR] :   910B C |
 __GSBACKSPACE [GETSTRING] :   917D C |  __GSCONTROLKEY [GETSTRING] :  9160 C |
 __GSLOOP [GETSTRING] :        9130 C |  __PRCLEARFROMMOVETO [PRINT] : 90DE C |
 __PRCLEARLOOP [PRINT] :       90E0 C |  __PRCLEARSCREEN [PRINT] :     90DC C |
 __PRCOPY [PRINT] :            90EA C |  __PREXIT [PRINT] :            90A1 C |
 __PREXITNOCHECK [PRINT] :     90A5 C |  __PRISCONTROLCHAR [PRINT] :   90B3 C |
 __PRISRETURN [PRINT] :        90D3 C |  __PRNOTASCII [PRINT] :        907B C |
 __PRPRINTCHARACTERA [PRINT] : 905F C |  __PRPRINTSTRING [PRINT] :     904D C |
 __PRSCROLLLOOP [PRINT] :      9093 C |  __PRUPDATECURSOR [PRINT] :    9084 C |
 __RPNOINITIALISE :            9456 C |  __RPNOTOGGLE :                946A C |
 __SA_CHECKSEMICOLON :         937F C |  __SA_COMPLETED :              92AA C |
 __SA_COMPLETED2 :             92F1 C |  __SA_COMPLETED3 :             9347 C |
 __SA_COMPLETED4 :             9390 C |  __SA_CO_ARRAY :               92F5 C |
 AS V1.42 Beta [Bld 102] - source file vtl-2.asm - page 31 - 12/15/2015 11:45:13


 __SA_CO_CALL :                92B1 C |  __SA_CO_ENTER :               9298 C |
 __SA_CO_GOTO :                93D1 C |  __SA_CO_NEW :                 92D5 C |
 __SA_CO_NOPRINT :             92AA C |  __SA_CO_PRINT :               9349 C |
 __SA_EXIT :                   9289 C |  __SA_EXPRESSIONERROR :        9292 C |
 __SA_EXPRESSIONERROR2 :       92F3 C |  __SA_EXPRESSIONERROR3 :       935A C |
 __SA_FIND :                   9273 C |  __SA_GO_FINDLINE :            9403 C |
 __SA_GO_NEXTLINE :            9420 C |  __SA_NOTFOUND :               9288 C |
 __SA_PRINTRETURN :            938D C |  __SA_PR_ERROR :               9357 C |
 __SA_PR_EXPRESSION :          9392 C |  __SA_PR_FOUNDEQUALS :         935C C |
 __SA_PR_LITERAL :             9370 C |  __SA_TABLE :                  9429 C |
 __STEARRAYORBRACKET :         961B C |  __STEEXIT :                   960B C |
*__STEIGNORE :                 960A C |  __STENOTARRAY :               9662 C |
 __STENOTEXPRESSION :          9602 C |  __STETERMERROR :              966A C |
 __STETERMERRORDROP :          9668 C |  __STETHROW :                  9614 C |
 __STEWASPROCESSED :           9617 C |  __STE_NOTKEYSTROKE :          95CE C |

    144 symbols
     32 unused symbols

 AS V1.42 Beta [Bld 102] - source file vtl-2.asm - page 32 - 12/15/2015 11:45:13


  defined macros:
  ---------------

LPI                                   | PULLA                                
PULLE                                 | PULLP                                
PUSHA                                 | PUSHE                                
PUSHP                                 | SETV                                 
VTL                                   | __SA_ENTRY                           

     10 macros

 AS V1.42 Beta [Bld 102] - source file vtl-2.asm - page 33 - 12/15/2015 11:45:13


  codepages:
  ----------

STANDARD (0 changed characters)


0.01 seconds assembly time

   1377 lines source file
   1728 lines incl. macro expansions
      2 passes
      0 errors
      0 warnings
