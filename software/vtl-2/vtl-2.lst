 AS V1.42 Beta [Bld 102] - source file vtl-2.asm - page 1 - 12/28/2015 17:38:53


       1/       0 :                     ; ****************************************************************************************************************
       2/       0 :                     ; ****************************************************************************************************************
       3/       0 :                     ;
       4/       0 :                     ;												VTL-2 ROM Image
       5/       0 :                     ;
       6/       0 :                     ; ****************************************************************************************************************
       7/       0 :                     ; ****************************************************************************************************************
       8/       0 :                     
       9/       0 :                     	cpu 	sc/mp
      10/       0 :                     
      11/       0 :                     	include source\memorymacros.asm 							; Memory allocation and Macro definition.	
(1)    1/       0 :                     ; ****************************************************************************************************************
(1)    2/       0 :                     ; ****************************************************************************************************************
(1)    3/       0 :                     ;
(1)    4/       0 :                     ;										Memory and Macro Allocation.
(1)    5/       0 :                     ;	
(1)    6/       0 :                     ; ****************************************************************************************************************
(1)    7/       0 :                     ; ****************************************************************************************************************
(1)    8/       0 :                     
(1)    9/       0 : =0x3                OSMathLibrary = 0x0003 											; the Maths library is here.
(1)   10/       0 : =0x210              BootMonitor = 0x210 											; address to boot monitor
(1)   11/       0 :                     
(1)   12/       0 :                     ; ****************************************************************************************************************
(1)   13/       0 :                     ;												 Memory Allocation
(1)   14/       0 :                     ; ****************************************************************************************************************
(1)   15/       0 :                     
(1)   16/       0 : =0xC00              ScreenMirror = 0xC00 											; Screen mirror, 128 bytes, 256 byte page boundary.
(1)   17/       0 : =0xC80              ScreenCursor = ScreenMirror+0x80  								; Position on that screen (00..7F)
(1)   18/       0 :                     
(1)   19/       0 : =0xD00              SystemVariables = 0xD00 										; System variables start here.
(1)   20/       0 : =0xD00              Variables = SystemVariables 									; 128 16 bit variables start here.
(1)   21/       0 :                     
(1)   22/       0 : =0xCFF              IsRunning = SystemVariables-1  									; Non-zero if free running, zero if stopped (1 byte)
(1)   23/       0 : =0xCFD              ProgramBase = SystemVariables-3 								; Program base address (2 bytes)
(1)   24/       0 :                     
(1)   25/       0 : =0xE00              KeyboardBuffer = 0xE00 											; Keyboard Buffer
(1)   26/       0 : =0x50               KeyboardBufferSize = 80 										; Size of keyboard Buffer
(1)   27/       0 :                     
(1)   28/       0 :                     ; ****************************************************************************************************************
(1)   29/       0 :                     ;														Macros
(1)   30/       0 :                     ; ****************************************************************************************************************
(1)   31/       0 :                     
(1)   32/       0 :                     lpi	macro	ptr,addr											; load pointer register with constant
(1)   33/       0 :                     	ldi 	(addr) / 256
(1)   34/       0 :                     	xpah 	ptr
(1)   35/       0 :                     	ldi 	(addr) & 255
(1)   36/       0 :                     	xpal 	ptr
(1)   37/       0 :                     	endm
(1)   38/       0 :                     
(1)   39/       0 :                     pushp macro ptr 												; push pointer register on stack
(1)   40/       0 :                     	xpah 	ptr
(1)   41/       0 :                     	st 		@-1(p2)
(1)   42/       0 :                     	xpal 	ptr
(1)   43/       0 :                     	st 		@-1(p2)
(1)   44/       0 :                     	endm
(1)   45/       0 :                     
(1)   46/       0 :                     pullp macro ptr 												; pull pointer register off stack
(1)   47/       0 :                     	ld 		@1(p2)
(1)   48/       0 :                     	xpal 	ptr
(1)   49/       0 :                     	ld 		@1(p2)
 AS V1.42 Beta [Bld 102] - source file vtl-2.asm(memorymacros.asm) - page 2 - 12/28/2015 17:38:53


(1)   50/       0 :                     	xpah 	ptr
(1)   51/       0 :                     	endm
(1)   52/       0 :                     
(1)   53/       0 :                     pushe macro 													; push E on stack
(1)   54/       0 :                     	lde
(1)   55/       0 :                     	st 		@-1(p2)
(1)   56/       0 :                     	endm
(1)   57/       0 :                     
(1)   58/       0 :                     pulle macro 													; pull E off stack
(1)   59/       0 :                     	ld 		@1(p2)
(1)   60/       0 :                     	xae
(1)   61/       0 :                     	endm
(1)   62/       0 :                     
(1)   63/       0 :                     pusha macro 													; push A on stack
(1)   64/       0 :                     	st 		@-1(p2)
(1)   65/       0 :                     	endm
(1)   66/       0 :                     
(1)   67/       0 :                     pulla macro
(1)   68/       0 :                     	ld 		@1(p2)
(1)   69/       0 :                     	endm
(1)   70/       0 :                     
(1)   71/       0 :                     setv macro ch,value 											; sets a variable to a value, assumes P3 = Variables.
(1)   72/       0 :                     	ldi 	(value) & 255
(1)   73/       0 :                     	st 		((ch) & 0x3F)*2(p3)
(1)   74/       0 :                     	ldi 	(value) / 256
(1)   75/       0 :                     	st 		((ch) & 0x3F)*2+1(p3)
(1)   76/       0 :                     	endm
(1)   77/       0 :                     
(1)   78/       0 :                     code macro lineNo,code 											; a debugging macro, which fakes up a line of code.
(1)   79/       0 :                     	db 		strlen(code)+4 										; one byte offset to next (0 = End of code)
(1)   80/       0 :                     	dw 		lineNo 												; two byte line number (low byte first)
(1)   81/       0 :                     	db 		code,0 												; ASCIIZ string
(1)   82/       0 :                     	endm
(1)   83/       0 :                     
(1)   84/       0 :                     special macro ch,method
(1)   85/       0 :                     	db 		ch
(1)   86/       0 :                     	dw 		(method)-1
(1)   87/       0 :                     	endm
      12/       0 :                     	include source\errors.asm 									; Error Codes
(1)    1/       0 :                     ; ****************************************************************************************************************
(1)    2/       0 :                     ; ****************************************************************************************************************
(1)    3/       0 :                     ;
(1)    4/       0 :                     ;												Errors
(1)    5/       0 :                     ;	
(1)    6/       0 :                     ; ****************************************************************************************************************
(1)    7/       0 :                     ; ****************************************************************************************************************
(1)    8/       0 :                     
(1)    9/       0 : =0x54               ERROR_SyntaxTerm = 'T' 											; Syntax error in term.
(1)   10/       0 : =0x5A               ERROR_DivideZero = 'Z'											; Divide by zero error.
(1)   11/       0 : =0x4F               ERROR_Operator = 'O'											; Operator error.
(1)   12/       0 : =0x42               ERROR_Bracket = 'B'												; Missing bracket error.
(1)   13/       0 : =0x53               ERROR_Syntax = 'S' 												; Syntax error in statement.
(1)   14/       0 : =0x52               ERROR_ReadOnly = 'R' 											; Variable is read only.
(1)   15/       0 : =0x51               ERROR_Quote = 'Q'												; Quote mark missing from literal string.
      13/       0 :                     
      14/       0 :                     ; ****************************************************************************************************************
      15/       0 :                     ;													Main Program
      16/       0 :                     ; ****************************************************************************************************************
      17/       0 :                     
      18/    9000 :                     	org 	0x9000 												; the ROM starts here
 AS V1.42 Beta [Bld 102] - source file vtl-2.asm - page 3 - 12/28/2015 17:38:53


      19/    9000 :                     
      20/    9000 : 68                  	db 		0x68												; this makes it boot straight into this ROM.
      21/    9001 : (MACRO)             	lpi 	p2,0xFF8											; set up stack default value
      21/    9001 : C4 0F                       ldi     (0XFF8) / 256
      21/    9003 : 36                          xpah    P2
      21/    9004 : C4 F8                       ldi     (0XFF8) & 255
      21/    9006 : 32                          xpal    P2
      22/    9007 : (MACRO)             	lpi 	p3,Print-1 											; clear screen
      22/    9007 : C4 90                       ldi     (PRINT-1) / 256
      22/    9009 : 37                          xpah    P3
      22/    900A : C4 7F                       ldi     (PRINT-1) & 255
      22/    900C : 33                          xpal    P3
      23/    900D : C4 0C               	ldi 	12
      24/    900F : 3F                  	xppc 	p3
      25/    9010 :                     
      26/    9010 : (MACRO)             	lpi 	p3,Variables 										; set some variables
      26/    9010 : C4 0D                       ldi     (VARIABLES) / 256
      26/    9012 : 37                          xpah    P3
      26/    9013 : C4 00                       ldi     (VARIABLES) & 255
      26/    9015 : 33                          xpal    P3
      27/    9016 : (MACRO)             	setv 	'C',0x1382
      27/    9016 : C4 82                       ldi     (0X1382) & 255
      27/    9018 : CB 06                       st              (('C') & 0x3F)*2(p3)
      27/    901A : C4 13                       ldi     (0X1382) / 256
      27/    901C : CB 07                       st              (('C') & 0x3F)*2+1(p3)
      28/    901E : (MACRO)             	setv	'&',0x1304
      28/    901E : C4 04                       ldi     (0X1304) & 255
      28/    9020 : CB 4C                       st              (('&') & 0x3F)*2(p3)
      28/    9022 : C4 13                       ldi     (0X1304) / 256
      28/    9024 : CB 4D                       st              (('&') & 0x3F)*2+1(p3)
      29/    9026 : C4 01               	ldi 	1
      30/    9028 : CB FF               	st 		IsRunning-Variables(p3)	
      31/    902A :                     
      32/    902A : C4 90               	ldi		test/256											; set program base address.
      33/    902C : CB FE               	st 		ProgramBase-Variables+1(p3)
      34/    902E : C4 3F               	ldi		test&255
      35/    9030 : CB FD               	st 		ProgramBase-Variables(p3)
      36/    9032 :                     
      37/    9032 : (MACRO)             	lpi 	p3,ExecuteNextStatement-1							; execute statement
      37/    9032 : C4 93                       ldi     (EXECUTENEXTSTATEMENT-1) / 256
      37/    9034 : 37                          xpah    P3
      37/    9035 : C4 3B                       ldi     (EXECUTENEXTSTATEMENT-1) & 255
      37/    9037 : 33                          xpal    P3
      38/    9038 : (MACRO)             	lpi 	p1,test
      38/    9038 : C4 90                       ldi     (TEST) / 256
      38/    903A : 35                          xpah    P1
      38/    903B : C4 3F                       ldi     (TEST) & 255
      38/    903D : 31                          xpal    P1
      39/    903E : 3F                  	xppc 	p3
      40/    903F :                     
      41/    903F :                     test:
      42/    903F :                     ;	code 	10,"& = 0"
      43/    903F : (MACRO)             	code 	20,"K = 32"
      43/    903F : 0A                          db              strlen("K = 32")+4                                                                          ; one byte offset to next (0 = End of "K = 32")
      43/    9040 : 14 00                       dw              20                                                                                          ; two byte line number (low byte first)
      43/    9042 : 4B 20 3D 20 33 32           db              "K = 32",0                                                                                          ; ASCIIZ string
                    00 
      44/    9049 : (MACRO)             	code 	30,"K = K + 1"
      44/    9049 : 0D                          db              strlen("K = K + 1")+4                                                                          ; one byte offset to next (0 = End of "K = K + 1")
      44/    904A : 1E 00                       dw              30                                                                                          ; two byte line number (low byte first)
 AS V1.42 Beta [Bld 102] - source file vtl-2.asm - page 4 - 12/28/2015 17:38:53


      44/    904C : 4B 20 3D 20 4B 20           db              "K = K + 1",0                                                                                          ; ASCIIZ string
                    2B 20 31 00 
      45/    9056 : (MACRO)             	code 	40,"$=K"
      45/    9056 : 07                          db              strlen("$=K")+4                                                                          ; one byte offset to next (0 = End of "$=K")
      45/    9057 : 28 00                       dw              40                                                                                          ; two byte line number (low byte first)
      45/    9059 : 24 3D 4B 00                 db              "$=K",0                                                                                          ; ASCIIZ string
      46/    905D : (MACRO)             	code 	50,"# = (K < 256) * 30"
      46/    905D : 16                          db              strlen("# = (K < 256) * 30")+4                                                                          ; one byte offset to next (0 = End of "# = (K < 256) * 30")
      46/    905E : 32 00                       dw              50                                                                                          ; two byte line number (low byte first)
      46/    9060 : 23 20 3D 20 28 4B           db              "# = (K < 256) * 30",0                                                                                          ; ASCIIZ string
                    20 3C 20 32 35 36 
                    29 20 2A 20 33 30 
                    00 
      47/    9073 : (MACRO)             	code 	60,"?=\"DONE\""
      47/    9073 : 0C                          db              strlen("?=\"DONE\"")+4                                                                          ; one byte offset to next (0 = End of "?=\"DONE\"")
      47/    9074 : 3C 00                       dw              60                                                                                          ; two byte line number (low byte first)
      47/    9076 : 3F 3D 22 44 4F 4E           db              "?=\"DONE\"",0                                                                                          ; ASCIIZ string
                    45 22 00 
      48/    907F : 00                  	db 		0
      49/    9080 :                     
      50/    9080 :                     ; ****************************************************************************************************************
      51/    9080 :                     ;													Source Files
      52/    9080 :                     ; ****************************************************************************************************************
      53/    9080 :                     
      54/    9080 :                     	include source\screen.asm 									; screen I/O stuff.
(1)    1/    9080 :                     ; ****************************************************************************************************************
(1)    2/    9080 :                     ; ****************************************************************************************************************
(1)    3/    9080 :                     ;
(1)    4/    9080 :                     ;											Screen I/O, VTL-2 ROM
(1)    5/    9080 :                     ;											=====================
(1)    6/    9080 :                     ;
(1)    7/    9080 :                     ;	Provides Character and String Input/Output functionality.
(1)    8/    9080 :                     ;
(1)    9/    9080 :                     ; ****************************************************************************************************************
(1)   10/    9080 :                     ; ****************************************************************************************************************
(1)   11/    9080 :                     
(1)   12/    9080 :                     ; ****************************************************************************************************************
(1)   13/    9080 :                     ; ****************************************************************************************************************
(1)   14/    9080 :                     ;
(1)   15/    9080 :                     ;	Print routine. Prints either character in A, or ASCIIZ string at P1 (if A is zero). Preserves all registers
(1)   16/    9080 :                     ;	except if printing string, P1 points to the character after the NULL terminator.
(1)   17/    9080 :                     ;
(1)   18/    9080 :                     ;	Scrolls automatically. Understands character codes 32-255, 8 (Backspace) 12 (Clear Screen) 13 (Carriage
(1)   19/    9080 :                     ;	Return). Others are currently ignored (except 0, see above). Note L/C values (97....) display those characters
(1)   20/    9080 :                     ;	in the ROM font *not* lower case :)
(1)   21/    9080 :                     ;
(1)   22/    9080 :                     ; ****************************************************************************************************************
(1)   23/    9080 :                     ; ****************************************************************************************************************
(1)   24/    9080 :                     
(1)   25/    9080 :                     Print:
(1)   26/    9080 :                     	section 	Print
(1)   27/    9080 :                     
(1)   28/    9080 : (MACRO)             	pusha														; push registers on stack
(1)   28/    9080 : CE FF                       st              @-1(p2)
(1)   29/    9082 : (MACRO)             	pushp 	p1
(1)   29/    9082 : 35                          xpah    P1
(1)   29/    9083 : CE FF                       st              @-1(p2)
(1)   29/    9085 : 31                          xpal    P1
(1)   29/    9086 : CE FF                       st              @-1(p2)
(1)   30/    9088 : (MACRO)             	pushe
 AS V1.42 Beta [Bld 102] - source file vtl-2.asm(screen.asm) - page 5 - 12/28/2015 17:38:53


(1)   30/    9088 : 40                          lde
(1)   30/    9089 : CE FF                       st              @-1(p2)
(1)   31/    908B :                     
(1)   32/    908B : C2 03               	ld 		3(p2) 												; read character 
(1)   33/    908D : 9C 12               	jnz 	__PRPrintCharacterA 								; if non zero print it on its own.
(1)   34/    908F :                     
(1)   35/    908F :                     __PRPrintString:
(1)   36/    908F : C2 01               	ld 		1(p2) 												; restore original P1
(1)   37/    9091 : 31                  	xpal 	p1
(1)   38/    9092 : C2 02               	ld 		2(p2)
(1)   39/    9094 : 35                  	xpah 	p1 													; read character at P1.
(1)   40/    9095 : C5 01               	ld 		@1(p1)
(1)   41/    9097 : 01                  	xae 														; save in E.
(1)   42/    9098 : 35                  	xpah 	p1 													; write P1 back.
(1)   43/    9099 : CA 02               	st 		2(p2)
(1)   44/    909B : 31                  	xpal 	p1
(1)   45/    909C : CA 01               	st 		1(p2)
(1)   46/    909E : 40                  	lde 														; get character from E
(1)   47/    909F : 98 46               	jz 		__PRExitNoCheck 									; exit without loop check.
(1)   48/    90A1 :                     ;
(1)   49/    90A1 :                     ;	Print character in A now ; throughout it is stored in E.
(1)   50/    90A1 :                     ;
(1)   51/    90A1 :                     __PRPrintCharacterA:
(1)   52/    90A1 : 01                  	xae 														; save character in E.
(1)   53/    90A2 :                     ;
(1)   54/    90A2 :                     ;	Read cursor and set P1 to that address
(1)   55/    90A2 :                     ;
(1)   56/    90A2 : C4 0C               	ldi 	ScreenCursor/256 									; set P1 to point to screen cursor
(1)   57/    90A4 : 35                  	xpah 	p1
(1)   58/    90A5 : C4 80               	ldi 	ScreenCursor&255
(1)   59/    90A7 : 31                  	xpal 	p1
(1)   60/    90A8 : C1 00               	ld 		0(p1) 												; put cursor position in P1.L
(1)   61/    90AA : 31                  	xpal 	p1
(1)   62/    90AB :                     ;
(1)   63/    90AB :                     ;	Check for control
(1)   64/    90AB :                     ;
(1)   65/    90AB : 40                  	lde 														; look at character
(1)   66/    90AC : D4 E0               	ani 	0xE0 												; is it code 0-31
(1)   67/    90AE : 98 45               	jz 		__PRIsControlChar
(1)   68/    90B0 :                     ;
(1)   69/    90B0 :                     ;	Print non-control
(1)   70/    90B0 :                     ;
(1)   71/    90B0 : 40                  	lde 														; read character
(1)   72/    90B1 : 03                  	scl 														; CY/L clear if < 96
(1)   73/    90B2 : FC 60               	cai 	96 
(1)   74/    90B4 : 06                  	csa 	 	 												; skip if carry set
(1)   75/    90B5 : E4 80               	xri 	0x80													
(1)   76/    90B7 : 94 04               	jp 		__PRNotASCII
(1)   77/    90B9 : 40                  	lde 														; if ASCII make 6 bit.
(1)   78/    90BA : D4 3F               	ani 	0x3F
(1)   79/    90BC : 01                  	xae
(1)   80/    90BD :                     __PRNotASCII:
(1)   81/    90BD : 40                  	lde 														; get character.
(1)   82/    90BE : C9 00               	st 		(p1) 												; save in shadow memory
(1)   83/    90C0 : 35                  	xpah 	p1 													; switch to VRAM, preserving A.
(1)   84/    90C1 : C4 00               	ldi 	0 													
(1)   85/    90C3 : 35                  	xpah 	p1
(1)   86/    90C4 : CD 01               	st 		@1(p1) 												; save in screen memory, advance write position.
(1)   87/    90C6 :                     ;
(1)   88/    90C6 :                     ;	Write cursor position back from P1.L
 AS V1.42 Beta [Bld 102] - source file vtl-2.asm(screen.asm) - page 6 - 12/28/2015 17:38:53


(1)   89/    90C6 :                     ;
(1)   90/    90C6 :                     __PRUpdateCursor:
(1)   91/    90C6 : C4 0C               	ldi		ScreenCursor / 256 									; set P1 to point to screen cursor, restore position to P1
(1)   92/    90C8 : 35                  	xpah 	p1
(1)   93/    90C9 : C4 80               	ldi 	ScreenCursor & 255 
(1)   94/    90CB : 31                  	xpal 	p1 													; after this, adjusted cursor position is in AC.
(1)   95/    90CC : C9 00               	st 		(p1) 												; write back in cursor position
(1)   96/    90CE : 94 13               	jp 		__PRExit 											; if position is off the bottom then scroll.
(1)   97/    90D0 :                     ;
(1)   98/    90D0 :                     ;	Scroll display
(1)   99/    90D0 :                     ;
(1)  100/    90D0 : C4 0C               	ldi 	(ScreenMirror+16) / 256 							; point P1 to 2nd line.
(1)  101/    90D2 : 35                  	xpah 	p1
(1)  102/    90D3 : C4 10               	ldi 	(ScreenMirror+16) & 255
(1)  103/    90D5 :                     __PRScrollLoop:
(1)  104/    90D5 : 31                  	xpal 	p1
(1)  105/    90D6 : C1 00               	ld 		0(p1) 												; copy char to previous line
(1)  106/    90D8 : C9 F0               	st 		-16(p1)
(1)  107/    90DA : C5 01               	ld 		@1(p1) 												; bump pointer.
(1)  108/    90DC : 31                  	xpal 	p1
(1)  109/    90DD : 94 F6               	jp 		__PRScrollLoop
(1)  110/    90DF : C4 70               	ldi 	128-16 												; clear from and move to last line
(1)  111/    90E1 : 90 3D               	jmp 	__PRClearFromMoveTo
(1)  112/    90E3 :                     ;
(1)  113/    90E3 :                     ;	Exit screen drawing routine.
(1)  114/    90E3 :                     ;
(1)  115/    90E3 :                     __PRExit:
(1)  116/    90E3 : C2 03               	ld 		3(p2) 												; if character was zero, loop
(1)  117/    90E5 : 98 A8               	jz 		__PRPrintString 									; back as printing string at P1.
(1)  118/    90E7 :                     __PRExitNoCheck:
(1)  119/    90E7 : (MACRO)             	pulle 														; restore registers
(1)  119/    90E7 : C6 01                       ld              @1(p2)
(1)  119/    90E9 : 01                          xae
(1)  120/    90EA : (MACRO)             	pullp 	p1
(1)  120/    90EA : C6 01                       ld              @1(p2)
(1)  120/    90EC : 31                          xpal    P1
(1)  120/    90ED : C6 01                       ld              @1(p2)
(1)  120/    90EF : 35                          xpah    P1
(1)  121/    90F0 : (MACRO)             	pulla
(1)  121/    90F0 : C6 01                       ld              @1(p2)
(1)  122/    90F2 : 3F                  	xppc 	p3 													; return
(1)  123/    90F3 : 90 8B               	jmp 	Print 												; make re-entrant.
(1)  124/    90F5 :                     ;
(1)  125/    90F5 :                     ;	Check for supported control characters 8 (Backspace) 12 (Clear) 13 (Carriage Return)
(1)  126/    90F5 :                     ;
(1)  127/    90F5 :                     __PRIsControlChar:
(1)  128/    90F5 : 40                  	lde 														; restore character.
(1)  129/    90F6 : E4 0D               	xri 	13 													; carriage return ? (13)
(1)  130/    90F8 : 98 1B               	jz 		__PRIsReturn
(1)  131/    90FA : E4 01               	xri 	13!12 												; form feed ? (12)
(1)  132/    90FC : 98 20               	jz 		__PRClearScreen
(1)  133/    90FE : E4 04               	xri 	12!8 												; backspace ? (8)
(1)  134/    9100 : 9C E1               	jnz 	__PRExit 
(1)  135/    9102 :                     ;
(1)  136/    9102 :                     ;	Handle backspace (8)
(1)  137/    9102 :                     ;
(1)  138/    9102 : 31                  	xpal 	p1 													; check cursor position is zero
(1)  139/    9103 : 98 DE               	jz 		__PRExit 											; if it is, cannot backspace so exit.
(1)  140/    9105 : 31                  	xpal 	p1  												; put it back
(1)  141/    9106 : C5 FF               	ld 		@-1(p1)												; move it back one
 AS V1.42 Beta [Bld 102] - source file vtl-2.asm(screen.asm) - page 7 - 12/28/2015 17:38:53


(1)  142/    9108 : C4 20               	ldi 	' '	 												; erase in shadow
(1)  143/    910A : C9 00               	st 		(p1)
(1)  144/    910C : C4 00               	ldi 	0 													; point P1 to VRAM
(1)  145/    910E : 35                  	xpah 	p1
(1)  146/    910F : C4 20               	ldi 	' '													; erase in VRAM
(1)  147/    9111 : C9 00               	st 		(p1)
(1)  148/    9113 : 90 B1               	jmp 	__PRUpdateCursor 									; and exit
(1)  149/    9115 :                     ;
(1)  150/    9115 :                     ;	Handle carriage return (13)
(1)  151/    9115 :                     ;
(1)  152/    9115 :                     __PRIsReturn:
(1)  153/    9115 : 31                  	xpal 	p1 													; cursor position in A
(1)  154/    9116 : D4 F0               	ani 	0xF0 												; start of current line
(1)  155/    9118 : 02                  	ccl 														; down one line
(1)  156/    9119 : F4 10               	adi 	0x10 	
(1)  157/    911B : 31                  	xpal 	p1 													; put it back in P1.
(1)  158/    911C : 90 A8               	jmp 	__PRUpdateCursor
(1)  159/    911E :                     ;
(1)  160/    911E :                     ;	Handle clear screen (12)
(1)  161/    911E :                     ;
(1)  162/    911E :                     __PRClearScreen:
(1)  163/    911E : C4 00               	ldi 	0 													; clear shadow memory from here.
(1)  164/    9120 :                     ;
(1)  165/    9120 :                     ;	From position A, clear the memory in the shadow screen to the end, copy the shadow screen to VRAM
(1)  166/    9120 :                     ;	then use position A as the new cursor position.
(1)  167/    9120 :                     ;
(1)  168/    9120 :                     __PRClearFromMoveTo:
(1)  169/    9120 : CE FF               	st 		@-1(p2) 											; save this position, the cursor goes here.
(1)  170/    9122 :                     __PRClearLoop:
(1)  171/    9122 : 31                  	xpal 	p1 													; save position in P1.
(1)  172/    9123 : C4 20               	ldi 	' '													; write space there.
(1)  173/    9125 : CD 01               	st 		@1(p1)
(1)  174/    9127 : 31                  	xpal 	p1
(1)  175/    9128 : 94 F8               	jp 		__PRClearLoop 										; until reached shadow memory start.
(1)  176/    912A : C4 00               	ldi 	0 													; now copy shadow memory to screen memory.
(1)  177/    912C :                     __PRCopy:
(1)  178/    912C : 31                  	xpal 	p1 													; set up P1.L
(1)  179/    912D : C4 0C               	ldi 	ScreenMirror/256 									; point to shadow memory.
(1)  180/    912F : 35                  	xpah 	p1 													
(1)  181/    9130 : C1 00               	ld 		(p1) 												; read shadow memory
(1)  182/    9132 : 35                  	xpah 	p1 													; zero P1.H preserving A
(1)  183/    9133 : C4 00               	ldi 	0
(1)  184/    9135 : 35                  	xpah 	p1
(1)  185/    9136 : CD 01               	st 		@1(p1) 												; save and increment p1
(1)  186/    9138 : 31                  	xpal 	p1 
(1)  187/    9139 : 94 F1               	jp 		__PRCopy 											; keep doing till all copied.
(1)  188/    913B : C6 01               	ld 		@1(p2) 												; read cursor position
(1)  189/    913D : 31                  	xpal 	p1 													; put in P1.L
(1)  190/    913E : 90 86               	jmp 	__PRUpdateCursor
(1)  191/    9140 :                     
(1)  192/    9140 :                     	endsection 	Print
(1)  193/    9140 :                     
(1)  194/    9140 :                     ; ****************************************************************************************************************
(1)  195/    9140 :                     ; ****************************************************************************************************************
(1)  196/    9140 :                     ;
(1)  197/    9140 :                     ;		Input a single character into A. Case is converted to Upper. All registers preserved except A
(1)  198/    9140 :                     ;
(1)  199/    9140 :                     ; ****************************************************************************************************************
(1)  200/    9140 :                     ; ****************************************************************************************************************
(1)  201/    9140 :                     
 AS V1.42 Beta [Bld 102] - source file vtl-2.asm(screen.asm) - page 8 - 12/28/2015 17:38:53


(1)  202/    9140 :                     GetChar:
(1)  203/    9140 :                     	section 	GetChar
(1)  204/    9140 : C4 08               	ldi 	0x8 												; set P1 to $8xx, and save P1.H
(1)  205/    9142 : 35                  	xpah 	p1
(1)  206/    9143 : CE FF               	st 		@-1(p2)
(1)  207/    9145 :                     __GCWaitKey: 													; wait for key press
(1)  208/    9145 : C1 00               	ld 		0(p1)
(1)  209/    9147 : 94 FC               	jp 		__GCWaitKey
(1)  210/    9149 : D4 7F               	ani	 	0x7F 												; throw away the upper bit.
(1)  211/    914B : CA FF               	st 		-1(p2) 												; save it below stack
(1)  212/    914D :                     __GCWaitRelease:
(1)  213/    914D : C1 00               	ld 		0(p1) 												; wait for release
(1)  214/    914F : D4 80               	ani 	0x80
(1)  215/    9151 : 9C FA               	jnz 	__GCWaitRelease
(1)  216/    9153 : C6 01               	ld 		@1(p2) 												; restore P1.H
(1)  217/    9155 : 35                  	xpah 	p1
(1)  218/    9156 : C2 FE               	ld 		-2(p2) 												; restore saved value
(1)  219/    9158 : 02                  	ccl
(1)  220/    9159 : F4 20               	adi 	0x20												; will make lower case -ve
(1)  221/    915B : 94 02               	jp 		__GCNotLower
(1)  222/    915D : FC 20               	cai 	0x20 												; capitalise
(1)  223/    915F :                     __GCNotLower:
(1)  224/    915F : F4 E0               	adi 	0xE0 												; fix up.
(1)  225/    9161 : 3F                  	xppc 	p3 													; return
(1)  226/    9162 : 90 DC               	jmp 	GetChar 											; make re-entrant
(1)  227/    9164 :                     	endsection 	GetChar
(1)  228/    9164 :                     
(1)  229/    9164 :                     ; ****************************************************************************************************************
(1)  230/    9164 :                     ; ****************************************************************************************************************
(1)  231/    9164 :                     ;
(1)  232/    9164 :                     ;			Read an ASCIIZ string from keyboard into P1 of length A maximum (excludes NULL terminator)
(1)  233/    9164 :                     ;
(1)  234/    9164 :                     ; ****************************************************************************************************************
(1)  235/    9164 :                     ; ****************************************************************************************************************
(1)  236/    9164 :                     
(1)  237/    9164 :                     GetString:
(1)  238/    9164 :                     	section GetString
(1)  239/    9164 : (MACRO)             	pusha 														; save A,P3,E
(1)  239/    9164 : CE FF                       st              @-1(p2)
(1)  240/    9166 : (MACRO)             	pushp 	p3
(1)  240/    9166 : 37                          xpah    P3
(1)  240/    9167 : CE FF                       st              @-1(p2)
(1)  240/    9169 : 33                          xpal    P3
(1)  240/    916A : CE FF                       st              @-1(p2)
(1)  241/    916C : (MACRO)             	pushe 
(1)  241/    916C : 40                          lde
(1)  241/    916D : CE FF                       st              @-1(p2)
(1)  242/    916F : C4 00               	ldi 	0 													; set E (current position) to A.
(1)  243/    9171 : 01                  	xae
(1)  244/    9172 :                     __GSLoop:
(1)  245/    9172 : (MACRO)             	lpi 	p3,Print-1 											; print the prompt (half coloured square)
(1)  245/    9172 : C4 90                       ldi     (PRINT-1) / 256
(1)  245/    9174 : 37                          xpah    P3
(1)  245/    9175 : C4 7F                       ldi     (PRINT-1) & 255
(1)  245/    9177 : 33                          xpal    P3
(1)  246/    9178 : C4 9B               	ldi 	155
(1)  247/    917A : 3F                  	xppc 	p3
(1)  248/    917B : (MACRO)             	lpi 	p3,GetChar-1 										; get a character
(1)  248/    917B : C4 91                       ldi     (GETCHAR-1) / 256
(1)  248/    917D : 37                          xpah    P3
 AS V1.42 Beta [Bld 102] - source file vtl-2.asm(screen.asm) - page 9 - 12/28/2015 17:38:53


(1)  248/    917E : C4 3F                       ldi     (GETCHAR-1) & 255
(1)  248/    9180 : 33                          xpal    P3
(1)  249/    9181 : 3F                  	xppc 	p3
(1)  250/    9182 : C9 80               	st 		-0x80(p1) 											; save it in the current position.
(1)  251/    9184 : (MACRO)             	lpi 	p3,Print-1 											; erase the prompt with backspace.
(1)  251/    9184 : C4 90                       ldi     (PRINT-1) / 256
(1)  251/    9186 : 37                          xpah    P3
(1)  251/    9187 : C4 7F                       ldi     (PRINT-1) & 255
(1)  251/    9189 : 33                          xpal    P3
(1)  252/    918A : C4 08               	ldi 	8
(1)  253/    918C : 3F                  	xppc 	p3
(1)  254/    918D : C1 80               	ld 		-0x80(p1) 											; re-read character
(1)  255/    918F : D4 E0               	ani 	0xE0 												; check if control key.
(1)  256/    9191 : 98 0F               	jz 		__GSControlKey 
(1)  257/    9193 : 40                  	lde 														; get current position.
(1)  258/    9194 : E2 03               	xor 	3(p2) 												; reached maximum length of buffer ?
(1)  259/    9196 : 98 DA               	jz 		__GSLoop 											; if so, ignore the key and go round again.
(1)  260/    9198 : C1 80               	ld 		-0x80(p1) 											; get character and print it
(1)  261/    919A : 3F                  	xppc 	p3
(1)  262/    919B : C4 01               	ldi 	1 													; increment E
(1)  263/    919D : 02                  	ccl
(1)  264/    919E : 70                  	ade
(1)  265/    919F : 01                  	xae
(1)  266/    91A0 : 90 D0               	jmp 	__GSLoop 											; and go round again.
(1)  267/    91A2 :                     ;
(1)  268/    91A2 :                     ;	Handle control keys (0x00-0x1F)
(1)  269/    91A2 :                     ;
(1)  270/    91A2 :                     __GSControlKey:
(1)  271/    91A2 : C1 80               	ld 		-0x80(p1) 											; get typed in key
(1)  272/    91A4 : E4 08               	xri 	8 													; check for backspace.
(1)  273/    91A6 : 98 17               	jz 		__GSBackspace 			
(1)  274/    91A8 : E4 05               	xri 	8!13 												; check for CR
(1)  275/    91AA : 9C C6               	jnz 	__GSLoop 											; if not, ignore the key.
(1)  276/    91AC :                     ;
(1)  277/    91AC :                     ;	Carriage Return, ending input.
(1)  278/    91AC :                     ;
(1)  279/    91AC : C9 80               	st 		-0x80(p1) 											; replace the CR written with NULL terminator.
(1)  280/    91AE : C4 0D               	ldi 	13 													; print CR
(1)  281/    91B0 : 3F                  	xppc 	p3
(1)  282/    91B1 : (MACRO)             	pulle 														; restore E,P3,A
(1)  282/    91B1 : C6 01                       ld              @1(p2)
(1)  282/    91B3 : 01                          xae
(1)  283/    91B4 : (MACRO)             	pullp	p3
(1)  283/    91B4 : C6 01                       ld              @1(p2)
(1)  283/    91B6 : 33                          xpal    P3
(1)  283/    91B7 : C6 01                       ld              @1(p2)
(1)  283/    91B9 : 37                          xpah    P3
(1)  284/    91BA : (MACRO)             	pulla
(1)  284/    91BA : C6 01                       ld              @1(p2)
(1)  285/    91BC : 3F                  	xppc 	p3 													; return
(1)  286/    91BD : 90 A5               	jmp 	GetString 											; make re-entrant (probably unneccessary !!)
(1)  287/    91BF :                     ;
(1)  288/    91BF :                     ;	Backspace entered
(1)  289/    91BF :                     ;
(1)  290/    91BF :                     __GSBackspace
(1)  291/    91BF : 40                  	lde 														; if E = 0 we can't backspace any further.
(1)  292/    91C0 : 98 B0               	jz 		__GSLoop
(1)  293/    91C2 : C4 08               	ldi 	8 													; backspace on screen
(1)  294/    91C4 : 3F                  	xppc 	p3
(1)  295/    91C5 : C4 FF               	ldi 	0xFF 												; decrement E
 AS V1.42 Beta [Bld 102] - source file vtl-2.asm(screen.asm) - page 10 - 12/28/2015 17:38:53


(1)  296/    91C7 : 02                  	ccl
(1)  297/    91C8 : 70                  	ade
(1)  298/    91C9 : 01                  	xae
(1)  299/    91CA : 90 A6               	jmp 	__GSLoop 											; and go round again.
(1)  300/    91CC :                     
(1)  301/    91CC :                     	endsection GetString
(1)  302/    91CC :                     
      55/    91CC :                     	include source\statement.asm 								; statement interpreter.
(1)    1/    91CC :                     ; ****************************************************************************************************************
(1)    2/    91CC :                     ; ****************************************************************************************************************
(1)    3/    91CC :                     ;
(1)    4/    91CC :                     ;													Statement
(1)    5/    91CC :                     ;
(1)    6/    91CC :                     ; ****************************************************************************************************************
(1)    7/    91CC :                     ; ****************************************************************************************************************
(1)    8/    91CC :                     
(1)    9/    91CC :                     ; ****************************************************************************************************************
(1)   10/    91CC :                     ; ****************************************************************************************************************
(1)   11/    91CC :                     ;
(1)   12/    91CC :                     ;													Handlers
(1)   13/    91CC :                     ;
(1)   14/    91CC :                     ;	Special L-Expr handlers go here. Each is preceded with a jump to the end before the execution label, so
(1)   15/    91CC :                     ;	code automatically falls through to execute next statement.
(1)   16/    91CC :                     ;
(1)   17/    91CC :                     ; ****************************************************************************************************************
(1)   18/    91CC :                     ; ****************************************************************************************************************
(1)   19/    91CC :                     
(1)   20/    91CC :                     	include source\left_specials\readonly.asm
(2)    1/    91CC :                     ; ****************************************************************************************************************
(2)    2/    91CC :                     ; ****************************************************************************************************************
(2)    3/    91CC :                     ;
(2)    4/    91CC :                     ;												Read-Only Variable
(2)    5/    91CC :                     ;
(2)    6/    91CC :                     ; ****************************************************************************************************************
(2)    7/    91CC :                     ; ****************************************************************************************************************
(2)    8/    91CC :                     
(2)    9/    91CC : 90 1A               	jmp 	__STROV_End
(2)   10/    91CE :                     
(2)   11/    91CE :                     __ST_ReadOnlyVariable:
(2)   12/    91CE : 3F                  	xppc 	p3 													; check for '='
(2)   13/    91CF : 94 17               	jp 		__STROV_End 										; if error, end.
(2)   14/    91D1 : 3F                  	xppc 	p3 													; evaluate rhs
(2)   15/    91D2 : C6 02               	ld 		@2(p2) 												; unstack the result.
(2)   16/    91D4 : 06                  	csa 														; end if there was an error.
(2)   17/    91D5 : 94 11               	jp 		__STROV_End
(2)   18/    91D7 : C2 FF               	ld 		-1(p2) 												; if the returned result was non zero
(2)   19/    91D9 : DA FE               	or 		-2(p2)
(2)   20/    91DB : 9C 07               	jnz 	__STROV_Error 										; report as error
(2)   21/    91DD :                     
(2)   22/    91DD : (MACRO)             	lpi 	p3,BootMonitor-1 									; else crash back to monitor
(2)   22/    91DD : C4 02                       ldi     (BOOTMONITOR-1) / 256
(2)   22/    91DF : 37                          xpah    P3
(2)   22/    91E0 : C4 0F                       ldi     (BOOTMONITOR-1) & 255
(2)   22/    91E2 : 33                          xpal    P3
(2)   23/    91E3 : 3F                  	xppc 	p3
(2)   24/    91E4 :                     
(2)   25/    91E4 :                     __STROV_Error:
(2)   26/    91E4 : C4 52               	ldi 	ERROR_ReadOnly										; set error to E
(2)   27/    91E6 : 01                  	xae 
(2)   28/    91E7 : 02                  	ccl 														; return with carry clear indicating error
 AS V1.42 Beta [Bld 102] - source file vtl-2.asm(readonly.asm) - page 11 - 12/28/2015 17:38:53


(2)   29/    91E8 :                     
(2)   30/    91E8 :                     __STROV_End:
(1)   21/    91E8 :                     	include source\left_specials\machinecode.asm
(2)    1/    91E8 :                     ; ****************************************************************************************************************
(2)    2/    91E8 :                     ; ****************************************************************************************************************
(2)    3/    91E8 :                     ;
(2)    4/    91E8 :                     ;												> : Call Machine Code
(2)    5/    91E8 :                     ;
(2)    6/    91E8 :                     ; ****************************************************************************************************************
(2)    7/    91E8 :                     ; ****************************************************************************************************************
(2)    8/    91E8 :                     
(2)    9/    91E8 : 90 27               	jmp 	__STMAC_End
(2)   10/    91EA :                     
(2)   11/    91EA :                     __ST_MachineCode:
(2)   12/    91EA : 3F                  	xppc 	p3 													; check for '='
(2)   13/    91EB : 94 24               	jp 		__STMAC_End 										; if error, end.
(2)   14/    91ED : 3F                  	xppc 	p3 													; evaluate rhs
(2)   15/    91EE : C6 02               	ld 		@2(p2) 												; unstack the result.
(2)   16/    91F0 : 06                  	csa 														; end if there was an error.
(2)   17/    91F1 : 94 1E               	jp 		__STMAC_End
(2)   18/    91F3 :                     	
(2)   19/    91F3 : C2 FE               	ld 		-2(p2) 												; LSB -> E
(2)   20/    91F5 : 01                  	xae
(2)   21/    91F6 : C2 FF               	ld 		-1(p2) 												; MSB -> P3.H
(2)   22/    91F8 : 37                  	xpah 	p3
(2)   23/    91F9 : 40                  	lde 														; E -> P3.L	
(2)   24/    91FA : 33                  	xpal 	p3
(2)   25/    91FB : C7 FF               	ld 		@-1(p3) 											; adjust for pre increment
(2)   26/    91FD : (MACRO)             	pushp 	p1 													; point P1 to variables
(2)   26/    91FD : 35                          xpah    P1
(2)   26/    91FE : CE FF                       st              @-1(p2)
(2)   26/    9200 : 31                          xpal    P1
(2)   26/    9201 : CE FF                       st              @-1(p2)
(2)   27/    9203 : (MACRO)             	lpi 	p1,Variables
(2)   27/    9203 : C4 0D                       ldi     (VARIABLES) / 256
(2)   27/    9205 : 35                          xpah    P1
(2)   27/    9206 : C4 00                       ldi     (VARIABLES) & 255
(2)   27/    9208 : 31                          xpal    P1
(2)   28/    9209 : 3F                  	xppc 	p3 													; call routine
(2)   29/    920A : (MACRO)             	pullp 	p1 													; restore P1
(2)   29/    920A : C6 01                       ld              @1(p2)
(2)   29/    920C : 31                          xpal    P1
(2)   29/    920D : C6 01                       ld              @1(p2)
(2)   29/    920F : 35                          xpah    P1
(2)   30/    9210 : 03                  	scl 														; result ok.
(2)   31/    9211 :                     	
(2)   32/    9211 :                     __STMAC_End:
(1)   22/    9211 :                     	include source\left_specials\print.asm
(2)    1/    9211 :                     ; ****************************************************************************************************************
(2)    2/    9211 :                     ; ****************************************************************************************************************
(2)    3/    9211 :                     ;
(2)    4/    9211 :                     ;									? : Print Expression / String Literal
(2)    5/    9211 :                     ;
(2)    6/    9211 :                     ; ****************************************************************************************************************
(2)    7/    9211 :                     ; ****************************************************************************************************************
(2)    8/    9211 :                     
(2)    9/    9211 : 90 68               	jmp 	__STPRT_End
(2)   10/    9213 :                     
(2)   11/    9213 :                     __ST_Print:
(2)   12/    9213 : 3F                  	xppc 	p3 													; check for '='
 AS V1.42 Beta [Bld 102] - source file vtl-2.asm(print.asm) - page 12 - 12/28/2015 17:38:53


(2)   13/    9214 : 94 65               	jp 		__STPRT_End 										; if error, end.
(2)   14/    9216 : C1 00               	ld 		(p1) 												; check next character
(2)   15/    9218 : E4 22               	xri 	'"'													; if quote mark
(2)   16/    921A : 98 31               	jz 		__STPRT_Literal 									; print literal.
(2)   17/    921C :                     
(2)   18/    921C :                     ; ****************************************************************************************************************
(2)   19/    921C :                     ;												Print expression.
(2)   20/    921C :                     ; ****************************************************************************************************************
(2)   21/    921C :                     
(2)   22/    921C : C6 FE               	ld 		@-2(p2) 											; make space for P1 save later.
(2)   23/    921E : 3F                  	xppc 	p3 													; evaluate rhs and push result
(2)   24/    921F : C6 04               	ld 		@4(p2) 												; unstack the result and saved space
(2)   25/    9221 : 06                  	csa 														; end if there was an error.
(2)   26/    9222 : 94 57               	jp 		__STPRT_End
(2)   27/    9224 : C6 FC               	ld 		@-4(p2) 											; restack the result and saved space.
(2)   28/    9226 : 35                  	xpah 	p1 													; save P1 above result
(2)   29/    9227 : CA 03               	st 		3(p2)
(2)   30/    9229 : 31                  	xpal 	p1 
(2)   31/    922A : CA 02               	st 		2(p2)
(2)   32/    922C : (MACRO)             	lpi 	p3,OSMathLibrary-1 									; use the maths library to convert to decimal
(2)   32/    922C : C4 00                       ldi     (OSMATHLIBRARY-1) / 256
(2)   32/    922E : 37                          xpah    P3
(2)   32/    922F : C4 02                       ldi     (OSMATHLIBRARY-1) & 255
(2)   32/    9231 : 33                          xpal    P3
(2)   33/    9232 : (MACRO)             	lpi 	p1,KeyboardBuffer+10 								; use the keyboard buffer as workspace.
(2)   33/    9232 : C4 0E                       ldi     (KEYBOARDBUFFER+10) / 256
(2)   33/    9234 : 35                          xpah    P1
(2)   33/    9235 : C4 0A                       ldi     (KEYBOARDBUFFER+10) & 255
(2)   33/    9237 : 31                          xpal    P1
(2)   34/    9238 : C4 24               	ldi 	'$'													; '$' function.
(2)   35/    923A : 3F                  	xppc 	p3 													; convert it
(2)   36/    923B : (MACRO)             	lpi 	p3,Print-1 											; then print it
(2)   36/    923B : C4 90                       ldi     (PRINT-1) / 256
(2)   36/    923D : 37                          xpah    P3
(2)   36/    923E : C4 7F                       ldi     (PRINT-1) & 255
(2)   36/    9240 : 33                          xpal    P3
(2)   37/    9241 : C4 00               	ldi 	0
(2)   38/    9243 : 3F                  	xppc 	p3 
(2)   39/    9244 : (MACRO)             	pullp 	p1 													; restore P1.
(2)   39/    9244 : C6 01                       ld              @1(p2)
(2)   39/    9246 : 31                          xpal    P1
(2)   39/    9247 : C6 01                       ld              @1(p2)
(2)   39/    9249 : 35                          xpah    P1
(2)   40/    924A : 03                  	scl 														; no error occurred.
(2)   41/    924B : 90 2E               	jmp 	__STPRT_End 										; and exit
(2)   42/    924D :                     
(2)   43/    924D :                     ; ****************************************************************************************************************
(2)   44/    924D :                     ;													Print literal
(2)   45/    924D :                     ; ****************************************************************************************************************
(2)   46/    924D :                     
(2)   47/    924D :                     __STPRT_Literal:
(2)   48/    924D : C5 01               	ld 		@1(p1) 												; skip over first quote.
(2)   49/    924F : (MACRO)             	lpi 	p3,Print-1 											; print routine in P3.
(2)   49/    924F : C4 90                       ldi     (PRINT-1) / 256
(2)   49/    9251 : 37                          xpah    P3
(2)   49/    9252 : C4 7F                       ldi     (PRINT-1) & 255
(2)   49/    9254 : 33                          xpal    P3
(2)   50/    9255 :                     __STPRT_LitLoop:
(2)   51/    9255 : C1 00               	ld 		(p1) 												; get next character
(2)   52/    9257 : 98 1E               	jz 		__STPRT_Error 										; if zero, missing quote mark.
 AS V1.42 Beta [Bld 102] - source file vtl-2.asm(print.asm) - page 13 - 12/28/2015 17:38:53


(2)   53/    9259 : C5 01               	ld 		@1(p1) 												; fetch and bump
(2)   54/    925B : E4 22               	xri 	'"' 												; if reached quote mark
(2)   55/    925D : 98 05               	jz 		__STPRT_LitComplete 								; exit
(2)   56/    925F : C1 FF               	ld 		-1(p1) 												; load character
(2)   57/    9261 : 3F                  	xppc 	p3 													; print it
(2)   58/    9262 : 90 F1               	jmp 	__STPRT_LitLoop 
(2)   59/    9264 :                     ;
(2)   60/    9264 :                     ;	Print completed, check for ';'
(2)   61/    9264 :                     ;
(2)   62/    9264 :                     __STPRT_LitComplete:
(2)   63/    9264 : C5 01               	ld 		@1(p1) 												; get next
(2)   64/    9266 : E4 20               	xri 	' ' 												; avoid spaces
(2)   65/    9268 : 98 FA               	jz 		__STPRT_LitComplete 
(2)   66/    926A : C5 FF               	ld 		@-1(p1) 											; reget the character
(2)   67/    926C : E4 3B               	xri 	';'													; if semicolon
(2)   68/    926E : 03                  	scl 														; exit with CY/L = 1
(2)   69/    926F : 98 0A               	jz 		__STPRT_End 	
(2)   70/    9271 : C4 0D               	ldi 	13 													; print a carriage return
(2)   71/    9273 : 3F                  	xppc 	p3
(2)   72/    9274 : 03                  	scl 														; exit with CY/L = 1
(2)   73/    9275 : 90 04               	jmp 	__STPRT_End
(2)   74/    9277 :                     ;
(2)   75/    9277 :                     ;	Error, closing quote not found.
(2)   76/    9277 :                     ;
(2)   77/    9277 :                     __STPRT_Error:													; missing quote mark
(2)   78/    9277 : C4 51               	ldi 	ERROR_Quote
(2)   79/    9279 : 01                  	xae
(2)   80/    927A : 02                  	ccl 
(2)   81/    927B :                     
(2)   82/    927B :                     __STPRT_End:
(1)   23/    927B :                     	include source\left_specials\charout.asm
(2)    1/    927B :                     ; ****************************************************************************************************************
(2)    2/    927B :                     ; ****************************************************************************************************************
(2)    3/    927B :                     ;
(2)    4/    927B :                     ;												$ : Character Output
(2)    5/    927B :                     ;
(2)    6/    927B :                     ; ****************************************************************************************************************
(2)    7/    927B :                     ; ****************************************************************************************************************
(2)    8/    927B :                     
(2)    9/    927B : 90 13               	jmp 	__STCHO_End
(2)   10/    927D :                     
(2)   11/    927D :                     __ST_CharacterOut:
(2)   12/    927D : 3F                  	xppc 	p3 													; check for '='
(2)   13/    927E : 94 10               	jp 		__STCHO_End 										; if error, end.
(2)   14/    9280 : 3F                  	xppc 	p3 													; evaluate rhs
(2)   15/    9281 : C6 02               	ld 		@2(p2) 												; unstack the result.
(2)   16/    9283 : 06                  	csa 														; end if there was an error.
(2)   17/    9284 : 94 0A               	jp 		__STCHO_End
(2)   18/    9286 : (MACRO)             	lpi 	p3,Print-1 											; get print routine ptr
(2)   18/    9286 : C4 90                       ldi     (PRINT-1) / 256
(2)   18/    9288 : 37                          xpah    P3
(2)   18/    9289 : C4 7F                       ldi     (PRINT-1) & 255
(2)   18/    928B : 33                          xpal    P3
(2)   19/    928C : C2 FE               	ld 		-2(p2) 												; read the byte
(2)   20/    928E : 3F                  	xppc 	p3 													; and print it.
(2)   21/    928F : 03                  	scl 														; no error occurred.
(2)   22/    9290 :                     	
(2)   23/    9290 :                     __STCHO_End:
(1)   24/    9290 :                     	include source\left_specials\array.asm
(2)    1/    9290 :                     ; ****************************************************************************************************************
 AS V1.42 Beta [Bld 102] - source file vtl-2.asm(array.asm) - page 14 - 12/28/2015 17:38:53


(2)    2/    9290 :                     ; ****************************************************************************************************************
(2)    3/    9290 :                     ;
(2)    4/    9290 :                     ;												: : Array Access
(2)    5/    9290 :                     ;
(2)    6/    9290 :                     ; ****************************************************************************************************************
(2)    7/    9290 :                     ; ****************************************************************************************************************
(2)    8/    9290 :                     
(2)    9/    9290 : 90 51               	jmp 	__STARR_End
(2)   10/    9292 :                     
(2)   11/    9292 :                     __ST_ArrayWrite:
(2)   12/    9292 : (MACRO)             	lpi 	p3,EvaluateExpression-1 							; evaluate the array index
(2)   12/    9292 : C4 93                       ldi     (EVALUATEEXPRESSION-1) / 256
(2)   12/    9294 : 37                          xpah    P3
(2)   12/    9295 : C4 EC                       ldi     (EVALUATEEXPRESSION-1) & 255
(2)   12/    9297 : 33                          xpal    P3
(2)   13/    9298 : 3F                  	xppc 	p3
(2)   14/    9299 : 94 46               	jp 		__STARR_Drop2_End 									; exit if error.
(2)   15/    929B : C1 00               	ld 		(p1) 												; look at last character
(2)   16/    929D : E4 29               	xri 	')'
(2)   17/    929F : 9C 3C               	jnz 	__STARR_NoCloseBracket 								; if not ) then error
(2)   18/    92A1 : C5 01               	ld 		@1(p1) 												; skip the )
(2)   19/    92A3 : (MACRO)             	lpi 	p3,CheckEquals-1 									; do check-equals test
(2)   19/    92A3 : C4 93                       ldi     (CHECKEQUALS-1) / 256
(2)   19/    92A5 : 37                          xpah    P3
(2)   19/    92A6 : C4 CD                       ldi     (CHECKEQUALS-1) & 255
(2)   19/    92A8 : 33                          xpal    P3
(2)   20/    92A9 : 3F                  	xppc 	p3
(2)   21/    92AA : 94 35               	jp 		__STARR_Drop2_End
(2)   22/    92AC : 3F                  	xppc 	p3 													; do right expression.
(2)   23/    92AD : C6 04               	ld 		@4(p2) 												; drop result and array index.
(2)   24/    92AF : 06                  	csa
(2)   25/    92B0 : 94 31               	jp 		__STARR_End 										; exit if error.
(2)   26/    92B2 :                     
(2)   27/    92B2 : C2 FE               	ld 		-2(p2) 												; double array index
(2)   28/    92B4 : 02                  	ccl 
(2)   29/    92B5 : F2 FE               	add 	-2(p2)
(2)   30/    92B7 : CA FE               	st 		-2(p2)
(2)   31/    92B9 : C2 FF               	ld 		-1(p2)
(2)   32/    92BB : F2 FF               	add 	-1(p2)
(2)   33/    92BD : CA FF               	st 		-1(p2)
(2)   34/    92BF :                     
(2)   35/    92BF : (MACRO)             	lpi 	p3,Variables+('&' & 0x3F) * 2 						; point P3 to array base.
(2)   35/    92BF : C4 0D                       ldi     (VARIABLES+('&' & 0X3F) * 2) / 256
(2)   35/    92C1 : 37                          xpah    P3
(2)   35/    92C2 : C4 4C                       ldi     (VARIABLES+('&' & 0X3F) * 2) & 255
(2)   35/    92C4 : 33                          xpal    P3
(2)   36/    92C5 : 02                  	ccl
(2)   37/    92C6 : C3 00               	ld 		(p3) 												; calculate LSB -> E
(2)   38/    92C8 : F2 FE               	add 	-2(p2)
(2)   39/    92CA : 01                  	xae
(2)   40/    92CB : C3 01               	ld 		1(p3) 												; calculate MSB -> P3.H
(2)   41/    92CD : F2 FF               	add 	-1(p2)
(2)   42/    92CF : 37                  	xpah 	p3
(2)   43/    92D0 : 40                  	lde 														; E -> P3.L
(2)   44/    92D1 : 33                  	xpal 	p3
(2)   45/    92D2 : C2 FC               	ld 		-4(p2) 												; copy r-expression to memory
(2)   46/    92D4 : CF 01               	st 		@1(p3)
(2)   47/    92D6 : C2 FD               	ld 		-3(p2)
(2)   48/    92D8 : CB 00               	st 		(p3)
(2)   49/    92DA : 03                  	scl 														; is okay
 AS V1.42 Beta [Bld 102] - source file vtl-2.asm(array.asm) - page 15 - 12/28/2015 17:38:53


(2)   50/    92DB : 90 06               	jmp 	__STARR_End 										; and exit out.
(2)   51/    92DD :                     
(2)   52/    92DD :                     
(2)   53/    92DD :                     __STARR_NoCloseBracket:											; return bracket error (missing ) off array)
(2)   54/    92DD : C4 42               	ldi		ERROR_Bracket
(2)   55/    92DF : 01                  	xae
(2)   56/    92E0 : 02                  	ccl
(2)   57/    92E1 :                     __STARR_Drop2_End:
(2)   58/    92E1 : C6 02               	ld 		@2(p2) 												; drop two bytes off the stack.
(2)   59/    92E3 :                     
(2)   60/    92E3 :                     __STARR_End:
(1)   25/    92E3 :                     	include source\left_specials\goto.asm 						; has to be last, both for speed and accesses ExecuteNextStatement
(2)    1/    92E3 :                     ; ****************************************************************************************************************
(2)    2/    92E3 :                     ; ****************************************************************************************************************
(2)    3/    92E3 :                     ;
(2)    4/    92E3 :                     ;									# : Goto line number, optional return.
(2)    5/    92E3 :                     ;
(2)    6/    92E3 :                     ; ****************************************************************************************************************
(2)    7/    92E3 :                     ; ****************************************************************************************************************
(2)    8/    92E3 :                     
(2)    9/    92E3 : 90 42               	jmp 	__STGOTO_End
(2)   10/    92E5 :                     
(2)   11/    92E5 :                     __ST_Goto:
(2)   12/    92E5 : 3F                  	xppc 	p3 													; check for '='
(2)   13/    92E6 : 94 3F               	jp 		__STGOTO_End 										; if error, end.
(2)   14/    92E8 : 3F                  	xppc 	p3 													; evaluate rhs and push result
(2)   15/    92E9 : C6 02               	ld 		@2(p2) 												; unstack the result and saved space
(2)   16/    92EB : 06                  	csa 														; end if there was an error.
(2)   17/    92EC : 94 39               	jp 		__STGOTO_End
(2)   18/    92EE : C2 FF               	ld 		-1(p2) 												; if the result is zero
(2)   19/    92F0 : DA FE               	or 		-2(p2) 												; then exit, CY/L is set from the expression evaluator
(2)   20/    92F2 : 98 33               	jz 		__STGOTO_End
(2)   21/    92F4 :                     
(2)   22/    92F4 : (MACRO)             	lpi 	p3,Variables 										; copy current line number + 1 to ! (return address)
(2)   22/    92F4 : C4 0D                       ldi     (VARIABLES) / 256
(2)   22/    92F6 : 37                          xpah    P3
(2)   22/    92F7 : C4 00                       ldi     (VARIABLES) & 255
(2)   22/    92F9 : 33                          xpal    P3
(2)   23/    92FA : 02                  	ccl
(2)   24/    92FB : C3 46               	ld 		('#' & 0x3F)*2(p3) 
(2)   25/    92FD : F4 01               	adi 	1
(2)   26/    92FF : CB 42               	st 		('!' & 0x3F)*2(p3) 
(2)   27/    9301 : C3 47               	ld 		('#' & 0x3F)*2+1(p3) 
(2)   28/    9303 : F4 00               	adi 	0
(2)   29/    9305 : CB 43               	st 		('!' & 0x3F)*2+1(p3) 
(2)   30/    9307 :                     
(2)   31/    9307 : C3 FD               	ld 		ProgramBase-Variables(p3) 							; put program base address into P1.
(2)   32/    9309 : 31                  	xpal 	p1
(2)   33/    930A : C3 FE               	ld 		ProgramBase-Variables+1(p3)
(2)   34/    930C : 35                  	xpah 	p1
(2)   35/    930D :                     
(2)   36/    930D :                     __STGOTO_Search:												; look for line #
(2)   37/    930D : C1 00               	ld 		(p1) 												; read offset.
(2)   38/    930F : 98 13               	jz 		__STGOTO_Found 										; if offset is zero goto end of program (P1)
(2)   39/    9311 : 01                  	xae 														; save offset in E
(2)   40/    9312 :                     
(2)   41/    9312 : 03                  	scl
(2)   42/    9313 : C1 01               	ld 		1(p1) 												; calculate current# - required but not worried about
(2)   43/    9315 : FA FE               	cad 	-2(p2) 												; the actual answer.
(2)   44/    9317 : C1 02               	ld 		2(p1)
 AS V1.42 Beta [Bld 102] - source file vtl-2.asm(goto.asm) - page 16 - 12/28/2015 17:38:53


(2)   45/    9319 : FA FF               	cad 	-1(p2)
(2)   46/    931B :                     
(2)   47/    931B : 06                  	csa 														; look at carry flag
(2)   48/    931C : D4 80               	ani 	0x80
(2)   49/    931E : 9C 04               	jnz 	__STGOTO_Found 										; if set then current# >= required#
(2)   50/    9320 : C5 80               	ld 		@-0x80(p1)											; use auto index to go to next one
(2)   51/    9322 : 90 E9               	jmp 	__STGOTO_Search
(2)   52/    9324 :                     
(2)   53/    9324 :                     __STGOTO_Found:
(2)   54/    9324 : 03                  	scl
(2)   55/    9325 : 90 15               	jmp 	ExecuteNextStatement 								
(2)   56/    9327 :                     
(2)   57/    9327 :                     __STGOTO_End:
(1)   26/    9327 :                     
(1)   27/    9327 :                     ; ****************************************************************************************************************
(1)   28/    9327 :                     ;							Handler end. Test for error and skip rest of line if comment
(1)   29/    9327 :                     ; ****************************************************************************************************************
(1)   30/    9327 :                     
(1)   31/    9327 : 06                  	csa 														; read Status Register
(1)   32/    9328 : D4 80               	ani 	0x80 												; check if CY/L bit set, if so go to next statement
(1)   33/    932A : 9C 0C               	jnz 	SkipEndLineNextStatement
(1)   34/    932C :                     __ENS_Stop:														; error has occurred in a handler.
(1)   35/    932C : (MACRO)             	lpi 	p3,Variables 										; clear the is running flag
(1)   35/    932C : C4 0D                       ldi     (VARIABLES) / 256
(1)   35/    932E : 37                          xpah    P3
(1)   35/    932F : C4 00                       ldi     (VARIABLES) & 255
(1)   35/    9331 : 33                          xpal    P3
(1)   36/    9332 : C4 00               	ldi 	0
(1)   37/    9334 : CB FF               	st 		IsRunning-Variables(p3)	
(1)   38/    9336 :                     	;
(1)   39/    9336 :                     	; TODO: Go to input from keyboard handler.
(1)   40/    9336 :                     	;
(1)   41/    9336 :                     wait2:
(1)   42/    9336 : 90 FE               	jmp 	wait2
(1)   43/    9338 :                     
(1)   44/    9338 :                     SkipEndLineNextStatement: 										; find end of line if comment etc.
(1)   45/    9338 : C5 01               	ld 		@1(p1)
(1)   46/    933A : 9C FC               	jnz 	SkipEndLineNextStatement
(1)   47/    933C :                     
(1)   48/    933C :                     ; ****************************************************************************************************************
(1)   49/    933C :                     ; ****************************************************************************************************************
(1)   50/    933C :                     ;
(1)   51/    933C :                     ;					Execute the next statement. P1 points to the offset byte to next
(1)   52/    933C :                     ;
(1)   53/    933C :                     ; ****************************************************************************************************************
(1)   54/    933C :                     ; ****************************************************************************************************************
(1)   55/    933C :                     
(1)   56/    933C : =0x27               RandomVariable = 0x27 											; Assembler does not like single quote.
(1)   57/    933C :                     
(1)   58/    933C :                     ExecuteNextStatement:
(1)   59/    933C :                     
(1)   60/    933C :                     ; ****************************************************************************************************************
(1)   61/    933C :                     ;									Check to see if reached end of program
(1)   62/    933C :                     ; ****************************************************************************************************************
(1)   63/    933C :                     
(1)   64/    933C : C5 01               	ld 		@1(p1) 												; look at length byte
(1)   65/    933E : 03                  	scl 														; set CY/L so stops without error if zero.
(1)   66/    933F : 98 EB               	jz 		__ENS_Stop 											; if zero, stop the program from running as at top of program.
(1)   67/    9341 :                     
(1)   68/    9341 :                     ; ****************************************************************************************************************
 AS V1.42 Beta [Bld 102] - source file vtl-2.asm(statement.asm) - page 17 - 12/28/2015 17:38:53


(1)   69/    9341 :                     ;				Check running flag and update # variable which contains current line number
(1)   70/    9341 :                     ; ****************************************************************************************************************
(1)   71/    9341 :                     
(1)   72/    9341 : (MACRO)             	lpi 	p3,Variables 										; look at variables.
(1)   72/    9341 : C4 0D                       ldi     (VARIABLES) / 256
(1)   72/    9343 : 37                          xpah    P3
(1)   72/    9344 : C4 00                       ldi     (VARIABLES) & 255
(1)   72/    9346 : 33                          xpal    P3
(1)   73/    9347 : C3 FF               	ld 		IsRunning-Variables(p3) 							; check is running flag
(1)   74/    9349 : 98 E1               	jz 		__ENS_Stop 											; if zero, stop, still with CY/L set.
(1)   75/    934B :                     
(1)   76/    934B : C5 01               	ld 		@1(p1) 												; copy current line number to #
(1)   77/    934D : CB 46               	st 		('#' & 0x3F)*2(p3)
(1)   78/    934F : C5 01               	ld 		@1(p1)
(1)   79/    9351 : CB 47               	st 		('#' & 0x3F)*2+1(p3)
(1)   80/    9353 :                     
(1)   81/    9353 :                     ; ****************************************************************************************************************
(1)   82/    9353 :                     ;										Update the random number variable '
(1)   83/    9353 :                     ; ****************************************************************************************************************
(1)   84/    9353 :                     
(1)   85/    9353 : C3 4E               	ld 		(RandomVariable*2)(p3) 								; check random seed initialised
(1)   86/    9355 : DB 4F               	or 		(RandomVariable*2+1)(p3) 										
(1)   87/    9357 : 9C 08               	jnz 	__ENS_RandomInitialised
(1)   88/    9359 :                     
(1)   89/    9359 : C4 E1               	ldi 	0xE1  												; if it is $0000, set it to $ACE1
(1)   90/    935B : CB 4E               	st 		(RandomVariable*2)(p3)
(1)   91/    935D : C4 AC               	ldi 	0xAC
(1)   92/    935F : CB 4F               	st 		(RandomVariable*2+1)(p3)
(1)   93/    9361 :                     __ENS_RandomInitialised:
(1)   94/    9361 :                     
(1)   95/    9361 : C3 4F               	ld 		(RandomVariable*2+1)(p3) 							; shift LFSR right
(1)   96/    9363 : 02                  	ccl
(1)   97/    9364 : 1F                  	rrl
(1)   98/    9365 : CB 4F               	st 		(RandomVariable*2+1)(p3)
(1)   99/    9367 : C3 4E               	ld 		(RandomVariable*2)(p3)
(1)  100/    9369 : 1F                  	rrl
(1)  101/    936A : CB 4E               	st 		(RandomVariable*2)(p3)
(1)  102/    936C : 06                  	csa
(1)  103/    936D : 94 06               	jp 		__ENS_NoToggleMask 									; if output bit is 1 appl the toggle mask.
(1)  104/    936F : C3 4F               	ld 		(RandomVariable*2+1)(p3)
(1)  105/    9371 : E4 B4               	xri 	0xB4
(1)  106/    9373 : CB 4F               	st 		(RandomVariable*2+1)(p3)
(1)  107/    9375 :                     __ENS_NoToggleMask:
(1)  108/    9375 :                     
(1)  109/    9375 :                     ; ****************************************************************************************************************
(1)  110/    9375 :                     ;									Look at the first non space character
(1)  111/    9375 :                     ; ****************************************************************************************************************
(1)  112/    9375 :                     
(1)  113/    9375 :                     __ENS_GetFirstCharacter:
(1)  114/    9375 : C5 01               	ld 		@1(p1) 												; get first character of line.
(1)  115/    9377 : 98 C3               	jz 		ExecuteNextStatement 								; if it is NULL the line is blank, so go to next one.
(1)  116/    9379 : E4 20               	xri 	' '													; keep going till space not found
(1)  117/    937B : 98 F8               	jz 		__ENS_GetFirstCharacter
(1)  118/    937D : C5 FF               	ld 		@-1(p1) 											; go back and reload first non space character
(1)  119/    937F : D4 40               	ani 	0x40 												; same optimisation trick as RHS. If this bit set it is
(1)  120/    9381 : 98 32               	jz 		__ENS_CheckSpecials 								; a standard variable @A-Z[/]^_ (e.g. 64-91) so don't check specials.
(1)  121/    9383 :                     
(1)  122/    9383 :                     ; ****************************************************************************************************************
(1)  123/    9383 :                     ;									A standard assignment of the A=<expr> type
(1)  124/    9383 :                     ; ****************************************************************************************************************
 AS V1.42 Beta [Bld 102] - source file vtl-2.asm(statement.asm) - page 18 - 12/28/2015 17:38:53


(1)  125/    9383 :                     
(1)  126/    9383 :                     __ENS_StandardAssignment:
(1)  127/    9383 : C5 01               	ld 		@1(p1)												; get the variable and skip over it
(1)  128/    9385 : CE FF               	st 		@-1(p2) 											; save on stack for later usage.
(1)  129/    9387 : (MACRO)             	lpi		p3,CheckEquals-1 									; check equals and spacing function
(1)  129/    9387 : C4 93                       ldi     (CHECKEQUALS-1) / 256
(1)  129/    9389 : 37                          xpah    P3
(1)  129/    938A : C4 CD                       ldi     (CHECKEQUALS-1) & 255
(1)  129/    938C : 33                          xpal    P3
(1)  130/    938D : 3F                  	xppc 	p3 													; call it.
(1)  131/    938E : C6 01               	ld 		@1(p2) 												; drop variable, temporarily
(1)  132/    9390 : 06                  	csa
(1)  133/    9391 : 94 99               	jp 		__ENS_Stop 											; error trap
(1)  134/    9393 : C6 FF               	ld 		@-1(p2) 											; restore variable on stack. data still there.
(1)  135/    9395 : 3F                  	xppc 	p3 													; call it again to evaluate expression
(1)  136/    9396 : C6 03               	ld 		@3(p2) 												; drop result and variable, though values still present
(1)  137/    9398 : 06                  	csa
(1)  138/    9399 : 94 91               	jp 		__ENS_Stop 											; error trap
(1)  139/    939B :                     
(1)  140/    939B : C2 FF               	ld 		-1(p2) 												; variable name
(1)  141/    939D : 02                  	ccl 														; double it, 2 bytes each
(1)  142/    939E : F2 FF               	add 	-1(p2) 
(1)  143/    93A0 : D4 7E               	ani 	0x3F * 2 											; same as anding with 3F and doubling.
(1)  144/    93A2 : 01                  	xae 														; put in E as an offset into variables
(1)  145/    93A3 : (MACRO)             	lpi 	p3,Variables 										; point P3 to variables.
(1)  145/    93A3 : C4 0D                       ldi     (VARIABLES) / 256
(1)  145/    93A5 : 37                          xpah    P3
(1)  145/    93A6 : C4 00                       ldi     (VARIABLES) & 255
(1)  145/    93A8 : 33                          xpal    P3
(1)  146/    93A9 : C2 FD               	ld 		-3(p2) 												; get LSB of result
(1)  147/    93AB : CB 80               	st 		-0x80(p3) 											; save it
(1)  148/    93AD : C7 01               	ld 		@1(p3) 												; bump P3
(1)  149/    93AF : C2 FE               	ld 		-2(p2) 												; get MSB of result
(1)  150/    93B1 : CB 80               	st 		-0x80(p3) 											; save it.
(1)  151/    93B3 : 90 83               	jmp 	SkipEndLineNextStatement 							; skip to end of line, if not there, and do next statement.
(1)  152/    93B5 :                     
(1)  153/    93B5 :                     ; ****************************************************************************************************************
(1)  154/    93B5 :                     ;	P1 points to a character in the 32-63 range, which *might* be a special so we look it up in the specials table
(1)  155/    93B5 :                     ; ****************************************************************************************************************
(1)  156/    93B5 :                     
(1)  157/    93B5 :                     __ENS_CheckSpecials:
(1)  158/    93B5 : (MACRO)             	lpi 	p3,SpecialsTable 									; point P3 to the specials table.
(1)  158/    93B5 : C4 95                       ldi     (SPECIALSTABLE) / 256
(1)  158/    93B7 : 37                          xpah    P3
(1)  158/    93B8 : C4 D5                       ldi     (SPECIALSTABLE) & 255
(1)  158/    93BA : 33                          xpal    P3
(1)  159/    93BB :                     __ENS_SearchSpecials:
(1)  160/    93BB : C7 03               	ld 		@3(p3) 												; fetch, and point to next.
(1)  161/    93BD : 98 C4               	jz 		__ENS_StandardAssignment 							; if end of table, then do as standard assignment
(1)  162/    93BF : E1 00               	xor 	(p1) 												; found the character
(1)  163/    93C1 : 9C F8               	jnz 	__ENS_SearchSpecials 								; no, keep looking for it.
(1)  164/    93C3 :                     
(1)  165/    93C3 : C5 01               	ld 		@1(p1) 												; skip over specials character
(1)  166/    93C5 : C3 FE               	ld 		-2(p3) 												; read LSB of jump address to E
(1)  167/    93C7 : 01                  	xae 
(1)  168/    93C8 : C3 FF               	ld 		-1(p3) 												; read MSB of jump address to P3.H
(1)  169/    93CA : 37                  	xpah 	p3
(1)  170/    93CB : 40                  	lde 														; copy E to P3.L Predecrement is done by the macro
(1)  171/    93CC : 33                  	xpal 	p3 
(1)  172/    93CD :                     
 AS V1.42 Beta [Bld 102] - source file vtl-2.asm(statement.asm) - page 19 - 12/28/2015 17:38:53


(1)  173/    93CD : 3F                  	xppc 	p3 													; and go to the handler. By doing this here we have 
(1)  174/    93CE :                     																; and XPPC P3 for check equals and an XPPC P3 for 
(1)  175/    93CE :                     																; expression with no P3 setup.
(1)  176/    93CE :                     
(1)  177/    93CE :                     ; ****************************************************************************************************************
(1)  178/    93CE :                     ; ****************************************************************************************************************
(1)  179/    93CE :                     ;
(1)  180/    93CE :                     ;						Check for = <expression>, skip following and trailing spaces
(1)  181/    93CE :                     ;
(1)  182/    93CE :                     ; ****************************************************************************************************************
(1)  183/    93CE :                     ; ****************************************************************************************************************
(1)  184/    93CE :                     
(1)  185/    93CE :                     CheckEquals:
(1)  186/    93CE : C5 01               	ld 		@1(p1) 												; fetch and bump
(1)  187/    93D0 : 98 13               	jz 		__CEQ_Fail
(1)  188/    93D2 : E4 20               	xri 	' ' 
(1)  189/    93D4 : 98 F8               	jz 		CheckEquals 										; keep going if space found.
(1)  190/    93D6 : E4 1D               	xri 	' ' ! '=' 											; if not found equals
(1)  191/    93D8 : 9C 0B               	jnz 	__CEQ_Fail  										; then fail with Syntax error.
(1)  192/    93DA :                     
(1)  193/    93DA :                     __CEQ_SkipSpaces:
(1)  194/    93DA : C5 01               	ld 		@1(p1) 												; look at next after =
(1)  195/    93DC : 98 07               	jz 		__CEQ_Fail 											; if NULL syntax error.
(1)  196/    93DE : E4 20               	xri 	' ' 												; loop back if space.
(1)  197/    93E0 : 98 F8               	jz 		__CEQ_SkipSpaces
(1)  198/    93E2 : 03                  	scl 														; set CY/L flag as okay
(1)  199/    93E3 : 90 04               	jmp 	__CEQ_Exit
(1)  200/    93E5 :                     __CEQ_Fail:	
(1)  201/    93E5 : C4 53               	ldi 	ERROR_Syntax
(1)  202/    93E7 : 01                  	xae
(1)  203/    93E8 : 02                  	ccl 														; clear CY/L as error and return.
(1)  204/    93E9 :                     __CEQ_Exit:
(1)  205/    93E9 : C5 FF               	ld 		@-1(p1) 											; undo last fetch.
(1)  206/    93EB : 06                  	csa 														; copy result to A
(1)  207/    93EC : 3F                  	xppc 	p3 													; return and fall through to evaluate expression
(1)  208/    93ED :                     
(1)  209/    93ED :                     ; ****************************************************************************************************************
(1)  210/    93ED :                     ;	Expression follows directly as this and the CheckEquals function can be executed using XPPC P3 with no set up
(1)  211/    93ED :                     ; ****************************************************************************************************************
(1)  212/    93ED :                     
(1)  213/    93ED :                     	include source\expression.asm 								; expression 
(2)    1/    93ED :                     ; ****************************************************************************************************************
(2)    2/    93ED :                     ; ****************************************************************************************************************
(2)    3/    93ED :                     ;
(2)    4/    93ED :                     ;										Expression Evaluation
(2)    5/    93ED :                     ;										=====================
(2)    6/    93ED :                     ;
(2)    7/    93ED :                     ;	On entry, P1 points to the expression, on exit it points to ) or NULL if okay. Error in E. CY/L flag = 0
(2)    8/    93ED :                     ;	indicates error, and this is already copied into A (e.g. CSA ; XPPC P3). A two byte result is stored on 
(2)    9/    93ED :                     ;	the stack whatever happens but this is not a valid value unless CY/L = 1.
(2)   10/    93ED :                     ;
(2)   11/    93ED :                     ;	This code has the monitor maths library as a dependency.
(2)   12/    93ED :                     ;	
(2)   13/    93ED :                     ; ****************************************************************************************************************
(2)   14/    93ED :                     ; ****************************************************************************************************************
(2)   15/    93ED :                     
(2)   16/    93ED :                     ; ****************************************************************************************************************
(2)   17/    93ED :                     ; ****************************************************************************************************************
(2)   18/    93ED :                     ;
(2)   19/    93ED :                     ;											Expression Evaluation
 AS V1.42 Beta [Bld 102] - source file vtl-2.asm(expression.asm) - page 20 - 12/28/2015 17:38:53


(2)   20/    93ED :                     ;
(2)   21/    93ED :                     ; ****************************************************************************************************************
(2)   22/    93ED :                     ; ****************************************************************************************************************
(2)   23/    93ED :                     
(2)   24/    93ED :                     EvaluateExpression:
(2)   25/    93ED : (MACRO)             	pushp 	p3 													; save P3 on stack.
(2)   25/    93ED : 37                          xpah    P3
(2)   25/    93EE : CE FF                       st              @-1(p2)
(2)   25/    93F0 : 33                          xpal    P3
(2)   25/    93F1 : CE FF                       st              @-1(p2)
(2)   26/    93F3 : C4 2B               	ldi 	'+'													; push + on stack as pending operator
(2)   27/    93F5 : CE FF               	st 		@-1(p2)
(2)   28/    93F7 : C4 00               	ldi 	0 													; push 0 (16 bit) on stack as current term.
(2)   29/    93F9 : CE FF               	st 		@-1(p2)
(2)   30/    93FB : CE FF               	st 		@-1(p2)
(2)   31/    93FD :                     
(2)   32/    93FD :                     ; ****************************************************************************************************************
(2)   33/    93FD :                     ;					Get the next term. This is the main loop. We pretend we have already done 0+
(2)   34/    93FD :                     ; ****************************************************************************************************************
(2)   35/    93FD :                     
(2)   36/    93FD :                     __EE_NextTerm:	
(2)   37/    93FD : C5 01               	ld 		@1(p1) 												; get next character and bump.
(2)   38/    93FF : 98 1A               	jz 		__EE_ExitSyntax 									; fail with syntax error if nothing found
(2)   39/    9401 : E4 20               	xri 	' ' 												; keep going, skipping over spaces.
(2)   40/    9403 : 98 F8               	jz 		__EE_NextTerm
(2)   41/    9405 : C5 FF               	ld 		@-1(p1) 											; get character, unpicking bump
(2)   42/    9407 : 02                  	ccl 														; add 128-'0' ; if +ve it is less than '0'
(2)   43/    9408 : F4 50               	adi 	128-'0'
(2)   44/    940A : 94 29               	jp 		__EE_NotInteger
(2)   45/    940C : F4 76               	adi 	128-10 												; add 128-10 ; if +ve it is greater than '9'
(2)   46/    940E : 94 25               	jp 		__EE_NotInteger
(2)   47/    9410 :                     
(2)   48/    9410 :                     ; ****************************************************************************************************************
(2)   49/    9410 :                     ;					Found an integer term, use the math library to extract the integer.
(2)   50/    9410 :                     ; ****************************************************************************************************************
(2)   51/    9410 :                     
(2)   52/    9410 : (MACRO)             	lpi 	p3,OSMathLibrary-1 									; use math library function '?'
(2)   52/    9410 : C4 00                       ldi     (OSMATHLIBRARY-1) / 256
(2)   52/    9412 : 37                          xpah    P3
(2)   52/    9413 : C4 02                       ldi     (OSMATHLIBRARY-1) & 255
(2)   52/    9415 : 33                          xpal    P3
(2)   53/    9416 : C4 3F               	ldi 	'?'
(2)   54/    9418 : 3F                  	xppc 	p3 													; convert to an integer (cannot return an error)
(2)   55/    9419 : 90 4F               	jmp 	__EE_ProcessOperator 								; process the pending operator
(2)   56/    941B :                     ;
(2)   57/    941B :                     ;	Syntax errors, come here
(2)   58/    941B :                     ;
(2)   59/    941B :                     __EE_ExitSyntax:
(2)   60/    941B : C4 54               	ldi 	ERROR_SyntaxTerm 									; E = Syntax Error in term.
(2)   61/    941D : 01                  	xae
(2)   62/    941E : 02                  	ccl
(2)   63/    941F :                     ;
(2)   64/    941F :                     ;	Any other error, or successful completion, come here.
(2)   65/    941F :                     ;
(2)   66/    941F :                     __EE_Exit:
(2)   67/    941F : C6 03               	ld 		@3(p2) 												; drop result and pending operator space on stack
(2)   68/    9421 : (MACRO)             	pullp 	p3 													; restore P3
(2)   68/    9421 : C6 01                       ld              @1(p2)
(2)   68/    9423 : 33                          xpal    P3
(2)   68/    9424 : C6 01                       ld              @1(p2)
 AS V1.42 Beta [Bld 102] - source file vtl-2.asm(expression.asm) - page 21 - 12/28/2015 17:38:53


(2)   68/    9426 : 37                          xpah    P3
(2)   69/    9427 :                     
(2)   70/    9427 : C2 FB               	ld 		-5(p2) 												; copy result to correct slot
(2)   71/    9429 : CA FE               	st 		-2(p2)
(2)   72/    942B : C2 FC               	ld 		-4(p2)
(2)   73/    942D : CA FF               	st 		-1(p2)
(2)   74/    942F : C6 FE               	ld 		@-2(p2)												; make space for result, result always returned.
(2)   75/    9431 : 06                  	csa 														; get CY/L bit into A bit 7
(2)   76/    9432 : 3F                  	xppc 	p3 													; return
(2)   77/    9433 : 90 B8               	jmp 	EvaluateExpression 									; re-entrant.
(2)   78/    9435 :                     
(2)   79/    9435 :                     ; ****************************************************************************************************************
(2)   80/    9435 :                     ;	We know it is not a numeric constant, so check for special terms. First though we optimise it by 
(2)   81/    9435 :                     ;	checking bit 5 - if zero the code is @A-Z[\]^_ none of which are 'special' terms.
(2)   82/    9435 :                     ; ****************************************************************************************************************
(2)   83/    9435 :                     
(2)   84/    9435 :                     __EE_NotInteger:
(2)   85/    9435 : C1 00               	ld 		(p1) 												; look at character bit 5 (32)
(2)   86/    9437 : D4 20               	ani 	32 													; if this is zero it cannot be a special term 
(2)   87/    9439 : 98 13               	jz 		__EE_IsVariable 									; as they are 32-63.
(2)   88/    943B :                     
(2)   89/    943B : (MACRO)             	lpi 	p3,CheckSpecialTerms-1 								; call the special terms routine.
(2)   89/    943B : C4 95                       ldi     (CHECKSPECIALTERMS-1) / 256
(2)   89/    943D : 37                          xpah    P3
(2)   89/    943E : C4 11                       ldi     (CHECKSPECIALTERMS-1) & 255
(2)   89/    9440 : 33                          xpal    P3
(2)   90/    9441 : 3F                  	xppc 	p3
(2)   91/    9442 : C6 02               	ld 		@2(p2) 												; drop the result
(2)   92/    9444 : 06                  	csa
(2)   93/    9445 : 94 D8               	jp 		__EE_Exit  											; if CY/L = 0 then an error has occurred, return it.
(2)   94/    9447 : C6 FE               	ld 		@-2(p2) 											; restore result to TOS.
(2)   95/    9449 : 40                  	lde  														; if E != 0 then the value has been processed and is on 
(2)   96/    944A : 9C 1E               	jnz 	__EE_ProcessOperator 								; the stack, so go process it
(2)   97/    944C : C6 02               	ld 		@2(p2) 												; drop the TOS as it is not valid.
(2)   98/    944E :                     
(2)   99/    944E :                     ; ****************************************************************************************************************
(2)  100/    944E :                     ;										We now know this is a variable.
(2)  101/    944E :                     ; ****************************************************************************************************************
(2)  102/    944E :                     
(2)  103/    944E :                     __EE_IsVariable:
(2)  104/    944E : C1 00               	ld 		(p1) 												; calculate twice the character
(2)  105/    9450 : 02                  	ccl 
(2)  106/    9451 : F5 01               	add 	@1(p1) 												; add with bump of variable.
(2)  107/    9453 : D4 7E               	ani 	(0x3F * 2)											; same as (n & 0x3F) * 2
(2)  108/    9455 : 01                  	xae 														; put in E, use this as an index.
(2)  109/    9456 : (MACRO)             	lpi 	p3,Variables 										; point P3 to variables
(2)  109/    9456 : C4 0D                       ldi     (VARIABLES) / 256
(2)  109/    9458 : 37                          xpah    P3
(2)  109/    9459 : C4 00                       ldi     (VARIABLES) & 255
(2)  109/    945B : 33                          xpal    P3
(2)  110/    945C : C3 80               	ld 		-0x80(p3) 											; get low byte
(2)  111/    945E : CE FE               	st 		@-2(p2) 											; push on stack, allow space for high byte
(2)  112/    9460 : C7 01               	ld 		@1(p3) 												; increment P3 to get high byte
(2)  113/    9462 : C3 80               	ld 		-0x80(p3) 											; get high byte
(2)  114/    9464 : CA 01               	st 		1(p2) 												; save on allocated stack space.
(2)  115/    9466 : 90 02               	jmp 	__EE_ProcessOperator
(2)  116/    9468 :                     
(2)  117/    9468 :                     __EE_NextTerm2: 												; the jump is too large.
(2)  118/    9468 : 90 93               	jmp 	__EE_NextTerm
(2)  119/    946A :                     
 AS V1.42 Beta [Bld 102] - source file vtl-2.asm(expression.asm) - page 22 - 12/28/2015 17:38:53


(2)  120/    946A :                     ; ****************************************************************************************************************
(2)  121/    946A :                     ;		We now have two values on the stack and an operator, so apply the operator to the two values.
(2)  122/    946A :                     ; ****************************************************************************************************************
(2)  123/    946A :                     
(2)  124/    946A :                     __EE_ProcessOperator:
(2)  125/    946A : (MACRO)             	lpi 	p3,OSMathLibrary-1 									; point P3 to the OS Math Library.
(2)  125/    946A : C4 00                       ldi     (OSMATHLIBRARY-1) / 256
(2)  125/    946C : 37                          xpah    P3
(2)  125/    946D : C4 02                       ldi     (OSMATHLIBRARY-1) & 255
(2)  125/    946F : 33                          xpal    P3
(2)  126/    9470 : C2 04               	ld 		4(p2) 												; get operator
(2)  127/    9472 : D4 FC               	ani 	0xFC 												; clear bits 0,1
(2)  128/    9474 : E4 3C               	xri 	0x3C 												; now will be zero for 3C..3F which is < = > ?
(2)  129/    9476 : 9C 06               	jnz 	__EE_NotComparison
(2)  130/    9478 : (MACRO)             	lpi 	p3,CompareLibrary-1 								; if it is, we use this library instead
(2)  130/    9478 : C4 94                       ldi     (COMPARELIBRARY-1) / 256
(2)  130/    947A : 37                          xpah    P3
(2)  130/    947B : C4 DC                       ldi     (COMPARELIBRARY-1) & 255
(2)  130/    947D : 33                          xpal    P3
(2)  131/    947E :                     __EE_NotComparison:
(2)  132/    947E : C2 04               	ld 		4(p2) 												; get operator
(2)  133/    9480 : E4 2F               	xri 	'/'													; is it divide ?
(2)  134/    9482 : 9C 02               	jnz 	__EE_NotDivide
(2)  135/    9484 : E4 73               	xri 	'/'!'\\'											; if so, this will change it to \ unsigned divide for Math lib.
(2)  136/    9486 :                     __EE_NotDivide:
(2)  137/    9486 : E4 2F               	xri 	'/'													; unpick the test, but / will have changed to \ (backslash)
(2)  138/    9488 : 3F                  	xppc 	p3 													; do the operation.
(2)  139/    9489 : 06                  	csa 														; check for error.
(2)  140/    948A : 94 08               	jp 		__EE_GetNextOperator 								; CY/L = 1, error
(2)  141/    948C : C6 02               	ld 		@2(p2) 												; drop TOS - if divide by zero then stack unchanged.
(2)  142/    948E : C4 5A               	ldi 	ERROR_DivideZero 									; prepare for division by zero error.
(2)  143/    9490 : 01                  	xae 														; the only error the Math Library can return from + - * /
(2)  144/    9491 : 02                  	ccl 														; return error flag.
(2)  145/    9492 :                     __EE_Exit2:
(2)  146/    9492 : 90 8B               	jmp 	__EE_Exit 											; return if error.
(2)  147/    9494 :                     
(2)  148/    9494 :                     ; ****************************************************************************************************************
(2)  149/    9494 :                     ;	Have successfully performed operation. First check if we have done division, and if so, save the remainder.
(2)  150/    9494 :                     ; ****************************************************************************************************************
(2)  151/    9494 :                     
(2)  152/    9494 :                     __EE_GetNextOperator:
(2)  153/    9494 : C2 02               	ld 		2(p2) 												; was it divide ?
(2)  154/    9496 : E4 2F               	xri 	'/'
(2)  155/    9498 : 9C 0E               	jnz 	__EE_FindNextOperator
(2)  156/    949A : (MACRO)             	lpi 	p3,Variables+('%' & 0x3F)*2 						; point P3 to remainder variable
(2)  156/    949A : C4 0D                       ldi     (VARIABLES+('%' & 0X3F)*2) / 256
(2)  156/    949C : 37                          xpah    P3
(2)  156/    949D : C4 4A                       ldi     (VARIABLES+('%' & 0X3F)*2) & 255
(2)  156/    949F : 33                          xpal    P3
(2)  157/    94A0 : C2 FE               	ld 		-2(p2)												; copy remainder there.
(2)  158/    94A2 : CB 00               	st 		(p3)
(2)  159/    94A4 : C2 FF               	ld 		-1(p2)
(2)  160/    94A6 : CB 01               	st 		1(p3)
(2)  161/    94A8 :                     
(2)  162/    94A8 :                     ; ****************************************************************************************************************
(2)  163/    94A8 :                     ;							Now find the next operator. NULL or ) ends an expression.
(2)  164/    94A8 :                     ; ****************************************************************************************************************
(2)  165/    94A8 :                     
(2)  166/    94A8 :                     __EE_FindNextOperator:
(2)  167/    94A8 : 03                  	scl 														; prepare for successful exit.
 AS V1.42 Beta [Bld 102] - source file vtl-2.asm(expression.asm) - page 23 - 12/28/2015 17:38:53


(2)  168/    94A9 : C1 00               	ld 		(p1) 												; get next operator
(2)  169/    94AB : 98 E5               	jz 		__EE_Exit2 											; if end of line, exit
(2)  170/    94AD : E4 29               	xri 	')' 												; if close parenthesis, exit.
(2)  171/    94AF : 98 E1               	jz 		__EE_Exit2
(2)  172/    94B1 : C5 01               	ld 		@1(p1) 												; refetch and bump
(2)  173/    94B3 : E4 20               	xri 	' ' 												; loop back if spaces
(2)  174/    94B5 : 98 F1               	jz 		__EE_FindNextOperator
(2)  175/    94B7 :                     
(2)  176/    94B7 : C1 FF               	ld 		-1(p1) 												; reload old character.
(2)  177/    94B9 : CA 02               	st 		2(p2) 												; save as pending operation.
(2)  178/    94BB :                     
(2)  179/    94BB : E4 2B               	xri 	'+'
(2)  180/    94BD : 98 A9               	jz 		__EE_NextTerm2 										; go to next term if a valid operator.
(2)  181/    94BF : E4 06               	xri 	'-'!'+'
(2)  182/    94C1 : 98 A5               	jz 		__EE_NextTerm2
(2)  183/    94C3 : E4 07               	xri 	'*'!'-'
(2)  184/    94C5 : 98 A1               	jz 		__EE_NextTerm2
(2)  185/    94C7 : E4 05               	xri 	'/'!'*'
(2)  186/    94C9 : 98 9D               	jz 		__EE_NextTerm2
(2)  187/    94CB : E4 13               	xri 	'<'!'/'
(2)  188/    94CD : 98 99               	jz 		__EE_NextTerm2
(2)  189/    94CF : E4 01               	xri 	'='!'<'
(2)  190/    94D1 : 98 95               	jz 		__EE_NextTerm2
(2)  191/    94D3 : E4 03               	xri 	'>'!'='
(2)  192/    94D5 : 98 91               	jz 		__EE_NextTerm2
(2)  193/    94D7 :                     
(2)  194/    94D7 : C4 4F               	ldi 	ERROR_Operator 										; bad operator error
(2)  195/    94D9 : 01                  	xae
(2)  196/    94DA : 02                  	ccl
(2)  197/    94DB : 90 B5               	jmp 	__EE_Exit2
(2)  198/    94DD :                     
(2)  199/    94DD :                     ; ****************************************************************************************************************
(2)  200/    94DD :                     ;	
(2)  201/    94DD :                     ;							This library provides functionality for >, = and <.
(2)  202/    94DD :                     ;
(2)  203/    94DD :                     ; ****************************************************************************************************************
(2)  204/    94DD :                     
(2)  205/    94DD :                     CompareLibrary:
(2)  206/    94DD : 03                  	scl 														; calculate Stack2 - Stack1
(2)  207/    94DE : C2 02               	ld 		2(p2) 												; lower byte
(2)  208/    94E0 : FA 00               	cad 	0(p2)
(2)  209/    94E2 : 01                  	xae 														; save in E
(2)  210/    94E3 : C2 03               	ld 		3(p2) 												; upper byte
(2)  211/    94E5 : FA 01               	cad 	1(p2)
(2)  212/    94E7 : 58                  	ore 														; or into E, now zero if equal.
(2)  213/    94E8 : 98 02               	jz 		__CL_ResultZero 
(2)  214/    94EA : C4 01               	ldi 	1  													
(2)  215/    94EC :                     __CL_ResultZero:												; A = 0 if result same, A = 1 if result different
(2)  216/    94EC : E4 01               	xri 	1 													; A = 1 if result same, A = 1 if result different
(2)  217/    94EE : 01                  	xae 														; put in E
(2)  218/    94EF : C2 04               	ld 		4(p2) 												; get comparator
(2)  219/    94F1 : E4 3D               	xri 	'=' 												; if it is '=', exit with E
(2)  220/    94F3 : 98 12               	jz 		__CL_ExitE
(2)  221/    94F5 :                     
(2)  222/    94F5 : 06                  	csa 														; get not borrow from subtraction
(2)  223/    94F6 : D4 80               	ani 	0x80 												; isolate carry
(2)  224/    94F8 : 98 02               	jz 		__CL_CarryClear
(2)  225/    94FA : C4 01               	ldi 	1
(2)  226/    94FC :                     __CL_CarryClear:												; now A = 1 : Carry set, A = 0 : Carry Clear
(2)  227/    94FC : 01                   	xae 														; in E
 AS V1.42 Beta [Bld 102] - source file vtl-2.asm(expression.asm) - page 24 - 12/28/2015 17:38:53


(2)  228/    94FD : C2 04                	ld 		4(p2) 												; if it is '>', exit with this value
(2)  229/    94FF : E4 3E                	xri 	'>'
(2)  230/    9501 : 98 04                	jz 		__CL_ExitE
(2)  231/    9503 : 40                   	lde 														; toggle E bit 0, e.g. reversing result.
(2)  232/    9504 : E4 01                	xri 	1
(2)  233/    9506 : 01                   	xae
(2)  234/    9507 :                     __CL_ExitE:
(2)  235/    9507 : C6 02               	ld 		@2(p2) 												; pop a value off
(2)  236/    9509 : 40                  	lde 														; save E as LSB
(2)  237/    950A : CA 00               	st 		0(p2)
(2)  238/    950C : C4 00               	ldi 	0 													; MSB is zero, result is 0 or 1.
(2)  239/    950E : CA 01               	st 		1(p2)
(2)  240/    9510 : 02                  	ccl 														; clear carry because we must to be okay, matches behaviour
(2)  241/    9511 : 3F                  	xppc 	p3 													; of Maths library.
(2)  242/    9512 :                     
(1)  214/    9512 :                     	include source\right_special.asm 							; r-expr specials (parenthesis,array,key,line)
(2)    1/    9512 :                     ; ****************************************************************************************************************
(2)    2/    9512 :                     ; ****************************************************************************************************************
(2)    3/    9512 :                     ;
(2)    4/    9512 :                     ;										Special Terms (Right Hand Side)
(2)    5/    9512 :                     ;
(2)    6/    9512 :                     ; ****************************************************************************************************************
(2)    7/    9512 :                     ; ****************************************************************************************************************
(2)    8/    9512 :                     ;
(2)    9/    9512 :                     ;	(<expr>)					Parenthesised expression
(2)   10/    9512 :                     ;	:<expr>)					Array access (relative to '&')
(2)   11/    9512 :                     ;	$ 							Read character from keyboard
(2)   12/    9512 :                     ;	?							Read line and evaluate expression.
(2)   13/    9512 :                     ;
(2)   14/    9512 :                     ; ****************************************************************************************************************
(2)   15/    9512 :                     ; ****************************************************************************************************************
(2)   16/    9512 :                     ;
(2)   17/    9512 :                     ;	This function does special terms for the Right Hand Side. Returns CY/L = 0 Error, S -> A
(2)   18/    9512 :                     ;	If No Error is reported, E != 0 if processed, E = 0 if variable. If Error reported E is the Error Number.
(2)   19/    9512 :                     ;	Always returns a value on the stack.
(2)   20/    9512 :                     ;
(2)   21/    9512 :                     ; ****************************************************************************************************************
(2)   22/    9512 :                     ; ****************************************************************************************************************
(2)   23/    9512 :                     
(2)   24/    9512 :                     CheckSpecialTerms:
(2)   25/    9512 : C4 00               	ldi 	0
(2)   26/    9514 : CE FF               	st 		@-1(p2) 											; allocate space for result and clear it
(2)   27/    9516 : CE FF               	st 		@-1(p2)
(2)   28/    9518 : (MACRO)             	pushp 	p3 													; save P3.
(2)   28/    9518 : 37                          xpah    P3
(2)   28/    9519 : CE FF                       st              @-1(p2)
(2)   28/    951B : 33                          xpal    P3
(2)   28/    951C : CE FF                       st              @-1(p2)
(2)   29/    951E :                     
(2)   30/    951E : C5 01               	ld 		@1(p1) 												; get character and skip over it
(2)   31/    9520 : E4 24               	xri 	'$'													; is it character in ?
(2)   32/    9522 : 9C 0E               	jnz 	__CST_NotCharacter
(2)   33/    9524 :                     
(2)   34/    9524 :                     ; ****************************************************************************************************************
(2)   35/    9524 :                     ;												$ Get Keystroke
(2)   36/    9524 :                     ; ****************************************************************************************************************
(2)   37/    9524 :                     
(2)   38/    9524 : (MACRO)             	lpi 	p3,GetChar-1 										; get character subroutine
(2)   38/    9524 : C4 91                       ldi     (GETCHAR-1) / 256
(2)   38/    9526 : 37                          xpah    P3
 AS V1.42 Beta [Bld 102] - source file vtl-2.asm(right_special.asm) - page 25 - 12/28/2015 17:38:53


(2)   38/    9527 : C4 3F                       ldi     (GETCHAR-1) & 255
(2)   38/    9529 : 33                          xpal    P3
(2)   39/    952A : 3F                  	xppc 	p3 													; call it
(2)   40/    952B : CA 02               	st 		2(p2) 												; save in return slot
(2)   41/    952D :                     __CST_ReturnDone:
(2)   42/    952D : C4 01               	ldi 	1 													; set E to nonzero
(2)   43/    952F : 01                  	xae
(2)   44/    9530 : 90 41               	jmp 	__CST_SCLAndExit 									; set carry and exit.
(2)   45/    9532 :                     ;
(2)   46/    9532 :                     __CST_NotCharacter:
(2)   47/    9532 : E4 1B               	xri 	'?'!'$'												; is it expression in ?
(2)   48/    9534 : 9C 30               	jnz 	__CST_NotInput 
(2)   49/    9536 :                     
(2)   50/    9536 :                     ; ****************************************************************************************************************
(2)   51/    9536 :                     ;											? Get Line and evaluate it.
(2)   52/    9536 :                     ; ****************************************************************************************************************
(2)   53/    9536 :                     
(2)   54/    9536 : (MACRO)             	pushp 	p1 													; save P1
(2)   54/    9536 : 35                          xpah    P1
(2)   54/    9537 : CE FF                       st              @-1(p2)
(2)   54/    9539 : 31                          xpal    P1
(2)   54/    953A : CE FF                       st              @-1(p2)
(2)   55/    953C : (MACRO)             	lpi 	p3,GetString-1 										; read string from keyboard
(2)   55/    953C : C4 91                       ldi     (GETSTRING-1) / 256
(2)   55/    953E : 37                          xpah    P3
(2)   55/    953F : C4 63                       ldi     (GETSTRING-1) & 255
(2)   55/    9541 : 33                          xpal    P3
(2)   56/    9542 : (MACRO)             	lpi 	p1,KeyboardBuffer 								
(2)   56/    9542 : C4 0E                       ldi     (KEYBOARDBUFFER) / 256
(2)   56/    9544 : 35                          xpah    P1
(2)   56/    9545 : C4 00                       ldi     (KEYBOARDBUFFER) & 255
(2)   56/    9547 : 31                          xpal    P1
(2)   57/    9548 : C4 50               	ldi 	KeyboardBufferSize 
(2)   58/    954A : 3F                  	xppc 	p3 
(2)   59/    954B : (MACRO)             	lpi 	p3,EvaluateExpression-1 							; evaluate this
(2)   59/    954B : C4 93                       ldi     (EVALUATEEXPRESSION-1) / 256
(2)   59/    954D : 37                          xpah    P3
(2)   59/    954E : C4 EC                       ldi     (EVALUATEEXPRESSION-1) & 255
(2)   59/    9550 : 33                          xpal    P3
(2)   60/    9551 : 3F                  	xppc 	p3
(2)   61/    9552 : 94 08               	jp 		__CST_EvaluateCont 									; if error, don't copy result.
(2)   62/    9554 : C2 00               	ld 		0(p2) 												; copy result
(2)   63/    9556 : CA 06               	st 		6(p2)
(2)   64/    9558 : C2 01               	ld 		1(p2)
(2)   65/    955A : CA 07               	st 		7(p2)
(2)   66/    955C :                     __CST_EvaluateCont:
(2)   67/    955C : C6 02               	ld 		@2(p2) 												; drop the return result.
(2)   68/    955E : (MACRO)             	pullp 	p1 													; restore P1
(2)   68/    955E : C6 01                       ld              @1(p2)
(2)   68/    9560 : 31                          xpal    P1
(2)   68/    9561 : C6 01                       ld              @1(p2)
(2)   68/    9563 : 35                          xpah    P1
(2)   69/    9564 : 90 C7               	jmp 	__CST_ReturnDone									; exit successfully.
(2)   70/    9566 :                     ;
(2)   71/    9566 :                     ;	Check for : or (
(2)   72/    9566 :                     ;
(2)   73/    9566 :                     __CST_NotInput:
(2)   74/    9566 : E4 05               	xri 	':'!'?'												; is it the array marker
(2)   75/    9568 : 98 12               	jz 		__CST_ArrayOrParenthesis
(2)   76/    956A : E4 12               	xri 	':'!'('												; or the parenthesis (open bracket)
 AS V1.42 Beta [Bld 102] - source file vtl-2.asm(right_special.asm) - page 26 - 12/28/2015 17:38:53


(2)   77/    956C : 98 0E               	jz 		__CST_ArrayOrParenthesis
(2)   78/    956E : C5 FF               	ld 		@-1(p1) 											; undo the bump.
(2)   79/    9570 : C4 00               	ldi 	0 													; E = 0 not processed
(2)   80/    9572 : 01                  	xae
(2)   81/    9573 :                     __CST_SCLAndExit:
(2)   82/    9573 : 03                  	scl 														; CY/L = 1 no error.
(2)   83/    9574 :                     __CST_Exit:
(2)   84/    9574 : (MACRO)             	pullp 	p3 													; restore P3
(2)   84/    9574 : C6 01                       ld              @1(p2)
(2)   84/    9576 : 33                          xpal    P3
(2)   84/    9577 : C6 01                       ld              @1(p2)
(2)   84/    9579 : 37                          xpah    P3
(2)   85/    957A : 06                  	csa 														; copy error flag to A.
(2)   86/    957B : 3F                  	xppc 	p3
(2)   87/    957C :                     
(2)   88/    957C :                     ; ****************************************************************************************************************
(2)   89/    957C :                     ;	:<expr> or (<expr>) - both evaluate and check the parenthesis value, then array does the array access
(2)   90/    957C :                     ; ****************************************************************************************************************
(2)   91/    957C :                     
(2)   92/    957C :                     __CST_ArrayOrParenthesis:
(2)   93/    957C : C1 FF               	ld 		-1(p1) 												; get the type (array or parenthesis)
(2)   94/    957E : CE FF               	st 		@-1(p2) 											; push on the stack so we know what type it was for later.
(2)   95/    9580 : (MACRO)             	lpi 	p3,EvaluateExpression-1								; call the expression evaluator recursively.
(2)   95/    9580 : C4 93                       ldi     (EVALUATEEXPRESSION-1) / 256
(2)   95/    9582 : 37                          xpah    P3
(2)   95/    9583 : C4 EC                       ldi     (EVALUATEEXPRESSION-1) & 255
(2)   95/    9585 : 33                          xpal    P3
(2)   96/    9586 : 3F                  	xppc 	p3
(2)   97/    9587 : C6 03               	ld 		@3(p2) 												; drop the type and result, but they are still physically there.
(2)   98/    9589 : 06                  	csa 														; check for error
(2)   99/    958A : 94 E8               	jp 		__CST_Exit 											; if error occurred, then exit 
(2)  100/    958C : C4 42               	ldi 	ERROR_Bracket 										; set E for missing close bracket error.
(2)  101/    958E : 01                  	xae
(2)  102/    958F : 02                  	ccl 														; clear carry , this means error.
(2)  103/    9590 :                     
(2)  104/    9590 : C1 00               	ld 		(p1) 												; get terminating character
(2)  105/    9592 : E4 29               	xri 	')'													; which should be a close bracket
(2)  106/    9594 : 9C DE               	jnz 	__CST_Exit 											; if not, exit with a missing close bracket error.
(2)  107/    9596 : C5 01               	ld 		@1(p1) 												; skip over the closing bracket.
(2)  108/    9598 :                     
(2)  109/    9598 : C2 FF               	ld 		-1(p2) 												; get the operator ( or :
(2)  110/    959A : 01                  	xae 														; save in E
(2)  111/    959B : C2 FD               	ld 		-3(p2) 												; move value to correct position.
(2)  112/    959D : CA 02               	st 		2(p2)
(2)  113/    959F : C2 FE               	ld 		-2(p2)
(2)  114/    95A1 : CA 03               	st 		3(p2)
(2)  115/    95A3 : 40                  	lde 														; get E
(2)  116/    95A4 : E4 28               	xri 	'(' 												; is it parenthesised expression
(2)  117/    95A6 : 98 CB               	jz 		__CST_SCLAndExit 									; if so, exit with E != 0 and CY/L = 1
(2)  118/    95A8 :                     
(2)  119/    95A8 :                     ; ****************************************************************************************************************
(2)  120/    95A8 :                     ;	Now we know we had :<expr>) - so calculate & + <expr> * 2 and read what is there.
(2)  121/    95A8 :                     ; ****************************************************************************************************************
(2)  122/    95A8 :                     
(2)  123/    95A8 : 02                  	ccl 	
(2)  124/    95A9 : C2 02               	ld 		2(p2) 												; double the offset
(2)  125/    95AB : F2 02               	add 	2(p2)
(2)  126/    95AD : CA 02               	st 		2(p2)
(2)  127/    95AF : C2 03               	ld 		3(p2)
(2)  128/    95B1 : F2 03               	add 	3(p2)
 AS V1.42 Beta [Bld 102] - source file vtl-2.asm(right_special.asm) - page 27 - 12/28/2015 17:38:53


(2)  129/    95B3 : CA 03               	st 		3(p2)
(2)  130/    95B5 :                     
(2)  131/    95B5 : (MACRO)             	lpi 	p3,Variables+('&' & 0x3F) * 2 						; point P3 to '&'
(2)  131/    95B5 : C4 0D                       ldi     (VARIABLES+('&' & 0X3F) * 2) / 256
(2)  131/    95B7 : 37                          xpah    P3
(2)  131/    95B8 : C4 4C                       ldi     (VARIABLES+('&' & 0X3F) * 2) & 255
(2)  131/    95BA : 33                          xpal    P3
(2)  132/    95BB : 02                  	ccl
(2)  133/    95BC : C2 02               	ld 		2(p2) 												; add &.Low to offset.low -> E
(2)  134/    95BE : F3 00               	add 	0(p3)
(2)  135/    95C0 : 01                  	xae
(2)  136/    95C1 : C2 03               	ld 		3(p2) 												; add &.High to offset.high -> P3.H
(2)  137/    95C3 : F3 01               	add 	1(p3)
(2)  138/    95C5 : 37                  	xpah 	p3
(2)  139/    95C6 : 40                  	lde 														; E->P3.L ; P3 is now & + (offset * 2)
(2)  140/    95C7 : 33                  	xpal 	p3
(2)  141/    95C8 : C3 00               	ld 		0(p3) 												; access array, store in return 
(2)  142/    95CA : CA 02               	st 		2(p2)
(2)  143/    95CC : C3 01               	ld 		1(p3)
(2)  144/    95CE : CA 03               	st 		3(p2)
(2)  145/    95D0 : C4 FF               	ldi 	0xFF 												; set E to non-zero and exit.
(2)  146/    95D2 : 01                  	xae
(2)  147/    95D3 : 90 9E               	jmp 	__CST_SCLAndExit
(2)  148/    95D5 :                     
(1)  215/    95D5 :                     
(1)  216/    95D5 :                     ; ****************************************************************************************************************
(1)  217/    95D5 :                     ;									Table of 'Special' L-Expressions
(1)  218/    95D5 :                     ; ****************************************************************************************************************
(1)  219/    95D5 :                     
(1)  220/    95D5 :                     SpecialsTable:
(1)  221/    95D5 : (MACRO)             	special '#',__ST_Goto 										; # is goto
(1)  221/    95D5 : 23                          db              '#'
(1)  221/    95D6 : E4 92                       dw              (__ST_GOTO)-1
(1)  222/    95D8 : (MACRO)             	special ':',__ST_ArrayWrite 								; : is array write.
(1)  222/    95D8 : 3A                          db              ':'
(1)  222/    95D9 : 91 92                       dw              (__ST_ARRAYWRITE)-1
(1)  223/    95DB : (MACRO)             	special '?',__ST_Print 										; ? is write expression or string literal.
(1)  223/    95DB : 3F                          db              '?'
(1)  223/    95DC : 12 92                       dw              (__ST_PRINT)-1
(1)  224/    95DE : (MACRO)             	special '$',__ST_CharacterOut 								; $ is write direct to output.
(1)  224/    95DE : 24                          db              '$'
(1)  224/    95DF : 7C 92                       dw              (__ST_CHARACTEROUT)-1
(1)  225/    95E1 : (MACRO)             	special '>',__ST_MachineCode 								; > is call machine code.
(1)  225/    95E1 : 3E                          db              '>'
(1)  225/    95E2 : E9 91                       dw              (__ST_MACHINECODE)-1
(1)  226/    95E4 : (MACRO)             	special ')',SkipEndLineNextStatement 						; ) is a comment.
(1)  226/    95E4 : 29                          db              ')'
(1)  226/    95E5 : 37 93                       dw              (SKIPENDLINENEXTSTATEMENT)-1
(1)  227/    95E7 : (MACRO)             	special '&',__ST_ReadOnlyVariable-1							; & is read only, cannot be changed.
(1)  227/    95E7 : 26                          db              '&'
(1)  227/    95E8 : CC 91                       dw              (__ST_READONLYVARIABLE-1)-1
(1)  228/    95EA : 00                  	db 		0 													; end marker.
(1)  229/    95EB :                     
      56/    95EB :                     
 AS V1.42 Beta [Bld 102] - source file vtl-2.asm - page 28 - 12/28/2015 17:38:53


  symbol table (* = unused):
  ------------------------

*ARCHITECTURE :  i386-unknown-win32 - | *BIGENDIAN :                      0 - |
 BOOTMONITOR :                  210 - | *BRANCHEXT :                      0 - |
*CASESENSITIVE :                  0 - |  CHECKEQUALS :                 93CE C |
 CHECKSPECIALTERMS :           9512 C |  COMPARELIBRARY :              94DD C |
*CONSTPI :        3.141592653589793 - | *DATE :                  12/28/2015 - |
 ERROR_BRACKET :                 42 - |  ERROR_DIVIDEZERO :              5A - |
 ERROR_OPERATOR :                4F - |  ERROR_QUOTE :                   51 - |
 ERROR_READONLY :                52 - |  ERROR_SYNTAX :                  53 - |
 ERROR_SYNTAXTERM :              54 - |  EVALUATEEXPRESSION :          93ED C |
 EXECUTENEXTSTATEMENT :        933C C | *FALSE :                          0 - |
*FULLPMMU :                       1 - |  GETCHAR :                     9140 C |
 GETSTRING :                   9164 C | *HAS64 :                          1 - |
*HASDSP :                         0 - | *HASFPU :                         0 - |
*HASPMMU :                        0 - | *INEXTMODE :                      0 - |
*INLWORDMODE :                    0 - | *INMAXMODE :                      0 - |
*INSRCMODE :                      0 - | *INSUPMODE :                      0 - |
 ISRUNNING :                    CFF - |  KEYBOARDBUFFER :               E00 - |
 KEYBOARDBUFFERSIZE :            50 - | *LISTON :                         1 - |
*MACEXP :                         1 - | *MOMCPU :                         C - |
*MOMCPUNAME :                 SC/MP - | *NESTMAX :                      100 - |
 OSMATHLIBRARY :                  3 - | *PACKING :                        0 - |
*PADDING :                        1 - |  PRINT :                       9080 C |
 PROGRAMBASE :                  CFD - |  RANDOMVARIABLE :                27 - |
*RELAXED :                        0 - |  SCREENCURSOR :                 C80 - |
 SCREENMIRROR :                 C00 - |  SKIPENDLINENEXTSTATEMENT :    9338 C |
 SPECIALSTABLE :               95D5 C |  SYSTEMVARIABLES :              D00 - |
 TEST :                        903F C | *TIME :                    17:38:53 - |
*TRUE :                           1 - |  VARIABLES :                    D00 - |
*VERSION :                     142F - |  WAIT2 :                       9336 C |
 __CEQ_EXIT :                  93E9 C |  __CEQ_FAIL :                  93E5 C |
 __CEQ_SKIPSPACES :            93DA C |  __CL_CARRYCLEAR :             94FC C |
 __CL_EXITE :                  9507 C |  __CL_RESULTZERO :             94EC C |
 __CST_ARRAYORPARENTHESIS :    957C C |  __CST_EVALUATECONT :          955C C |
 __CST_EXIT :                  9574 C |  __CST_NOTCHARACTER :          9532 C |
 __CST_NOTINPUT :              9566 C |  __CST_RETURNDONE :            952D C |
 __CST_SCLANDEXIT :            9573 C |  __EE_EXIT :                   941F C |
 __EE_EXIT2 :                  9492 C |  __EE_EXITSYNTAX :             941B C |
 __EE_FINDNEXTOPERATOR :       94A8 C |  __EE_GETNEXTOPERATOR :        9494 C |
 __EE_ISVARIABLE :             944E C |  __EE_NEXTTERM :               93FD C |
 __EE_NEXTTERM2 :              9468 C |  __EE_NOTCOMPARISON :          947E C |
 __EE_NOTDIVIDE :              9486 C |  __EE_NOTINTEGER :             9435 C |
 __EE_PROCESSOPERATOR :        946A C |  __ENS_CHECKSPECIALS :         93B5 C |
 __ENS_GETFIRSTCHARACTER :     9375 C |  __ENS_NOTOGGLEMASK :          9375 C |
 __ENS_RANDOMINITIALISED :     9361 C |  __ENS_SEARCHSPECIALS :        93BB C |
 __ENS_STANDARDASSIGNMENT :    9383 C |  __ENS_STOP :                  932C C |
 __GCNOTLOWER [GETCHAR] :      915F C |  __GCWAITKEY [GETCHAR] :       9145 C |
 __GCWAITRELEASE [GETCHAR] :   914D C |  __GSBACKSPACE [GETSTRING] :   91BF C |
 __GSCONTROLKEY [GETSTRING] :  91A2 C |  __GSLOOP [GETSTRING] :        9172 C |
 __PRCLEARFROMMOVETO [PRINT] : 9120 C |  __PRCLEARLOOP [PRINT] :       9122 C |
 __PRCLEARSCREEN [PRINT] :     911E C |  __PRCOPY [PRINT] :            912C C |
 __PREXIT [PRINT] :            90E3 C |  __PREXITNOCHECK [PRINT] :     90E7 C |
 __PRISCONTROLCHAR [PRINT] :   90F5 C |  __PRISRETURN [PRINT] :        9115 C |
 __PRNOTASCII [PRINT] :        90BD C |  __PRPRINTCHARACTERA [PRINT] : 90A1 C |
 __PRPRINTSTRING [PRINT] :     908F C |  __PRSCROLLLOOP [PRINT] :      90D5 C |
 __PRUPDATECURSOR [PRINT] :    90C6 C |  __STARR_DROP2_END :           92E1 C |
 __STARR_END :                 92E3 C |  __STARR_NOCLOSEBRACKET :      92DD C |
 __STCHO_END :                 9290 C |  __STGOTO_END :                9327 C |
 AS V1.42 Beta [Bld 102] - source file vtl-2.asm - page 29 - 12/28/2015 17:38:53


 __STGOTO_FOUND :              9324 C |  __STGOTO_SEARCH :             930D C |
 __STMAC_END :                 9211 C |  __STPRT_END :                 927B C |
 __STPRT_ERROR :               9277 C |  __STPRT_LITCOMPLETE :         9264 C |
 __STPRT_LITERAL :             924D C |  __STPRT_LITLOOP :             9255 C |
 __STROV_END :                 91E8 C |  __STROV_ERROR :               91E4 C |
 __ST_ARRAYWRITE :             9292 C |  __ST_CHARACTEROUT :           927D C |
 __ST_GOTO :                   92E5 C |  __ST_MACHINECODE :            91EA C |
 __ST_PRINT :                  9213 C |  __ST_READONLYVARIABLE :       91CE C |

    130 symbols
     28 unused symbols

 AS V1.42 Beta [Bld 102] - source file vtl-2.asm - page 30 - 12/28/2015 17:38:53


  defined macros:
  ---------------

CODE                                  | LPI                                  
PULLA                                 | PULLE                                
PULLP                                 | PUSHA                                
PUSHE                                 | PUSHP                                
SETV                                  | SPECIAL                              

     10 macros

 AS V1.42 Beta [Bld 102] - source file vtl-2.asm - page 31 - 12/28/2015 17:38:53


  codepages:
  ----------

STANDARD (0 changed characters)


0.02 seconds assembly time

   1363 lines source file
   1608 lines incl. macro expansions
      2 passes
      0 errors
      0 warnings
