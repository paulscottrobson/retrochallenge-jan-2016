 AS V1.42 Beta [Bld 102] - source file vtl-2.asm - page 1 - 12/29/2015 6:07:42


       1/       0 :                     ; ****************************************************************************************************************
       2/       0 :                     ; ****************************************************************************************************************
       3/       0 :                     ;
       4/       0 :                     ;												VTL-2 ROM Image
       5/       0 :                     ;
       6/       0 :                     ; ****************************************************************************************************************
       7/       0 :                     ; ****************************************************************************************************************
       8/       0 :                     
       9/       0 :                     	cpu 	sc/mp
      10/       0 :                     
      11/       0 :                     	include source\memorymacros.asm 							; Memory allocation and Macro definition.	
(1)    1/       0 :                     ; ****************************************************************************************************************
(1)    2/       0 :                     ; ****************************************************************************************************************
(1)    3/       0 :                     ;
(1)    4/       0 :                     ;										Memory and Macro Allocation.
(1)    5/       0 :                     ;	
(1)    6/       0 :                     ; ****************************************************************************************************************
(1)    7/       0 :                     ; ****************************************************************************************************************
(1)    8/       0 :                     
(1)    9/       0 : =0x3                OSMathLibrary = 0x0003 											; the Maths library is here.
(1)   10/       0 : =0x210              BootMonitor = 0x210 											; address to boot monitor
(1)   11/       0 :                     
(1)   12/       0 :                     ; ****************************************************************************************************************
(1)   13/       0 :                     ;												 Memory Allocation
(1)   14/       0 :                     ; ****************************************************************************************************************
(1)   15/       0 :                     
(1)   16/       0 : =0xC00              ScreenMirror = 0xC00 											; Screen mirror, 128 bytes, 256 byte page boundary.
(1)   17/       0 : =0xC80              ScreenCursor = ScreenMirror+0x80  								; Position on that screen (00..7F)
(1)   18/       0 :                     
(1)   19/       0 : =0xD00              SystemVariables = 0xD00 										; System variables start here.
(1)   20/       0 : =0xD00              Variables = SystemVariables 									; 128 16 bit variables start here.
(1)   21/       0 :                     
(1)   22/       0 : =0xCFF              IsRunning = SystemVariables-1  									; Non-zero if free running, zero if stopped (1 byte)
(1)   23/       0 : =0xCFD              ProgramBase = SystemVariables-3 								; Program base address (2 bytes)
(1)   24/       0 :                     
(1)   25/       0 : =0xE00              KeyboardBuffer = 0xE00 											; Keyboard Buffer
(1)   26/       0 : =0x50               KeyboardBufferSize = 80 										; Size of keyboard Buffer
(1)   27/       0 :                     
(1)   28/       0 :                     ; ****************************************************************************************************************
(1)   29/       0 :                     ;														Macros
(1)   30/       0 :                     ; ****************************************************************************************************************
(1)   31/       0 :                     
(1)   32/       0 :                     lpi	macro	ptr,addr											; load pointer register with constant
(1)   33/       0 :                     	ldi 	(addr) / 256
(1)   34/       0 :                     	xpah 	ptr
(1)   35/       0 :                     	ldi 	(addr) & 255
(1)   36/       0 :                     	xpal 	ptr
(1)   37/       0 :                     	endm
(1)   38/       0 :                     
(1)   39/       0 :                     pushp macro ptr 												; push pointer register on stack
(1)   40/       0 :                     	xpah 	ptr
(1)   41/       0 :                     	st 		@-1(p2)
(1)   42/       0 :                     	xpal 	ptr
(1)   43/       0 :                     	st 		@-1(p2)
(1)   44/       0 :                     	endm
(1)   45/       0 :                     
(1)   46/       0 :                     pullp macro ptr 												; pull pointer register off stack
(1)   47/       0 :                     	ld 		@1(p2)
(1)   48/       0 :                     	xpal 	ptr
(1)   49/       0 :                     	ld 		@1(p2)
 AS V1.42 Beta [Bld 102] - source file vtl-2.asm(memorymacros.asm) - page 2 - 12/29/2015 6:07:42


(1)   50/       0 :                     	xpah 	ptr
(1)   51/       0 :                     	endm
(1)   52/       0 :                     
(1)   53/       0 :                     pushe macro 													; push E on stack
(1)   54/       0 :                     	lde
(1)   55/       0 :                     	st 		@-1(p2)
(1)   56/       0 :                     	endm
(1)   57/       0 :                     
(1)   58/       0 :                     pulle macro 													; pull E off stack
(1)   59/       0 :                     	ld 		@1(p2)
(1)   60/       0 :                     	xae
(1)   61/       0 :                     	endm
(1)   62/       0 :                     
(1)   63/       0 :                     pusha macro 													; push A on stack
(1)   64/       0 :                     	st 		@-1(p2)
(1)   65/       0 :                     	endm
(1)   66/       0 :                     
(1)   67/       0 :                     pulla macro
(1)   68/       0 :                     	ld 		@1(p2)
(1)   69/       0 :                     	endm
(1)   70/       0 :                     
(1)   71/       0 :                     setv macro ch,value 											; sets a variable to a value, assumes P3 = Variables.
(1)   72/       0 :                     	ldi 	(value) & 255
(1)   73/       0 :                     	st 		((ch) & 0x3F)*2(p3)
(1)   74/       0 :                     	ldi 	(value) / 256
(1)   75/       0 :                     	st 		((ch) & 0x3F)*2+1(p3)
(1)   76/       0 :                     	endm
(1)   77/       0 :                     
(1)   78/       0 :                     code macro lineNo,code 											; a debugging macro, which fakes up a line of code.
(1)   79/       0 :                     	db 		strlen(code)+4 										; one byte offset to next (0 = End of code)
(1)   80/       0 :                     	dw 		lineNo 												; two byte line number (low byte first)
(1)   81/       0 :                     	db 		code,0 												; ASCIIZ string
(1)   82/       0 :                     	endm
(1)   83/       0 :                     
(1)   84/       0 :                     special macro ch,method
(1)   85/       0 :                     	db 		ch
(1)   86/       0 :                     	dw 		(method)-1
(1)   87/       0 :                     	endm
      12/       0 :                     	include source\errors.asm 									; Error Codes
(1)    1/       0 :                     ; ****************************************************************************************************************
(1)    2/       0 :                     ; ****************************************************************************************************************
(1)    3/       0 :                     ;
(1)    4/       0 :                     ;												Errors
(1)    5/       0 :                     ;	
(1)    6/       0 :                     ; ****************************************************************************************************************
(1)    7/       0 :                     ; ****************************************************************************************************************
(1)    8/       0 :                     
(1)    9/       0 : =0x54               ERROR_SyntaxTerm = 'T' 											; Syntax error in term.
(1)   10/       0 : =0x5A               ERROR_DivideZero = 'Z'											; Divide by zero error.
(1)   11/       0 : =0x4F               ERROR_Operator = 'O'											; Operator error.
(1)   12/       0 : =0x42               ERROR_Bracket = 'B'												; Missing bracket error.
(1)   13/       0 : =0x53               ERROR_Syntax = 'S' 												; Syntax error in statement.
(1)   14/       0 : =0x52               ERROR_ReadOnly = 'R' 											; Variable is read only.
(1)   15/       0 : =0x51               ERROR_Quote = 'Q'												; Quote mark missing from literal string.
      13/       0 :                     
      14/       0 :                     ; ****************************************************************************************************************
      15/       0 :                     ;													Main Program
      16/       0 :                     ; ****************************************************************************************************************
      17/       0 :                     
      18/    9000 :                     	org 	0x9000 												; the ROM starts here
 AS V1.42 Beta [Bld 102] - source file vtl-2.asm - page 3 - 12/29/2015 6:07:42


      19/    9000 :                     
      20/    9000 : 68                  	db 		0x68												; this makes it boot straight into this ROM.
      21/    9001 : (MACRO)             	lpi 	p2,0xFF8											; set up stack default value
      21/    9001 : C4 0F                       ldi     (0XFF8) / 256
      21/    9003 : 36                          xpah    P2
      21/    9004 : C4 F8                       ldi     (0XFF8) & 255
      21/    9006 : 32                          xpal    P2
      22/    9007 : (MACRO)             	lpi 	p3,Print-1 											; clear screen
      22/    9007 : C4 90                       ldi     (PRINT-1) / 256
      22/    9009 : 37                          xpah    P3
      22/    900A : C4 AD                       ldi     (PRINT-1) & 255
      22/    900C : 33                          xpal    P3
      23/    900D : C4 0C               	ldi 	12
      24/    900F : 3F                  	xppc 	p3
      25/    9010 :                     
      26/    9010 : (MACRO)             	lpi 	p3,Variables 										; set some variables
      26/    9010 : C4 0D                       ldi     (VARIABLES) / 256
      26/    9012 : 37                          xpah    P3
      26/    9013 : C4 00                       ldi     (VARIABLES) & 255
      26/    9015 : 33                          xpal    P3
      27/    9016 : (MACRO)             	setv 	'C',0x1382
      27/    9016 : C4 82                       ldi     (0X1382) & 255
      27/    9018 : CB 06                       st              (('C') & 0x3F)*2(p3)
      27/    901A : C4 13                       ldi     (0X1382) / 256
      27/    901C : CB 07                       st              (('C') & 0x3F)*2+1(p3)
      28/    901E : (MACRO)             	setv	'&',0x1000
      28/    901E : C4 00                       ldi     (0X1000) & 255
      28/    9020 : CB 4C                       st              (('&') & 0x3F)*2(p3)
      28/    9022 : C4 10                       ldi     (0X1000) / 256
      28/    9024 : CB 4D                       st              (('&') & 0x3F)*2+1(p3)
      29/    9026 : (MACRO)             	setv 	'*',0x1FFF 											; check RAM - up to 4k - not assume.
      29/    9026 : C4 FF                       ldi     (0X1FFF) & 255
      29/    9028 : CB 54                       st              (('*') & 0x3F)*2(p3)
      29/    902A : C4 1F                       ldi     (0X1FFF) / 256
      29/    902C : CB 55                       st              (('*') & 0x3F)*2+1(p3)
      30/    902E :                     
      31/    902E : C4 00               	ldi 	0 													; set direct mode
      32/    9030 : CB FF               	st 		IsRunning-Variables(p3)	
      33/    9032 : C4 90               	ldi		test/256											; set program base address.
      34/    9034 : CB FE               	st 		ProgramBase-Variables+1(p3)
      35/    9036 : C4 57               	ldi		test&255
      36/    9038 : CB FD               	st 		ProgramBase-Variables(p3)
      37/    903A :                     
      38/    903A : (MACRO)             	lpi 	p3,UpdateCodeTop-1 									; update & with correct value
      38/    903A : C4 96                       ldi     (UPDATECODETOP-1) / 256
      38/    903C : 37                          xpah    P3
      38/    903D : C4 9F                       ldi     (UPDATECODETOP-1) & 255
      38/    903F : 33                          xpal    P3
      39/    9040 : 3F                  	xppc 	p3
      40/    9041 :                     
      41/    9041 : (MACRO)             	lpi 	p3,ExecuteCodeLine-1								; direct execute # = 1
      41/    9041 : C4 93                       ldi     (EXECUTECODELINE-1) / 256
      41/    9043 : 37                          xpah    P3
      41/    9044 : C4 84                       ldi     (EXECUTECODELINE-1) & 255
      41/    9046 : 33                          xpal    P3
      42/    9047 : (MACRO)             	lpi 	p1,start
      42/    9047 : C4 90                       ldi     (START) / 256
      42/    9049 : 35                          xpah    P1
      42/    904A : C4 A8                       ldi     (START) & 255
      42/    904C : 31                          xpal    P1
 AS V1.42 Beta [Bld 102] - source file vtl-2.asm - page 4 - 12/29/2015 6:07:42


      43/    904D : 3F                  	xppc 	p3
      44/    904E :                     
      45/    904E : (MACRO)             	lpi 	p3,ListProgram-1
      45/    904E : C4 96                       ldi     (LISTPROGRAM-1) / 256
      45/    9050 : 37                          xpah    P3
      45/    9051 : C4 1C                       ldi     (LISTPROGRAM-1) & 255
      45/    9053 : 33                          xpal    P3
      46/    9054 : 3F                  	xppc 	p3
      47/    9055 : 90 FE               wait0:jmp 	wait0
      48/    9057 :                     
      49/    9057 :                     test:
      50/    9057 : (MACRO)             	code 	10,"?=*-&"
      50/    9057 : 09                          db              strlen("?=*-&")+4                                                                          ; one byte offset to next (0 = End of "?=*-&")
      50/    9058 : 0A 00                       dw              10                                                                                          ; two byte line number (low byte first)
      50/    905A : 3F 3D 2A 2D 26 00           db              "?=*-&",0                                                                                          ; ASCIIZ string
      51/    9060 : (MACRO)             	code 	15,"?=\"\""
      51/    9060 : 08                          db              strlen("?=\"\"")+4                                                                          ; one byte offset to next (0 = End of "?=\"\"")
      51/    9061 : 0F 00                       dw              15                                                                                          ; two byte line number (low byte first)
      51/    9063 : 3F 3D 22 22 00              db              "?=\"\"",0                                                                                          ; ASCIIZ string
      52/    9068 : (MACRO)             	code 	20,"K = 32"
      52/    9068 : 0A                          db              strlen("K = 32")+4                                                                          ; one byte offset to next (0 = End of "K = 32")
      52/    9069 : 14 00                       dw              20                                                                                          ; two byte line number (low byte first)
      52/    906B : 4B 20 3D 20 33 32           db              "K = 32",0                                                                                          ; ASCIIZ string
                    00 
      53/    9072 : (MACRO)             	code 	30,"K = K + 1"
      53/    9072 : 0D                          db              strlen("K = K + 1")+4                                                                          ; one byte offset to next (0 = End of "K = K + 1")
      53/    9073 : 1E 00                       dw              30                                                                                          ; two byte line number (low byte first)
      53/    9075 : 4B 20 3D 20 4B 20           db              "K = K + 1",0                                                                                          ; ASCIIZ string
                    2B 20 31 00 
      54/    907F : (MACRO)             	code 	40,"$=K"
      54/    907F : 07                          db              strlen("$=K")+4                                                                          ; one byte offset to next (0 = End of "$=K")
      54/    9080 : 28 00                       dw              40                                                                                          ; two byte line number (low byte first)
      54/    9082 : 24 3D 4B 00                 db              "$=K",0                                                                                          ; ASCIIZ string
      55/    9086 : (MACRO)             	code 	50,"# = (K < 44) * 30"
      55/    9086 : 15                          db              strlen("# = (K < 44) * 30")+4                                                                          ; one byte offset to next (0 = End of "# = (K < 44) * 30")
      55/    9087 : 32 00                       dw              50                                                                                          ; two byte line number (low byte first)
      55/    9089 : 23 20 3D 20 28 4B           db              "# = (K < 44) * 30",0                                                                                          ; ASCIIZ string
                    20 3C 20 34 34 29 
                    20 2A 20 33 30 00 
      56/    909B : (MACRO)             	code 	60,"?=\"DONE\""
      56/    909B : 0C                          db              strlen("?=\"DONE\"")+4                                                                          ; one byte offset to next (0 = End of "?=\"DONE\"")
      56/    909C : 3C 00                       dw              60                                                                                          ; two byte line number (low byte first)
      56/    909E : 3F 3D 22 44 4F 4E           db              "?=\"DONE\"",0                                                                                          ; ASCIIZ string
                    45 22 00 
      57/    90A7 : 00                  	db 		0
      58/    90A8 :                     
      59/    90A8 :                     start:
      60/    90A8 : 23 20 3D 20 31 00   	db 		"# = 1",0
      61/    90AE :                     
      62/    90AE :                     ; ****************************************************************************************************************
      63/    90AE :                     ;													Source Files
      64/    90AE :                     ; ****************************************************************************************************************
      65/    90AE :                     
      66/    90AE :                     	include source\screen.asm 									; screen I/O stuff.
(1)    1/    90AE :                     ; ****************************************************************************************************************
(1)    2/    90AE :                     ; ****************************************************************************************************************
(1)    3/    90AE :                     ;
(1)    4/    90AE :                     ;											Screen I/O, VTL-2 ROM
(1)    5/    90AE :                     ;											=====================
(1)    6/    90AE :                     ;
 AS V1.42 Beta [Bld 102] - source file vtl-2.asm(screen.asm) - page 5 - 12/29/2015 6:07:42


(1)    7/    90AE :                     ;	Provides Character and String Input/Output functionality.
(1)    8/    90AE :                     ;
(1)    9/    90AE :                     ; ****************************************************************************************************************
(1)   10/    90AE :                     ; ****************************************************************************************************************
(1)   11/    90AE :                     
(1)   12/    90AE :                     ; ****************************************************************************************************************
(1)   13/    90AE :                     ; ****************************************************************************************************************
(1)   14/    90AE :                     ;
(1)   15/    90AE :                     ;	Print routine. Prints either character in A, or ASCIIZ string at P1 (if A is zero). Preserves all registers
(1)   16/    90AE :                     ;	except if printing string, P1 points to the character after the NULL terminator.
(1)   17/    90AE :                     ;
(1)   18/    90AE :                     ;	Scrolls automatically. Understands character codes 32-255, 8 (Backspace) 12 (Clear Screen) 13 (Carriage
(1)   19/    90AE :                     ;	Return). Others are currently ignored (except 0, see above). Note L/C values (97....) display those characters
(1)   20/    90AE :                     ;	in the ROM font *not* lower case :)
(1)   21/    90AE :                     ;
(1)   22/    90AE :                     ; ****************************************************************************************************************
(1)   23/    90AE :                     ; ****************************************************************************************************************
(1)   24/    90AE :                     
(1)   25/    90AE :                     Print:
(1)   26/    90AE :                     	section 	Print
(1)   27/    90AE :                     
(1)   28/    90AE : (MACRO)             	pusha														; push registers on stack
(1)   28/    90AE : CE FF                       st              @-1(p2)
(1)   29/    90B0 : (MACRO)             	pushp 	p1
(1)   29/    90B0 : 35                          xpah    P1
(1)   29/    90B1 : CE FF                       st              @-1(p2)
(1)   29/    90B3 : 31                          xpal    P1
(1)   29/    90B4 : CE FF                       st              @-1(p2)
(1)   30/    90B6 : (MACRO)             	pushe
(1)   30/    90B6 : 40                          lde
(1)   30/    90B7 : CE FF                       st              @-1(p2)
(1)   31/    90B9 :                     
(1)   32/    90B9 : C2 03               	ld 		3(p2) 												; read character 
(1)   33/    90BB : 9C 12               	jnz 	__PRPrintCharacterA 								; if non zero print it on its own.
(1)   34/    90BD :                     
(1)   35/    90BD :                     __PRPrintString:
(1)   36/    90BD : C2 01               	ld 		1(p2) 												; restore original P1
(1)   37/    90BF : 31                  	xpal 	p1
(1)   38/    90C0 : C2 02               	ld 		2(p2)
(1)   39/    90C2 : 35                  	xpah 	p1 													; read character at P1.
(1)   40/    90C3 : C5 01               	ld 		@1(p1)
(1)   41/    90C5 : 01                  	xae 														; save in E.
(1)   42/    90C6 : 35                  	xpah 	p1 													; write P1 back.
(1)   43/    90C7 : CA 02               	st 		2(p2)
(1)   44/    90C9 : 31                  	xpal 	p1
(1)   45/    90CA : CA 01               	st 		1(p2)
(1)   46/    90CC : 40                  	lde 														; get character from E
(1)   47/    90CD : 98 46               	jz 		__PRExitNoCheck 									; exit without loop check.
(1)   48/    90CF :                     ;
(1)   49/    90CF :                     ;	Print character in A now ; throughout it is stored in E.
(1)   50/    90CF :                     ;
(1)   51/    90CF :                     __PRPrintCharacterA:
(1)   52/    90CF : 01                  	xae 														; save character in E.
(1)   53/    90D0 :                     ;
(1)   54/    90D0 :                     ;	Read cursor and set P1 to that address
(1)   55/    90D0 :                     ;
(1)   56/    90D0 : C4 0C               	ldi 	ScreenCursor/256 									; set P1 to point to screen cursor
(1)   57/    90D2 : 35                  	xpah 	p1
(1)   58/    90D3 : C4 80               	ldi 	ScreenCursor&255
(1)   59/    90D5 : 31                  	xpal 	p1
 AS V1.42 Beta [Bld 102] - source file vtl-2.asm(screen.asm) - page 6 - 12/29/2015 6:07:42


(1)   60/    90D6 : C1 00               	ld 		0(p1) 												; put cursor position in P1.L
(1)   61/    90D8 : 31                  	xpal 	p1
(1)   62/    90D9 :                     ;
(1)   63/    90D9 :                     ;	Check for control
(1)   64/    90D9 :                     ;
(1)   65/    90D9 : 40                  	lde 														; look at character
(1)   66/    90DA : D4 E0               	ani 	0xE0 												; is it code 0-31
(1)   67/    90DC : 98 45               	jz 		__PRIsControlChar
(1)   68/    90DE :                     ;
(1)   69/    90DE :                     ;	Print non-control
(1)   70/    90DE :                     ;
(1)   71/    90DE : 40                  	lde 														; read character
(1)   72/    90DF : 03                  	scl 														; CY/L clear if < 96
(1)   73/    90E0 : FC 60               	cai 	96 
(1)   74/    90E2 : 06                  	csa 	 	 												; skip if carry set
(1)   75/    90E3 : E4 80               	xri 	0x80													
(1)   76/    90E5 : 94 04               	jp 		__PRNotASCII
(1)   77/    90E7 : 40                  	lde 														; if ASCII make 6 bit.
(1)   78/    90E8 : D4 3F               	ani 	0x3F
(1)   79/    90EA : 01                  	xae
(1)   80/    90EB :                     __PRNotASCII:
(1)   81/    90EB : 40                  	lde 														; get character.
(1)   82/    90EC : C9 00               	st 		(p1) 												; save in shadow memory
(1)   83/    90EE : 35                  	xpah 	p1 													; switch to VRAM, preserving A.
(1)   84/    90EF : C4 00               	ldi 	0 													
(1)   85/    90F1 : 35                  	xpah 	p1
(1)   86/    90F2 : CD 01               	st 		@1(p1) 												; save in screen memory, advance write position.
(1)   87/    90F4 :                     ;
(1)   88/    90F4 :                     ;	Write cursor position back from P1.L
(1)   89/    90F4 :                     ;
(1)   90/    90F4 :                     __PRUpdateCursor:
(1)   91/    90F4 : C4 0C               	ldi		ScreenCursor / 256 									; set P1 to point to screen cursor, restore position to P1
(1)   92/    90F6 : 35                  	xpah 	p1
(1)   93/    90F7 : C4 80               	ldi 	ScreenCursor & 255 
(1)   94/    90F9 : 31                  	xpal 	p1 													; after this, adjusted cursor position is in AC.
(1)   95/    90FA : C9 00               	st 		(p1) 												; write back in cursor position
(1)   96/    90FC : 94 13               	jp 		__PRExit 											; if position is off the bottom then scroll.
(1)   97/    90FE :                     ;
(1)   98/    90FE :                     ;	Scroll display
(1)   99/    90FE :                     ;
(1)  100/    90FE : C4 0C               	ldi 	(ScreenMirror+16) / 256 							; point P1 to 2nd line.
(1)  101/    9100 : 35                  	xpah 	p1
(1)  102/    9101 : C4 10               	ldi 	(ScreenMirror+16) & 255
(1)  103/    9103 :                     __PRScrollLoop:
(1)  104/    9103 : 31                  	xpal 	p1
(1)  105/    9104 : C1 00               	ld 		0(p1) 												; copy char to previous line
(1)  106/    9106 : C9 F0               	st 		-16(p1)
(1)  107/    9108 : C5 01               	ld 		@1(p1) 												; bump pointer.
(1)  108/    910A : 31                  	xpal 	p1
(1)  109/    910B : 94 F6               	jp 		__PRScrollLoop
(1)  110/    910D : C4 70               	ldi 	128-16 												; clear from and move to last line
(1)  111/    910F : 90 3D               	jmp 	__PRClearFromMoveTo
(1)  112/    9111 :                     ;
(1)  113/    9111 :                     ;	Exit screen drawing routine.
(1)  114/    9111 :                     ;
(1)  115/    9111 :                     __PRExit:
(1)  116/    9111 : C2 03               	ld 		3(p2) 												; if character was zero, loop
(1)  117/    9113 : 98 A8               	jz 		__PRPrintString 									; back as printing string at P1.
(1)  118/    9115 :                     __PRExitNoCheck:
(1)  119/    9115 : (MACRO)             	pulle 														; restore registers
 AS V1.42 Beta [Bld 102] - source file vtl-2.asm(screen.asm) - page 7 - 12/29/2015 6:07:42


(1)  119/    9115 : C6 01                       ld              @1(p2)
(1)  119/    9117 : 01                          xae
(1)  120/    9118 : (MACRO)             	pullp 	p1
(1)  120/    9118 : C6 01                       ld              @1(p2)
(1)  120/    911A : 31                          xpal    P1
(1)  120/    911B : C6 01                       ld              @1(p2)
(1)  120/    911D : 35                          xpah    P1
(1)  121/    911E : (MACRO)             	pulla
(1)  121/    911E : C6 01                       ld              @1(p2)
(1)  122/    9120 : 3F                  	xppc 	p3 													; return
(1)  123/    9121 : 90 8B               	jmp 	Print 												; make re-entrant.
(1)  124/    9123 :                     ;
(1)  125/    9123 :                     ;	Check for supported control characters 8 (Backspace) 12 (Clear) 13 (Carriage Return)
(1)  126/    9123 :                     ;
(1)  127/    9123 :                     __PRIsControlChar:
(1)  128/    9123 : 40                  	lde 														; restore character.
(1)  129/    9124 : E4 0D               	xri 	13 													; carriage return ? (13)
(1)  130/    9126 : 98 1B               	jz 		__PRIsReturn
(1)  131/    9128 : E4 01               	xri 	13!12 												; form feed ? (12)
(1)  132/    912A : 98 20               	jz 		__PRClearScreen
(1)  133/    912C : E4 04               	xri 	12!8 												; backspace ? (8)
(1)  134/    912E : 9C E1               	jnz 	__PRExit 
(1)  135/    9130 :                     ;
(1)  136/    9130 :                     ;	Handle backspace (8)
(1)  137/    9130 :                     ;
(1)  138/    9130 : 31                  	xpal 	p1 													; check cursor position is zero
(1)  139/    9131 : 98 DE               	jz 		__PRExit 											; if it is, cannot backspace so exit.
(1)  140/    9133 : 31                  	xpal 	p1  												; put it back
(1)  141/    9134 : C5 FF               	ld 		@-1(p1)												; move it back one
(1)  142/    9136 : C4 20               	ldi 	' '	 												; erase in shadow
(1)  143/    9138 : C9 00               	st 		(p1)
(1)  144/    913A : C4 00               	ldi 	0 													; point P1 to VRAM
(1)  145/    913C : 35                  	xpah 	p1
(1)  146/    913D : C4 20               	ldi 	' '													; erase in VRAM
(1)  147/    913F : C9 00               	st 		(p1)
(1)  148/    9141 : 90 B1               	jmp 	__PRUpdateCursor 									; and exit
(1)  149/    9143 :                     ;
(1)  150/    9143 :                     ;	Handle carriage return (13)
(1)  151/    9143 :                     ;
(1)  152/    9143 :                     __PRIsReturn:
(1)  153/    9143 : 31                  	xpal 	p1 													; cursor position in A
(1)  154/    9144 : D4 F0               	ani 	0xF0 												; start of current line
(1)  155/    9146 : 02                  	ccl 														; down one line
(1)  156/    9147 : F4 10               	adi 	0x10 	
(1)  157/    9149 : 31                  	xpal 	p1 													; put it back in P1.
(1)  158/    914A : 90 A8               	jmp 	__PRUpdateCursor
(1)  159/    914C :                     ;
(1)  160/    914C :                     ;	Handle clear screen (12)
(1)  161/    914C :                     ;
(1)  162/    914C :                     __PRClearScreen:
(1)  163/    914C : C4 00               	ldi 	0 													; clear shadow memory from here.
(1)  164/    914E :                     ;
(1)  165/    914E :                     ;	From position A, clear the memory in the shadow screen to the end, copy the shadow screen to VRAM
(1)  166/    914E :                     ;	then use position A as the new cursor position.
(1)  167/    914E :                     ;
(1)  168/    914E :                     __PRClearFromMoveTo:
(1)  169/    914E : CE FF               	st 		@-1(p2) 											; save this position, the cursor goes here.
(1)  170/    9150 :                     __PRClearLoop:
(1)  171/    9150 : 31                  	xpal 	p1 													; save position in P1.
(1)  172/    9151 : C4 20               	ldi 	' '													; write space there.
 AS V1.42 Beta [Bld 102] - source file vtl-2.asm(screen.asm) - page 8 - 12/29/2015 6:07:42


(1)  173/    9153 : CD 01               	st 		@1(p1)
(1)  174/    9155 : 31                  	xpal 	p1
(1)  175/    9156 : 94 F8               	jp 		__PRClearLoop 										; until reached shadow memory start.
(1)  176/    9158 : C4 00               	ldi 	0 													; now copy shadow memory to screen memory.
(1)  177/    915A :                     __PRCopy:
(1)  178/    915A : 31                  	xpal 	p1 													; set up P1.L
(1)  179/    915B : C4 0C               	ldi 	ScreenMirror/256 									; point to shadow memory.
(1)  180/    915D : 35                  	xpah 	p1 													
(1)  181/    915E : C1 00               	ld 		(p1) 												; read shadow memory
(1)  182/    9160 : 35                  	xpah 	p1 													; zero P1.H preserving A
(1)  183/    9161 : C4 00               	ldi 	0
(1)  184/    9163 : 35                  	xpah 	p1
(1)  185/    9164 : CD 01               	st 		@1(p1) 												; save and increment p1
(1)  186/    9166 : 31                  	xpal 	p1 
(1)  187/    9167 : 94 F1               	jp 		__PRCopy 											; keep doing till all copied.
(1)  188/    9169 : C6 01               	ld 		@1(p2) 												; read cursor position
(1)  189/    916B : 31                  	xpal 	p1 													; put in P1.L
(1)  190/    916C : 90 86               	jmp 	__PRUpdateCursor
(1)  191/    916E :                     
(1)  192/    916E :                     	endsection 	Print
(1)  193/    916E :                     
(1)  194/    916E :                     ; ****************************************************************************************************************
(1)  195/    916E :                     ; ****************************************************************************************************************
(1)  196/    916E :                     ;
(1)  197/    916E :                     ;		Input a single character into A. Case is converted to Upper. All registers preserved except A
(1)  198/    916E :                     ;
(1)  199/    916E :                     ; ****************************************************************************************************************
(1)  200/    916E :                     ; ****************************************************************************************************************
(1)  201/    916E :                     
(1)  202/    916E :                     GetChar:
(1)  203/    916E :                     	section 	GetChar
(1)  204/    916E : C4 08               	ldi 	0x8 												; set P1 to $8xx, and save P1.H
(1)  205/    9170 : 35                  	xpah 	p1
(1)  206/    9171 : CE FF               	st 		@-1(p2)
(1)  207/    9173 :                     __GCWaitKey: 													; wait for key press
(1)  208/    9173 : C1 00               	ld 		0(p1)
(1)  209/    9175 : 94 FC               	jp 		__GCWaitKey
(1)  210/    9177 : D4 7F               	ani	 	0x7F 												; throw away the upper bit.
(1)  211/    9179 : CA FF               	st 		-1(p2) 												; save it below stack
(1)  212/    917B :                     __GCWaitRelease:
(1)  213/    917B : C1 00               	ld 		0(p1) 												; wait for release
(1)  214/    917D : D4 80               	ani 	0x80
(1)  215/    917F : 9C FA               	jnz 	__GCWaitRelease
(1)  216/    9181 : C6 01               	ld 		@1(p2) 												; restore P1.H
(1)  217/    9183 : 35                  	xpah 	p1
(1)  218/    9184 : C2 FE               	ld 		-2(p2) 												; restore saved value
(1)  219/    9186 : 02                  	ccl
(1)  220/    9187 : F4 20               	adi 	0x20												; will make lower case -ve
(1)  221/    9189 : 94 02               	jp 		__GCNotLower
(1)  222/    918B : FC 20               	cai 	0x20 												; capitalise
(1)  223/    918D :                     __GCNotLower:
(1)  224/    918D : F4 E0               	adi 	0xE0 												; fix up.
(1)  225/    918F : 3F                  	xppc 	p3 													; return
(1)  226/    9190 : 90 DC               	jmp 	GetChar 											; make re-entrant
(1)  227/    9192 :                     	endsection 	GetChar
(1)  228/    9192 :                     
(1)  229/    9192 :                     ; ****************************************************************************************************************
(1)  230/    9192 :                     ; ****************************************************************************************************************
(1)  231/    9192 :                     ;
(1)  232/    9192 :                     ;			Read an ASCIIZ string from keyboard into P1 of length A maximum (excludes NULL terminator)
 AS V1.42 Beta [Bld 102] - source file vtl-2.asm(screen.asm) - page 9 - 12/29/2015 6:07:42


(1)  233/    9192 :                     ;
(1)  234/    9192 :                     ; ****************************************************************************************************************
(1)  235/    9192 :                     ; ****************************************************************************************************************
(1)  236/    9192 :                     
(1)  237/    9192 :                     GetString:
(1)  238/    9192 :                     	section GetString
(1)  239/    9192 : (MACRO)             	pusha 														; save A,P3,E
(1)  239/    9192 : CE FF                       st              @-1(p2)
(1)  240/    9194 : (MACRO)             	pushp 	p3
(1)  240/    9194 : 37                          xpah    P3
(1)  240/    9195 : CE FF                       st              @-1(p2)
(1)  240/    9197 : 33                          xpal    P3
(1)  240/    9198 : CE FF                       st              @-1(p2)
(1)  241/    919A : (MACRO)             	pushe 
(1)  241/    919A : 40                          lde
(1)  241/    919B : CE FF                       st              @-1(p2)
(1)  242/    919D : C4 00               	ldi 	0 													; set E (current position) to A.
(1)  243/    919F : 01                  	xae
(1)  244/    91A0 :                     __GSLoop:
(1)  245/    91A0 : (MACRO)             	lpi 	p3,Print-1 											; print the prompt (half coloured square)
(1)  245/    91A0 : C4 90                       ldi     (PRINT-1) / 256
(1)  245/    91A2 : 37                          xpah    P3
(1)  245/    91A3 : C4 AD                       ldi     (PRINT-1) & 255
(1)  245/    91A5 : 33                          xpal    P3
(1)  246/    91A6 : C4 9B               	ldi 	155
(1)  247/    91A8 : 3F                  	xppc 	p3
(1)  248/    91A9 : (MACRO)             	lpi 	p3,GetChar-1 										; get a character
(1)  248/    91A9 : C4 91                       ldi     (GETCHAR-1) / 256
(1)  248/    91AB : 37                          xpah    P3
(1)  248/    91AC : C4 6D                       ldi     (GETCHAR-1) & 255
(1)  248/    91AE : 33                          xpal    P3
(1)  249/    91AF : 3F                  	xppc 	p3
(1)  250/    91B0 : C9 80               	st 		-0x80(p1) 											; save it in the current position.
(1)  251/    91B2 : (MACRO)             	lpi 	p3,Print-1 											; erase the prompt with backspace.
(1)  251/    91B2 : C4 90                       ldi     (PRINT-1) / 256
(1)  251/    91B4 : 37                          xpah    P3
(1)  251/    91B5 : C4 AD                       ldi     (PRINT-1) & 255
(1)  251/    91B7 : 33                          xpal    P3
(1)  252/    91B8 : C4 08               	ldi 	8
(1)  253/    91BA : 3F                  	xppc 	p3
(1)  254/    91BB : C1 80               	ld 		-0x80(p1) 											; re-read character
(1)  255/    91BD : D4 E0               	ani 	0xE0 												; check if control key.
(1)  256/    91BF : 98 0F               	jz 		__GSControlKey 
(1)  257/    91C1 : 40                  	lde 														; get current position.
(1)  258/    91C2 : E2 03               	xor 	3(p2) 												; reached maximum length of buffer ?
(1)  259/    91C4 : 98 DA               	jz 		__GSLoop 											; if so, ignore the key and go round again.
(1)  260/    91C6 : C1 80               	ld 		-0x80(p1) 											; get character and print it
(1)  261/    91C8 : 3F                  	xppc 	p3
(1)  262/    91C9 : C4 01               	ldi 	1 													; increment E
(1)  263/    91CB : 02                  	ccl
(1)  264/    91CC : 70                  	ade
(1)  265/    91CD : 01                  	xae
(1)  266/    91CE : 90 D0               	jmp 	__GSLoop 											; and go round again.
(1)  267/    91D0 :                     ;
(1)  268/    91D0 :                     ;	Handle control keys (0x00-0x1F)
(1)  269/    91D0 :                     ;
(1)  270/    91D0 :                     __GSControlKey:
(1)  271/    91D0 : C1 80               	ld 		-0x80(p1) 											; get typed in key
(1)  272/    91D2 : E4 08               	xri 	8 													; check for backspace.
(1)  273/    91D4 : 98 17               	jz 		__GSBackspace 			
 AS V1.42 Beta [Bld 102] - source file vtl-2.asm(screen.asm) - page 10 - 12/29/2015 6:07:42


(1)  274/    91D6 : E4 05               	xri 	8!13 												; check for CR
(1)  275/    91D8 : 9C C6               	jnz 	__GSLoop 											; if not, ignore the key.
(1)  276/    91DA :                     ;
(1)  277/    91DA :                     ;	Carriage Return, ending input.
(1)  278/    91DA :                     ;
(1)  279/    91DA : C9 80               	st 		-0x80(p1) 											; replace the CR written with NULL terminator.
(1)  280/    91DC : C4 0D               	ldi 	13 													; print CR
(1)  281/    91DE : 3F                  	xppc 	p3
(1)  282/    91DF : (MACRO)             	pulle 														; restore E,P3,A
(1)  282/    91DF : C6 01                       ld              @1(p2)
(1)  282/    91E1 : 01                          xae
(1)  283/    91E2 : (MACRO)             	pullp	p3
(1)  283/    91E2 : C6 01                       ld              @1(p2)
(1)  283/    91E4 : 33                          xpal    P3
(1)  283/    91E5 : C6 01                       ld              @1(p2)
(1)  283/    91E7 : 37                          xpah    P3
(1)  284/    91E8 : (MACRO)             	pulla
(1)  284/    91E8 : C6 01                       ld              @1(p2)
(1)  285/    91EA : 3F                  	xppc 	p3 													; return
(1)  286/    91EB : 90 A5               	jmp 	GetString 											; make re-entrant (probably unneccessary !!)
(1)  287/    91ED :                     ;
(1)  288/    91ED :                     ;	Backspace entered
(1)  289/    91ED :                     ;
(1)  290/    91ED :                     __GSBackspace
(1)  291/    91ED : 40                  	lde 														; if E = 0 we can't backspace any further.
(1)  292/    91EE : 98 B0               	jz 		__GSLoop
(1)  293/    91F0 : C4 08               	ldi 	8 													; backspace on screen
(1)  294/    91F2 : 3F                  	xppc 	p3
(1)  295/    91F3 : C4 FF               	ldi 	0xFF 												; decrement E
(1)  296/    91F5 : 02                  	ccl
(1)  297/    91F6 : 70                  	ade
(1)  298/    91F7 : 01                  	xae
(1)  299/    91F8 : 90 A6               	jmp 	__GSLoop 											; and go round again.
(1)  300/    91FA :                     
(1)  301/    91FA :                     	endsection GetString
(1)  302/    91FA :                     
      67/    91FA :                     	include source\statement.asm 								; statement interpreter.
(1)    1/    91FA :                     ; ****************************************************************************************************************
(1)    2/    91FA :                     ; ****************************************************************************************************************
(1)    3/    91FA :                     ;
(1)    4/    91FA :                     ;													Statement
(1)    5/    91FA :                     ;
(1)    6/    91FA :                     ; ****************************************************************************************************************
(1)    7/    91FA :                     ; ****************************************************************************************************************
(1)    8/    91FA :                     
(1)    9/    91FA :                     ; ****************************************************************************************************************
(1)   10/    91FA :                     ; ****************************************************************************************************************
(1)   11/    91FA :                     ;
(1)   12/    91FA :                     ;													Handlers
(1)   13/    91FA :                     ;
(1)   14/    91FA :                     ;	Special L-Expr handlers go here. Each is preceded with a jump to the end before the execution label, so
(1)   15/    91FA :                     ;	code automatically falls through to execute next statement.
(1)   16/    91FA :                     ;
(1)   17/    91FA :                     ; ****************************************************************************************************************
(1)   18/    91FA :                     ; ****************************************************************************************************************
(1)   19/    91FA :                     
(1)   20/    91FA :                     	include source\left_specials\ramtop.asm
(2)    1/    91FA :                     ; ****************************************************************************************************************
(2)    2/    91FA :                     ; ****************************************************************************************************************
(2)    3/    91FA :                     ;
 AS V1.42 Beta [Bld 102] - source file vtl-2.asm(ramtop.asm) - page 11 - 12/29/2015 6:07:42


(2)    4/    91FA :                     ;											* : Set RAMTOP
(2)    5/    91FA :                     ;
(2)    6/    91FA :                     ; ****************************************************************************************************************
(2)    7/    91FA :                     ; ****************************************************************************************************************
(2)    8/    91FA :                     
(2)    9/    91FA : 90 1A               	jmp 	__STTOP_End
(2)   10/    91FC :                     
(2)   11/    91FC :                     __ST_RamTop:
(2)   12/    91FC : 3F                  	xppc 	p3 													; check for '='
(2)   13/    91FD : 94 17               	jp 		__STTOP_End 										; if error, end.
(2)   14/    91FF : 3F                  	xppc 	p3 													; evaluate rhs
(2)   15/    9200 : C6 02               	ld 		@2(p2) 												; unstack the result.
(2)   16/    9202 : 06                  	csa 														; end if there was an error.
(2)   17/    9203 : 94 11               	jp 		__STTOP_End
(2)   18/    9205 : C2 FF               	ld 		-1(p2) 												; if the returned result was non zero
(2)   19/    9207 : DA FE               	or 		-2(p2)
(2)   20/    9209 : 9C 07               	jnz 	__STTOP_Error 										; report as error
(2)   21/    920B :                     
(2)   22/    920B : (MACRO)             	lpi 	p3,BootMonitor-1 									; else crash back to monitor
(2)   22/    920B : C4 02                       ldi     (BOOTMONITOR-1) / 256
(2)   22/    920D : 37                          xpah    P3
(2)   22/    920E : C4 0F                       ldi     (BOOTMONITOR-1) & 255
(2)   22/    9210 : 33                          xpal    P3
(2)   23/    9211 : 3F                  	xppc 	p3
(2)   24/    9212 :                     
(2)   25/    9212 :                     __STTOP_Error:
(2)   26/    9212 : C4 52               	ldi 	ERROR_ReadOnly										; set error to E
(2)   27/    9214 : 01                  	xae 
(2)   28/    9215 : 02                  	ccl 														; return with carry clear indicating error
(2)   29/    9216 :                     
(2)   30/    9216 :                     __STTOP_End:
(1)   21/    9216 :                     	include source\left_specials\machinecode.asm
(2)    1/    9216 :                     ; ****************************************************************************************************************
(2)    2/    9216 :                     ; ****************************************************************************************************************
(2)    3/    9216 :                     ;
(2)    4/    9216 :                     ;												> : Call Machine Code
(2)    5/    9216 :                     ;
(2)    6/    9216 :                     ; ****************************************************************************************************************
(2)    7/    9216 :                     ; ****************************************************************************************************************
(2)    8/    9216 :                     
(2)    9/    9216 : 90 27               	jmp 	__STMAC_End
(2)   10/    9218 :                     
(2)   11/    9218 :                     __ST_MachineCode:
(2)   12/    9218 : 3F                  	xppc 	p3 													; check for '='
(2)   13/    9219 : 94 24               	jp 		__STMAC_End 										; if error, end.
(2)   14/    921B : 3F                  	xppc 	p3 													; evaluate rhs
(2)   15/    921C : C6 02               	ld 		@2(p2) 												; unstack the result.
(2)   16/    921E : 06                  	csa 														; end if there was an error.
(2)   17/    921F : 94 1E               	jp 		__STMAC_End
(2)   18/    9221 :                     	
(2)   19/    9221 : C2 FE               	ld 		-2(p2) 												; LSB -> E
(2)   20/    9223 : 01                  	xae
(2)   21/    9224 : C2 FF               	ld 		-1(p2) 												; MSB -> P3.H
(2)   22/    9226 : 37                  	xpah 	p3
(2)   23/    9227 : 40                  	lde 														; E -> P3.L	
(2)   24/    9228 : 33                  	xpal 	p3
(2)   25/    9229 : C7 FF               	ld 		@-1(p3) 											; adjust for pre increment
(2)   26/    922B : (MACRO)             	pushp 	p1 													; point P1 to variables
(2)   26/    922B : 35                          xpah    P1
(2)   26/    922C : CE FF                       st              @-1(p2)
 AS V1.42 Beta [Bld 102] - source file vtl-2.asm(machinecode.asm) - page 12 - 12/29/2015 6:07:42


(2)   26/    922E : 31                          xpal    P1
(2)   26/    922F : CE FF                       st              @-1(p2)
(2)   27/    9231 : (MACRO)             	lpi 	p1,Variables
(2)   27/    9231 : C4 0D                       ldi     (VARIABLES) / 256
(2)   27/    9233 : 35                          xpah    P1
(2)   27/    9234 : C4 00                       ldi     (VARIABLES) & 255
(2)   27/    9236 : 31                          xpal    P1
(2)   28/    9237 : 3F                  	xppc 	p3 													; call routine
(2)   29/    9238 : (MACRO)             	pullp 	p1 													; restore P1
(2)   29/    9238 : C6 01                       ld              @1(p2)
(2)   29/    923A : 31                          xpal    P1
(2)   29/    923B : C6 01                       ld              @1(p2)
(2)   29/    923D : 35                          xpah    P1
(2)   30/    923E : 03                  	scl 														; result ok.
(2)   31/    923F :                     	
(2)   32/    923F :                     __STMAC_End:
(1)   22/    923F :                     	include source\left_specials\print.asm
(2)    1/    923F :                     ; ****************************************************************************************************************
(2)    2/    923F :                     ; ****************************************************************************************************************
(2)    3/    923F :                     ;
(2)    4/    923F :                     ;									? : Print Expression / String Literal
(2)    5/    923F :                     ;
(2)    6/    923F :                     ; ****************************************************************************************************************
(2)    7/    923F :                     ; ****************************************************************************************************************
(2)    8/    923F :                     
(2)    9/    923F : 90 68               	jmp 	__STPRT_End
(2)   10/    9241 :                     
(2)   11/    9241 :                     __ST_Print:
(2)   12/    9241 : 3F                  	xppc 	p3 													; check for '='
(2)   13/    9242 : 94 65               	jp 		__STPRT_End 										; if error, end.
(2)   14/    9244 : C1 00               	ld 		(p1) 												; check next character
(2)   15/    9246 : E4 22               	xri 	'"'													; if quote mark
(2)   16/    9248 : 98 31               	jz 		__STPRT_Literal 									; print literal.
(2)   17/    924A :                     
(2)   18/    924A :                     ; ****************************************************************************************************************
(2)   19/    924A :                     ;												Print expression.
(2)   20/    924A :                     ; ****************************************************************************************************************
(2)   21/    924A :                     
(2)   22/    924A : C6 FE               	ld 		@-2(p2) 											; make space for P1 save later.
(2)   23/    924C : 3F                  	xppc 	p3 													; evaluate rhs and push result
(2)   24/    924D : C6 04               	ld 		@4(p2) 												; unstack the result and saved space
(2)   25/    924F : 06                  	csa 														; end if there was an error.
(2)   26/    9250 : 94 57               	jp 		__STPRT_End
(2)   27/    9252 : C6 FC               	ld 		@-4(p2) 											; restack the result and saved space.
(2)   28/    9254 : 35                  	xpah 	p1 													; save P1 above result
(2)   29/    9255 : CA 03               	st 		3(p2)
(2)   30/    9257 : 31                  	xpal 	p1 
(2)   31/    9258 : CA 02               	st 		2(p2)
(2)   32/    925A : (MACRO)             	lpi 	p3,OSMathLibrary-1 									; use the maths library to convert to decimal
(2)   32/    925A : C4 00                       ldi     (OSMATHLIBRARY-1) / 256
(2)   32/    925C : 37                          xpah    P3
(2)   32/    925D : C4 02                       ldi     (OSMATHLIBRARY-1) & 255
(2)   32/    925F : 33                          xpal    P3
(2)   33/    9260 : (MACRO)             	lpi 	p1,KeyboardBuffer+10 								; use the keyboard buffer as workspace.
(2)   33/    9260 : C4 0E                       ldi     (KEYBOARDBUFFER+10) / 256
(2)   33/    9262 : 35                          xpah    P1
(2)   33/    9263 : C4 0A                       ldi     (KEYBOARDBUFFER+10) & 255
(2)   33/    9265 : 31                          xpal    P1
(2)   34/    9266 : C4 24               	ldi 	'$'													; '$' function.
(2)   35/    9268 : 3F                  	xppc 	p3 													; convert it
 AS V1.42 Beta [Bld 102] - source file vtl-2.asm(print.asm) - page 13 - 12/29/2015 6:07:42


(2)   36/    9269 : (MACRO)             	lpi 	p3,Print-1 											; then print it
(2)   36/    9269 : C4 90                       ldi     (PRINT-1) / 256
(2)   36/    926B : 37                          xpah    P3
(2)   36/    926C : C4 AD                       ldi     (PRINT-1) & 255
(2)   36/    926E : 33                          xpal    P3
(2)   37/    926F : C4 00               	ldi 	0
(2)   38/    9271 : 3F                  	xppc 	p3 
(2)   39/    9272 : (MACRO)             	pullp 	p1 													; restore P1.
(2)   39/    9272 : C6 01                       ld              @1(p2)
(2)   39/    9274 : 31                          xpal    P1
(2)   39/    9275 : C6 01                       ld              @1(p2)
(2)   39/    9277 : 35                          xpah    P1
(2)   40/    9278 : 03                  	scl 														; no error occurred.
(2)   41/    9279 : 90 2E               	jmp 	__STPRT_End 										; and exit
(2)   42/    927B :                     
(2)   43/    927B :                     ; ****************************************************************************************************************
(2)   44/    927B :                     ;													Print literal
(2)   45/    927B :                     ; ****************************************************************************************************************
(2)   46/    927B :                     
(2)   47/    927B :                     __STPRT_Literal:
(2)   48/    927B : C5 01               	ld 		@1(p1) 												; skip over first quote.
(2)   49/    927D : (MACRO)             	lpi 	p3,Print-1 											; print routine in P3.
(2)   49/    927D : C4 90                       ldi     (PRINT-1) / 256
(2)   49/    927F : 37                          xpah    P3
(2)   49/    9280 : C4 AD                       ldi     (PRINT-1) & 255
(2)   49/    9282 : 33                          xpal    P3
(2)   50/    9283 :                     __STPRT_LitLoop:
(2)   51/    9283 : C1 00               	ld 		(p1) 												; get next character
(2)   52/    9285 : 98 1E               	jz 		__STPRT_Error 										; if zero, missing quote mark.
(2)   53/    9287 : C5 01               	ld 		@1(p1) 												; fetch and bump
(2)   54/    9289 : E4 22               	xri 	'"' 												; if reached quote mark
(2)   55/    928B : 98 05               	jz 		__STPRT_LitComplete 								; exit
(2)   56/    928D : C1 FF               	ld 		-1(p1) 												; load character
(2)   57/    928F : 3F                  	xppc 	p3 													; print it
(2)   58/    9290 : 90 F1               	jmp 	__STPRT_LitLoop 
(2)   59/    9292 :                     ;
(2)   60/    9292 :                     ;	Print completed, check for ';'
(2)   61/    9292 :                     ;
(2)   62/    9292 :                     __STPRT_LitComplete:
(2)   63/    9292 : C5 01               	ld 		@1(p1) 												; get next
(2)   64/    9294 : E4 20               	xri 	' ' 												; avoid spaces
(2)   65/    9296 : 98 FA               	jz 		__STPRT_LitComplete 
(2)   66/    9298 : C5 FF               	ld 		@-1(p1) 											; reget the character
(2)   67/    929A : E4 3B               	xri 	';'													; if semicolon
(2)   68/    929C : 03                  	scl 														; exit with CY/L = 1
(2)   69/    929D : 98 0A               	jz 		__STPRT_End 	
(2)   70/    929F : C4 0D               	ldi 	13 													; print a carriage return
(2)   71/    92A1 : 3F                  	xppc 	p3
(2)   72/    92A2 : 03                  	scl 														; exit with CY/L = 1
(2)   73/    92A3 : 90 04               	jmp 	__STPRT_End
(2)   74/    92A5 :                     ;
(2)   75/    92A5 :                     ;	Error, closing quote not found.
(2)   76/    92A5 :                     ;
(2)   77/    92A5 :                     __STPRT_Error:													; missing quote mark
(2)   78/    92A5 : C4 51               	ldi 	ERROR_Quote
(2)   79/    92A7 : 01                  	xae
(2)   80/    92A8 : 02                  	ccl 
(2)   81/    92A9 :                     
(2)   82/    92A9 :                     __STPRT_End:
(1)   23/    92A9 :                     	include source\left_specials\charout.asm
 AS V1.42 Beta [Bld 102] - source file vtl-2.asm(charout.asm) - page 14 - 12/29/2015 6:07:42


(2)    1/    92A9 :                     ; ****************************************************************************************************************
(2)    2/    92A9 :                     ; ****************************************************************************************************************
(2)    3/    92A9 :                     ;
(2)    4/    92A9 :                     ;												$ : Character Output
(2)    5/    92A9 :                     ;
(2)    6/    92A9 :                     ; ****************************************************************************************************************
(2)    7/    92A9 :                     ; ****************************************************************************************************************
(2)    8/    92A9 :                     
(2)    9/    92A9 : 90 13               	jmp 	__STCHO_End
(2)   10/    92AB :                     
(2)   11/    92AB :                     __ST_CharacterOut:
(2)   12/    92AB : 3F                  	xppc 	p3 													; check for '='
(2)   13/    92AC : 94 10               	jp 		__STCHO_End 										; if error, end.
(2)   14/    92AE : 3F                  	xppc 	p3 													; evaluate rhs
(2)   15/    92AF : C6 02               	ld 		@2(p2) 												; unstack the result.
(2)   16/    92B1 : 06                  	csa 														; end if there was an error.
(2)   17/    92B2 : 94 0A               	jp 		__STCHO_End
(2)   18/    92B4 : (MACRO)             	lpi 	p3,Print-1 											; get print routine ptr
(2)   18/    92B4 : C4 90                       ldi     (PRINT-1) / 256
(2)   18/    92B6 : 37                          xpah    P3
(2)   18/    92B7 : C4 AD                       ldi     (PRINT-1) & 255
(2)   18/    92B9 : 33                          xpal    P3
(2)   19/    92BA : C2 FE               	ld 		-2(p2) 												; read the byte
(2)   20/    92BC : 3F                  	xppc 	p3 													; and print it.
(2)   21/    92BD : 03                  	scl 														; no error occurred.
(2)   22/    92BE :                     	
(2)   23/    92BE :                     __STCHO_End:
(1)   24/    92BE :                     	include source\left_specials\array.asm
(2)    1/    92BE :                     ; ****************************************************************************************************************
(2)    2/    92BE :                     ; ****************************************************************************************************************
(2)    3/    92BE :                     ;
(2)    4/    92BE :                     ;												: : Array Access
(2)    5/    92BE :                     ;
(2)    6/    92BE :                     ; ****************************************************************************************************************
(2)    7/    92BE :                     ; ****************************************************************************************************************
(2)    8/    92BE :                     
(2)    9/    92BE : 90 51               	jmp 	__STARR_End
(2)   10/    92C0 :                     
(2)   11/    92C0 :                     __ST_ArrayWrite:
(2)   12/    92C0 : (MACRO)             	lpi 	p3,EvaluateExpression-1 							; evaluate the array index
(2)   12/    92C0 : C4 94                       ldi     (EVALUATEEXPRESSION-1) / 256
(2)   12/    92C2 : 37                          xpah    P3
(2)   12/    92C3 : C4 1E                       ldi     (EVALUATEEXPRESSION-1) & 255
(2)   12/    92C5 : 33                          xpal    P3
(2)   13/    92C6 : 3F                  	xppc 	p3
(2)   14/    92C7 : 94 46               	jp 		__STARR_Drop2_End 									; exit if error.
(2)   15/    92C9 : C1 00               	ld 		(p1) 												; look at last character
(2)   16/    92CB : E4 29               	xri 	')'
(2)   17/    92CD : 9C 3C               	jnz 	__STARR_NoCloseBracket 								; if not ) then error
(2)   18/    92CF : C5 01               	ld 		@1(p1) 												; skip the )
(2)   19/    92D1 : (MACRO)             	lpi 	p3,CheckEquals-1 									; do check-equals test
(2)   19/    92D1 : C4 93                       ldi     (CHECKEQUALS-1) / 256
(2)   19/    92D3 : 37                          xpah    P3
(2)   19/    92D4 : C4 FF                       ldi     (CHECKEQUALS-1) & 255
(2)   19/    92D6 : 33                          xpal    P3
(2)   20/    92D7 : 3F                  	xppc 	p3
(2)   21/    92D8 : 94 35               	jp 		__STARR_Drop2_End
(2)   22/    92DA : 3F                  	xppc 	p3 													; do right expression.
(2)   23/    92DB : C6 04               	ld 		@4(p2) 												; drop result and array index.
(2)   24/    92DD : 06                  	csa
 AS V1.42 Beta [Bld 102] - source file vtl-2.asm(array.asm) - page 15 - 12/29/2015 6:07:42


(2)   25/    92DE : 94 31               	jp 		__STARR_End 										; exit if error.
(2)   26/    92E0 :                     
(2)   27/    92E0 : C2 FE               	ld 		-2(p2) 												; double array index
(2)   28/    92E2 : 02                  	ccl 
(2)   29/    92E3 : F2 FE               	add 	-2(p2)
(2)   30/    92E5 : CA FE               	st 		-2(p2)
(2)   31/    92E7 : C2 FF               	ld 		-1(p2)
(2)   32/    92E9 : F2 FF               	add 	-1(p2)
(2)   33/    92EB : CA FF               	st 		-1(p2)
(2)   34/    92ED :                     
(2)   35/    92ED : (MACRO)             	lpi 	p3,Variables+('&' & 0x3F) * 2 						; point P3 to array base.
(2)   35/    92ED : C4 0D                       ldi     (VARIABLES+('&' & 0X3F) * 2) / 256
(2)   35/    92EF : 37                          xpah    P3
(2)   35/    92F0 : C4 4C                       ldi     (VARIABLES+('&' & 0X3F) * 2) & 255
(2)   35/    92F2 : 33                          xpal    P3
(2)   36/    92F3 : 02                  	ccl
(2)   37/    92F4 : C3 00               	ld 		(p3) 												; calculate LSB -> E
(2)   38/    92F6 : F2 FE               	add 	-2(p2)
(2)   39/    92F8 : 01                  	xae
(2)   40/    92F9 : C3 01               	ld 		1(p3) 												; calculate MSB -> P3.H
(2)   41/    92FB : F2 FF               	add 	-1(p2)
(2)   42/    92FD : 37                  	xpah 	p3
(2)   43/    92FE : 40                  	lde 														; E -> P3.L
(2)   44/    92FF : 33                  	xpal 	p3
(2)   45/    9300 : C2 FC               	ld 		-4(p2) 												; copy r-expression to memory
(2)   46/    9302 : CF 01               	st 		@1(p3)
(2)   47/    9304 : C2 FD               	ld 		-3(p2)
(2)   48/    9306 : CB 00               	st 		(p3)
(2)   49/    9308 : 03                  	scl 														; is okay
(2)   50/    9309 : 90 06               	jmp 	__STARR_End 										; and exit out.
(2)   51/    930B :                     
(2)   52/    930B :                     
(2)   53/    930B :                     __STARR_NoCloseBracket:											; return bracket error (missing ) off array)
(2)   54/    930B : C4 42               	ldi		ERROR_Bracket
(2)   55/    930D : 01                  	xae
(2)   56/    930E : 02                  	ccl
(2)   57/    930F :                     __STARR_Drop2_End:
(2)   58/    930F : C6 02               	ld 		@2(p2) 												; drop two bytes off the stack.
(2)   59/    9311 :                     
(2)   60/    9311 :                     __STARR_End:
(1)   25/    9311 :                     	include source\left_specials\goto.asm 						; has to be last, both for speed and accesses ExecuteNextStatement
(2)    1/    9311 :                     ; ****************************************************************************************************************
(2)    2/    9311 :                     ; ****************************************************************************************************************
(2)    3/    9311 :                     ;
(2)    4/    9311 :                     ;									# : Goto line number, optional return.
(2)    5/    9311 :                     ;
(2)    6/    9311 :                     ; ****************************************************************************************************************
(2)    7/    9311 :                     ; ****************************************************************************************************************
(2)    8/    9311 :                     
(2)    9/    9311 : 90 46               	jmp 	__STGOTO_End
(2)   10/    9313 :                     
(2)   11/    9313 :                     __ST_Goto:
(2)   12/    9313 : 3F                  	xppc 	p3 													; check for '='
(2)   13/    9314 : 94 43               	jp 		__STGOTO_End 										; if error, end.
(2)   14/    9316 : 3F                  	xppc 	p3 													; evaluate rhs and push result
(2)   15/    9317 : C6 02               	ld 		@2(p2) 												; unstack the result and saved space
(2)   16/    9319 : 06                  	csa 														; end if there was an error.
(2)   17/    931A : 94 3D               	jp 		__STGOTO_End
(2)   18/    931C : C2 FF               	ld 		-1(p2) 												; if the result is zero
(2)   19/    931E : DA FE               	or 		-2(p2) 												; then exit, CY/L is set from the expression evaluator
 AS V1.42 Beta [Bld 102] - source file vtl-2.asm(goto.asm) - page 16 - 12/29/2015 6:07:42


(2)   20/    9320 : 98 37               	jz 		__STGOTO_End
(2)   21/    9322 :                     
(2)   22/    9322 : (MACRO)             	lpi 	p3,Variables 										; copy current line number + 1 to ! (return address)
(2)   22/    9322 : C4 0D                       ldi     (VARIABLES) / 256
(2)   22/    9324 : 37                          xpah    P3
(2)   22/    9325 : C4 00                       ldi     (VARIABLES) & 255
(2)   22/    9327 : 33                          xpal    P3
(2)   23/    9328 : 02                  	ccl
(2)   24/    9329 : C3 46               	ld 		('#' & 0x3F)*2(p3) 
(2)   25/    932B : F4 01               	adi 	1
(2)   26/    932D : CB 42               	st 		('!' & 0x3F)*2(p3) 
(2)   27/    932F : C3 47               	ld 		('#' & 0x3F)*2+1(p3) 
(2)   28/    9331 : F4 00               	adi 	0
(2)   29/    9333 : CB 43               	st 		('!' & 0x3F)*2+1(p3) 
(2)   30/    9335 :                     
(2)   31/    9335 : C4 01               	ldi 	1 													; set IsRunning flag.
(2)   32/    9337 : CB FF               	st 		IsRunning-Variables(p3)
(2)   33/    9339 :                     	
(2)   34/    9339 : C3 FD               	ld 		ProgramBase-Variables(p3) 							; put program base address into P1.
(2)   35/    933B : 31                  	xpal 	p1
(2)   36/    933C : C3 FE               	ld 		ProgramBase-Variables+1(p3)
(2)   37/    933E : 35                  	xpah 	p1
(2)   38/    933F :                     
(2)   39/    933F :                     __STGOTO_Search:												; look for line #
(2)   40/    933F : C1 00               	ld 		(p1) 												; read offset.
(2)   41/    9341 : 98 13               	jz 		__STGOTO_Found 										; if offset is zero goto end of program (P1)
(2)   42/    9343 : 01                  	xae 														; save offset in E
(2)   43/    9344 :                     
(2)   44/    9344 : 03                  	scl
(2)   45/    9345 : C1 01               	ld 		1(p1) 												; calculate current# - required but not worried about
(2)   46/    9347 : FA FE               	cad 	-2(p2) 												; the actual answer.
(2)   47/    9349 : C1 02               	ld 		2(p1)
(2)   48/    934B : FA FF               	cad 	-1(p2)
(2)   49/    934D :                     
(2)   50/    934D : 06                  	csa 														; look at carry flag
(2)   51/    934E : D4 80               	ani 	0x80
(2)   52/    9350 : 9C 04               	jnz 	__STGOTO_Found 										; if set then current# >= required#
(2)   53/    9352 : C5 80               	ld 		@-0x80(p1)											; use auto index to go to next one
(2)   54/    9354 : 90 E9               	jmp 	__STGOTO_Search
(2)   55/    9356 :                     
(2)   56/    9356 :                     __STGOTO_Found:
(2)   57/    9356 : 03                  	scl
(2)   58/    9357 : 90 15               	jmp 	ExecuteNextStatement 								
(2)   59/    9359 :                     
(2)   60/    9359 :                     __STGOTO_End:
(1)   26/    9359 :                     
(1)   27/    9359 :                     ; ****************************************************************************************************************
(1)   28/    9359 :                     ;							Handler end. Test for error and skip rest of line if comment
(1)   29/    9359 :                     ; ****************************************************************************************************************
(1)   30/    9359 :                     
(1)   31/    9359 : 06                  	csa 														; read Status Register
(1)   32/    935A : D4 80               	ani 	0x80 												; check if CY/L bit set, if so go to next statement
(1)   33/    935C : 9C 0C               	jnz 	SkipEndLineNextStatement
(1)   34/    935E :                     __ENS_Stop:														; error has occurred in a handler.
(1)   35/    935E : (MACRO)             	lpi 	p3,Variables 										; clear the is running flag
(1)   35/    935E : C4 0D                       ldi     (VARIABLES) / 256
(1)   35/    9360 : 37                          xpah    P3
(1)   35/    9361 : C4 00                       ldi     (VARIABLES) & 255
(1)   35/    9363 : 33                          xpal    P3
(1)   36/    9364 : C4 00               	ldi 	0
 AS V1.42 Beta [Bld 102] - source file vtl-2.asm(statement.asm) - page 17 - 12/29/2015 6:07:42


(1)   37/    9366 : CB FF               	st 		IsRunning-Variables(p3)	
(1)   38/    9368 :                     	;
(1)   39/    9368 :                     	; TODO: Go to input from keyboard handler.
(1)   40/    9368 :                     	;
(1)   41/    9368 :                     wait2:
(1)   42/    9368 : 90 FE               	jmp 	wait2
(1)   43/    936A :                     
(1)   44/    936A :                     SkipEndLineNextStatement: 										; find end of line if comment etc.
(1)   45/    936A : C5 01               	ld 		@1(p1)
(1)   46/    936C : 9C FC               	jnz 	SkipEndLineNextStatement
(1)   47/    936E :                     
(1)   48/    936E :                     ; ****************************************************************************************************************
(1)   49/    936E :                     ; ****************************************************************************************************************
(1)   50/    936E :                     ;
(1)   51/    936E :                     ;					Execute the next statement. P1 points to the offset byte to next
(1)   52/    936E :                     ;
(1)   53/    936E :                     ; ****************************************************************************************************************
(1)   54/    936E :                     ; ****************************************************************************************************************
(1)   55/    936E :                     
(1)   56/    936E : =0x27               RandomVariable = 0x27 											; Assembler does not like single quote.
(1)   57/    936E :                     
(1)   58/    936E :                     ExecuteNextStatement:
(1)   59/    936E :                     
(1)   60/    936E :                     ; ****************************************************************************************************************
(1)   61/    936E :                     ;									Check to see if reached end of program
(1)   62/    936E :                     ; ****************************************************************************************************************
(1)   63/    936E :                     
(1)   64/    936E : C5 01               	ld 		@1(p1) 												; look at length byte
(1)   65/    9370 : 03                  	scl 														; set CY/L so stops without error if zero.
(1)   66/    9371 : 98 EB               	jz 		__ENS_Stop 											; if zero, stop the program from running as at top of program.
(1)   67/    9373 :                     
(1)   68/    9373 :                     ; ****************************************************************************************************************
(1)   69/    9373 :                     ;				Check running flag and update # variable which contains current line number
(1)   70/    9373 :                     ; ****************************************************************************************************************
(1)   71/    9373 :                     
(1)   72/    9373 : (MACRO)             	lpi 	p3,Variables 										; look at variables.
(1)   72/    9373 : C4 0D                       ldi     (VARIABLES) / 256
(1)   72/    9375 : 37                          xpah    P3
(1)   72/    9376 : C4 00                       ldi     (VARIABLES) & 255
(1)   72/    9378 : 33                          xpal    P3
(1)   73/    9379 : C3 FF               	ld 		IsRunning-Variables(p3) 							; check is running flag
(1)   74/    937B : 98 E1               	jz 		__ENS_Stop 											; if zero, stop, still with CY/L set.
(1)   75/    937D :                     
(1)   76/    937D : C5 01               	ld 		@1(p1) 												; copy current line number to #
(1)   77/    937F : CB 46               	st 		('#' & 0x3F)*2(p3)
(1)   78/    9381 : C5 01               	ld 		@1(p1)
(1)   79/    9383 : CB 47               	st 		('#' & 0x3F)*2+1(p3)
(1)   80/    9385 :                     
(1)   81/    9385 :                     ; ****************************************************************************************************************
(1)   82/    9385 :                     ;										Update the random number variable '
(1)   83/    9385 :                     ; ****************************************************************************************************************
(1)   84/    9385 :                     
(1)   85/    9385 :                     ExecuteCodeLine:
(1)   86/    9385 : C3 4E               	ld 		(RandomVariable*2)(p3) 								; check random seed initialised
(1)   87/    9387 : DB 4F               	or 		(RandomVariable*2+1)(p3) 										
(1)   88/    9389 : 9C 08               	jnz 	__ENS_RandomInitialised
(1)   89/    938B :                     
(1)   90/    938B : C4 E1               	ldi 	0xE1  												; if it is $0000, set it to $ACE1
(1)   91/    938D : CB 4E               	st 		(RandomVariable*2)(p3)
(1)   92/    938F : C4 AC               	ldi 	0xAC
 AS V1.42 Beta [Bld 102] - source file vtl-2.asm(statement.asm) - page 18 - 12/29/2015 6:07:42


(1)   93/    9391 : CB 4F               	st 		(RandomVariable*2+1)(p3)
(1)   94/    9393 :                     __ENS_RandomInitialised:
(1)   95/    9393 :                     
(1)   96/    9393 : C3 4F               	ld 		(RandomVariable*2+1)(p3) 							; shift LFSR right
(1)   97/    9395 : 02                  	ccl
(1)   98/    9396 : 1F                  	rrl
(1)   99/    9397 : CB 4F               	st 		(RandomVariable*2+1)(p3)
(1)  100/    9399 : C3 4E               	ld 		(RandomVariable*2)(p3)
(1)  101/    939B : 1F                  	rrl
(1)  102/    939C : CB 4E               	st 		(RandomVariable*2)(p3)
(1)  103/    939E : 06                  	csa
(1)  104/    939F : 94 06               	jp 		__ENS_NoToggleMask 									; if output bit is 1 appl the toggle mask.
(1)  105/    93A1 : C3 4F               	ld 		(RandomVariable*2+1)(p3)
(1)  106/    93A3 : E4 B4               	xri 	0xB4
(1)  107/    93A5 : CB 4F               	st 		(RandomVariable*2+1)(p3)
(1)  108/    93A7 :                     __ENS_NoToggleMask:
(1)  109/    93A7 :                     
(1)  110/    93A7 :                     ; ****************************************************************************************************************
(1)  111/    93A7 :                     ;									Look at the first non space character
(1)  112/    93A7 :                     ; ****************************************************************************************************************
(1)  113/    93A7 :                     
(1)  114/    93A7 :                     __ENS_GetFirstCharacter:
(1)  115/    93A7 : C5 01               	ld 		@1(p1) 												; get first character of line.
(1)  116/    93A9 : 98 C3               	jz 		ExecuteNextStatement 								; if it is NULL the line is blank, so go to next one.
(1)  117/    93AB : E4 20               	xri 	' '													; keep going till space not found
(1)  118/    93AD : 98 F8               	jz 		__ENS_GetFirstCharacter
(1)  119/    93AF : C5 FF               	ld 		@-1(p1) 											; go back and reload first non space character
(1)  120/    93B1 : D4 40               	ani 	0x40 												; same optimisation trick as RHS. If this bit set it is
(1)  121/    93B3 : 98 32               	jz 		__ENS_CheckSpecials 								; a standard variable @A-Z[/]^_ (e.g. 64-91) so don't check specials.
(1)  122/    93B5 :                     
(1)  123/    93B5 :                     ; ****************************************************************************************************************
(1)  124/    93B5 :                     ;									A standard assignment of the A=<expr> type
(1)  125/    93B5 :                     ; ****************************************************************************************************************
(1)  126/    93B5 :                     
(1)  127/    93B5 :                     __ENS_StandardAssignment:
(1)  128/    93B5 : C5 01               	ld 		@1(p1)												; get the variable and skip over it
(1)  129/    93B7 : CE FF               	st 		@-1(p2) 											; save on stack for later usage.
(1)  130/    93B9 : (MACRO)             	lpi		p3,CheckEquals-1 									; check equals and spacing function
(1)  130/    93B9 : C4 93                       ldi     (CHECKEQUALS-1) / 256
(1)  130/    93BB : 37                          xpah    P3
(1)  130/    93BC : C4 FF                       ldi     (CHECKEQUALS-1) & 255
(1)  130/    93BE : 33                          xpal    P3
(1)  131/    93BF : 3F                  	xppc 	p3 													; call it.
(1)  132/    93C0 : C6 01               	ld 		@1(p2) 												; drop variable, temporarily
(1)  133/    93C2 : 06                  	csa
(1)  134/    93C3 : 94 99               	jp 		__ENS_Stop 											; error trap
(1)  135/    93C5 : C6 FF               	ld 		@-1(p2) 											; restore variable on stack. data still there.
(1)  136/    93C7 : 3F                  	xppc 	p3 													; call it again to evaluate expression
(1)  137/    93C8 : C6 03               	ld 		@3(p2) 												; drop result and variable, though values still present
(1)  138/    93CA : 06                  	csa
(1)  139/    93CB : 94 91               	jp 		__ENS_Stop 											; error trap
(1)  140/    93CD :                     
(1)  141/    93CD : C2 FF               	ld 		-1(p2) 												; variable name
(1)  142/    93CF : 02                  	ccl 														; double it, 2 bytes each
(1)  143/    93D0 : F2 FF               	add 	-1(p2) 
(1)  144/    93D2 : D4 7E               	ani 	0x3F * 2 											; same as anding with 3F and doubling.
(1)  145/    93D4 : 01                  	xae 														; put in E as an offset into variables
(1)  146/    93D5 : (MACRO)             	lpi 	p3,Variables 										; point P3 to variables.
(1)  146/    93D5 : C4 0D                       ldi     (VARIABLES) / 256
(1)  146/    93D7 : 37                          xpah    P3
 AS V1.42 Beta [Bld 102] - source file vtl-2.asm(statement.asm) - page 19 - 12/29/2015 6:07:42


(1)  146/    93D8 : C4 00                       ldi     (VARIABLES) & 255
(1)  146/    93DA : 33                          xpal    P3
(1)  147/    93DB : C2 FD               	ld 		-3(p2) 												; get LSB of result
(1)  148/    93DD : CB 80               	st 		-0x80(p3) 											; save it
(1)  149/    93DF : C7 01               	ld 		@1(p3) 												; bump P3
(1)  150/    93E1 : C2 FE               	ld 		-2(p2) 												; get MSB of result
(1)  151/    93E3 : CB 80               	st 		-0x80(p3) 											; save it.
(1)  152/    93E5 : 90 83               	jmp 	SkipEndLineNextStatement 							; skip to end of line, if not there, and do next statement.
(1)  153/    93E7 :                     
(1)  154/    93E7 :                     ; ****************************************************************************************************************
(1)  155/    93E7 :                     ;	P1 points to a character in the 32-63 range, which *might* be a special so we look it up in the specials table
(1)  156/    93E7 :                     ; ****************************************************************************************************************
(1)  157/    93E7 :                     
(1)  158/    93E7 :                     __ENS_CheckSpecials:
(1)  159/    93E7 : (MACRO)             	lpi 	p3,SpecialsTable 									; point P3 to the specials table.
(1)  159/    93E7 : C4 96                       ldi     (SPECIALSTABLE) / 256
(1)  159/    93E9 : 37                          xpah    P3
(1)  159/    93EA : C4 07                       ldi     (SPECIALSTABLE) & 255
(1)  159/    93EC : 33                          xpal    P3
(1)  160/    93ED :                     __ENS_SearchSpecials:
(1)  161/    93ED : C7 03               	ld 		@3(p3) 												; fetch, and point to next.
(1)  162/    93EF : 98 C4               	jz 		__ENS_StandardAssignment 							; if end of table, then do as standard assignment
(1)  163/    93F1 : E1 00               	xor 	(p1) 												; found the character
(1)  164/    93F3 : 9C F8               	jnz 	__ENS_SearchSpecials 								; no, keep looking for it.
(1)  165/    93F5 :                     
(1)  166/    93F5 : C5 01               	ld 		@1(p1) 												; skip over specials character
(1)  167/    93F7 : C3 FE               	ld 		-2(p3) 												; read LSB of jump address to E
(1)  168/    93F9 : 01                  	xae 
(1)  169/    93FA : C3 FF               	ld 		-1(p3) 												; read MSB of jump address to P3.H
(1)  170/    93FC : 37                  	xpah 	p3
(1)  171/    93FD : 40                  	lde 														; copy E to P3.L Predecrement is done by the macro
(1)  172/    93FE : 33                  	xpal 	p3 
(1)  173/    93FF :                     
(1)  174/    93FF : 3F                  	xppc 	p3 													; and go to the handler. By doing this here we have 
(1)  175/    9400 :                     																; and XPPC P3 for check equals and an XPPC P3 for 
(1)  176/    9400 :                     																; expression with no P3 setup.
(1)  177/    9400 :                     
(1)  178/    9400 :                     ; ****************************************************************************************************************
(1)  179/    9400 :                     ; ****************************************************************************************************************
(1)  180/    9400 :                     ;
(1)  181/    9400 :                     ;						Check for = <expression>, skip following and trailing spaces
(1)  182/    9400 :                     ;
(1)  183/    9400 :                     ; ****************************************************************************************************************
(1)  184/    9400 :                     ; ****************************************************************************************************************
(1)  185/    9400 :                     
(1)  186/    9400 :                     CheckEquals:
(1)  187/    9400 : C5 01               	ld 		@1(p1) 												; fetch and bump
(1)  188/    9402 : 98 13               	jz 		__CEQ_Fail
(1)  189/    9404 : E4 20               	xri 	' ' 
(1)  190/    9406 : 98 F8               	jz 		CheckEquals 										; keep going if space found.
(1)  191/    9408 : E4 1D               	xri 	' ' ! '=' 											; if not found equals
(1)  192/    940A : 9C 0B               	jnz 	__CEQ_Fail  										; then fail with Syntax error.
(1)  193/    940C :                     
(1)  194/    940C :                     __CEQ_SkipSpaces:
(1)  195/    940C : C5 01               	ld 		@1(p1) 												; look at next after =
(1)  196/    940E : 98 07               	jz 		__CEQ_Fail 											; if NULL syntax error.
(1)  197/    9410 : E4 20               	xri 	' ' 												; loop back if space.
(1)  198/    9412 : 98 F8               	jz 		__CEQ_SkipSpaces
(1)  199/    9414 : 03                  	scl 														; set CY/L flag as okay
(1)  200/    9415 : 90 04               	jmp 	__CEQ_Exit
 AS V1.42 Beta [Bld 102] - source file vtl-2.asm(statement.asm) - page 20 - 12/29/2015 6:07:42


(1)  201/    9417 :                     __CEQ_Fail:	
(1)  202/    9417 : C4 53               	ldi 	ERROR_Syntax
(1)  203/    9419 : 01                  	xae
(1)  204/    941A : 02                  	ccl 														; clear CY/L as error and return.
(1)  205/    941B :                     __CEQ_Exit:
(1)  206/    941B : C5 FF               	ld 		@-1(p1) 											; undo last fetch.
(1)  207/    941D : 06                  	csa 														; copy result to A
(1)  208/    941E : 3F                  	xppc 	p3 													; return and fall through to evaluate expression
(1)  209/    941F :                     
(1)  210/    941F :                     ; ****************************************************************************************************************
(1)  211/    941F :                     ;	Expression follows directly as this and the CheckEquals function can be executed using XPPC P3 with no set up
(1)  212/    941F :                     ; ****************************************************************************************************************
(1)  213/    941F :                     
(1)  214/    941F :                     	include source\expression.asm 								; expression 
(2)    1/    941F :                     ; ****************************************************************************************************************
(2)    2/    941F :                     ; ****************************************************************************************************************
(2)    3/    941F :                     ;
(2)    4/    941F :                     ;										Expression Evaluation
(2)    5/    941F :                     ;										=====================
(2)    6/    941F :                     ;
(2)    7/    941F :                     ;	On entry, P1 points to the expression, on exit it points to ) or NULL if okay. Error in E. CY/L flag = 0
(2)    8/    941F :                     ;	indicates error, and this is already copied into A (e.g. CSA ; XPPC P3). A two byte result is stored on 
(2)    9/    941F :                     ;	the stack whatever happens but this is not a valid value unless CY/L = 1.
(2)   10/    941F :                     ;
(2)   11/    941F :                     ;	This code has the monitor maths library as a dependency.
(2)   12/    941F :                     ;	
(2)   13/    941F :                     ; ****************************************************************************************************************
(2)   14/    941F :                     ; ****************************************************************************************************************
(2)   15/    941F :                     
(2)   16/    941F :                     ; ****************************************************************************************************************
(2)   17/    941F :                     ; ****************************************************************************************************************
(2)   18/    941F :                     ;
(2)   19/    941F :                     ;											Expression Evaluation
(2)   20/    941F :                     ;
(2)   21/    941F :                     ; ****************************************************************************************************************
(2)   22/    941F :                     ; ****************************************************************************************************************
(2)   23/    941F :                     
(2)   24/    941F :                     EvaluateExpression:
(2)   25/    941F : (MACRO)             	pushp 	p3 													; save P3 on stack.
(2)   25/    941F : 37                          xpah    P3
(2)   25/    9420 : CE FF                       st              @-1(p2)
(2)   25/    9422 : 33                          xpal    P3
(2)   25/    9423 : CE FF                       st              @-1(p2)
(2)   26/    9425 : C4 2B               	ldi 	'+'													; push + on stack as pending operator
(2)   27/    9427 : CE FF               	st 		@-1(p2)
(2)   28/    9429 : C4 00               	ldi 	0 													; push 0 (16 bit) on stack as current term.
(2)   29/    942B : CE FF               	st 		@-1(p2)
(2)   30/    942D : CE FF               	st 		@-1(p2)
(2)   31/    942F :                     
(2)   32/    942F :                     ; ****************************************************************************************************************
(2)   33/    942F :                     ;					Get the next term. This is the main loop. We pretend we have already done 0+
(2)   34/    942F :                     ; ****************************************************************************************************************
(2)   35/    942F :                     
(2)   36/    942F :                     __EE_NextTerm:	
(2)   37/    942F : C5 01               	ld 		@1(p1) 												; get next character and bump.
(2)   38/    9431 : 98 1A               	jz 		__EE_ExitSyntax 									; fail with syntax error if nothing found
(2)   39/    9433 : E4 20               	xri 	' ' 												; keep going, skipping over spaces.
(2)   40/    9435 : 98 F8               	jz 		__EE_NextTerm
(2)   41/    9437 : C5 FF               	ld 		@-1(p1) 											; get character, unpicking bump
(2)   42/    9439 : 02                  	ccl 														; add 128-'0' ; if +ve it is less than '0'
 AS V1.42 Beta [Bld 102] - source file vtl-2.asm(expression.asm) - page 21 - 12/29/2015 6:07:42


(2)   43/    943A : F4 50               	adi 	128-'0'
(2)   44/    943C : 94 29               	jp 		__EE_NotInteger
(2)   45/    943E : F4 76               	adi 	128-10 												; add 128-10 ; if +ve it is greater than '9'
(2)   46/    9440 : 94 25               	jp 		__EE_NotInteger
(2)   47/    9442 :                     
(2)   48/    9442 :                     ; ****************************************************************************************************************
(2)   49/    9442 :                     ;					Found an integer term, use the math library to extract the integer.
(2)   50/    9442 :                     ; ****************************************************************************************************************
(2)   51/    9442 :                     
(2)   52/    9442 : (MACRO)             	lpi 	p3,OSMathLibrary-1 									; use math library function '?'
(2)   52/    9442 : C4 00                       ldi     (OSMATHLIBRARY-1) / 256
(2)   52/    9444 : 37                          xpah    P3
(2)   52/    9445 : C4 02                       ldi     (OSMATHLIBRARY-1) & 255
(2)   52/    9447 : 33                          xpal    P3
(2)   53/    9448 : C4 3F               	ldi 	'?'
(2)   54/    944A : 3F                  	xppc 	p3 													; convert to an integer (cannot return an error)
(2)   55/    944B : 90 4F               	jmp 	__EE_ProcessOperator 								; process the pending operator
(2)   56/    944D :                     ;
(2)   57/    944D :                     ;	Syntax errors, come here
(2)   58/    944D :                     ;
(2)   59/    944D :                     __EE_ExitSyntax:
(2)   60/    944D : C4 54               	ldi 	ERROR_SyntaxTerm 									; E = Syntax Error in term.
(2)   61/    944F : 01                  	xae
(2)   62/    9450 : 02                  	ccl
(2)   63/    9451 :                     ;
(2)   64/    9451 :                     ;	Any other error, or successful completion, come here.
(2)   65/    9451 :                     ;
(2)   66/    9451 :                     __EE_Exit:
(2)   67/    9451 : C6 03               	ld 		@3(p2) 												; drop result and pending operator space on stack
(2)   68/    9453 : (MACRO)             	pullp 	p3 													; restore P3
(2)   68/    9453 : C6 01                       ld              @1(p2)
(2)   68/    9455 : 33                          xpal    P3
(2)   68/    9456 : C6 01                       ld              @1(p2)
(2)   68/    9458 : 37                          xpah    P3
(2)   69/    9459 :                     
(2)   70/    9459 : C2 FB               	ld 		-5(p2) 												; copy result to correct slot
(2)   71/    945B : CA FE               	st 		-2(p2)
(2)   72/    945D : C2 FC               	ld 		-4(p2)
(2)   73/    945F : CA FF               	st 		-1(p2)
(2)   74/    9461 : C6 FE               	ld 		@-2(p2)												; make space for result, result always returned.
(2)   75/    9463 : 06                  	csa 														; get CY/L bit into A bit 7
(2)   76/    9464 : 3F                  	xppc 	p3 													; return
(2)   77/    9465 : 90 B8               	jmp 	EvaluateExpression 									; re-entrant.
(2)   78/    9467 :                     
(2)   79/    9467 :                     ; ****************************************************************************************************************
(2)   80/    9467 :                     ;	We know it is not a numeric constant, so check for special terms. First though we optimise it by 
(2)   81/    9467 :                     ;	checking bit 5 - if zero the code is @A-Z[\]^_ none of which are 'special' terms.
(2)   82/    9467 :                     ; ****************************************************************************************************************
(2)   83/    9467 :                     
(2)   84/    9467 :                     __EE_NotInteger:
(2)   85/    9467 : C1 00               	ld 		(p1) 												; look at character bit 5 (32)
(2)   86/    9469 : D4 20               	ani 	32 													; if this is zero it cannot be a special term 
(2)   87/    946B : 98 13               	jz 		__EE_IsVariable 									; as they are 32-63.
(2)   88/    946D :                     
(2)   89/    946D : (MACRO)             	lpi 	p3,CheckSpecialTerms-1 								; call the special terms routine.
(2)   89/    946D : C4 95                       ldi     (CHECKSPECIALTERMS-1) / 256
(2)   89/    946F : 37                          xpah    P3
(2)   89/    9470 : C4 43                       ldi     (CHECKSPECIALTERMS-1) & 255
(2)   89/    9472 : 33                          xpal    P3
(2)   90/    9473 : 3F                  	xppc 	p3
 AS V1.42 Beta [Bld 102] - source file vtl-2.asm(expression.asm) - page 22 - 12/29/2015 6:07:42


(2)   91/    9474 : C6 02               	ld 		@2(p2) 												; drop the result
(2)   92/    9476 : 06                  	csa
(2)   93/    9477 : 94 D8               	jp 		__EE_Exit  											; if CY/L = 0 then an error has occurred, return it.
(2)   94/    9479 : C6 FE               	ld 		@-2(p2) 											; restore result to TOS.
(2)   95/    947B : 40                  	lde  														; if E != 0 then the value has been processed and is on 
(2)   96/    947C : 9C 1E               	jnz 	__EE_ProcessOperator 								; the stack, so go process it
(2)   97/    947E : C6 02               	ld 		@2(p2) 												; drop the TOS as it is not valid.
(2)   98/    9480 :                     
(2)   99/    9480 :                     ; ****************************************************************************************************************
(2)  100/    9480 :                     ;										We now know this is a variable.
(2)  101/    9480 :                     ; ****************************************************************************************************************
(2)  102/    9480 :                     
(2)  103/    9480 :                     __EE_IsVariable:
(2)  104/    9480 : C1 00               	ld 		(p1) 												; calculate twice the character
(2)  105/    9482 : 02                  	ccl 
(2)  106/    9483 : F5 01               	add 	@1(p1) 												; add with bump of variable.
(2)  107/    9485 : D4 7E               	ani 	(0x3F * 2)											; same as (n & 0x3F) * 2
(2)  108/    9487 : 01                  	xae 														; put in E, use this as an index.
(2)  109/    9488 : (MACRO)             	lpi 	p3,Variables 										; point P3 to variables
(2)  109/    9488 : C4 0D                       ldi     (VARIABLES) / 256
(2)  109/    948A : 37                          xpah    P3
(2)  109/    948B : C4 00                       ldi     (VARIABLES) & 255
(2)  109/    948D : 33                          xpal    P3
(2)  110/    948E : C3 80               	ld 		-0x80(p3) 											; get low byte
(2)  111/    9490 : CE FE               	st 		@-2(p2) 											; push on stack, allow space for high byte
(2)  112/    9492 : C7 01               	ld 		@1(p3) 												; increment P3 to get high byte
(2)  113/    9494 : C3 80               	ld 		-0x80(p3) 											; get high byte
(2)  114/    9496 : CA 01               	st 		1(p2) 												; save on allocated stack space.
(2)  115/    9498 : 90 02               	jmp 	__EE_ProcessOperator
(2)  116/    949A :                     
(2)  117/    949A :                     __EE_NextTerm2: 												; the jump is too large.
(2)  118/    949A : 90 93               	jmp 	__EE_NextTerm
(2)  119/    949C :                     
(2)  120/    949C :                     ; ****************************************************************************************************************
(2)  121/    949C :                     ;		We now have two values on the stack and an operator, so apply the operator to the two values.
(2)  122/    949C :                     ; ****************************************************************************************************************
(2)  123/    949C :                     
(2)  124/    949C :                     __EE_ProcessOperator:
(2)  125/    949C : (MACRO)             	lpi 	p3,OSMathLibrary-1 									; point P3 to the OS Math Library.
(2)  125/    949C : C4 00                       ldi     (OSMATHLIBRARY-1) / 256
(2)  125/    949E : 37                          xpah    P3
(2)  125/    949F : C4 02                       ldi     (OSMATHLIBRARY-1) & 255
(2)  125/    94A1 : 33                          xpal    P3
(2)  126/    94A2 : C2 04               	ld 		4(p2) 												; get operator
(2)  127/    94A4 : D4 FC               	ani 	0xFC 												; clear bits 0,1
(2)  128/    94A6 : E4 3C               	xri 	0x3C 												; now will be zero for 3C..3F which is < = > ?
(2)  129/    94A8 : 9C 06               	jnz 	__EE_NotComparison
(2)  130/    94AA : (MACRO)             	lpi 	p3,CompareLibrary-1 								; if it is, we use this library instead
(2)  130/    94AA : C4 95                       ldi     (COMPARELIBRARY-1) / 256
(2)  130/    94AC : 37                          xpah    P3
(2)  130/    94AD : C4 0E                       ldi     (COMPARELIBRARY-1) & 255
(2)  130/    94AF : 33                          xpal    P3
(2)  131/    94B0 :                     __EE_NotComparison:
(2)  132/    94B0 : C2 04               	ld 		4(p2) 												; get operator
(2)  133/    94B2 : E4 2F               	xri 	'/'													; is it divide ?
(2)  134/    94B4 : 9C 02               	jnz 	__EE_NotDivide
(2)  135/    94B6 : E4 73               	xri 	'/'!'\\'											; if so, this will change it to \ unsigned divide for Math lib.
(2)  136/    94B8 :                     __EE_NotDivide:
(2)  137/    94B8 : E4 2F               	xri 	'/'													; unpick the test, but / will have changed to \ (backslash)
(2)  138/    94BA : 3F                  	xppc 	p3 													; do the operation.
 AS V1.42 Beta [Bld 102] - source file vtl-2.asm(expression.asm) - page 23 - 12/29/2015 6:07:42


(2)  139/    94BB : 06                  	csa 														; check for error.
(2)  140/    94BC : 94 08               	jp 		__EE_GetNextOperator 								; CY/L = 1, error
(2)  141/    94BE : C6 02               	ld 		@2(p2) 												; drop TOS - if divide by zero then stack unchanged.
(2)  142/    94C0 : C4 5A               	ldi 	ERROR_DivideZero 									; prepare for division by zero error.
(2)  143/    94C2 : 01                  	xae 														; the only error the Math Library can return from + - * /
(2)  144/    94C3 : 02                  	ccl 														; return error flag.
(2)  145/    94C4 :                     __EE_Exit2:
(2)  146/    94C4 : 90 8B               	jmp 	__EE_Exit 											; return if error.
(2)  147/    94C6 :                     
(2)  148/    94C6 :                     ; ****************************************************************************************************************
(2)  149/    94C6 :                     ;	Have successfully performed operation. First check if we have done division, and if so, save the remainder.
(2)  150/    94C6 :                     ; ****************************************************************************************************************
(2)  151/    94C6 :                     
(2)  152/    94C6 :                     __EE_GetNextOperator:
(2)  153/    94C6 : C2 02               	ld 		2(p2) 												; was it divide ?
(2)  154/    94C8 : E4 2F               	xri 	'/'
(2)  155/    94CA : 9C 0E               	jnz 	__EE_FindNextOperator
(2)  156/    94CC : (MACRO)             	lpi 	p3,Variables+('%' & 0x3F)*2 						; point P3 to remainder variable
(2)  156/    94CC : C4 0D                       ldi     (VARIABLES+('%' & 0X3F)*2) / 256
(2)  156/    94CE : 37                          xpah    P3
(2)  156/    94CF : C4 4A                       ldi     (VARIABLES+('%' & 0X3F)*2) & 255
(2)  156/    94D1 : 33                          xpal    P3
(2)  157/    94D2 : C2 FE               	ld 		-2(p2)												; copy remainder there.
(2)  158/    94D4 : CB 00               	st 		(p3)
(2)  159/    94D6 : C2 FF               	ld 		-1(p2)
(2)  160/    94D8 : CB 01               	st 		1(p3)
(2)  161/    94DA :                     
(2)  162/    94DA :                     ; ****************************************************************************************************************
(2)  163/    94DA :                     ;							Now find the next operator. NULL or ) ends an expression.
(2)  164/    94DA :                     ; ****************************************************************************************************************
(2)  165/    94DA :                     
(2)  166/    94DA :                     __EE_FindNextOperator:
(2)  167/    94DA : 03                  	scl 														; prepare for successful exit.
(2)  168/    94DB : C1 00               	ld 		(p1) 												; get next operator
(2)  169/    94DD : 98 E5               	jz 		__EE_Exit2 											; if end of line, exit
(2)  170/    94DF : E4 29               	xri 	')' 												; if close parenthesis, exit.
(2)  171/    94E1 : 98 E1               	jz 		__EE_Exit2
(2)  172/    94E3 : C5 01               	ld 		@1(p1) 												; refetch and bump
(2)  173/    94E5 : E4 20               	xri 	' ' 												; loop back if spaces
(2)  174/    94E7 : 98 F1               	jz 		__EE_FindNextOperator
(2)  175/    94E9 :                     
(2)  176/    94E9 : C1 FF               	ld 		-1(p1) 												; reload old character.
(2)  177/    94EB : CA 02               	st 		2(p2) 												; save as pending operation.
(2)  178/    94ED :                     
(2)  179/    94ED : E4 2B               	xri 	'+'
(2)  180/    94EF : 98 A9               	jz 		__EE_NextTerm2 										; go to next term if a valid operator.
(2)  181/    94F1 : E4 06               	xri 	'-'!'+'
(2)  182/    94F3 : 98 A5               	jz 		__EE_NextTerm2
(2)  183/    94F5 : E4 07               	xri 	'*'!'-'
(2)  184/    94F7 : 98 A1               	jz 		__EE_NextTerm2
(2)  185/    94F9 : E4 05               	xri 	'/'!'*'
(2)  186/    94FB : 98 9D               	jz 		__EE_NextTerm2
(2)  187/    94FD : E4 13               	xri 	'<'!'/'
(2)  188/    94FF : 98 99               	jz 		__EE_NextTerm2
(2)  189/    9501 : E4 01               	xri 	'='!'<'
(2)  190/    9503 : 98 95               	jz 		__EE_NextTerm2
(2)  191/    9505 : E4 03               	xri 	'>'!'='
(2)  192/    9507 : 98 91               	jz 		__EE_NextTerm2
(2)  193/    9509 :                     
(2)  194/    9509 : C4 4F               	ldi 	ERROR_Operator 										; bad operator error
 AS V1.42 Beta [Bld 102] - source file vtl-2.asm(expression.asm) - page 24 - 12/29/2015 6:07:42


(2)  195/    950B : 01                  	xae
(2)  196/    950C : 02                  	ccl
(2)  197/    950D : 90 B5               	jmp 	__EE_Exit2
(2)  198/    950F :                     
(2)  199/    950F :                     ; ****************************************************************************************************************
(2)  200/    950F :                     ;	
(2)  201/    950F :                     ;							This library provides functionality for >, = and <.
(2)  202/    950F :                     ;
(2)  203/    950F :                     ; ****************************************************************************************************************
(2)  204/    950F :                     
(2)  205/    950F :                     CompareLibrary:
(2)  206/    950F : 03                  	scl 														; calculate Stack2 - Stack1
(2)  207/    9510 : C2 02               	ld 		2(p2) 												; lower byte
(2)  208/    9512 : FA 00               	cad 	0(p2)
(2)  209/    9514 : 01                  	xae 														; save in E
(2)  210/    9515 : C2 03               	ld 		3(p2) 												; upper byte
(2)  211/    9517 : FA 01               	cad 	1(p2)
(2)  212/    9519 : 58                  	ore 														; or into E, now zero if equal.
(2)  213/    951A : 98 02               	jz 		__CL_ResultZero 
(2)  214/    951C : C4 01               	ldi 	1  													
(2)  215/    951E :                     __CL_ResultZero:												; A = 0 if result same, A = 1 if result different
(2)  216/    951E : E4 01               	xri 	1 													; A = 1 if result same, A = 1 if result different
(2)  217/    9520 : 01                  	xae 														; put in E
(2)  218/    9521 : C2 04               	ld 		4(p2) 												; get comparator
(2)  219/    9523 : E4 3D               	xri 	'=' 												; if it is '=', exit with E
(2)  220/    9525 : 98 12               	jz 		__CL_ExitE
(2)  221/    9527 :                     
(2)  222/    9527 : 06                  	csa 														; get not borrow from subtraction
(2)  223/    9528 : D4 80               	ani 	0x80 												; isolate carry
(2)  224/    952A : 98 02               	jz 		__CL_CarryClear
(2)  225/    952C : C4 01               	ldi 	1
(2)  226/    952E :                     __CL_CarryClear:												; now A = 1 : Carry set, A = 0 : Carry Clear
(2)  227/    952E : 01                   	xae 														; in E
(2)  228/    952F : C2 04                	ld 		4(p2) 												; if it is '>', exit with this value
(2)  229/    9531 : E4 3E                	xri 	'>'
(2)  230/    9533 : 98 04                	jz 		__CL_ExitE
(2)  231/    9535 : 40                   	lde 														; toggle E bit 0, e.g. reversing result.
(2)  232/    9536 : E4 01                	xri 	1
(2)  233/    9538 : 01                   	xae
(2)  234/    9539 :                     __CL_ExitE:
(2)  235/    9539 : C6 02               	ld 		@2(p2) 												; pop a value off
(2)  236/    953B : 40                  	lde 														; save E as LSB
(2)  237/    953C : CA 00               	st 		0(p2)
(2)  238/    953E : C4 00               	ldi 	0 													; MSB is zero, result is 0 or 1.
(2)  239/    9540 : CA 01               	st 		1(p2)
(2)  240/    9542 : 02                  	ccl 														; clear carry because we must to be okay, matches behaviour
(2)  241/    9543 : 3F                  	xppc 	p3 													; of Maths library.
(2)  242/    9544 :                     
(1)  215/    9544 :                     	include source\right_special.asm 							; r-expr specials (parenthesis,array,key,line)
(2)    1/    9544 :                     ; ****************************************************************************************************************
(2)    2/    9544 :                     ; ****************************************************************************************************************
(2)    3/    9544 :                     ;
(2)    4/    9544 :                     ;										Special Terms (Right Hand Side)
(2)    5/    9544 :                     ;
(2)    6/    9544 :                     ; ****************************************************************************************************************
(2)    7/    9544 :                     ; ****************************************************************************************************************
(2)    8/    9544 :                     ;
(2)    9/    9544 :                     ;	(<expr>)					Parenthesised expression
(2)   10/    9544 :                     ;	:<expr>)					Array access (relative to '&')
(2)   11/    9544 :                     ;	$ 							Read character from keyboard
 AS V1.42 Beta [Bld 102] - source file vtl-2.asm(right_special.asm) - page 25 - 12/29/2015 6:07:42


(2)   12/    9544 :                     ;	?							Read line and evaluate expression.
(2)   13/    9544 :                     ;
(2)   14/    9544 :                     ; ****************************************************************************************************************
(2)   15/    9544 :                     ; ****************************************************************************************************************
(2)   16/    9544 :                     ;
(2)   17/    9544 :                     ;	This function does special terms for the Right Hand Side. Returns CY/L = 0 Error, S -> A
(2)   18/    9544 :                     ;	If No Error is reported, E != 0 if processed, E = 0 if variable. If Error reported E is the Error Number.
(2)   19/    9544 :                     ;	Always returns a value on the stack.
(2)   20/    9544 :                     ;
(2)   21/    9544 :                     ; ****************************************************************************************************************
(2)   22/    9544 :                     ; ****************************************************************************************************************
(2)   23/    9544 :                     
(2)   24/    9544 :                     CheckSpecialTerms:
(2)   25/    9544 : C4 00               	ldi 	0
(2)   26/    9546 : CE FF               	st 		@-1(p2) 											; allocate space for result and clear it
(2)   27/    9548 : CE FF               	st 		@-1(p2)
(2)   28/    954A : (MACRO)             	pushp 	p3 													; save P3.
(2)   28/    954A : 37                          xpah    P3
(2)   28/    954B : CE FF                       st              @-1(p2)
(2)   28/    954D : 33                          xpal    P3
(2)   28/    954E : CE FF                       st              @-1(p2)
(2)   29/    9550 :                     
(2)   30/    9550 : C5 01               	ld 		@1(p1) 												; get character and skip over it
(2)   31/    9552 : E4 24               	xri 	'$'													; is it character in ?
(2)   32/    9554 : 9C 0E               	jnz 	__CST_NotCharacter
(2)   33/    9556 :                     
(2)   34/    9556 :                     ; ****************************************************************************************************************
(2)   35/    9556 :                     ;												$ Get Keystroke
(2)   36/    9556 :                     ; ****************************************************************************************************************
(2)   37/    9556 :                     
(2)   38/    9556 : (MACRO)             	lpi 	p3,GetChar-1 										; get character subroutine
(2)   38/    9556 : C4 91                       ldi     (GETCHAR-1) / 256
(2)   38/    9558 : 37                          xpah    P3
(2)   38/    9559 : C4 6D                       ldi     (GETCHAR-1) & 255
(2)   38/    955B : 33                          xpal    P3
(2)   39/    955C : 3F                  	xppc 	p3 													; call it
(2)   40/    955D : CA 02               	st 		2(p2) 												; save in return slot
(2)   41/    955F :                     __CST_ReturnDone:
(2)   42/    955F : C4 01               	ldi 	1 													; set E to nonzero
(2)   43/    9561 : 01                  	xae
(2)   44/    9562 : 90 41               	jmp 	__CST_SCLAndExit 									; set carry and exit.
(2)   45/    9564 :                     ;
(2)   46/    9564 :                     __CST_NotCharacter:
(2)   47/    9564 : E4 1B               	xri 	'?'!'$'												; is it expression in ?
(2)   48/    9566 : 9C 30               	jnz 	__CST_NotInput 
(2)   49/    9568 :                     
(2)   50/    9568 :                     ; ****************************************************************************************************************
(2)   51/    9568 :                     ;											? Get Line and evaluate it.
(2)   52/    9568 :                     ; ****************************************************************************************************************
(2)   53/    9568 :                     
(2)   54/    9568 : (MACRO)             	pushp 	p1 													; save P1
(2)   54/    9568 : 35                          xpah    P1
(2)   54/    9569 : CE FF                       st              @-1(p2)
(2)   54/    956B : 31                          xpal    P1
(2)   54/    956C : CE FF                       st              @-1(p2)
(2)   55/    956E : (MACRO)             	lpi 	p3,GetString-1 										; read string from keyboard
(2)   55/    956E : C4 91                       ldi     (GETSTRING-1) / 256
(2)   55/    9570 : 37                          xpah    P3
(2)   55/    9571 : C4 91                       ldi     (GETSTRING-1) & 255
(2)   55/    9573 : 33                          xpal    P3
 AS V1.42 Beta [Bld 102] - source file vtl-2.asm(right_special.asm) - page 26 - 12/29/2015 6:07:42


(2)   56/    9574 : (MACRO)             	lpi 	p1,KeyboardBuffer 								
(2)   56/    9574 : C4 0E                       ldi     (KEYBOARDBUFFER) / 256
(2)   56/    9576 : 35                          xpah    P1
(2)   56/    9577 : C4 00                       ldi     (KEYBOARDBUFFER) & 255
(2)   56/    9579 : 31                          xpal    P1
(2)   57/    957A : C4 50               	ldi 	KeyboardBufferSize 
(2)   58/    957C : 3F                  	xppc 	p3 
(2)   59/    957D : (MACRO)             	lpi 	p3,EvaluateExpression-1 							; evaluate this
(2)   59/    957D : C4 94                       ldi     (EVALUATEEXPRESSION-1) / 256
(2)   59/    957F : 37                          xpah    P3
(2)   59/    9580 : C4 1E                       ldi     (EVALUATEEXPRESSION-1) & 255
(2)   59/    9582 : 33                          xpal    P3
(2)   60/    9583 : 3F                  	xppc 	p3
(2)   61/    9584 : 94 08               	jp 		__CST_EvaluateCont 									; if error, don't copy result.
(2)   62/    9586 : C2 00               	ld 		0(p2) 												; copy result
(2)   63/    9588 : CA 06               	st 		6(p2)
(2)   64/    958A : C2 01               	ld 		1(p2)
(2)   65/    958C : CA 07               	st 		7(p2)
(2)   66/    958E :                     __CST_EvaluateCont:
(2)   67/    958E : C6 02               	ld 		@2(p2) 												; drop the return result.
(2)   68/    9590 : (MACRO)             	pullp 	p1 													; restore P1
(2)   68/    9590 : C6 01                       ld              @1(p2)
(2)   68/    9592 : 31                          xpal    P1
(2)   68/    9593 : C6 01                       ld              @1(p2)
(2)   68/    9595 : 35                          xpah    P1
(2)   69/    9596 : 90 C7               	jmp 	__CST_ReturnDone									; exit successfully.
(2)   70/    9598 :                     ;
(2)   71/    9598 :                     ;	Check for : or (
(2)   72/    9598 :                     ;
(2)   73/    9598 :                     __CST_NotInput:
(2)   74/    9598 : E4 05               	xri 	':'!'?'												; is it the array marker
(2)   75/    959A : 98 12               	jz 		__CST_ArrayOrParenthesis
(2)   76/    959C : E4 12               	xri 	':'!'('												; or the parenthesis (open bracket)
(2)   77/    959E : 98 0E               	jz 		__CST_ArrayOrParenthesis
(2)   78/    95A0 : C5 FF               	ld 		@-1(p1) 											; undo the bump.
(2)   79/    95A2 : C4 00               	ldi 	0 													; E = 0 not processed
(2)   80/    95A4 : 01                  	xae
(2)   81/    95A5 :                     __CST_SCLAndExit:
(2)   82/    95A5 : 03                  	scl 														; CY/L = 1 no error.
(2)   83/    95A6 :                     __CST_Exit:
(2)   84/    95A6 : (MACRO)             	pullp 	p3 													; restore P3
(2)   84/    95A6 : C6 01                       ld              @1(p2)
(2)   84/    95A8 : 33                          xpal    P3
(2)   84/    95A9 : C6 01                       ld              @1(p2)
(2)   84/    95AB : 37                          xpah    P3
(2)   85/    95AC : 06                  	csa 														; copy error flag to A.
(2)   86/    95AD : 3F                  	xppc 	p3
(2)   87/    95AE :                     
(2)   88/    95AE :                     ; ****************************************************************************************************************
(2)   89/    95AE :                     ;	:<expr> or (<expr>) - both evaluate and check the parenthesis value, then array does the array access
(2)   90/    95AE :                     ; ****************************************************************************************************************
(2)   91/    95AE :                     
(2)   92/    95AE :                     __CST_ArrayOrParenthesis:
(2)   93/    95AE : C1 FF               	ld 		-1(p1) 												; get the type (array or parenthesis)
(2)   94/    95B0 : CE FF               	st 		@-1(p2) 											; push on the stack so we know what type it was for later.
(2)   95/    95B2 : (MACRO)             	lpi 	p3,EvaluateExpression-1								; call the expression evaluator recursively.
(2)   95/    95B2 : C4 94                       ldi     (EVALUATEEXPRESSION-1) / 256
(2)   95/    95B4 : 37                          xpah    P3
(2)   95/    95B5 : C4 1E                       ldi     (EVALUATEEXPRESSION-1) & 255
(2)   95/    95B7 : 33                          xpal    P3
 AS V1.42 Beta [Bld 102] - source file vtl-2.asm(right_special.asm) - page 27 - 12/29/2015 6:07:42


(2)   96/    95B8 : 3F                  	xppc 	p3
(2)   97/    95B9 : C6 03               	ld 		@3(p2) 												; drop the type and result, but they are still physically there.
(2)   98/    95BB : 06                  	csa 														; check for error
(2)   99/    95BC : 94 E8               	jp 		__CST_Exit 											; if error occurred, then exit 
(2)  100/    95BE : C4 42               	ldi 	ERROR_Bracket 										; set E for missing close bracket error.
(2)  101/    95C0 : 01                  	xae
(2)  102/    95C1 : 02                  	ccl 														; clear carry , this means error.
(2)  103/    95C2 :                     
(2)  104/    95C2 : C1 00               	ld 		(p1) 												; get terminating character
(2)  105/    95C4 : E4 29               	xri 	')'													; which should be a close bracket
(2)  106/    95C6 : 9C DE               	jnz 	__CST_Exit 											; if not, exit with a missing close bracket error.
(2)  107/    95C8 : C5 01               	ld 		@1(p1) 												; skip over the closing bracket.
(2)  108/    95CA :                     
(2)  109/    95CA : C2 FF               	ld 		-1(p2) 												; get the operator ( or :
(2)  110/    95CC : 01                  	xae 														; save in E
(2)  111/    95CD : C2 FD               	ld 		-3(p2) 												; move value to correct position.
(2)  112/    95CF : CA 02               	st 		2(p2)
(2)  113/    95D1 : C2 FE               	ld 		-2(p2)
(2)  114/    95D3 : CA 03               	st 		3(p2)
(2)  115/    95D5 : 40                  	lde 														; get E
(2)  116/    95D6 : E4 28               	xri 	'(' 												; is it parenthesised expression
(2)  117/    95D8 : 98 CB               	jz 		__CST_SCLAndExit 									; if so, exit with E != 0 and CY/L = 1
(2)  118/    95DA :                     
(2)  119/    95DA :                     ; ****************************************************************************************************************
(2)  120/    95DA :                     ;	Now we know we had :<expr>) - so calculate & + <expr> * 2 and read what is there.
(2)  121/    95DA :                     ; ****************************************************************************************************************
(2)  122/    95DA :                     
(2)  123/    95DA : 02                  	ccl 	
(2)  124/    95DB : C2 02               	ld 		2(p2) 												; double the offset
(2)  125/    95DD : F2 02               	add 	2(p2)
(2)  126/    95DF : CA 02               	st 		2(p2)
(2)  127/    95E1 : C2 03               	ld 		3(p2)
(2)  128/    95E3 : F2 03               	add 	3(p2)
(2)  129/    95E5 : CA 03               	st 		3(p2)
(2)  130/    95E7 :                     
(2)  131/    95E7 : (MACRO)             	lpi 	p3,Variables+('&' & 0x3F) * 2 						; point P3 to '&'
(2)  131/    95E7 : C4 0D                       ldi     (VARIABLES+('&' & 0X3F) * 2) / 256
(2)  131/    95E9 : 37                          xpah    P3
(2)  131/    95EA : C4 4C                       ldi     (VARIABLES+('&' & 0X3F) * 2) & 255
(2)  131/    95EC : 33                          xpal    P3
(2)  132/    95ED : 02                  	ccl
(2)  133/    95EE : C2 02               	ld 		2(p2) 												; add &.Low to offset.low -> E
(2)  134/    95F0 : F3 00               	add 	0(p3)
(2)  135/    95F2 : 01                  	xae
(2)  136/    95F3 : C2 03               	ld 		3(p2) 												; add &.High to offset.high -> P3.H
(2)  137/    95F5 : F3 01               	add 	1(p3)
(2)  138/    95F7 : 37                  	xpah 	p3
(2)  139/    95F8 : 40                  	lde 														; E->P3.L ; P3 is now & + (offset * 2)
(2)  140/    95F9 : 33                  	xpal 	p3
(2)  141/    95FA : C3 00               	ld 		0(p3) 												; access array, store in return 
(2)  142/    95FC : CA 02               	st 		2(p2)
(2)  143/    95FE : C3 01               	ld 		1(p3)
(2)  144/    9600 : CA 03               	st 		3(p2)
(2)  145/    9602 : C4 FF               	ldi 	0xFF 												; set E to non-zero and exit.
(2)  146/    9604 : 01                  	xae
(2)  147/    9605 : 90 9E               	jmp 	__CST_SCLAndExit
(2)  148/    9607 :                     
(1)  216/    9607 :                     
(1)  217/    9607 :                     ; ****************************************************************************************************************
(1)  218/    9607 :                     ;									Table of 'Special' L-Expressions
 AS V1.42 Beta [Bld 102] - source file vtl-2.asm(statement.asm) - page 28 - 12/29/2015 6:07:42


(1)  219/    9607 :                     ; ****************************************************************************************************************
(1)  220/    9607 :                     
(1)  221/    9607 :                     SpecialsTable:
(1)  222/    9607 : (MACRO)             	special '#',__ST_Goto 										; # is goto
(1)  222/    9607 : 23                          db              '#'
(1)  222/    9608 : 12 93                       dw              (__ST_GOTO)-1
(1)  223/    960A : (MACRO)             	special ':',__ST_ArrayWrite 								; : is array write.
(1)  223/    960A : 3A                          db              ':'
(1)  223/    960B : BF 92                       dw              (__ST_ARRAYWRITE)-1
(1)  224/    960D : (MACRO)             	special '?',__ST_Print 										; ? is write expression or string literal.
(1)  224/    960D : 3F                          db              '?'
(1)  224/    960E : 40 92                       dw              (__ST_PRINT)-1
(1)  225/    9610 : (MACRO)             	special '$',__ST_CharacterOut 								; $ is write direct to output.
(1)  225/    9610 : 24                          db              '$'
(1)  225/    9611 : AA 92                       dw              (__ST_CHARACTEROUT)-1
(1)  226/    9613 : (MACRO)             	special '>',__ST_MachineCode 								; > is call machine code.
(1)  226/    9613 : 3E                          db              '>'
(1)  226/    9614 : 17 92                       dw              (__ST_MACHINECODE)-1
(1)  227/    9616 : (MACRO)             	special ')',SkipEndLineNextStatement 						; ) is a comment.
(1)  227/    9616 : 29                          db              ')'
(1)  227/    9617 : 69 93                       dw              (SKIPENDLINENEXTSTATEMENT)-1
(1)  228/    9619 : (MACRO)             	special '*',__ST_RamTop										; * is read only, cannot be changed, exit if set zero.
(1)  228/    9619 : 2A                          db              '*'
(1)  228/    961A : FB 91                       dw              (__ST_RAMTOP)-1
(1)  229/    961C : 00                  	db 		0 													; end marker.
(1)  230/    961D :                     
      68/    961D :                     	include source\listing.asm 									; program listing.
(1)    1/    961D :                     ; ****************************************************************************************************************
(1)    2/    961D :                     ; ****************************************************************************************************************
(1)    3/    961D :                     ;
(1)    4/    961D :                     ;											List Program 
(1)    5/    961D :                     ;
(1)    6/    961D :                     ;							Lists program Spectrum style, 4 lines at a time.
(1)    7/    961D :                     ;
(1)    8/    961D :                     ; ****************************************************************************************************************
(1)    9/    961D :                     ; ****************************************************************************************************************
(1)   10/    961D :                     
(1)   11/    961D :                     ListProgram:
(1)   12/    961D : (MACRO)             	pushp	p3 													; save return address
(1)   12/    961D : 37                          xpah    P3
(1)   12/    961E : CE FF                       st              @-1(p2)
(1)   12/    9620 : 33                          xpal    P3
(1)   12/    9621 : CE FF                       st              @-1(p2)
(1)   13/    9623 : C4 00               	ldi 	0 													; push zero (counter of lines printed) onto stack
(1)   14/    9625 : CE FF               	st 		@-1(p2)
(1)   15/    9627 : (MACRO)             	lpi 	p3,ProgramBase 										; load the base address onto TOS
(1)   15/    9627 : C4 0C                       ldi     (PROGRAMBASE) / 256
(1)   15/    9629 : 37                          xpah    P3
(1)   15/    962A : C4 FD                       ldi     (PROGRAMBASE) & 255
(1)   15/    962C : 33                          xpal    P3
(1)   16/    962D : C3 01               	ld 		1(p3) 												
(1)   17/    962F : CE FF               	st 		@-1(p2)
(1)   18/    9631 : C3 00               	ld 		0(p3)
(1)   19/    9633 : CE FF               	st 		@-1(p2)
(1)   20/    9635 :                     
(1)   21/    9635 :                     ; ****************************************************************************************************************
(1)   22/    9635 :                     ;									Main loop, come back to test if completed
(1)   23/    9635 :                     ; ****************************************************************************************************************
(1)   24/    9635 :                     
(1)   25/    9635 :                     __LPR_Loop:
 AS V1.42 Beta [Bld 102] - source file vtl-2.asm(listing.asm) - page 29 - 12/29/2015 6:07:42


(1)   26/    9635 : C2 00               	ld 		0(p2) 												; read TOS into P1
(1)   27/    9637 : 31                  	xpal 	p1
(1)   28/    9638 : C2 01               	ld 		1(p2)
(1)   29/    963A : 35                  	xpah 	p1
(1)   30/    963B : C1 00               	ld 		(p1) 												; read offset to next.
(1)   31/    963D : 98 58               	jz 		__LPR_Exit 											; exit if zero
(1)   32/    963F :                     
(1)   33/    963F :                     ; ****************************************************************************************************************
(1)   34/    963F :                     ;		   	 				  Print line number and space, clear screen if new page
(1)   35/    963F :                     ; ****************************************************************************************************************
(1)   36/    963F :                     
(1)   37/    963F : C1 02               _	ld 		2(p1) 												; push line# on stack
(1)   38/    9641 : CE FF               	st 		@-1(p2)
(1)   39/    9643 : C1 01               	ld 		1(p1)
(1)   40/    9645 : CE FF               	st 		@-1(p2)
(1)   41/    9647 : (MACRO)             	lpi 	p3,OSMathLibrary-1 									; convert it to ASCII.
(1)   41/    9647 : C4 00                       ldi     (OSMATHLIBRARY-1) / 256
(1)   41/    9649 : 37                          xpah    P3
(1)   41/    964A : C4 02                       ldi     (OSMATHLIBRARY-1) & 255
(1)   41/    964C : 33                          xpal    P3
(1)   42/    964D : (MACRO)             	lpi	 	p1,KeyboardBuffer+6
(1)   42/    964D : C4 0E                       ldi     (KEYBOARDBUFFER+6) / 256
(1)   42/    964F : 35                          xpah    P1
(1)   42/    9650 : C4 06                       ldi     (KEYBOARDBUFFER+6) & 255
(1)   42/    9652 : 31                          xpal    P1
(1)   43/    9653 : C4 24               	ldi 	'$'
(1)   44/    9655 : 3F                  	xppc 	p3
(1)   45/    9656 : (MACRO)             	lpi 	p3,Print-1 											; get ready to print
(1)   45/    9656 : C4 90                       ldi     (PRINT-1) / 256
(1)   45/    9658 : 37                          xpah    P3
(1)   45/    9659 : C4 AD                       ldi     (PRINT-1) & 255
(1)   45/    965B : 33                          xpal    P3
(1)   46/    965C : C2 02               	ld 		2(p2) 												; is it a clear screen ?
(1)   47/    965E : D4 03               	ani 	3
(1)   48/    9660 : 9C 03               	jnz 	__LPR_NoClear
(1)   49/    9662 : C4 0C               	ldi 	12 													; clear the screen
(1)   50/    9664 : 3F                  	xppc 	p3
(1)   51/    9665 :                     __LPR_NoClear:
(1)   52/    9665 : C4 00               	ldi 	0
(1)   53/    9667 : 3F                  	xppc 	p3
(1)   54/    9668 : C4 20               	ldi 	' '													; print a space
(1)   55/    966A : 3F                  	xppc 	p3
(1)   56/    966B :                     
(1)   57/    966B :                     ; ****************************************************************************************************************
(1)   58/    966B :                     ;											Print the line itself
(1)   59/    966B :                     ; ****************************************************************************************************************
(1)   60/    966B :                     
(1)   61/    966B : C2 00               	ld 		0(p2) 												; reget the address into P1
(1)   62/    966D : 31                  	xpal 	p1
(1)   63/    966E : C2 01               	ld 		1(p2)
(1)   64/    9670 : 35                  	xpah 	p1
(1)   65/    9671 : C5 03               	ld 		@3(p1) 												; skip space and line numbers, reading offset into A
(1)   66/    9673 : 01                  	xae 														; save offset into E temporarily
(1)   67/    9674 : C4 00               	ldi 	0 													; and print that
(1)   68/    9676 : 3F                  	xppc 	p3
(1)   69/    9677 : C4 0D               	ldi 	13													; print new line.
(1)   70/    9679 : 3F                  	xppc 	p3
(1)   71/    967A : 02                  	ccl 														; add offset to pointer
(1)   72/    967B : 40                  	lde
(1)   73/    967C : F2 00               	add 	0(p2)
 AS V1.42 Beta [Bld 102] - source file vtl-2.asm(listing.asm) - page 30 - 12/29/2015 6:07:42


(1)   74/    967E : CA 00               	st 		0(p2)
(1)   75/    9680 : C2 01               	ld 		1(p2)
(1)   76/    9682 : F4 00               	adi 	0
(1)   77/    9684 : CA 01               	st 		1(p2)
(1)   78/    9686 : AA 02               	ild 	2(p2) 												; increment and load counter
(1)   79/    9688 : D4 03               	ani 	3 													; if not reached 4.
(1)   80/    968A : 9C A9               	jnz 	__LPR_Loop											; and go round again
(1)   81/    968C :                     
(1)   82/    968C : (MACRO)             	lpi 	p3,GetChar-1 										; get keyboard character
(1)   82/    968C : C4 91                       ldi     (GETCHAR-1) / 256
(1)   82/    968E : 37                          xpah    P3
(1)   82/    968F : C4 6D                       ldi     (GETCHAR-1) & 255
(1)   82/    9691 : 33                          xpal    P3
(1)   83/    9692 : 3F                  	xppc 	p3 										
(1)   84/    9693 : E4 20               	xri 	' '													; if it is space
(1)   85/    9695 : 98 9E               	jz 		__LPR_Loop 											; list another page.
(1)   86/    9697 :                     ;
(1)   87/    9697 :                     ;	Exit
(1)   88/    9697 :                     ;
(1)   89/    9697 :                     __LPR_Exit:
(1)   90/    9697 : C6 03               	ld 		@3(p2) 												; throw away stacked address.
(1)   91/    9699 : (MACRO)             	pullp 	p3 													; pop return address and exit.
(1)   91/    9699 : C6 01                       ld              @1(p2)
(1)   91/    969B : 33                          xpal    P3
(1)   91/    969C : C6 01                       ld              @1(p2)
(1)   91/    969E : 37                          xpah    P3
(1)   92/    969F : 3F                  	xppc 	p3
      69/    96A0 :                     	include source\manager.asm 									; program memory management
(1)    1/    96A0 :                     ; ****************************************************************************************************************
(1)    2/    96A0 :                     ; ****************************************************************************************************************
(1)    3/    96A0 :                     ;
(1)    4/    96A0 :                     ;										Manages Program Space
(1)    5/    96A0 :                     ;	
(1)    6/    96A0 :                     ; ****************************************************************************************************************
(1)    7/    96A0 :                     ; ****************************************************************************************************************
(1)    8/    96A0 :                     
(1)    9/    96A0 :                     
(1)   10/    96A0 :                     UpdateCodeTop:
(1)   11/    96A0 : (MACRO)             	pushp 	p3
(1)   11/    96A0 : 37                          xpah    P3
(1)   11/    96A1 : CE FF                       st              @-1(p2)
(1)   11/    96A3 : 33                          xpal    P3
(1)   11/    96A4 : CE FF                       st              @-1(p2)
(1)   12/    96A6 : (MACRO)             	lpi 	p3,Variables 										; point P3 to the variables.
(1)   12/    96A6 : C4 0D                       ldi     (VARIABLES) / 256
(1)   12/    96A8 : 37                          xpah    P3
(1)   12/    96A9 : C4 00                       ldi     (VARIABLES) & 255
(1)   12/    96AB : 33                          xpal    P3
(1)   13/    96AC : C3 FD               	ld 		ProgramBase-Variables(p3) 							; load P1 with program base
(1)   14/    96AE : 31                  	xpal 	p1
(1)   15/    96AF : C3 FE               	ld 		ProgramBase-Variables+1(p3)
(1)   16/    96B1 : 35                  	xpah 	p1
(1)   17/    96B2 :                     __UCT_Loop:
(1)   18/    96B2 : C1 00               	ld 		(p1) 												; look at length byte.
(1)   19/    96B4 : 98 05               	jz 		__UCT_End 											; if zero found end.
(1)   20/    96B6 : 01                  	xae 														; put in E
(1)   21/    96B7 : C5 80               	ld 		@-0x80(p1) 											; go to next line.
(1)   22/    96B9 : 90 F7               	jmp 	__UCT_Loop 											; keep trying.
(1)   23/    96BB :                     ;
(1)   24/    96BB :                     __UCT_End:
 AS V1.42 Beta [Bld 102] - source file vtl-2.asm(manager.asm) - page 31 - 12/29/2015 6:07:42


(1)   25/    96BB : C5 01               	ld 		@1(p1) 												; skip over the final NULL end of program byte.
(1)   26/    96BD : 31                  	xpal 	p1 													; save P1 in & but preserve it
(1)   27/    96BE : CB 4C               	st 		('&' & 0x3F) * 2(p3) 								
(1)   28/    96C0 : 31                  	xpal 	p1
(1)   29/    96C1 : 35                  	xpah 	p1
(1)   30/    96C2 : CB 4D               	st 		('&' & 0x3F) * 2+1(p3) 								
(1)   31/    96C4 : 35                  	xpah 	p1
(1)   32/    96C5 : (MACRO)             	pullp 	p3 													; restore return
(1)   32/    96C5 : C6 01                       ld              @1(p2)
(1)   32/    96C7 : 33                          xpal    P3
(1)   32/    96C8 : C6 01                       ld              @1(p2)
(1)   32/    96CA : 37                          xpah    P3
(1)   33/    96CB : 3F                  	xppc 	p3 
 AS V1.42 Beta [Bld 102] - source file vtl-2.asm - page 32 - 12/29/2015 6:07:42


  symbol table (* = unused):
  ------------------------

*ARCHITECTURE :  i386-unknown-win32 - | *BIGENDIAN :                      0 - |
 BOOTMONITOR :                  210 - | *BRANCHEXT :                      0 - |
*CASESENSITIVE :                  0 - |  CHECKEQUALS :                 9400 C |
 CHECKSPECIALTERMS :           9544 C |  COMPARELIBRARY :              950F C |
*CONSTPI :        3.141592653589793 - | *DATE :                  12/29/2015 - |
 ERROR_BRACKET :                 42 - |  ERROR_DIVIDEZERO :              5A - |
 ERROR_OPERATOR :                4F - |  ERROR_QUOTE :                   51 - |
 ERROR_READONLY :                52 - |  ERROR_SYNTAX :                  53 - |
 ERROR_SYNTAXTERM :              54 - |  EVALUATEEXPRESSION :          941F C |
 EXECUTECODELINE :             9385 C |  EXECUTENEXTSTATEMENT :        936E C |
*FALSE :                          0 - | *FULLPMMU :                       1 - |
 GETCHAR :                     916E C |  GETSTRING :                   9192 C |
*HAS64 :                          1 - | *HASDSP :                         0 - |
*HASFPU :                         0 - | *HASPMMU :                        0 - |
*INEXTMODE :                      0 - | *INLWORDMODE :                    0 - |
*INMAXMODE :                      0 - | *INSRCMODE :                      0 - |
*INSUPMODE :                      0 - |  ISRUNNING :                    CFF - |
 KEYBOARDBUFFER :               E00 - |  KEYBOARDBUFFERSIZE :            50 - |
*LISTON :                         1 - |  LISTPROGRAM :                 961D C |
*MACEXP :                         1 - | *MOMCPU :                         C - |
*MOMCPUNAME :                 SC/MP - | *NESTMAX :                      100 - |
 OSMATHLIBRARY :                  3 - | *PACKING :                        0 - |
*PADDING :                        1 - |  PRINT :                       90AE C |
 PROGRAMBASE :                  CFD - |  RANDOMVARIABLE :                27 - |
*RELAXED :                        0 - |  SCREENCURSOR :                 C80 - |
 SCREENMIRROR :                 C00 - |  SKIPENDLINENEXTSTATEMENT :    936A C |
 SPECIALSTABLE :               9607 C |  START :                       90A8 C |
 SYSTEMVARIABLES :              D00 - |  TEST :                        9057 C |
*TIME :                     6:07:42 - | *TRUE :                           1 - |
 UPDATECODETOP :               96A0 C |  VARIABLES :                    D00 - |
*VERSION :                     142F - |  WAIT0 :                       9055 C |
 WAIT2 :                       9368 C | *_ :                           963F C |
 __CEQ_EXIT :                  941B C |  __CEQ_FAIL :                  9417 C |
 __CEQ_SKIPSPACES :            940C C |  __CL_CARRYCLEAR :             952E C |
 __CL_EXITE :                  9539 C |  __CL_RESULTZERO :             951E C |
 __CST_ARRAYORPARENTHESIS :    95AE C |  __CST_EVALUATECONT :          958E C |
 __CST_EXIT :                  95A6 C |  __CST_NOTCHARACTER :          9564 C |
 __CST_NOTINPUT :              9598 C |  __CST_RETURNDONE :            955F C |
 __CST_SCLANDEXIT :            95A5 C |  __EE_EXIT :                   9451 C |
 __EE_EXIT2 :                  94C4 C |  __EE_EXITSYNTAX :             944D C |
 __EE_FINDNEXTOPERATOR :       94DA C |  __EE_GETNEXTOPERATOR :        94C6 C |
 __EE_ISVARIABLE :             9480 C |  __EE_NEXTTERM :               942F C |
 __EE_NEXTTERM2 :              949A C |  __EE_NOTCOMPARISON :          94B0 C |
 __EE_NOTDIVIDE :              94B8 C |  __EE_NOTINTEGER :             9467 C |
 __EE_PROCESSOPERATOR :        949C C |  __ENS_CHECKSPECIALS :         93E7 C |
 __ENS_GETFIRSTCHARACTER :     93A7 C |  __ENS_NOTOGGLEMASK :          93A7 C |
 __ENS_RANDOMINITIALISED :     9393 C |  __ENS_SEARCHSPECIALS :        93ED C |
 __ENS_STANDARDASSIGNMENT :    93B5 C |  __ENS_STOP :                  935E C |
 __GCNOTLOWER [GETCHAR] :      918D C |  __GCWAITKEY [GETCHAR] :       9173 C |
 __GCWAITRELEASE [GETCHAR] :   917B C |  __GSBACKSPACE [GETSTRING] :   91ED C |
 __GSCONTROLKEY [GETSTRING] :  91D0 C |  __GSLOOP [GETSTRING] :        91A0 C |
 __LPR_EXIT :                  9697 C |  __LPR_LOOP :                  9635 C |
 __LPR_NOCLEAR :               9665 C |  __PRCLEARFROMMOVETO [PRINT] : 914E C |
 __PRCLEARLOOP [PRINT] :       9150 C |  __PRCLEARSCREEN [PRINT] :     914C C |
 __PRCOPY [PRINT] :            915A C |  __PREXIT [PRINT] :            9111 C |
 __PREXITNOCHECK [PRINT] :     9115 C |  __PRISCONTROLCHAR [PRINT] :   9123 C |
 __PRISRETURN [PRINT] :        9143 C |  __PRNOTASCII [PRINT] :        90EB C |
 AS V1.42 Beta [Bld 102] - source file vtl-2.asm - page 33 - 12/29/2015 6:07:42


 __PRPRINTCHARACTERA [PRINT] : 90CF C |  __PRPRINTSTRING [PRINT] :     90BD C |
 __PRSCROLLLOOP [PRINT] :      9103 C |  __PRUPDATECURSOR [PRINT] :    90F4 C |
 __STARR_DROP2_END :           930F C |  __STARR_END :                 9311 C |
 __STARR_NOCLOSEBRACKET :      930B C |  __STCHO_END :                 92BE C |
 __STGOTO_END :                9359 C |  __STGOTO_FOUND :              9356 C |
 __STGOTO_SEARCH :             933F C |  __STMAC_END :                 923F C |
 __STPRT_END :                 92A9 C |  __STPRT_ERROR :               92A5 C |
 __STPRT_LITCOMPLETE :         9292 C |  __STPRT_LITERAL :             927B C |
 __STPRT_LITLOOP :             9283 C |  __STTOP_END :                 9216 C |
 __STTOP_ERROR :               9212 C |  __ST_ARRAYWRITE :             92C0 C |
 __ST_CHARACTEROUT :           92AB C |  __ST_GOTO :                   9313 C |
 __ST_MACHINECODE :            9218 C |  __ST_PRINT :                  9241 C |
 __ST_RAMTOP :                 91FC C |  __UCT_END :                   96BB C |
 __UCT_LOOP :                  96B2 C |

    141 symbols
     29 unused symbols

 AS V1.42 Beta [Bld 102] - source file vtl-2.asm - page 34 - 12/29/2015 6:07:42


  defined macros:
  ---------------

CODE                                  | LPI                                  
PULLA                                 | PULLE                                
PULLP                                 | PUSHA                                
PUSHE                                 | PUSHP                                
SETV                                  | SPECIAL                              

     10 macros

 AS V1.42 Beta [Bld 102] - source file vtl-2.asm - page 35 - 12/29/2015 6:07:42


  codepages:
  ----------

STANDARD (0 changed characters)


0.02 seconds assembly time

   1505 lines source file
   1808 lines incl. macro expansions
      2 passes
      0 errors
      0 warnings
