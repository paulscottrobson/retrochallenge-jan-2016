 AS V1.42 Beta [Bld 102] - source file vtl2.asm - page 1 - 12/7/2015 19:42:52


       1/       0 :                     ; ****************************************************************************************************************
       2/       0 :                     ; ****************************************************************************************************************
       3/       0 :                     ;
       4/       0 :                     ;													VTL-2 SC/MP
       5/       0 :                     ;
       6/       0 :                     ; ****************************************************************************************************************
       7/       0 :                     ; ****************************************************************************************************************
       8/       0 :                     
       9/       0 :                     ; ****************************************************************************************************************
      10/       0 :                     ;												 Memory Allocation
      11/       0 :                     ; ****************************************************************************************************************
      12/       0 :                     
      13/       0 :                     	cpu 	sc/mp
      14/       0 :                     	
      15/       0 : =0xC00              ScreenMirror = 0xC00 											; Screen mirror, 128 bytes, 256 byte page boundary.
      16/       0 : =0xC80              ScreenCursor = ScreenMirror+0x80  								; Position on that screen (00..7F)
      17/       0 :                     
      18/       0 : =0xC90              KeyboardBuffer = ScreenMirror + 0x90 							; 74 character keyboard buffer
      19/       0 : =0x4A               KeyboardBufferSize = 74 										; max characters, excluding terminating NULL.
      20/       0 :                     
      21/       0 : =0xD00              VariableBase = 0xD00 											; Base of variables. Variables start from here, 2 bytes
      22/       0 :                     																; each, 6 bit ASCII (e.g. @,A,B,C)
      23/       0 :                     																; VTL-2 other variables work backwards from here.
      24/       0 :                     																	; must be on a page boundary.
      25/       0 :                     
      26/       0 : =0x3                MathLibrary = 3 												; Monitor Mathematics Routine Address
      27/       0 :                     
      28/       0 : =0x1000             ProgramSpace = 0x1000 											; Page with program memory.
      29/       0 :                     
      30/       0 : =0xFFF              StackSearch = 0xFFF 											; Search for stack space back from here.
      31/       0 :                     
      32/       0 :                     ; ****************************************************************************************************************
      33/       0 :                     ;														Macros
      34/       0 :                     ; ****************************************************************************************************************
      35/       0 :                     
      36/       0 :                     lpi	macro	ptr,addr
      37/       0 :                     	ldi 	(addr) / 256
      38/       0 :                     	xpah 	ptr
      39/       0 :                     	ldi 	(addr) & 255
      40/       0 :                     	xpal 	ptr
      41/       0 :                     	endm
      42/       0 :                     
      43/       0 :                     ; ****************************************************************************************************************
      44/       0 :                     ;													Main Program
      45/       0 :                     ; ****************************************************************************************************************
      46/       0 :                     
      47/    9000 :                     	org 	0x9000 												; the ROM starts here
      48/    9000 :                     
      49/    9000 : 68                  	db 		0x68												; this makes it boot straight into this ROM.
      50/    9001 :                     VTL2Boot:
      51/    9001 : (MACRO)             	lpi 	p2,StackSearch 										; possible top of stack, we check by working down.
      51/    9001 : C4 0F                       ldi     (STACKSEARCH) / 256
      51/    9003 : 36                          xpah    P2
      51/    9004 : C4 FF                       ldi     (STACKSEARCH) & 255
      51/    9006 : 32                          xpal    P2
      52/    9007 : C6 40               	ld 		@64(p2) 											; get round the 4:12 wrapping non emulation.
      53/    9009 :                     FindStackTop:
      54/    9009 : C4 75               	ldi 	0x75 												; write this at potential TOS
      55/    900B : CE C0               	st 		@-64(p2)
      56/    900D : E2 00               	xor 	(p2) 												; did the write work
 AS V1.42 Beta [Bld 102] - source file vtl2.asm - page 2 - 12/7/2015 19:42:52


      57/    900F : 9C F8               	jnz 	FindStackTop
      58/    9011 :                     
      59/    9011 : (MACRO)             	lpi 	p1,VariableBase
      59/    9011 : C4 0D                       ldi     (VARIABLEBASE) / 256
      59/    9013 : 35                          xpah    P1
      59/    9014 : C4 00                       ldi     (VARIABLEBASE) & 255
      59/    9016 : 31                          xpal    P1
      60/    9017 : C4 2A               	ldi 	42 													; A = $142
      61/    9019 : C9 02               	st 		2(p1)
      62/    901B : C4 01               	ldi 	1
      63/    901D : C9 03               	st 		3(p1)
      64/    901F :                     
      65/    901F : C4 20               	ldi 	0x20 												; set up & to $D20
      66/    9021 : C9 4C               	st 		76(p1)
      67/    9023 : C4 0D               	ldi 	0xD
      68/    9025 : C9 4D               	st 		77(p1)
      69/    9027 :                     
      70/    9027 : 35                  	xpah 	p1
      71/    9028 : C4 20               	ldi 	0x20
      72/    902A : 31                  	xpal 	p1
      73/    902B : C4 14               	ldi 	0x14
      74/    902D : C9 04               	st 		4(p1)
      75/    902F : C4 FF               	ldi 	0xFF
      76/    9031 : C9 05               	st 		5(p1)
      77/    9033 :                     	
      78/    9033 : (MACRO)             	lpi 	p3,Print-1
      78/    9033 : C4 90                       ldi     (PRINT-1) / 256
      78/    9035 : 37                          xpah    P3
      78/    9036 : C4 75                       ldi     (PRINT-1) & 255
      78/    9038 : 33                          xpal    P3
      79/    9039 : C4 0C               	ldi 	12
      80/    903B : 3F                  	xppc 	p3
      81/    903C : (MACRO)             	lpi 	p3,EvaluateExpression-1
      81/    903C : C4 91                       ldi     (EVALUATEEXPRESSION-1) / 256
      81/    903E : 37                          xpah    P3
      81/    903F : C4 C1                       ldi     (EVALUATEEXPRESSION-1) & 255
      81/    9041 : 33                          xpal    P3
      82/    9042 : (MACRO)             	lpi 	p1,Test
      82/    9042 : C4 90                       ldi     (TEST) / 256
      82/    9044 : 35                          xpah    P1
      82/    9045 : C4 6F                       ldi     (TEST) & 255
      82/    9047 : 31                          xpal    P1
      83/    9048 : 3F                  	xppc 	p3
      84/    9049 : 06                  	csa
      85/    904A : 94 09               	jp 		NoError
      86/    904C : (MACRO)             	lpi 	p3,Print-1
      86/    904C : C4 90                       ldi     (PRINT-1) / 256
      86/    904E : 37                          xpah    P3
      86/    904F : C4 75                       ldi     (PRINT-1) & 255
      86/    9051 : 33                          xpal    P3
      87/    9052 : C4 3F               	ldi 	'?'
      88/    9054 : 3F                  	xppc 	p3
      89/    9055 :                     NoError:
      90/    9055 : (MACRO)             	lpi 	p3,MathLibrary-1
      90/    9055 : C4 00                       ldi     (MATHLIBRARY-1) / 256
      90/    9057 : 37                          xpah    P3
      90/    9058 : C4 02                       ldi     (MATHLIBRARY-1) & 255
      90/    905A : 33                          xpal    P3
      91/    905B : (MACRO)             	lpi 	p1,KeyboardBuffer+10
      91/    905B : C4 0C                       ldi     (KEYBOARDBUFFER+10) / 256
 AS V1.42 Beta [Bld 102] - source file vtl2.asm - page 3 - 12/7/2015 19:42:52


      91/    905D : 35                          xpah    P1
      91/    905E : C4 9A                       ldi     (KEYBOARDBUFFER+10) & 255
      91/    9060 : 31                          xpal    P1
      92/    9061 : C4 24               	ldi 	'$'
      93/    9063 : 3F                  	xppc 	p3
      94/    9064 : (MACRO)             	lpi 	p3,Print-1
      94/    9064 : C4 90                       ldi     (PRINT-1) / 256
      94/    9066 : 37                          xpah    P3
      94/    9067 : C4 75                       ldi     (PRINT-1) & 255
      94/    9069 : 33                          xpal    P3
      95/    906A : C4 00               	ldi 	0
      96/    906C : 3F                  	xppc 	p3
      97/    906D :                     wait:
      98/    906D : 90 FE               	jmp 	wait
      99/    906F :                     
     100/    906F :                     
     101/    906F : 3F 2B 31 30 30 30   Test:db 	"?+1000",0
                    00 
     102/    9076 :                     
     103/    9076 :                     
     104/    9076 :                     	include Source\screen.asm 									; screen I/O stuff.
(1)    1/    9076 :                     ; ****************************************************************************************************************
(1)    2/    9076 :                     ; ****************************************************************************************************************
(1)    3/    9076 :                     ;
(1)    4/    9076 :                     ;											Screen I/O, VTL-2 ROM
(1)    5/    9076 :                     ;											=====================
(1)    6/    9076 :                     ;
(1)    7/    9076 :                     ;	Provides Character and String Input/Output functionality.
(1)    8/    9076 :                     ;
(1)    9/    9076 :                     ; ****************************************************************************************************************
(1)   10/    9076 :                     ; ****************************************************************************************************************
(1)   11/    9076 :                     
(1)   12/    9076 :                     ; ****************************************************************************************************************
(1)   13/    9076 :                     ; ****************************************************************************************************************
(1)   14/    9076 :                     ;
(1)   15/    9076 :                     ;	Print routine. Prints either character in A, or ASCIIZ string at P1 (if A is zero). Preserves all registers
(1)   16/    9076 :                     ;	except if printing string, P1 points to the character after the NULL terminator.
(1)   17/    9076 :                     ;
(1)   18/    9076 :                     ;	Scrolls automatically. Understands character codes 32-255, 8 (Backspace) 12 (Clear Screen) 13 (Carriage
(1)   19/    9076 :                     ;	Return). Others are currently ignored (except 0, see above). Note L/C values (97....) display those characters
(1)   20/    9076 :                     ;	in the ROM font *not* lower case :)
(1)   21/    9076 :                     ;
(1)   22/    9076 :                     ; ****************************************************************************************************************
(1)   23/    9076 :                     ; ****************************************************************************************************************
(1)   24/    9076 :                     
(1)   25/    9076 :                     Print:
(1)   26/    9076 :                     	section 	Print
(1)   27/    9076 :                     
(1)   28/    9076 : CE FF               	st 		@-1(p2) 											; save character on stack.
(1)   29/    9078 : 35                  	xpah 	p1
(1)   30/    9079 : CE FF               	st 		@-1(p2) 											; save P1 on the stack.
(1)   31/    907B : 31                  	xpal 	p1
(1)   32/    907C : CE FF               	st 		@-1(p2)
(1)   33/    907E : 01                  	xae 	
(1)   34/    907F : CE FF               	st 		@-1(p2) 											; save E on the stack.
(1)   35/    9081 :                     
(1)   36/    9081 : C2 03               	ld 		3(p2) 												; read character 
(1)   37/    9083 : 9C 12               	jnz 	__PRPrintCharacterA 								; if non zero print it on its own.
(1)   38/    9085 :                     
(1)   39/    9085 :                     __PRPrintString:
 AS V1.42 Beta [Bld 102] - source file vtl2.asm(screen.asm) - page 4 - 12/7/2015 19:42:52


(1)   40/    9085 : C2 01               	ld 		1(p2) 												; restore original P1
(1)   41/    9087 : 31                  	xpal 	p1
(1)   42/    9088 : C2 02               	ld 		2(p2)
(1)   43/    908A : 35                  	xpah 	p1 													; read character at P1.
(1)   44/    908B : C5 01               	ld 		@1(p1)
(1)   45/    908D : 01                  	xae 														; save in E.
(1)   46/    908E : 35                  	xpah 	p1 													; write P1 back.
(1)   47/    908F : CA 02               	st 		2(p2)
(1)   48/    9091 : 31                  	xpal 	p1
(1)   49/    9092 : CA 01               	st 		1(p2)
(1)   50/    9094 : 40                  	lde 														; get character from E
(1)   51/    9095 : 98 46               	jz 		__PRExitNoCheck 									; exit without loop check.
(1)   52/    9097 :                     ;
(1)   53/    9097 :                     ;	Print character in A now ; throughout it is stored in E.
(1)   54/    9097 :                     ;
(1)   55/    9097 :                     __PRPrintCharacterA:
(1)   56/    9097 : 01                  	xae 														; save character in E.
(1)   57/    9098 :                     ;
(1)   58/    9098 :                     ;	Read cursor and set P1 to that address
(1)   59/    9098 :                     ;
(1)   60/    9098 : C4 0C               	ldi 	ScreenCursor/256 									; set P1 to point to screen cursor
(1)   61/    909A : 35                  	xpah 	p1
(1)   62/    909B : C4 80               	ldi 	ScreenCursor&255
(1)   63/    909D : 31                  	xpal 	p1
(1)   64/    909E : C1 00               	ld 		0(p1) 												; put cursor position in P1.L
(1)   65/    90A0 : 31                  	xpal 	p1
(1)   66/    90A1 :                     ;
(1)   67/    90A1 :                     ;	Check for control
(1)   68/    90A1 :                     ;
(1)   69/    90A1 : 40                  	lde 														; look at character
(1)   70/    90A2 : D4 E0               	ani 	0xE0 												; is it code 0-31
(1)   71/    90A4 : 98 45               	jz 		__PRIsControlChar
(1)   72/    90A6 :                     ;
(1)   73/    90A6 :                     ;	Print non-control
(1)   74/    90A6 :                     ;
(1)   75/    90A6 : 40                  	lde 														; read character
(1)   76/    90A7 : 03                  	scl 														; CY/L clear if < 96
(1)   77/    90A8 : FC 60               	cai 	96 
(1)   78/    90AA : 06                  	csa 	 	 												; skip if carry set
(1)   79/    90AB : E4 80               	xri 	0x80													
(1)   80/    90AD : 94 04               	jp 		__PRNotASCII
(1)   81/    90AF : 40                  	lde 														; if ASCII make 6 bit.
(1)   82/    90B0 : D4 3F               	ani 	0x3F
(1)   83/    90B2 : 01                  	xae
(1)   84/    90B3 :                     __PRNotASCII:
(1)   85/    90B3 : 40                  	lde 														; get character.
(1)   86/    90B4 : C9 00               	st 		(p1) 												; save in shadow memory
(1)   87/    90B6 : 35                  	xpah 	p1 													; switch to VRAM, preserving A.
(1)   88/    90B7 : C4 00               	ldi 	0 													
(1)   89/    90B9 : 35                  	xpah 	p1
(1)   90/    90BA : CD 01               	st 		@1(p1) 												; save in screen memory, advance write position.
(1)   91/    90BC :                     ;
(1)   92/    90BC :                     ;	Write cursor position back from P1.L
(1)   93/    90BC :                     ;
(1)   94/    90BC :                     __PRUpdateCursor:
(1)   95/    90BC : C4 0C               	ldi		ScreenCursor / 256 									; set P1 to point to screen cursor, restore position to P1
(1)   96/    90BE : 35                  	xpah 	p1
(1)   97/    90BF : C4 80               	ldi 	ScreenCursor & 255 
(1)   98/    90C1 : 31                  	xpal 	p1 													; after this, adjusted cursor position is in AC.
(1)   99/    90C2 : C9 00               	st 		(p1) 												; write back in cursor position
 AS V1.42 Beta [Bld 102] - source file vtl2.asm(screen.asm) - page 5 - 12/7/2015 19:42:52


(1)  100/    90C4 : 94 13               	jp 		__PRExit 											; if position is off the bottom then scroll.
(1)  101/    90C6 :                     ;
(1)  102/    90C6 :                     ;	Scroll display
(1)  103/    90C6 :                     ;
(1)  104/    90C6 : C4 0C               	ldi 	(ScreenMirror+16) / 256 							; point P1 to 2nd line.
(1)  105/    90C8 : 35                  	xpah 	p1
(1)  106/    90C9 : C4 10               	ldi 	(ScreenMirror+16) & 255
(1)  107/    90CB :                     __PRScrollLoop:
(1)  108/    90CB : 31                  	xpal 	p1
(1)  109/    90CC : C1 00               	ld 		0(p1) 												; copy char to previous line
(1)  110/    90CE : C9 F0               	st 		-16(p1)
(1)  111/    90D0 : C5 01               	ld 		@1(p1) 												; bump pointer.
(1)  112/    90D2 : 31                  	xpal 	p1
(1)  113/    90D3 : 94 F6               	jp 		__PRScrollLoop
(1)  114/    90D5 : C4 70               	ldi 	128-16 												; clear from and move to last line
(1)  115/    90D7 : 90 3D               	jmp 	__PRClearFromMoveTo
(1)  116/    90D9 :                     ;
(1)  117/    90D9 :                     ;	Exit screen drawing routine.
(1)  118/    90D9 :                     ;
(1)  119/    90D9 :                     __PRExit:
(1)  120/    90D9 : C2 03               	ld 		3(p2) 												; if character was zero, loop
(1)  121/    90DB : 98 A8               	jz 		__PRPrintString 									; back as printing string at P1.
(1)  122/    90DD :                     __PRExitNoCheck:
(1)  123/    90DD : C6 01               	ld 		@1(p2) 												; restore E
(1)  124/    90DF : 01                  	xae
(1)  125/    90E0 : C6 01               	ld 		@1(p2) 												; restore P1
(1)  126/    90E2 : 31                  	xpal 	p1
(1)  127/    90E3 : C6 01               	ld 		@1(p2)
(1)  128/    90E5 : 35                  	xpah 	p1
(1)  129/    90E6 : C6 01               	ld 		@1(p2)												; restore A
(1)  130/    90E8 : 3F                  	xppc 	p3 													; return
(1)  131/    90E9 : 90 8B               	jmp 	Print 												; make re-entrant.
(1)  132/    90EB :                     ;
(1)  133/    90EB :                     ;	Check for supported control characters 8 (Backspace) 12 (Clear) 13 (Carriage Return)
(1)  134/    90EB :                     ;
(1)  135/    90EB :                     __PRIsControlChar:
(1)  136/    90EB : 40                  	lde 														; restore character.
(1)  137/    90EC : E4 0D               	xri 	13 													; carriage return ? (13)
(1)  138/    90EE : 98 1B               	jz 		__PRIsReturn
(1)  139/    90F0 : E4 01               	xri 	13!12 												; form feed ? (12)
(1)  140/    90F2 : 98 20               	jz 		__PRClearScreen
(1)  141/    90F4 : E4 04               	xri 	12!8 												; backspace ? (8)
(1)  142/    90F6 : 9C E1               	jnz 	__PRExit 
(1)  143/    90F8 :                     ;
(1)  144/    90F8 :                     ;	Handle backspace (8)
(1)  145/    90F8 :                     ;
(1)  146/    90F8 : 31                  	xpal 	p1 													; check cursor position is zero
(1)  147/    90F9 : 98 DE               	jz 		__PRExit 											; if it is, cannot backspace so exit.
(1)  148/    90FB : 31                  	xpal 	p1  												; put it back
(1)  149/    90FC : C5 FF               	ld 		@-1(p1)												; move it back one
(1)  150/    90FE : C4 20               	ldi 	' '	 												; erase in shadow
(1)  151/    9100 : C9 00               	st 		(p1)
(1)  152/    9102 : C4 00               	ldi 	0 													; point P1 to VRAM
(1)  153/    9104 : 35                  	xpah 	p1
(1)  154/    9105 : C4 20               	ldi 	' '													; erase in VRAM
(1)  155/    9107 : C9 00               	st 		(p1)
(1)  156/    9109 : 90 B1               	jmp 	__PRUpdateCursor 									; and exit
(1)  157/    910B :                     ;
(1)  158/    910B :                     ;	Handle carriage return (13)
(1)  159/    910B :                     ;
 AS V1.42 Beta [Bld 102] - source file vtl2.asm(screen.asm) - page 6 - 12/7/2015 19:42:52


(1)  160/    910B :                     __PRIsReturn:
(1)  161/    910B : 31                  	xpal 	p1 													; cursor position in A
(1)  162/    910C : D4 F0               	ani 	0xF0 												; start of current line
(1)  163/    910E : 02                  	ccl 														; down one line
(1)  164/    910F : F4 10               	adi 	0x10 	
(1)  165/    9111 : 31                  	xpal 	p1 													; put it back in P1.
(1)  166/    9112 : 90 A8               	jmp 	__PRUpdateCursor
(1)  167/    9114 :                     ;
(1)  168/    9114 :                     ;	Handle clear screen (12)
(1)  169/    9114 :                     ;
(1)  170/    9114 :                     __PRClearScreen:
(1)  171/    9114 : C4 00               	ldi 	0 													; clear shadow memory from here.
(1)  172/    9116 :                     ;
(1)  173/    9116 :                     ;	From position A, clear the memory in the shadow screen to the end, copy the shadow screen to VRAM
(1)  174/    9116 :                     ;	then use position A as the new cursor position.
(1)  175/    9116 :                     ;
(1)  176/    9116 :                     __PRClearFromMoveTo:
(1)  177/    9116 : CE FF               	st 		@-1(p2) 											; save this position, the cursor goes here.
(1)  178/    9118 :                     __PRClearLoop:
(1)  179/    9118 : 31                  	xpal 	p1 													; save position in P1.
(1)  180/    9119 : C4 20               	ldi 	' '													; write space there.
(1)  181/    911B : CD 01               	st 		@1(p1)
(1)  182/    911D : 31                  	xpal 	p1
(1)  183/    911E : 94 F8               	jp 		__PRClearLoop 										; until reached shadow memory start.
(1)  184/    9120 : C4 00               	ldi 	0 													; now copy shadow memory to screen memory.
(1)  185/    9122 :                     __PRCopy:
(1)  186/    9122 : 31                  	xpal 	p1 													; set up P1.L
(1)  187/    9123 : C4 0C               	ldi 	ScreenMirror/256 									; point to shadow memory.
(1)  188/    9125 : 35                  	xpah 	p1 													
(1)  189/    9126 : C1 00               	ld 		(p1) 												; read shadow memory
(1)  190/    9128 : 35                  	xpah 	p1 													; zero P1.H preserving A
(1)  191/    9129 : C4 00               	ldi 	0
(1)  192/    912B : 35                  	xpah 	p1
(1)  193/    912C : CD 01               	st 		@1(p1) 												; save and increment p1
(1)  194/    912E : 31                  	xpal 	p1 
(1)  195/    912F : 94 F1               	jp 		__PRCopy 											; keep doing till all copied.
(1)  196/    9131 : C6 01               	ld 		@1(p2) 												; read cursor position
(1)  197/    9133 : 31                  	xpal 	p1 													; put in P1.L
(1)  198/    9134 : 90 86               	jmp 	__PRUpdateCursor
(1)  199/    9136 :                     
(1)  200/    9136 :                     	endsection 	Print
(1)  201/    9136 :                     
(1)  202/    9136 :                     ; ****************************************************************************************************************
(1)  203/    9136 :                     ; ****************************************************************************************************************
(1)  204/    9136 :                     ;
(1)  205/    9136 :                     ;		Input a single character into A. Case is converted to Upper. All registers preserved except A
(1)  206/    9136 :                     ;
(1)  207/    9136 :                     ; ****************************************************************************************************************
(1)  208/    9136 :                     ; ****************************************************************************************************************
(1)  209/    9136 :                     
(1)  210/    9136 :                     GetChar:
(1)  211/    9136 :                     	section 	GetChar
(1)  212/    9136 : C4 08               	ldi 	0x8 												; set P1 to $8xx, and save P1.H
(1)  213/    9138 : 35                  	xpah 	p1
(1)  214/    9139 : CE FF               	st 		@-1(p2)
(1)  215/    913B :                     __GCWaitKey: 													; wait for key press
(1)  216/    913B : C1 00               	ld 		0(p1)
(1)  217/    913D : 94 FC               	jp 		__GCWaitKey
(1)  218/    913F : D4 7F               	ani	 	0x7F 												; throw away the upper bit.
(1)  219/    9141 : CA FF               	st 		-1(p2) 												; save it below stack
 AS V1.42 Beta [Bld 102] - source file vtl2.asm(screen.asm) - page 7 - 12/7/2015 19:42:52


(1)  220/    9143 :                     __GCWaitRelease:
(1)  221/    9143 : C1 00               	ld 		0(p1) 												; wait for release
(1)  222/    9145 : D4 80               	ani 	0x80
(1)  223/    9147 : 9C FA               	jnz 	__GCWaitRelease
(1)  224/    9149 : C6 01               	ld 		@1(p2) 												; restore P1.H
(1)  225/    914B : 35                  	xpah 	p1
(1)  226/    914C : C2 FE               	ld 		-2(p2) 												; restore saved value
(1)  227/    914E : 02                  	ccl
(1)  228/    914F : F4 20               	adi 	0x20												; will make lower case -ve
(1)  229/    9151 : 94 02               	jp 		__GCNotLower
(1)  230/    9153 : FC 20               	cai 	0x20 												; capitalise
(1)  231/    9155 :                     __GCNotLower:
(1)  232/    9155 : F4 E0               	adi 	0xE0 												; fix up.
(1)  233/    9157 : 3F                  	xppc 	p3 													; return
(1)  234/    9158 : 90 DC               	jmp 	GetChar 											; make re-entrant
(1)  235/    915A :                     	endsection 	GetChar
(1)  236/    915A :                     
(1)  237/    915A :                     ; ****************************************************************************************************************
(1)  238/    915A :                     ; ****************************************************************************************************************
(1)  239/    915A :                     ;
(1)  240/    915A :                     ;			Read an ASCIIZ string from keyboard into P1 of length A maximum (excludes NULL terminator)
(1)  241/    915A :                     ;
(1)  242/    915A :                     ; ****************************************************************************************************************
(1)  243/    915A :                     ; ****************************************************************************************************************
(1)  244/    915A :                     
(1)  245/    915A :                     GetString:
(1)  246/    915A :                     	section GetString
(1)  247/    915A : CE FF               	st 		@-1(p2) 											; save length on stack.
(1)  248/    915C : 37                  	xpah 	p3 													; save P3 on stack
(1)  249/    915D : CE FF               	st 		@-1(p2)
(1)  250/    915F : 33                  	xpal 	p3
(1)  251/    9160 : CE FF               	st 		@-1(p2)
(1)  252/    9162 : 40                  	lde
(1)  253/    9163 : CE FF               	st 		@-1(p2) 											; save E on stack
(1)  254/    9165 : C4 00               	ldi 	0 													; set E (current position) to A.
(1)  255/    9167 : 01                  	xae
(1)  256/    9168 :                     __GSLoop:
(1)  257/    9168 : (MACRO)             	lpi 	p3,Print-1 											; print the prompt (half coloured square)
(1)  257/    9168 : C4 90                       ldi     (PRINT-1) / 256
(1)  257/    916A : 37                          xpah    P3
(1)  257/    916B : C4 75                       ldi     (PRINT-1) & 255
(1)  257/    916D : 33                          xpal    P3
(1)  258/    916E : C4 9B               	ldi 	155
(1)  259/    9170 : 3F                  	xppc 	p3
(1)  260/    9171 : (MACRO)             	lpi 	p3,GetChar-1 										; get a character
(1)  260/    9171 : C4 91                       ldi     (GETCHAR-1) / 256
(1)  260/    9173 : 37                          xpah    P3
(1)  260/    9174 : C4 35                       ldi     (GETCHAR-1) & 255
(1)  260/    9176 : 33                          xpal    P3
(1)  261/    9177 : 3F                  	xppc 	p3
(1)  262/    9178 : C9 80               	st 		-0x80(p1) 											; save it in the current position.
(1)  263/    917A : (MACRO)             	lpi 	p3,Print-1 											; erase the prompt with backspace.
(1)  263/    917A : C4 90                       ldi     (PRINT-1) / 256
(1)  263/    917C : 37                          xpah    P3
(1)  263/    917D : C4 75                       ldi     (PRINT-1) & 255
(1)  263/    917F : 33                          xpal    P3
(1)  264/    9180 : C4 08               	ldi 	8
(1)  265/    9182 : 3F                  	xppc 	p3
(1)  266/    9183 : C1 80               	ld 		-0x80(p1) 											; re-read character
(1)  267/    9185 : D4 E0               	ani 	0xE0 												; check if control key.
 AS V1.42 Beta [Bld 102] - source file vtl2.asm(screen.asm) - page 8 - 12/7/2015 19:42:52


(1)  268/    9187 : 98 0F               	jz 		__GSControlKey 
(1)  269/    9189 : 40                  	lde 														; get current position.
(1)  270/    918A : E2 03               	xor 	3(p2) 												; reached maximum length of buffer ?
(1)  271/    918C : 98 DA               	jz 		__GSLoop 											; if so, ignore the key and go round again.
(1)  272/    918E : C1 80               	ld 		-0x80(p1) 											; get character and print it
(1)  273/    9190 : 3F                  	xppc 	p3
(1)  274/    9191 : C4 01               	ldi 	1 													; increment E
(1)  275/    9193 : 02                  	ccl
(1)  276/    9194 : 70                  	ade
(1)  277/    9195 : 01                  	xae
(1)  278/    9196 : 90 D0               	jmp 	__GSLoop 											; and go round again.
(1)  279/    9198 :                     ;
(1)  280/    9198 :                     ;	Handle control keys (0x00-0x1F)
(1)  281/    9198 :                     ;
(1)  282/    9198 :                     __GSControlKey:
(1)  283/    9198 : C1 80               	ld 		-0x80(p1) 											; get typed in key
(1)  284/    919A : E4 08               	xri 	8 													; check for backspace.
(1)  285/    919C : 98 17               	jz 		__GSBackspace 			
(1)  286/    919E : E4 05               	xri 	8!13 												; check for CR
(1)  287/    91A0 : 9C C6               	jnz 	__GSLoop 											; if not, ignore the key.
(1)  288/    91A2 :                     ;
(1)  289/    91A2 :                     ;	Carriage Return, ending input.
(1)  290/    91A2 :                     ;
(1)  291/    91A2 : C9 80               	st 		-0x80(p1) 											; replace the CR written with NULL terminator.
(1)  292/    91A4 : C4 0D               	ldi 	13 													; print CR
(1)  293/    91A6 : 3F                  	xppc 	p3
(1)  294/    91A7 : C6 01               	ld 		@1(p2) 												; pop E
(1)  295/    91A9 : 01                  	xae
(1)  296/    91AA : C6 01               	ld 		@1(p2) 												; pop P3
(1)  297/    91AC : 33                  	xpal 	p3
(1)  298/    91AD : C6 01               	ld 		@1(p2)
(1)  299/    91AF : 37                  	xpah 	p3
(1)  300/    91B0 : C6 01               	ld 		@1(p2)												; pop A
(1)  301/    91B2 : 3F                  	xppc 	p3 													; return
(1)  302/    91B3 : 90 A5               	jmp 	GetString 											; make re-entrant (probably unneccessary !!)
(1)  303/    91B5 :                     ;
(1)  304/    91B5 :                     ;	Backspace entered
(1)  305/    91B5 :                     ;
(1)  306/    91B5 :                     __GSBackspace
(1)  307/    91B5 : 40                  	lde 														; if E = 0 we can't backspace any further.
(1)  308/    91B6 : 98 B0               	jz 		__GSLoop
(1)  309/    91B8 : C4 08               	ldi 	8 													; backspace on screen
(1)  310/    91BA : 3F                  	xppc 	p3
(1)  311/    91BB : C4 FF               	ldi 	0xFF 												; decrement E
(1)  312/    91BD : 02                  	ccl
(1)  313/    91BE : 70                  	ade
(1)  314/    91BF : 01                  	xae
(1)  315/    91C0 : 90 A6               	jmp 	__GSLoop 											; and go round again.
(1)  316/    91C2 :                     
(1)  317/    91C2 :                     	endsection GetString
(1)  318/    91C2 :                     
     105/    91C2 :                     	include Source\evaluate.asm 								; evaluate an expression.
(1)    1/    91C2 :                     ; ****************************************************************************************************************
(1)    2/    91C2 :                     ; ****************************************************************************************************************
(1)    3/    91C2 :                     ;
(1)    4/    91C2 :                     ;											Evaluate, VTL-2 ROM
(1)    5/    91C2 :                     ;											===================
(1)    6/    91C2 :                     ;
(1)    7/    91C2 :                     ;	R-Expression and Term Evaluators, including specials.
(1)    8/    91C2 :                     ;
 AS V1.42 Beta [Bld 102] - source file vtl2.asm(evaluate.asm) - page 9 - 12/7/2015 19:42:52


(1)    9/    91C2 :                     ; ****************************************************************************************************************
(1)   10/    91C2 :                     ; ****************************************************************************************************************
(1)   11/    91C2 :                     
(1)   12/    91C2 :                     ; ****************************************************************************************************************
(1)   13/    91C2 :                     ; ****************************************************************************************************************
(1)   14/    91C2 :                     ;
(1)   15/    91C2 :                     ;				Evaluate an expression from P1, and push it on the stack. CY/L set on error
(1)   16/    91C2 :                     ;
(1)   17/    91C2 :                     ; ****************************************************************************************************************
(1)   18/    91C2 :                     ; ****************************************************************************************************************
(1)   19/    91C2 :                     
(1)   20/    91C2 :                     EvaluateExpression:
(1)   21/    91C2 :                     
(1)   22/    91C2 :                     	section EvaluateExpression
(1)   23/    91C2 :                     
(1)   24/    91C2 : =0x4                EXExprResult = 4
(1)   25/    91C2 :                     
(1)   26/    91C2 : CE FD               	st 		@-3(p2) 											; save A, allow space for answer lde
(1)   27/    91C4 : CE FF               	st 		@-1(p2) 											; save E
(1)   28/    91C6 : 37                  	xpah 	p3 												
(1)   29/    91C7 : CE FF               	st 		@-1(p2) 											; save P3
(1)   30/    91C9 : 33                  	xpal 	p3
(1)   31/    91CA : CE FF               	st 		@-1(p2)
(1)   32/    91CC : C4 00               	ldi 	0 													; clear final result, not technically required
(1)   33/    91CE : CA 04               	st 		EXExprResult(p2)
(1)   34/    91D0 : CA 05               	st 		EXExprResult+1(p2)
(1)   35/    91D2 :                     ;
(1)   36/    91D2 :                     ;	Evaluate the first term.
(1)   37/    91D2 :                     ;
(1)   38/    91D2 : (MACRO)             	lpi 	p3,EvaluateTerm-1 									; evaluate term and push on stack.
(1)   38/    91D2 : C4 92                       ldi     (EVALUATETERM-1) / 256
(1)   38/    91D4 : 37                          xpah    P3
(1)   38/    91D5 : C4 82                       ldi     (EVALUATETERM-1) & 255
(1)   38/    91D7 : 33                          xpal    P3
(1)   39/    91D8 : 3F                  	xppc 	p3
(1)   40/    91D9 : 06                  	csa
(1)   41/    91DA : 94 1A               	jp 		__EXTermOkay 										; term is okay if CY/L = 0
(1)   42/    91DC :                     
(1)   43/    91DC :                     __EXError:
(1)   44/    91DC : 03                  	scl 														; return with CY/L set and erroneous value.
(1)   45/    91DD : 90 01               	jmp 	__EXCopyAndExit
(1)   46/    91DF :                     
(1)   47/    91DF :                     __EXClearCarryCopyAndExit 										; come here if finished successfully.
(1)   48/    91DF : 02                  	ccl
(1)   49/    91E0 :                     __EXCopyAndExit:	
(1)   50/    91E0 : C6 01               	ld 		@1(p2) 												; copy stack to result space
(1)   51/    91E2 : CA 05               	st 		EXExprResult+1(p2)
(1)   52/    91E4 : C6 01               	ld 		@1(p2)
(1)   53/    91E6 : CA 05               	st 		EXExprResult+1(p2)
(1)   54/    91E8 :                     
(1)   55/    91E8 : C6 01               	ld 		@1(p2) 												; restore P3,E,A
(1)   56/    91EA : 33                  	xpal 	p3
(1)   57/    91EB : C6 01               	ld 		@1(p2)
(1)   58/    91ED : 37                  	xpah 	p3
(1)   59/    91EE : C6 01               	ld 		@1(p2)
(1)   60/    91F0 : 01                  	xae
(1)   61/    91F1 : C6 01               	ld 		@1(p2)
(1)   62/    91F3 : 3F                  	xppc 	p3 													; return and make re-entrant.
(1)   63/    91F4 : 90 CC               	jmp 	EvaluateExpression 
(1)   64/    91F6 :                     ;
 AS V1.42 Beta [Bld 102] - source file vtl2.asm(evaluate.asm) - page 10 - 12/7/2015 19:42:52


(1)   65/    91F6 :                     ;	Successfully acquired first term / main loop.
(1)   66/    91F6 :                     ;
(1)   67/    91F6 :                     __EXTermOkay:
(1)   68/    91F6 : C1 00               	ld 		(p1) 												; look at next character to find operator.
(1)   69/    91F8 : 98 E5               	jz 		__EXClearCarryCopyAndExit							; if zero, then end of string.
(1)   70/    91FA : E4 29               	xri 	')'													; found a close bracket, ending paren expr
(1)   71/    91FC : 98 E1               	jz 		__EXClearCarryCopyAndExit 							; keep P1 pointing to that close bracket though.
(1)   72/    91FE :                     
(1)   73/    91FE : C5 01               	ld 		@1(p1) 												; get character and bump
(1)   74/    9200 : E4 20               	xri 	' '													; if space, keep going
(1)   75/    9202 : 98 F2               	jz 		__EXTermOkay
(1)   76/    9204 : E4 08               	xri 	'('!' '												; found an open bracket which would be comment
(1)   77/    9206 : 98 D7               	jz 		__EXClearCarryCopyAndExit
(1)   78/    9208 : C1 FF               	ld 		-1(p1) 												; get this, this is the operator.
(1)   79/    920A : 01                  	xae 														; save in E.
(1)   80/    920B : (MACRO)             	lpi 	p3,EvaluateTerm-1 	
(1)   80/    920B : C4 92                       ldi     (EVALUATETERM-1) / 256
(1)   80/    920D : 37                          xpah    P3
(1)   80/    920E : C4 82                       ldi     (EVALUATETERM-1) & 255
(1)   80/    9210 : 33                          xpal    P3
(1)   81/    9211 : 3F                  	xppc 	p3 													; get the second term
(1)   82/    9212 : 06                  	csa 														; if CY/L = 0 do operator.
(1)   83/    9213 : 94 04               	jp 		__EXDoOperator
(1)   84/    9215 :                     ;
(1)   85/    9215 :                     ;	Drop an unwanted value and exit with error flag set
(1)   86/    9215 :                     ;
(1)   87/    9215 :                     __EXDropValueAndExitWithError:
(1)   88/    9215 : C6 02               	ld 		@2(p2) 												; throw away the 2nd operand
(1)   89/    9217 : 90 C3               	jmp 	__EXError 											; and exit.
(1)   90/    9219 :                     ;
(1)   91/    9219 :                     ;	Do the operator in E.
(1)   92/    9219 :                     ;
(1)   93/    9219 :                     __EXDoOperator:
(1)   94/    9219 : 40                  	lde
(1)   95/    921A : E4 2F               	xri 	'/'													; convert signed division to unsigned division
(1)   96/    921C : 9C 03               	jnz 	__EXNotDivision
(1)   97/    921E : C4 5C               	ldi 	'\\'
(1)   98/    9220 : 01                  	xae
(1)   99/    9221 :                     __EXNotDivision:
(1)  100/    9221 : 40                  	lde
(1)  101/    9222 : E4 3D               	xri 	'='													; check for comparisons. = > <
(1)  102/    9224 : 98 2A               	jz 		__EXDoCompare
(1)  103/    9226 : E4 03               	xri		'>'!'='
(1)  104/    9228 : 98 26               	jz 		__EXDoCompare
(1)  105/    922A : E4 02               	xri 	'<'!'>'
(1)  106/    922C : 98 22               	jz 		__EXDoCompare
(1)  107/    922E :                     
(1)  108/    922E : (MACRO)             	lpi 	p3,MathLibrary-1 									; do the maths operations + - * /
(1)  108/    922E : C4 00                       ldi     (MATHLIBRARY-1) / 256
(1)  108/    9230 : 37                          xpah    P3
(1)  108/    9231 : C4 02                       ldi     (MATHLIBRARY-1) & 255
(1)  108/    9233 : 33                          xpal    P3
(1)  109/    9234 : 40                  	lde 	
(1)  110/    9235 : 3F                  	xppc 	p3 	
(1)  111/    9236 : 06                  	csa 														; if CY/L = 0 then try and get another term.
(1)  112/    9237 : D4 80               	ani 	0x80
(1)  113/    9239 : 9C DA               	jnz 	__EXDropValueAndExitWithError 						; if set drop the value and exit with error.
(1)  114/    923B : 40                  	lde 														; check if it was division
(1)  115/    923C : E4 5C               	xri 	'\\'
(1)  116/    923E : 9C B6               	jnz 	__EXTermOkay 										; if not it's fine, exit.
 AS V1.42 Beta [Bld 102] - source file vtl2.asm(evaluate.asm) - page 11 - 12/7/2015 19:42:52


(1)  117/    9240 : (MACRO)             	lpi 	p3,VariableBase+('%' & 0x3F) * 2					; point to the '%' variable.
(1)  117/    9240 : C4 0D                       ldi     (VARIABLEBASE+('%' & 0X3F) * 2) / 256
(1)  117/    9242 : 37                          xpah    P3
(1)  117/    9243 : C4 4A                       ldi     (VARIABLEBASE+('%' & 0X3F) * 2) & 255
(1)  117/    9245 : 33                          xpal    P3
(1)  118/    9246 : C2 FE               	ld 		-2(p2) 												; copy remainder to % variable
(1)  119/    9248 : CB 00               	st 		(p3)
(1)  120/    924A : C2 FF               	ld 		-1(p2)
(1)  121/    924C : CB 01               	st 		1(p3)
(1)  122/    924E :                     __EXTermOkay2:
(1)  123/    924E : 90 A6               	jmp 	__EXTermOkay 										; loop round to get the next operator.
(1)  124/    9250 :                     ;
(1)  125/    9250 :                     ;	Do the comparison in E (yields 1 or 0)
(1)  126/    9250 :                     ;
(1)  127/    9250 :                     __EXDoCompare:
(1)  128/    9250 : C2 02               	ld 		2(p2) 												; do the subtraction comparison
(1)  129/    9252 : 03                  	scl
(1)  130/    9253 : FA 00               	cad 	0(p2)
(1)  131/    9255 : CA 00               	st 		0(p2)
(1)  132/    9257 : C2 03               	ld 		3(p2)
(1)  133/    9259 : FA 01               	cad 	1(p2)
(1)  134/    925B : DA 00               	or 		0(p2)												; A = 0 if equal
(1)  135/    925D : 37                  	xpah 	p3 													; save temporarily in P3.H
(1)  136/    925E : C4 00               	ldi 	0
(1)  137/    9260 : CA 02               	st 		2(p2)												; zero the result. 
(1)  138/    9262 : CA 03               	st 		3(p2)
(1)  139/    9264 : C6 02               	ld 		@2(p2) 												; drop the 2nd value off the stack.
(1)  140/    9266 : 40                  	lde 														; check for < 
(1)  141/    9267 : E4 3C               	xri 	'<'	
(1)  142/    9269 : 98 13               	jz 		__EXLessThan
(1)  143/    926B : E4 01               	xri 	'<'!'='												; check for =
(1)  144/    926D : 98 0A               	jz 		__EXEquals
(1)  145/    926F :                     
(1)  146/    926F : 37                  	xpah 	p3 													; greater than test
(1)  147/    9270 : 98 DC               	jz 		__EXTermOkay2 										; if equal then it is false.
(1)  148/    9272 : 06                  	csa 														; for >= requires carry set
(1)  149/    9273 : 94 D9               	jp 		__EXTermOkay2 										; exit if clear.
(1)  150/    9275 :                     __EXReturnTrue:
(1)  151/    9275 : AA 00               	ild 	0(p2) 												; return 1 rather than 0.
(1)  152/    9277 : 90 D5               	jmp 	__EXTermOkay2
(1)  153/    9279 :                     
(1)  154/    9279 :                     __EXEquals:														; equal test
(1)  155/    9279 : 37                  	xpah 	p3 													; get zero test.
(1)  156/    927A : 98 F9               	jz 		__EXReturnTrue										; if zero, return 1.
(1)  157/    927C : 90 D0               	jmp 	__EXTermOkay2
(1)  158/    927E :                     
(1)  159/    927E :                     __EXLessThan:													; < test
(1)  160/    927E : 06                  	csa 														; look at carry
(1)  161/    927F : 94 F4               	jp 		__EXReturnTrue										; if carry clear then <
(1)  162/    9281 : 90 CB               	jmp 	__EXTermOkay2 										; pop and continue.
(1)  163/    9283 :                     
(1)  164/    9283 :                     
(1)  165/    9283 :                     	endsection EvaluateExpression
(1)  166/    9283 :                     
(1)  167/    9283 :                     ; ****************************************************************************************************************
(1)  168/    9283 :                     ; ****************************************************************************************************************
(1)  169/    9283 :                     ;
(1)  170/    9283 :                     ;					Evaluate a single term from P1 and push it on the stack. CY/L set on error
(1)  171/    9283 :                     ;
(1)  172/    9283 :                     ;	Terms can be:
 AS V1.42 Beta [Bld 102] - source file vtl2.asm(evaluate.asm) - page 12 - 12/7/2015 19:42:52


(1)  173/    9283 :                     ;
(1)  174/    9283 :                     ;		A numeric constant (e.g. "46")
(1)  175/    9283 :                     ;		A parenthesised expression ( (5+2) )
(1)  176/    9283 :                     ;		An array expression :42)
(1)  177/    9283 :                     ;		A system variable (e.g. $ or ?)
(1)  178/    9283 :                     ;		A variable (all other values 32-95)
(1)  179/    9283 :                     ;
(1)  180/    9283 :                     ;	Registers are unchanged except P1, which points to the erroneous character, or the next character.
(1)  181/    9283 :                     ;
(1)  182/    9283 :                     ; ****************************************************************************************************************
(1)  183/    9283 :                     ; ****************************************************************************************************************
(1)  184/    9283 :                     
(1)  185/    9283 :                     EvaluateTerm:
(1)  186/    9283 :                     
(1)  187/    9283 :                     	section EvaluateTerm
(1)  188/    9283 :                     
(1)  189/    9283 : =0x4                EVTermResult = 4 												; offset in stack to result.
(1)  190/    9283 :                     
(1)  191/    9283 : CE FD               	st 		@-3(p2) 											; save A, reserving room for the result.
(1)  192/    9285 : 40                  	lde 														; save E
(1)  193/    9286 : CE FF               	st 		@-1(p2) 	
(1)  194/    9288 : 37                  	xpah 	p3 													; save P3
(1)  195/    9289 : CE FF               	st 		@-1(p2)
(1)  196/    928B : 33                  	xpal	p3
(1)  197/    928C : CE FF               	st 		@-1(p2)
(1)  198/    928E :                     
(1)  199/    928E : C4 00               	ldi 	0 													; blank the result on the stack
(1)  200/    9290 : CA 04               	st 		EVTermResult(p2) 									; not strictly necessary :)
(1)  201/    9292 : CA 05               	st 		EVTermResult+1(p2)
(1)  202/    9294 : 90 02               	jmp 	__ETFindTerm
(1)  203/    9296 :                     
(1)  204/    9296 :                     __ETSkipSpace:
(1)  205/    9296 : C5 01               	ld 		@1(p1) 												; bump P1
(1)  206/    9298 :                     __ETFindTerm:
(1)  207/    9298 : C1 00               	ld 		(p1) 												; read the first term character
(1)  208/    929A : 03                  	scl
(1)  209/    929B : FC 20               	cai 	32													; if space, skip over it and try again.
(1)  210/    929D : 98 F7               	jz 		__ETSkipSpace
(1)  211/    929F : D4 C0               	ani 	0xC0												; should be in range 00-3F to be 32-95 (legal chars)
(1)  212/    92A1 : 03                  	scl
(1)  213/    92A2 : 9C 1D               	jnz 	__ETExit 											; if not, exit with error.
(1)  214/    92A4 :                     
(1)  215/    92A4 : C1 00               	ld 		(p1) 												; read term first character again
(1)  216/    92A6 : 03                  	scl
(1)  217/    92A7 : FC 3A               	cai 	'9'+1 												; if >= '9' will be +ve
(1)  218/    92A9 : 94 24               	jp 		__ETTermNotConstant
(1)  219/    92AB : F4 8A               	adi 	128+10 												; if < '0' will be +ve
(1)  220/    92AD : 94 20               	jp 		__ETTermNotConstant
(1)  221/    92AF :                     ;
(1)  222/    92AF :                     ;	Term is an ASCII Constant
(1)  223/    92AF :                     ;
(1)  224/    92AF : (MACRO)             	lpi 	p3,MathLibrary-1 									; use Math library to convert to integer.
(1)  224/    92AF : C4 00                       ldi     (MATHLIBRARY-1) / 256
(1)  224/    92B1 : 37                          xpah    P3
(1)  224/    92B2 : C4 02                       ldi     (MATHLIBRARY-1) & 255
(1)  224/    92B4 : 33                          xpal    P3
(1)  225/    92B5 : C4 3F               	ldi 	'?'													; function ASCII->Int, cannot fail as first digit numeric
(1)  226/    92B7 : 3F                  	xppc 	p3
(1)  227/    92B8 :                     ;
(1)  228/    92B8 :                     ;	Result on TOS - have to reposition past the stacked SC/MP registers.
 AS V1.42 Beta [Bld 102] - source file vtl2.asm(evaluate.asm) - page 13 - 12/7/2015 19:42:52


(1)  229/    92B8 :                     ;
(1)  230/    92B8 :                     __ETSucceed:
(1)  231/    92B8 : C6 01               	ld 		@1(p2)												; put result in its proper place
(1)  232/    92BA : CA 05               	st 		EVTermResult+1(p2) 									; unstacking TOS.
(1)  233/    92BC : C6 01               	ld 		@1(p2)
(1)  234/    92BE : CA 05               	st 		EVTermResult+1(p2)
(1)  235/    92C0 :                     __ETCCLAndExit:
(1)  236/    92C0 : 02                  	ccl 														; clear carry indicating success
(1)  237/    92C1 :                     __ETExit:
(1)  238/    92C1 : C6 01               	ld 		@1(p2) 												; restore P3
(1)  239/    92C3 : 33                  	xpal 	p3
(1)  240/    92C4 : C6 01               	ld 		@1(p2)
(1)  241/    92C6 : 37                  	xpah 	p3
(1)  242/    92C7 : C6 01               	ld 		@1(p2) 												; restore E
(1)  243/    92C9 : 01                  	xae
(1)  244/    92CA : C6 01               	ld 		@1(p2) 												; restore A, leaving the result on the tack
(1)  245/    92CC : 3F                  	xppc 	p3 													; return
(1)  246/    92CD : 90 B4               	jmp 	EvaluateTerm 										; make re-entrant
(1)  247/    92CF :                     ;
(1)  248/    92CF :                     ;	P1 still points to first non space, which is in range 33-95. It is not a numeric character.
(1)  249/    92CF :                     ;
(1)  250/    92CF :                     __ETTermNotConstant:
(1)  251/    92CF :                     
(1)  252/    92CF : C1 00               	ld 		(p1) 												; read character
(1)  253/    92D1 : E4 3A               	xri 	':'													; array check ?
(1)  254/    92D3 : 98 2E               	jz 		__ETIsParenType 					
(1)  255/    92D5 : E4 12               	xri 	':'!'('												; parenthesis check ?
(1)  256/    92D7 : 98 2A               	jz 		__ETIsParenType
(1)  257/    92D9 :                     ;
(1)  258/    92D9 :                     ;	System variable checks.
(1)  259/    92D9 :                     ;
(1)  260/    92D9 : (MACRO)             	lpi 	p3,TermSystemVariableCheck-1 						; this routine checks for system variables.
(1)  260/    92D9 : C4 93                       ldi     (TERMSYSTEMVARIABLECHECK-1) / 256
(1)  260/    92DB : 37                          xpah    P3
(1)  260/    92DC : C4 4E                       ldi     (TERMSYSTEMVARIABLECHECK-1) & 255
(1)  260/    92DE : 33                          xpal    P3
(1)  261/    92DF : C5 01               	ld 		@1(p1)												; read the variable name and bump, finally.
(1)  262/    92E1 : 3F                  	xppc 	p3 													; call it
(1)  263/    92E2 : 06                  	csa 														; if CY/L is clear, this has done the work.
(1)  264/    92E3 : 94 D3               	jp 		__ETSucceed 										; and the result is on the stack, so process it.
(1)  265/    92E5 : C6 02               	ld 		@2(p2) 												; throw away the saved value
(1)  266/    92E7 :                     ;
(1)  267/    92E7 :                     ;	Okay, finally we think it's just a normal variable. We copy it in, don't bother shoving it on the stack.
(1)  268/    92E7 :                     ;
(1)  269/    92E7 : C1 FF               	ld 		-1(p1) 												; read the variable name and skip over it
(1)  270/    92E9 : 02                  	ccl
(1)  271/    92EA : F1 FF               	add 	-1(p1) 												; double it.
(1)  272/    92EC : D4 7E               	ani 	0x7E 												; arrangement is 6 bit ASCII, this is 3F x 2
(1)  273/    92EE : 33                  	xpal 	p3
(1)  274/    92EF : C4 0D               	ldi 	VariableBase/256 									; point P3 to the variables
(1)  275/    92F1 : 37                  	xpah 	p3
(1)  276/    92F2 : C7 01               	ld 		@1(p3) 												; read low 
(1)  277/    92F4 : CA 04               	st 		EVTermResult(p2) 									; copy to stack space
(1)  278/    92F6 : C3 00               	ld 		(p3) 												; same for high
(1)  279/    92F8 : CA 05               	st 		EVTermResult+1(p2)
(1)  280/    92FA : 90 C4               	jmp 	__ETCCLAndExit 										; clear carry and exit.
(1)  281/    92FC :                     
(1)  282/    92FC :                     __ETSucceed2:													; allows extended jump from end of array code.
(1)  283/    92FC : 90 BA               	jmp 	__ETSucceed
(1)  284/    92FE :                     
 AS V1.42 Beta [Bld 102] - source file vtl2.asm(evaluate.asm) - page 14 - 12/7/2015 19:42:52


(1)  285/    92FE :                     __ETFailParen:
(1)  286/    92FE : C6 02               	ld 		@2(p2) 												; throw away the index value as error
(1)  287/    9300 : 03                  	scl
(1)  288/    9301 : 90 BE               	jmp 	__ETExit 											; and exit with failure.
(1)  289/    9303 :                     ;
(1)  290/    9303 :                     ;	Parenthesis (expr) or Array :expr)
(1)  291/    9303 :                     ;
(1)  292/    9303 :                     __ETIsParenType:
(1)  293/    9303 : C5 01               	ld 		@1(p1) 												; read the type and save in E so we know what it was.
(1)  294/    9305 : 01                  	xae
(1)  295/    9306 : (MACRO)             	lpi 	p3,EvaluateExpression-1 							; evaluate the sub-expression.
(1)  295/    9306 : C4 91                       ldi     (EVALUATEEXPRESSION-1) / 256
(1)  295/    9308 : 37                          xpah    P3
(1)  295/    9309 : C4 C1                       ldi     (EVALUATEEXPRESSION-1) & 255
(1)  295/    930B : 33                          xpal    P3
(1)  296/    930C : 3F                  	xppc 	p3 
(1)  297/    930D : 06                  	csa 														; if carry set, error occurred
(1)  298/    930E : D4 80               	ani 	0x80
(1)  299/    9310 : 9C AF               	jnz 	__ETExit
(1)  300/    9312 :                     ;
(1)  301/    9312 :                     ;	Look for )
(1)  302/    9312 :                     ;
(1)  303/    9312 :                     __ETFindClosure:
(1)  304/    9312 : C1 00               	ld 		(p1) 												; what's next ?
(1)  305/    9314 : 98 E8               	jz 		__ETFailParen 										; if nothing, exit with fail (end of string)
(1)  306/    9316 : C5 01               	ld 		@1(p1) 												; read it with bumping
(1)  307/    9318 : E4 20               	xri 	' ' 												; is it a space character ?
(1)  308/    931A : 98 F6               	jz 		__ETFindClosure 									; if so, try the next one.
(1)  309/    931C : E4 09               	xri 	' '!')'												; check it was close brackets ?
(1)  310/    931E : 9C DE               	jnz 	__ETFailParen 										; if not, exit with fail as both end in close bracket.
(1)  311/    9320 :                     
(1)  312/    9320 : 40                  	lde 														; was it :nnn) or (nnn)
(1)  313/    9321 : E4 28               	xri 	'('
(1)  314/    9323 : 98 93               	jz 		__ETSucceed 										; if '(' exit with value on TOS.
(1)  315/    9325 :                     ;
(1)  316/    9325 :                     ;	Now it is array type e.g. :expr) so we have to do the array lookup.
(1)  317/    9325 :                     ;
(1)  318/    9325 : 02                  	ccl 														; otherwise, it's an array reference.
(1)  319/    9326 : C2 00               	ld 		0(p2)  												; double TOS as it is word orientated
(1)  320/    9328 : F2 00               	add 	0(p2)
(1)  321/    932A : CA 00               	st 		0(p2)
(1)  322/    932C : C2 01               	ld 		1(p2)
(1)  323/    932E : F2 01               	add 	1(p2)
(1)  324/    9330 : CA 01               	st 		1(p2) 												; p2 is now double the index.
(1)  325/    9332 : C4 0D               	ldi 	VariableBase/256 									; point P3 to the program last byte variable (&)
(1)  326/    9334 : 37                  	xpah 	p3
(1)  327/    9335 : C4 4C               	ldi 	('&' & 0x3F) * 2
(1)  328/    9337 : 33                  	xpal 	p3 
(1)  329/    9338 : 02                  	ccl
(1)  330/    9339 : C2 00               	ld 		0(p2)												; get offset
(1)  331/    933B : F3 00               	add 	0(p3) 												; add top of program memory
(1)  332/    933D : 01                  	xae 														; put in E temporarily
(1)  333/    933E : C2 01               	ld 		1(p2) 												; repeat for MSB
(1)  334/    9340 : F3 01               	add 	1(p3)
(1)  335/    9342 : 37                  	xpah 	p3 													; put in P3.H
(1)  336/    9343 : 40                  	lde 														; get E temporary
(1)  337/    9344 : 33                  	xpal 	p3 													; put in P3.L - P3 now the address to access
(1)  338/    9345 : C3 00               	ld 		0(p3) 												; so access it
(1)  339/    9347 : CA 00               	st 		0(p2)												; and override the array index
(1)  340/    9349 : C3 01               	ld 		1(p3)
 AS V1.42 Beta [Bld 102] - source file vtl2.asm(evaluate.asm) - page 15 - 12/7/2015 19:42:52


(1)  341/    934B : CA 01               	st 		1(p2) 
(1)  342/    934D : 90 AD               	jmp 	__ETSucceed2 										; and we are done.
(1)  343/    934F :                     
(1)  344/    934F :                     	endsection EvaluateTerm
(1)  345/    934F :                     
(1)  346/    934F :                     ; ****************************************************************************************************************
(1)  347/    934F :                     ; ****************************************************************************************************************
(1)  348/    934F :                     ;
(1)  349/    934F :                     ;		A is a variable whose value has been requested. Returns single value. This is used for non
(1)  350/    934F :                     ;		standard variables, things like $ and ? which have side-effects.
(1)  351/    934F :                     ;
(1)  352/    934F :                     ;		If legitimate value return CY/L = 0, else return CY/L = 1
(1)  353/    934F :                     ;
(1)  354/    934F :                     ; ****************************************************************************************************************
(1)  355/    934F :                     ; ****************************************************************************************************************
(1)  356/    934F :                     
(1)  357/    934F :                     TermSystemVariableCheck:
(1)  358/    934F :                     
(1)  359/    934F :                     	section ReadSystemVariables
(1)  360/    934F :                     
(1)  361/    934F : 37                  	xpah 	p3													; save P3 preserving A, reserve space for result.
(1)  362/    9350 : CE FD               	st 		@-3(p2)
(1)  363/    9352 : 33                  	xpal 	p3
(1)  364/    9353 : CE FF               	st 		@-1(p2)
(1)  365/    9355 :                     
(1)  366/    9355 : 37                  	xpah 	p3 													; get system variable back.
(1)  367/    9356 :                     
(1)  368/    9356 : E4 24               	xri 	'$'													; $ as a term reads a keystroke.
(1)  369/    9358 : 98 0C               	jz 		__TSVCGetCharacter
(1)  370/    935A : E4 1B               	xri 	'$'!'?'												; ? reads a keyboard line in and evaluates it.
(1)  371/    935C : 98 18               	jz 		__TSVCGetNumber
(1)  372/    935E : 03                  	scl 														; fail - set CY/L and just restore P3 and exit
(1)  373/    935F :                     __TSVCExit:
(1)  374/    935F : C6 01               	ld 		@1(p2)
(1)  375/    9361 : 33                  	xpal 	p3
(1)  376/    9362 : C6 01               	ld 		@1(p2)
(1)  377/    9364 : 37                  	xpah 	p3
(1)  378/    9365 : 3F                  	xppc	p3 													; doesn't need to be re-entrant
(1)  379/    9366 :                     ;
(1)  380/    9366 :                     ;	$ (read character ASCII code)
(1)  381/    9366 :                     ;
(1)  382/    9366 :                     __TSVCGetCharacter:
(1)  383/    9366 : (MACRO)             	lpi 	p3,GetChar-1 										; get a character
(1)  383/    9366 : C4 91                       ldi     (GETCHAR-1) / 256
(1)  383/    9368 : 37                          xpah    P3
(1)  383/    9369 : C4 35                       ldi     (GETCHAR-1) & 255
(1)  383/    936B : 33                          xpal    P3
(1)  384/    936C : 3F                  	xppc 	p3 													; from the keyboard.
(1)  385/    936D : CA 02               	st 		2(p2) 												; put on stack in return slot
(1)  386/    936F : C4 00               	ldi 	0
(1)  387/    9371 : CA 03               	st 		3(p2) 												; clear MSB of answer.
(1)  388/    9373 : 02                  	ccl 														; mark as done
(1)  389/    9374 : 90 E9               	jmp 	__TSVCExit 											; and exit.
(1)  390/    9376 :                     ;
(1)  391/    9376 :                     ;	? (read keyboard line in and evaluate it)
(1)  392/    9376 :                     ;
(1)  393/    9376 :                     __TSVCGetNumber:
(1)  394/    9376 : 35                  	xpah 	p1 													; save P1 on the stack
(1)  395/    9377 : CE FF               	st 		@-1(p2)
(1)  396/    9379 : 31                  	xpal 	p1
 AS V1.42 Beta [Bld 102] - source file vtl2.asm(evaluate.asm) - page 16 - 12/7/2015 19:42:52


(1)  397/    937A : CE FF               	st 		@-1(p2)
(1)  398/    937C : (MACRO)             	lpi 	p1,KeyboardBuffer 									; P1 points to keyboard buffer
(1)  398/    937C : C4 0C                       ldi     (KEYBOARDBUFFER) / 256
(1)  398/    937E : 35                          xpah    P1
(1)  398/    937F : C4 90                       ldi     (KEYBOARDBUFFER) & 255
(1)  398/    9381 : 31                          xpal    P1
(1)  399/    9382 : (MACRO)             	lpi 	p3,GetString-1 										; P3 points to string read function
(1)  399/    9382 : C4 91                       ldi     (GETSTRING-1) / 256
(1)  399/    9384 : 37                          xpah    P3
(1)  399/    9385 : C4 59                       ldi     (GETSTRING-1) & 255
(1)  399/    9387 : 33                          xpal    P3
(1)  400/    9388 : C4 4A               	ldi 	KeyboardBufferSize 									; max length
(1)  401/    938A : 3F                  	xppc 	p3 													; read keyboard input.
(1)  402/    938B : (MACRO)             	lpi 	p3,EvaluateExpression-1 							; evaluate and push on stack, ignore any errors.
(1)  402/    938B : C4 91                       ldi     (EVALUATEEXPRESSION-1) / 256
(1)  402/    938D : 37                          xpah    P3
(1)  402/    938E : C4 C1                       ldi     (EVALUATEEXPRESSION-1) & 255
(1)  402/    9390 : 33                          xpal    P3
(1)  403/    9391 : 3F                  	xppc 	p3
(1)  404/    9392 : C2 00               	ld 		0(p2) 												; copy result
(1)  405/    9394 : CA 06               	st 		6(p2)
(1)  406/    9396 : C2 01               	ld 		1(p2)
(1)  407/    9398 : CA 07               	st 		7(p2)
(1)  408/    939A : C6 02               	ld 		@2(p2) 												; skip over result
(1)  409/    939C : C6 01               	ld 		@1(p2)												; restore P1
(1)  410/    939E : 31                  	xpal 	p1
(1)  411/    939F : C6 01               	ld 		@1(p2)
(1)  412/    93A1 : 35                  	xpah 	p1
(1)  413/    93A2 : 02                  	ccl 														; clear carry as done
(1)  414/    93A3 : 90 BA               	jmp 	__TSVCExit
(1)  415/    93A5 :                     
(1)  416/    93A5 :                     	endsection ReadSystemVariables
(1)  417/    93A5 :                     	
     106/    93A5 :                     
 AS V1.42 Beta [Bld 102] - source file vtl2.asm - page 17 - 12/7/2015 19:42:52


  symbol table (* = unused):
  ------------------------

*ARCHITECTURE :  i386-unknown-win32 - | *BIGENDIAN :                      0 - |
*BRANCHEXT :                      0 - | *CASESENSITIVE :                  0 - |
*CONSTPI :        3.141592653589793 - | *DATE :                   12/7/2015 - |
 EVALUATEEXPRESSION :          91C2 C |  EVALUATETERM :                9283 C |
 EVTERMRESULT [EVALUATETERM] :    4 - |
 EXEXPRRESULT [EVALUATEEXPRESSION] :                                      4 - |
*FALSE :                          0 - |  FINDSTACKTOP :                9009 C |
*FULLPMMU :                       1 - |  GETCHAR :                     9136 C |
 GETSTRING :                   915A C | *HAS64 :                          1 - |
*HASDSP :                         0 - | *HASFPU :                         0 - |
*HASPMMU :                        0 - | *INEXTMODE :                      0 - |
*INLWORDMODE :                    0 - | *INMAXMODE :                      0 - |
*INSRCMODE :                      0 - | *INSUPMODE :                      0 - |
 KEYBOARDBUFFER :               C90 - |  KEYBOARDBUFFERSIZE :            4A - |
*LISTON :                         1 - | *MACEXP :                         1 - |
 MATHLIBRARY :                    3 - | *MOMCPU :                         C - |
*MOMCPUNAME :                 SC/MP - | *NESTMAX :                      100 - |
 NOERROR :                     9055 C | *PACKING :                        0 - |
*PADDING :                        1 - |  PRINT :                       9076 C |
*PROGRAMSPACE :                1000 - | *RELAXED :                        0 - |
 SCREENCURSOR :                 C80 - |  SCREENMIRROR :                 C00 - |
 STACKSEARCH :                  FFF - |  TERMSYSTEMVARIABLECHECK :     934F C |
 TEST :                        906F C | *TIME :                    19:42:52 - |
*TRUE :                           1 - |  VARIABLEBASE :                 D00 - |
*VERSION :                     142F - | *VTL2BOOT :                    9001 C |
 WAIT :                        906D C |
 __ETCCLANDEXIT [EVALUATETERM] :                                       92C0 C |
 __ETEXIT [EVALUATETERM] :     92C1 C |
 __ETFAILPAREN [EVALUATETERM] : 92FE C |
 __ETFINDCLOSURE [EVALUATETERM] :                                      9312 C |
 __ETFINDTERM [EVALUATETERM] : 9298 C |
 __ETISPARENTYPE [EVALUATETERM] :                                      9303 C |
 __ETSKIPSPACE [EVALUATETERM] : 9296 C |
 __ETSUCCEED [EVALUATETERM] :  92B8 C |  __ETSUCCEED2 [EVALUATETERM] : 92FC C |
 __ETTERMNOTCONSTANT [EVALUATETERM] :                                  92CF C |
 __EXCLEARCARRYCOPYANDEXIT [EVALUATEEXPRESSION] :                      91DF C |
 __EXCOPYANDEXIT [EVALUATEEXPRESSION] :                                91E0 C |
 __EXDOCOMPARE [EVALUATEEXPRESSION] :                                  9250 C |
 __EXDOOPERATOR [EVALUATEEXPRESSION] :                                 9219 C |
 __EXDROPVALUEANDEXITWITHERROR [EVALUATEEXPRESSION] :                  9215 C |
 __EXEQUALS [EVALUATEEXPRESSION] :                                     9279 C |
 __EXERROR [EVALUATEEXPRESSION] :                                      91DC C |
 __EXLESSTHAN [EVALUATEEXPRESSION] :                                   927E C |
 __EXNOTDIVISION [EVALUATEEXPRESSION] :                                9221 C |
 __EXRETURNTRUE [EVALUATEEXPRESSION] :                                 9275 C |
 __EXTERMOKAY [EVALUATEEXPRESSION] :                                   91F6 C |
 __EXTERMOKAY2 [EVALUATEEXPRESSION] :                                  924E C |
 __GCNOTLOWER [GETCHAR] :      9155 C |  __GCWAITKEY [GETCHAR] :       913B C |
 __GCWAITRELEASE [GETCHAR] :   9143 C |  __GSBACKSPACE [GETSTRING] :   91B5 C |
 __GSCONTROLKEY [GETSTRING] :  9198 C |  __GSLOOP [GETSTRING] :        9168 C |
 __PRCLEARFROMMOVETO [PRINT] : 9116 C |  __PRCLEARLOOP [PRINT] :       9118 C |
 __PRCLEARSCREEN [PRINT] :     9114 C |  __PRCOPY [PRINT] :            9122 C |
 __PREXIT [PRINT] :            90D9 C |  __PREXITNOCHECK [PRINT] :     90DD C |
 __PRISCONTROLCHAR [PRINT] :   90EB C |  __PRISRETURN [PRINT] :        910B C |
 __PRNOTASCII [PRINT] :        90B3 C |  __PRPRINTCHARACTERA [PRINT] : 9097 C |
 __PRPRINTSTRING [PRINT] :     9085 C |  __PRSCROLLLOOP [PRINT] :      90CB C |
 __PRUPDATECURSOR [PRINT] :    90BC C |
 AS V1.42 Beta [Bld 102] - source file vtl2.asm - page 18 - 12/7/2015 19:42:52


 __TSVCEXIT [READSYSTEMVARIABLES] :                                    935F C |
 __TSVCGETCHARACTER [READSYSTEMVARIABLES] :                            9366 C |
 __TSVCGETNUMBER [READSYSTEMVARIABLES] :                               9376 C |

     93 symbols
     30 unused symbols

 AS V1.42 Beta [Bld 102] - source file vtl2.asm - page 19 - 12/7/2015 19:42:52


  defined macros:
  ---------------

LPI                                   |

      1 macro

 AS V1.42 Beta [Bld 102] - source file vtl2.asm - page 20 - 12/7/2015 19:42:52


  codepages:
  ----------

STANDARD (0 changed characters)


0.01 seconds assembly time

    841 lines source file
    933 lines incl. macro expansions
      2 passes
      0 errors
      0 warnings
