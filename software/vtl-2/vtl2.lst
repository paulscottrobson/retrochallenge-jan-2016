 AS V1.42 Beta [Bld 102] - source file vtl2.asm - page 1 - 12/6/2015 9:59:22


       1/       0 :                     ; ****************************************************************************************************************
       2/       0 :                     ; ****************************************************************************************************************
       3/       0 :                     ;
       4/       0 :                     ;													VTL-2 SC/MP
       5/       0 :                     ;
       6/       0 :                     ; ****************************************************************************************************************
       7/       0 :                     ; ****************************************************************************************************************
       8/       0 :                     
       9/       0 :                     ; ****************************************************************************************************************
      10/       0 :                     ;												 Memory Allocation
      11/       0 :                     ; ****************************************************************************************************************
      12/       0 :                     
      13/       0 :                     	cpu 	sc/mp
      14/       0 :                     	
      15/       0 : =0xC00              ScreenMirror = 0xC00 											; Screen mirror, 128 bytes, 256 byte page boundary.
      16/       0 : =0xC80              ScreenCursor = ScreenMirror+0x80  								; Position on that screen (00..7F)
      17/       0 :                     
      18/       0 : =0xC90              KeyboardBuffer = ScreenMirror + 0x90 							; 74 character keyboard buffer
      19/       0 : =0x4A               KeyboardBufferSize = 74 										; max characters, excluding terminating NULL.
      20/       0 :                     
      21/       0 : =0xD00              VariableBase = 0xD00 											; Base of variables. Variables start from here, 2 bytes
      22/       0 :                     																; each, 6 bit ASCII (e.g. @,A,B,C)
      23/       0 :                     																; VTL-2 other variables work backwards from here.
      24/       0 :                     																; must be on a page boundary.
      25/       0 :                     
      26/       0 : =0x3                MathLibrary = 3 												; Monitor Mathematics Routine Address
      27/       0 :                     
      28/       0 : =0x1000             ProgramSpace = 0x1000 											; Page with program memory.
      29/       0 :                     
      30/       0 : =0xFFF              StackSearch = 0xFFF 											; Search for stack space back from here.
      31/       0 :                     
      32/       0 :                     ; ****************************************************************************************************************
      33/       0 :                     ;														Macros
      34/       0 :                     ; ****************************************************************************************************************
      35/       0 :                     
      36/       0 :                     lpi	macro	ptr,addr
      37/       0 :                     	ldi 	(addr) / 256
      38/       0 :                     	xpah 	ptr
      39/       0 :                     	ldi 	(addr) & 255
      40/       0 :                     	xpal 	ptr
      41/       0 :                     	endm
      42/       0 :                     
      43/       0 :                     ; ****************************************************************************************************************
      44/       0 :                     ;													Main Program
      45/       0 :                     ; ****************************************************************************************************************
      46/       0 :                     
      47/    9000 :                     	org 	0x9000 												; the ROM starts here
      48/    9000 :                     
      49/    9000 : 68                  	db 		0x68												; this makes it boot straight into this ROM.
      50/    9001 :                     VTL2Boot:
      51/    9001 : (MACRO)             	lpi 	p2,StackSearch 										; possible top of stack, we check by working down.
      51/    9001 : C4 0F                       ldi     (STACKSEARCH) / 256
      51/    9003 : 36                          xpah    P2
      51/    9004 : C4 FF                       ldi     (STACKSEARCH) & 255
      51/    9006 : 32                          xpal    P2
      52/    9007 : C6 40               	ld 		@64(p2) 											; get round the 4:12 wrapping non emulation.
      53/    9009 :                     FindStackTop:
      54/    9009 : C4 75               	ldi 	0x75 												; write this at potential TOS
      55/    900B : CE C0               	st 		@-64(p2)
      56/    900D : E2 00               	xor 	(p2) 												; did the write work
 AS V1.42 Beta [Bld 102] - source file vtl2.asm - page 2 - 12/6/2015 9:59:22


      57/    900F : 9C F8               	jnz 	FindStackTop
      58/    9011 :                     
      59/    9011 : (MACRO)             	lpi 	p1,VariableBase
      59/    9011 : C4 0D                       ldi     (VARIABLEBASE) / 256
      59/    9013 : 35                          xpah    P1
      59/    9014 : C4 00                       ldi     (VARIABLEBASE) & 255
      59/    9016 : 31                          xpal    P1
      60/    9017 : C4 2A               	ldi 	42
      61/    9019 : C9 02               	st 		2(p1)
      62/    901B : C4 01               	ldi 	1
      63/    901D : C9 03               	st 		3(p1)
      64/    901F :                     	
      65/    901F : (MACRO)             	lpi 	p3,EvaluateTerm-1
      65/    901F : C4 91                       ldi     (EVALUATETERM-1) / 256
      65/    9021 : 37                          xpah    P3
      65/    9022 : C4 78                       ldi     (EVALUATETERM-1) & 255
      65/    9024 : 33                          xpal    P3
      66/    9025 : (MACRO)             	lpi 	p1,Test
      66/    9025 : C4 91                       ldi     (TEST) / 256
      66/    9027 : 35                          xpah    P1
      66/    9028 : C4 77                       ldi     (TEST) & 255
      66/    902A : 31                          xpal    P1
      67/    902B : 3F                  	xppc 	p3
      68/    902C :                     wait:
      69/    902C : 90 FE               	jmp 	wait
      70/    902E :                     
      71/    902E :                     
      72/    902E :                     	include Source\screen.asm 									; screen I/O stuff.
(1)    1/    902E :                     ; ****************************************************************************************************************
(1)    2/    902E :                     ; ****************************************************************************************************************
(1)    3/    902E :                     ;
(1)    4/    902E :                     ;											Screen I/O, VTL-2 ROM
(1)    5/    902E :                     ;											=====================
(1)    6/    902E :                     ;
(1)    7/    902E :                     ;	Provides Character and String Input/Output functionality.
(1)    8/    902E :                     ;
(1)    9/    902E :                     ; ****************************************************************************************************************
(1)   10/    902E :                     ; ****************************************************************************************************************
(1)   11/    902E :                     
(1)   12/    902E :                     ; ****************************************************************************************************************
(1)   13/    902E :                     ; ****************************************************************************************************************
(1)   14/    902E :                     ;
(1)   15/    902E :                     ;	Print routine. Prints either character in A, or ASCIIZ string at P1 (if A is zero). Preserves all registers
(1)   16/    902E :                     ;	except if printing string, P1 points to the character after the NULL terminator.
(1)   17/    902E :                     ;
(1)   18/    902E :                     ;	Scrolls automatically. Understands character codes 32-255, 8 (Backspace) 12 (Clear Screen) 13 (Carriage
(1)   19/    902E :                     ;	Return). Others are currently ignored (except 0, see above). Note L/C values (97....) display those characters
(1)   20/    902E :                     ;	in the ROM font *not* lower case :)
(1)   21/    902E :                     ;
(1)   22/    902E :                     ; ****************************************************************************************************************
(1)   23/    902E :                     ; ****************************************************************************************************************
(1)   24/    902E :                     
(1)   25/    902E :                     Print:
(1)   26/    902E :                     	section 	Print
(1)   27/    902E :                     
(1)   28/    902E : CE FF               	st 		@-1(p2) 											; save character on stack.
(1)   29/    9030 : 35                  	xpah 	p1
(1)   30/    9031 : CE FF               	st 		@-1(p2) 											; save P1 on the stack.
(1)   31/    9033 : 31                  	xpal 	p1
(1)   32/    9034 : CE FF               	st 		@-1(p2)
 AS V1.42 Beta [Bld 102] - source file vtl2.asm(screen.asm) - page 3 - 12/6/2015 9:59:22


(1)   33/    9036 : 01                  	xae 	
(1)   34/    9037 : CE FF               	st 		@-1(p2) 											; save E on the stack.
(1)   35/    9039 :                     
(1)   36/    9039 : C2 03               	ld 		3(p2) 												; read character 
(1)   37/    903B : 9C 12               	jnz 	__PRPrintCharacterA 								; if non zero print it on its own.
(1)   38/    903D :                     
(1)   39/    903D :                     __PRPrintString:
(1)   40/    903D : C2 01               	ld 		1(p2) 												; restore original P1
(1)   41/    903F : 31                  	xpal 	p1
(1)   42/    9040 : C2 02               	ld 		2(p2)
(1)   43/    9042 : 35                  	xpah 	p1 													; read character at P1.
(1)   44/    9043 : C5 01               	ld 		@1(p1)
(1)   45/    9045 : 01                  	xae 														; save in E.
(1)   46/    9046 : 35                  	xpah 	p1 													; write P1 back.
(1)   47/    9047 : CA 02               	st 		2(p2)
(1)   48/    9049 : 31                  	xpal 	p1
(1)   49/    904A : CA 01               	st 		1(p2)
(1)   50/    904C : 40                  	lde 														; get character from E
(1)   51/    904D : 98 46               	jz 		__PRExitNoCheck 									; exit without loop check.
(1)   52/    904F :                     ;
(1)   53/    904F :                     ;	Print character in A now ; throughout it is stored in E.
(1)   54/    904F :                     ;
(1)   55/    904F :                     __PRPrintCharacterA:
(1)   56/    904F : 01                  	xae 														; save character in E.
(1)   57/    9050 :                     ;
(1)   58/    9050 :                     ;	Read cursor and set P1 to that address
(1)   59/    9050 :                     ;
(1)   60/    9050 : C4 0C               	ldi 	ScreenCursor/256 									; set P1 to point to screen cursor
(1)   61/    9052 : 35                  	xpah 	p1
(1)   62/    9053 : C4 80               	ldi 	ScreenCursor&255
(1)   63/    9055 : 31                  	xpal 	p1
(1)   64/    9056 : C1 00               	ld 		0(p1) 												; put cursor position in P1.L
(1)   65/    9058 : 31                  	xpal 	p1
(1)   66/    9059 :                     ;
(1)   67/    9059 :                     ;	Check for control
(1)   68/    9059 :                     ;
(1)   69/    9059 : 40                  	lde 														; look at character
(1)   70/    905A : D4 E0               	ani 	0xE0 												; is it code 0-31
(1)   71/    905C : 98 45               	jz 		__PRIsControlChar
(1)   72/    905E :                     ;
(1)   73/    905E :                     ;	Print non-control
(1)   74/    905E :                     ;
(1)   75/    905E : 40                  	lde 														; read character
(1)   76/    905F : 03                  	scl 														; CY/L clear if < 96
(1)   77/    9060 : FC 60               	cai 	96 
(1)   78/    9062 : 06                  	csa 	 	 												; skip if carry set
(1)   79/    9063 : E4 80               	xri 	0x80													
(1)   80/    9065 : 94 04               	jp 		__PRNotASCII
(1)   81/    9067 : 40                  	lde 														; if ASCII make 6 bit.
(1)   82/    9068 : D4 3F               	ani 	0x3F
(1)   83/    906A : 01                  	xae
(1)   84/    906B :                     __PRNotASCII:
(1)   85/    906B : 40                  	lde 														; get character.
(1)   86/    906C : C9 00               	st 		(p1) 												; save in shadow memory
(1)   87/    906E : 35                  	xpah 	p1 													; switch to VRAM, preserving A.
(1)   88/    906F : C4 00               	ldi 	0 													
(1)   89/    9071 : 35                  	xpah 	p1
(1)   90/    9072 : CD 01               	st 		@1(p1) 												; save in screen memory, advance write position.
(1)   91/    9074 :                     ;
(1)   92/    9074 :                     ;	Write cursor position back from P1.L
 AS V1.42 Beta [Bld 102] - source file vtl2.asm(screen.asm) - page 4 - 12/6/2015 9:59:22


(1)   93/    9074 :                     ;
(1)   94/    9074 :                     __PRUpdateCursor:
(1)   95/    9074 : C4 0C               	ldi		ScreenCursor / 256 									; set P1 to point to screen cursor, restore position to P1
(1)   96/    9076 : 35                  	xpah 	p1
(1)   97/    9077 : C4 80               	ldi 	ScreenCursor & 255 
(1)   98/    9079 : 31                  	xpal 	p1 													; after this, adjusted cursor position is in AC.
(1)   99/    907A : C9 00               	st 		(p1) 												; write back in cursor position
(1)  100/    907C : 94 13               	jp 		__PRExit 											; if position is off the bottom then scroll.
(1)  101/    907E :                     ;
(1)  102/    907E :                     ;	Scroll display
(1)  103/    907E :                     ;
(1)  104/    907E : C4 0C               	ldi 	(ScreenMirror+16) / 256 							; point P1 to 2nd line.
(1)  105/    9080 : 35                  	xpah 	p1
(1)  106/    9081 : C4 10               	ldi 	(ScreenMirror+16) & 255
(1)  107/    9083 :                     __PRScrollLoop:
(1)  108/    9083 : 31                  	xpal 	p1
(1)  109/    9084 : C1 00               	ld 		0(p1) 												; copy char to previous line
(1)  110/    9086 : C9 F0               	st 		-16(p1)
(1)  111/    9088 : C5 01               	ld 		@1(p1) 												; bump pointer.
(1)  112/    908A : 31                  	xpal 	p1
(1)  113/    908B : 94 F6               	jp 		__PRScrollLoop
(1)  114/    908D : C4 70               	ldi 	128-16 												; clear from and move to last line
(1)  115/    908F : 90 3D               	jmp 	__PRClearFromMoveTo
(1)  116/    9091 :                     ;
(1)  117/    9091 :                     ;	Exit screen drawing routine.
(1)  118/    9091 :                     ;
(1)  119/    9091 :                     __PRExit:
(1)  120/    9091 : C2 03               	ld 		3(p2) 												; if character was zero, loop
(1)  121/    9093 : 98 A8               	jz 		__PRPrintString 									; back as printing string at P1.
(1)  122/    9095 :                     __PRExitNoCheck:
(1)  123/    9095 : C6 01               	ld 		@1(p2) 												; restore E
(1)  124/    9097 : 01                  	xae
(1)  125/    9098 : C6 01               	ld 		@1(p2) 												; restore P1
(1)  126/    909A : 31                  	xpal 	p1
(1)  127/    909B : C6 01               	ld 		@1(p2)
(1)  128/    909D : 35                  	xpah 	p1
(1)  129/    909E : C6 01               	ld 		@1(p2)												; restore A
(1)  130/    90A0 : 3F                  	xppc 	p3 													; return
(1)  131/    90A1 : 90 8B               	jmp 	Print 												; make re-entrant.
(1)  132/    90A3 :                     ;
(1)  133/    90A3 :                     ;	Check for supported control characters 8 (Backspace) 12 (Clear) 13 (Carriage Return)
(1)  134/    90A3 :                     ;
(1)  135/    90A3 :                     __PRIsControlChar:
(1)  136/    90A3 : 40                  	lde 														; restore character.
(1)  137/    90A4 : E4 0D               	xri 	13 													; carriage return ? (13)
(1)  138/    90A6 : 98 1B               	jz 		__PRIsReturn
(1)  139/    90A8 : E4 01               	xri 	13!12 												; form feed ? (12)
(1)  140/    90AA : 98 20               	jz 		__PRClearScreen
(1)  141/    90AC : E4 04               	xri 	12!8 												; backspace ? (8)
(1)  142/    90AE : 9C E1               	jnz 	__PRExit 
(1)  143/    90B0 :                     ;
(1)  144/    90B0 :                     ;	Handle backspace (8)
(1)  145/    90B0 :                     ;
(1)  146/    90B0 : 31                  	xpal 	p1 													; check cursor position is zero
(1)  147/    90B1 : 98 DE               	jz 		__PRExit 											; if it is, cannot backspace so exit.
(1)  148/    90B3 : 31                  	xpal 	p1  												; put it back
(1)  149/    90B4 : C5 FF               	ld 		@-1(p1)												; move it back one
(1)  150/    90B6 : C4 20               	ldi 	' '	 												; erase in shadow
(1)  151/    90B8 : C9 00               	st 		(p1)
(1)  152/    90BA : C4 00               	ldi 	0 													; point P1 to VRAM
 AS V1.42 Beta [Bld 102] - source file vtl2.asm(screen.asm) - page 5 - 12/6/2015 9:59:22


(1)  153/    90BC : 35                  	xpah 	p1
(1)  154/    90BD : C4 20               	ldi 	' '													; erase in VRAM
(1)  155/    90BF : C9 00               	st 		(p1)
(1)  156/    90C1 : 90 B1               	jmp 	__PRUpdateCursor 									; and exit
(1)  157/    90C3 :                     ;
(1)  158/    90C3 :                     ;	Handle carriage return (13)
(1)  159/    90C3 :                     ;
(1)  160/    90C3 :                     __PRIsReturn:
(1)  161/    90C3 : 31                  	xpal 	p1 													; cursor position in A
(1)  162/    90C4 : D4 F0               	ani 	0xF0 												; start of current line
(1)  163/    90C6 : 02                  	ccl 														; down one line
(1)  164/    90C7 : F4 10               	adi 	0x10 	
(1)  165/    90C9 : 31                  	xpal 	p1 													; put it back in P1.
(1)  166/    90CA : 90 A8               	jmp 	__PRUpdateCursor
(1)  167/    90CC :                     ;
(1)  168/    90CC :                     ;	Handle clear screen (12)
(1)  169/    90CC :                     ;
(1)  170/    90CC :                     __PRClearScreen:
(1)  171/    90CC : C4 00               	ldi 	0 													; clear shadow memory from here.
(1)  172/    90CE :                     ;
(1)  173/    90CE :                     ;	From position A, clear the memory in the shadow screen to the end, copy the shadow screen to VRAM
(1)  174/    90CE :                     ;	then use position A as the new cursor position.
(1)  175/    90CE :                     ;
(1)  176/    90CE :                     __PRClearFromMoveTo:
(1)  177/    90CE : CE FF               	st 		@-1(p2) 											; save this position, the cursor goes here.
(1)  178/    90D0 :                     __PRClearLoop:
(1)  179/    90D0 : 31                  	xpal 	p1 													; save position in P1.
(1)  180/    90D1 : C4 20               	ldi 	' '													; write space there.
(1)  181/    90D3 : CD 01               	st 		@1(p1)
(1)  182/    90D5 : 31                  	xpal 	p1
(1)  183/    90D6 : 94 F8               	jp 		__PRClearLoop 										; until reached shadow memory start.
(1)  184/    90D8 : C4 00               	ldi 	0 													; now copy shadow memory to screen memory.
(1)  185/    90DA :                     __PRCopy:
(1)  186/    90DA : 31                  	xpal 	p1 													; set up P1.L
(1)  187/    90DB : C4 0C               	ldi 	ScreenMirror/256 									; point to shadow memory.
(1)  188/    90DD : 35                  	xpah 	p1 													
(1)  189/    90DE : C1 00               	ld 		(p1) 												; read shadow memory
(1)  190/    90E0 : 35                  	xpah 	p1 													; zero P1.H preserving A
(1)  191/    90E1 : C4 00               	ldi 	0
(1)  192/    90E3 : 35                  	xpah 	p1
(1)  193/    90E4 : CD 01               	st 		@1(p1) 												; save and increment p1
(1)  194/    90E6 : 31                  	xpal 	p1 
(1)  195/    90E7 : 94 F1               	jp 		__PRCopy 											; keep doing till all copied.
(1)  196/    90E9 : C6 01               	ld 		@1(p2) 												; read cursor position
(1)  197/    90EB : 31                  	xpal 	p1 													; put in P1.L
(1)  198/    90EC : 90 86               	jmp 	__PRUpdateCursor
(1)  199/    90EE :                     
(1)  200/    90EE :                     	endsection 	Print
(1)  201/    90EE :                     
(1)  202/    90EE :                     ; ****************************************************************************************************************
(1)  203/    90EE :                     ; ****************************************************************************************************************
(1)  204/    90EE :                     ;
(1)  205/    90EE :                     ;		Input a single character into A. Case is converted to Upper. All registers preserved except A
(1)  206/    90EE :                     ;
(1)  207/    90EE :                     ; ****************************************************************************************************************
(1)  208/    90EE :                     ; ****************************************************************************************************************
(1)  209/    90EE :                     
(1)  210/    90EE :                     GetChar:
(1)  211/    90EE :                     	section 	GetChar
(1)  212/    90EE : C4 08               	ldi 	0x8 												; set P1 to $8xx, and save P1.H
 AS V1.42 Beta [Bld 102] - source file vtl2.asm(screen.asm) - page 6 - 12/6/2015 9:59:22


(1)  213/    90F0 : 35                  	xpah 	p1
(1)  214/    90F1 : CE FF               	st 		@-1(p2)
(1)  215/    90F3 :                     __GCWaitKey: 													; wait for key press
(1)  216/    90F3 : C1 00               	ld 		0(p1)
(1)  217/    90F5 : 94 FC               	jp 		__GCWaitKey
(1)  218/    90F7 : D4 7F               	ani	 	0x7F 												; throw away the upper bit.
(1)  219/    90F9 : CA FF               	st 		-1(p2) 												; save it below stack
(1)  220/    90FB :                     __GCWaitRelease:
(1)  221/    90FB : C1 00               	ld 		0(p1) 												; wait for release
(1)  222/    90FD : D4 80               	ani 	0x80
(1)  223/    90FF : 9C FA               	jnz 	__GCWaitRelease
(1)  224/    9101 : C6 01               	ld 		@1(p2) 												; restore P1.H
(1)  225/    9103 : 35                  	xpah 	p1
(1)  226/    9104 : C2 FE               	ld 		-2(p2) 												; restore saved value
(1)  227/    9106 : 02                  	ccl
(1)  228/    9107 : F4 20               	adi 	0x20												; will make lower case -ve
(1)  229/    9109 : 94 02               	jp 		__GCNotLower
(1)  230/    910B : FC 20               	cai 	0x20 												; capitalise
(1)  231/    910D :                     __GCNotLower:
(1)  232/    910D : F4 E0               	adi 	0xE0 												; fix up.
(1)  233/    910F : 3F                  	xppc 	p3 													; return
(1)  234/    9110 : 90 DC               	jmp 	GetChar 											; make re-entrant
(1)  235/    9112 :                     	endsection 	GetChar
(1)  236/    9112 :                     
(1)  237/    9112 :                     ; ****************************************************************************************************************
(1)  238/    9112 :                     ; ****************************************************************************************************************
(1)  239/    9112 :                     ;
(1)  240/    9112 :                     ;			Read an ASCIIZ string from keyboard into P1 of length A maximum (excludes NULL terminator)
(1)  241/    9112 :                     ;
(1)  242/    9112 :                     ; ****************************************************************************************************************
(1)  243/    9112 :                     ; ****************************************************************************************************************
(1)  244/    9112 :                     
(1)  245/    9112 :                     GetString:
(1)  246/    9112 :                     	section GetString
(1)  247/    9112 : CE FF               	st 		@-1(p2) 											; save length on stack.
(1)  248/    9114 : 37                  	xpah 	p3 													; save P3 on stack
(1)  249/    9115 : CE FF               	st 		@-1(p2)
(1)  250/    9117 : 33                  	xpal 	p3
(1)  251/    9118 : CE FF               	st 		@-1(p2)
(1)  252/    911A : 40                  	lde
(1)  253/    911B : CE FF               	st 		@-1(p2) 											; save E on stack
(1)  254/    911D : C4 00               	ldi 	0 													; set E (current position) to A.
(1)  255/    911F : 01                  	xae
(1)  256/    9120 :                     __GSLoop:
(1)  257/    9120 : (MACRO)             	lpi 	p3,Print-1 											; print the prompt (half coloured square)
(1)  257/    9120 : C4 90                       ldi     (PRINT-1) / 256
(1)  257/    9122 : 37                          xpah    P3
(1)  257/    9123 : C4 2D                       ldi     (PRINT-1) & 255
(1)  257/    9125 : 33                          xpal    P3
(1)  258/    9126 : C4 9B               	ldi 	155
(1)  259/    9128 : 3F                  	xppc 	p3
(1)  260/    9129 : (MACRO)             	lpi 	p3,GetChar-1 										; get a character
(1)  260/    9129 : C4 90                       ldi     (GETCHAR-1) / 256
(1)  260/    912B : 37                          xpah    P3
(1)  260/    912C : C4 ED                       ldi     (GETCHAR-1) & 255
(1)  260/    912E : 33                          xpal    P3
(1)  261/    912F : 3F                  	xppc 	p3
(1)  262/    9130 : C9 80               	st 		-0x80(p1) 											; save it in the current position.
(1)  263/    9132 : (MACRO)             	lpi 	p3,Print-1 											; erase the prompt with backspace.
(1)  263/    9132 : C4 90                       ldi     (PRINT-1) / 256
 AS V1.42 Beta [Bld 102] - source file vtl2.asm(screen.asm) - page 7 - 12/6/2015 9:59:22


(1)  263/    9134 : 37                          xpah    P3
(1)  263/    9135 : C4 2D                       ldi     (PRINT-1) & 255
(1)  263/    9137 : 33                          xpal    P3
(1)  264/    9138 : C4 08               	ldi 	8
(1)  265/    913A : 3F                  	xppc 	p3
(1)  266/    913B : C1 80               	ld 		-0x80(p1) 											; re-read character
(1)  267/    913D : D4 E0               	ani 	0xE0 												; check if control key.
(1)  268/    913F : 98 0F               	jz 		__GSControlKey 
(1)  269/    9141 : 40                  	lde 														; get current position.
(1)  270/    9142 : E2 03               	xor 	3(p2) 												; reached maximum length of buffer ?
(1)  271/    9144 : 98 DA               	jz 		__GSLoop 											; if so, ignore the key and go round again.
(1)  272/    9146 : C1 80               	ld 		-0x80(p1) 											; get character and print it
(1)  273/    9148 : 3F                  	xppc 	p3
(1)  274/    9149 : C4 01               	ldi 	1 													; increment E
(1)  275/    914B : 02                  	ccl
(1)  276/    914C : 70                  	ade
(1)  277/    914D : 01                  	xae
(1)  278/    914E : 90 D0               	jmp 	__GSLoop 											; and go round again.
(1)  279/    9150 :                     ;
(1)  280/    9150 :                     ;	Handle control keys (0x00-0x1F)
(1)  281/    9150 :                     ;
(1)  282/    9150 :                     __GSControlKey:
(1)  283/    9150 : C1 80               	ld 		-0x80(p1) 											; get typed in key
(1)  284/    9152 : E4 08               	xri 	8 													; check for backspace.
(1)  285/    9154 : 98 14               	jz 		__GSBackspace 			
(1)  286/    9156 : E4 05               	xri 	8!13 												; check for CR
(1)  287/    9158 : 9C C6               	jnz 	__GSLoop 											; if not, ignore the key.
(1)  288/    915A :                     ;
(1)  289/    915A :                     ;	Carriage Return, ending input.
(1)  290/    915A :                     ;
(1)  291/    915A : C9 80               	st 		-0x80(p1) 											; replace the CR written with NULL terminator.
(1)  292/    915C : C6 01               	ld 		@1(p2) 												; pop E
(1)  293/    915E : 01                  	xae
(1)  294/    915F : C6 01               	ld 		@1(p2) 												; pop P3
(1)  295/    9161 : 33                  	xpal 	p3
(1)  296/    9162 : C6 01               	ld 		@1(p2)
(1)  297/    9164 : 37                  	xpah 	p3
(1)  298/    9165 : C6 01               	ld 		@1(p2)												; pop A
(1)  299/    9167 : 3F                  	xppc 	p3 													; return
(1)  300/    9168 : 90 A8               	jmp 	GetString 											; make re-entrant (probably unneccessary !!)
(1)  301/    916A :                     ;
(1)  302/    916A :                     ;	Backspace entered
(1)  303/    916A :                     ;
(1)  304/    916A :                     __GSBackspace
(1)  305/    916A : 40                  	lde 														; if E = 0 we can't backspace any further.
(1)  306/    916B : 98 B3               	jz 		__GSLoop
(1)  307/    916D : C4 08               	ldi 	8 													; backspace on screen
(1)  308/    916F : 3F                  	xppc 	p3
(1)  309/    9170 : C4 FF               	ldi 	0xFF 												; decrement E
(1)  310/    9172 : 02                  	ccl
(1)  311/    9173 : 70                  	ade
(1)  312/    9174 : 01                  	xae
(1)  313/    9175 : 90 A9               	jmp 	__GSLoop 											; and go round again.
(1)  314/    9177 :                     
(1)  315/    9177 :                     	endsection GetString
(1)  316/    9177 :                     
      73/    9177 :                     	include Source\evaluate.asm 								; evaluate an expression.
(1)    1/    9177 :                     ; ****************************************************************************************************************
(1)    2/    9177 :                     ; ****************************************************************************************************************
(1)    3/    9177 :                     ;
 AS V1.42 Beta [Bld 102] - source file vtl2.asm(evaluate.asm) - page 8 - 12/6/2015 9:59:22


(1)    4/    9177 :                     ;											Evaluate, VTL-2 ROM
(1)    5/    9177 :                     ;											===================
(1)    6/    9177 :                     ;
(1)    7/    9177 :                     ;	R-Expression Evaluator.
(1)    8/    9177 :                     ;
(1)    9/    9177 :                     ; ****************************************************************************************************************
(1)   10/    9177 :                     ; ****************************************************************************************************************
(1)   11/    9177 :                     
(1)   12/    9177 : 41 00               Test:db 	"A",0
(1)   13/    9179 :                     
(1)   14/    9179 :                     ; ****************************************************************************************************************
(1)   15/    9179 :                     ; ****************************************************************************************************************
(1)   16/    9179 :                     ;
(1)   17/    9179 :                     ;					Evaluate a single term from P1 and push it on the stack. CY/L set on error
(1)   18/    9179 :                     ;
(1)   19/    9179 :                     ;	Terms can be:
(1)   20/    9179 :                     ;
(1)   21/    9179 :                     ;		A numeric constant (e.g. "46")
(1)   22/    9179 :                     ;		A parenthesised expression ( (5+2) )
(1)   23/    9179 :                     ;		An array expression :42)
(1)   24/    9179 :                     ;		A system variable (?)
(1)   25/    9179 :                     ;		A variable (all other values 32-95)
(1)   26/    9179 :                     ;
(1)   27/    9179 :                     ; ****************************************************************************************************************
(1)   28/    9179 :                     ; ****************************************************************************************************************
(1)   29/    9179 :                     
(1)   30/    9179 :                     EvaluateTerm:
(1)   31/    9179 :                     
(1)   32/    9179 :                     	section EvaluateTerm
(1)   33/    9179 :                     
(1)   34/    9179 : =0x4                EVTermResult = 4 												; offset in stack to result.
(1)   35/    9179 :                     
(1)   36/    9179 : CE FD               	st 		@-3(p2) 											; save A, reserving room for the result.
(1)   37/    917B : 40                  	lde 														; save E
(1)   38/    917C : CE FF               	st 		@-1(p2) 	
(1)   39/    917E : 37                  	xpah 	p3 													; save P3
(1)   40/    917F : CE FF               	st 		@-1(p2)
(1)   41/    9181 : 33                  	xpal	p3
(1)   42/    9182 : CE FF               	st 		@-1(p2)
(1)   43/    9184 :                     
(1)   44/    9184 : C4 00               	ldi 	0 													; blank the result on the stack
(1)   45/    9186 : CA 04               	st 		EVTermResult(p2) 									; not strictly necessary :)
(1)   46/    9188 : CA 05               	st 		EVTermResult+1(p2)
(1)   47/    918A : 90 02               	jmp 	__ETFindTerm
(1)   48/    918C :                     
(1)   49/    918C :                     __ETSkipSpace:
(1)   50/    918C : C5 01               	ld 		@1(p1) 												; bump P1
(1)   51/    918E :                     __ETFindTerm:
(1)   52/    918E : C1 00               	ld 		(p1) 												; read the first term character
(1)   53/    9190 : 03                  	scl
(1)   54/    9191 : FC 20               	cai 	32													; if space, skip over it and try again.
(1)   55/    9193 : 98 F7               	jz 		__ETSkipSpace
(1)   56/    9195 : D4 C0               	ani 	0xC0												; should be in range 00-3F to be 32-95 (legal chars)
(1)   57/    9197 : 03                  	scl
(1)   58/    9198 : 9C 1D               	jnz 	__ETExit 											; if not, exit with error.
(1)   59/    919A :                     
(1)   60/    919A : C1 00               	ld 		(p1) 												; read term first character again
(1)   61/    919C : 03                  	scl
(1)   62/    919D : FC 3A               	cai 	'9'+1 												; if >= '9' will be +ve
(1)   63/    919F : 94 24               	jp 		__ETTermNotConstant
 AS V1.42 Beta [Bld 102] - source file vtl2.asm(evaluate.asm) - page 9 - 12/6/2015 9:59:22


(1)   64/    91A1 : F4 8A               	adi 	128+10 												; if < '0' will be +ve
(1)   65/    91A3 : 94 20               	jp 		__ETTermNotConstant
(1)   66/    91A5 :                     ;
(1)   67/    91A5 :                     ;	Term is an ASCII Constant
(1)   68/    91A5 :                     ;
(1)   69/    91A5 : (MACRO)             	lpi 	p3,MathLibrary-1 									; use Math library to convert to integer.
(1)   69/    91A5 : C4 00                       ldi     (MATHLIBRARY-1) / 256
(1)   69/    91A7 : 37                          xpah    P3
(1)   69/    91A8 : C4 02                       ldi     (MATHLIBRARY-1) & 255
(1)   69/    91AA : 33                          xpal    P3
(1)   70/    91AB : C4 3F               	ldi 	'?'													; function ASCII->Int, cannot fail as first digit numeric
(1)   71/    91AD : 3F                  	xppc 	p3
(1)   72/    91AE :                     ;
(1)   73/    91AE :                     ;	Result on TOS - have to reposition past the stacked SC/MP registers.
(1)   74/    91AE :                     ;
(1)   75/    91AE :                     __ETSucceed:
(1)   76/    91AE : C6 01               	ld 		@1(p2)												; put result in its proper place
(1)   77/    91B0 : CA 05               	st 		EVTermResult+1(p2) 									; unstacking TOS.
(1)   78/    91B2 : C6 01               	ld 		@1(p2)
(1)   79/    91B4 : CA 05               	st 		EVTermResult+1(p2)
(1)   80/    91B6 :                     __ETCCLAndExit:
(1)   81/    91B6 : 02                  	ccl 														; clear carry indicating success
(1)   82/    91B7 :                     __ETExit:
(1)   83/    91B7 : C6 01               	ld 		@1(p2) 												; restore P3
(1)   84/    91B9 : 33                  	xpal 	p3
(1)   85/    91BA : C6 01               	ld 		@1(p2)
(1)   86/    91BC : 37                  	xpah 	p3
(1)   87/    91BD : C6 01               	ld 		@1(p2) 												; restore E
(1)   88/    91BF : 01                  	xae
(1)   89/    91C0 : C6 01               	ld 		@1(p2) 												; restore A, leaving the result on the tack
(1)   90/    91C2 : 3F                  	xppc 	p3 													; return
(1)   91/    91C3 : 90 B4               	jmp 	EvaluateTerm 										; make re-entrant
(1)   92/    91C5 :                     ;
(1)   93/    91C5 :                     ;	P1 still points to first non space, which is in range 33-95. It is not a numeric character.
(1)   94/    91C5 :                     ;
(1)   95/    91C5 :                     __ETTermNotConstant:
(1)   96/    91C5 :                     
(1)   97/    91C5 :                     ;	TODO: Array check
(1)   98/    91C5 :                     ; 	TODO: Parenthesis check
(1)   99/    91C5 :                     
(1)  100/    91C5 : (MACRO)             	lpi 	p3,__EVTermSystemVariableCheck-1 					; this routine checks for system variables.
(1)  100/    91C5 : C4 91                       ldi     (__EVTERMSYSTEMVARIABLECHECK-1) / 256
(1)  100/    91C7 : 37                          xpah    P3
(1)  100/    91C8 : C4 E5                       ldi     (__EVTERMSYSTEMVARIABLECHECK-1) & 255
(1)  100/    91CA : 33                          xpal    P3
(1)  101/    91CB : C5 01               	ld 		@1(p1)												; read the variable name and bump, finally.
(1)  102/    91CD : 3F                  	xppc 	p3 													; call it
(1)  103/    91CE : 06                  	csa 														; if CY/L is clear, this has done the work.
(1)  104/    91CF : 94 DD               	jp 		__ETSucceed 										; and the result is on the stack, so process it.
(1)  105/    91D1 :                     ;
(1)  106/    91D1 :                     ;	Okay, finally we think it's just a normal variable.
(1)  107/    91D1 :                     ;
(1)  108/    91D1 : C1 FF               	ld 		-1(p1) 												; read the variable name and skip over it
(1)  109/    91D3 : 02                  	ccl
(1)  110/    91D4 : F1 FF               	add 	-1(p1) 												; double it.
(1)  111/    91D6 : D4 7E               	ani 	0x7E 												; arrangement is 6 bit ASCII, this is 3F x 2
(1)  112/    91D8 : 33                  	xpal 	p3
(1)  113/    91D9 : C4 0D               	ldi 	VariableBase/256 									; point P3 to the variables
(1)  114/    91DB : 37                  	xpah 	p3
(1)  115/    91DC : C7 01               	ld 		@1(p3) 												; read low 
 AS V1.42 Beta [Bld 102] - source file vtl2.asm(evaluate.asm) - page 10 - 12/6/2015 9:59:22


(1)  116/    91DE : CA 04               	st 		EVTermResult(p2) 									; copy to stack space
(1)  117/    91E0 : C3 00               	ld 		(p3) 												; same for high
(1)  118/    91E2 : CA 05               	st 		EVTermResult+1(p2)
(1)  119/    91E4 : 90 D0               	jmp 	__ETCCLAndExit 										; clear carry and exit.
(1)  120/    91E6 :                     
(1)  121/    91E6 :                     	endsection EvaluateTerm
(1)  122/    91E6 :                     
(1)  123/    91E6 :                     
(1)  124/    91E6 :                     __EVTermSystemVariableCheck:
(1)  125/    91E6 :                     	; for var in A, if it is a non-standard variable, read it and push on stack and return CY/L = 0
(1)  126/    91E6 :                     	; if normal variable, return CY/L = 1
(1)  127/    91E6 : 03                  	scl
(1)  128/    91E7 : 3F                  	xppc	p3
      74/    91E8 :                     
 AS V1.42 Beta [Bld 102] - source file vtl2.asm - page 11 - 12/6/2015 9:59:22


  symbol table (* = unused):
  ------------------------

*ARCHITECTURE :  i386-unknown-win32 - | *BIGENDIAN :                      0 - |
*BRANCHEXT :                      0 - | *CASESENSITIVE :                  0 - |
*CONSTPI :        3.141592653589793 - | *DATE :                   12/6/2015 - |
 EVALUATETERM :                9179 C |  EVTERMRESULT [EVALUATETERM] :    4 - |
*FALSE :                          0 - |  FINDSTACKTOP :                9009 C |
*FULLPMMU :                       1 - |  GETCHAR :                     90EE C |
 GETSTRING :                   9112 C | *HAS64 :                          1 - |
*HASDSP :                         0 - | *HASFPU :                         0 - |
*HASPMMU :                        0 - | *INEXTMODE :                      0 - |
*INLWORDMODE :                    0 - | *INMAXMODE :                      0 - |
*INSRCMODE :                      0 - | *INSUPMODE :                      0 - |
*KEYBOARDBUFFER :               C90 - | *KEYBOARDBUFFERSIZE :            4A - |
*LISTON :                         1 - | *MACEXP :                         1 - |
 MATHLIBRARY :                    3 - | *MOMCPU :                         C - |
*MOMCPUNAME :                 SC/MP - | *NESTMAX :                      100 - |
*PACKING :                        0 - | *PADDING :                        1 - |
 PRINT :                       902E C | *PROGRAMSPACE :                1000 - |
*RELAXED :                        0 - |  SCREENCURSOR :                 C80 - |
 SCREENMIRROR :                 C00 - |  STACKSEARCH :                  FFF - |
 TEST :                        9177 C | *TIME :                     9:59:22 - |
*TRUE :                           1 - |  VARIABLEBASE :                 D00 - |
*VERSION :                     142F - | *VTL2BOOT :                    9001 C |
 WAIT :                        902C C |
 __ETCCLANDEXIT [EVALUATETERM] :                                       91B6 C |
 __ETEXIT [EVALUATETERM] :     91B7 C |  __ETFINDTERM [EVALUATETERM] : 918E C |
 __ETSKIPSPACE [EVALUATETERM] : 918C C |
 __ETSUCCEED [EVALUATETERM] :  91AE C |
 __ETTERMNOTCONSTANT [EVALUATETERM] :                                  91C5 C |
 __EVTERMSYSTEMVARIABLECHECK : 91E6 C |  __GCNOTLOWER [GETCHAR] :      910D C |
 __GCWAITKEY [GETCHAR] :       90F3 C |  __GCWAITRELEASE [GETCHAR] :   90FB C |
 __GSBACKSPACE [GETSTRING] :   916A C |  __GSCONTROLKEY [GETSTRING] :  9150 C |
 __GSLOOP [GETSTRING] :        9120 C |  __PRCLEARFROMMOVETO [PRINT] : 90CE C |
 __PRCLEARLOOP [PRINT] :       90D0 C |  __PRCLEARSCREEN [PRINT] :     90CC C |
 __PRCOPY [PRINT] :            90DA C |  __PREXIT [PRINT] :            9091 C |
 __PREXITNOCHECK [PRINT] :     9095 C |  __PRISCONTROLCHAR [PRINT] :   90A3 C |
 __PRISRETURN [PRINT] :        90C3 C |  __PRNOTASCII [PRINT] :        906B C |
 __PRPRINTCHARACTERA [PRINT] : 904F C |  __PRPRINTSTRING [PRINT] :     903D C |
 __PRSCROLLLOOP [PRINT] :      9083 C |  __PRUPDATECURSOR [PRINT] :    9074 C |

     71 symbols
     32 unused symbols

 AS V1.42 Beta [Bld 102] - source file vtl2.asm - page 12 - 12/6/2015 9:59:22


  defined macros:
  ---------------

LPI                                   |

      1 macro

 AS V1.42 Beta [Bld 102] - source file vtl2.asm - page 13 - 12/6/2015 9:59:22


  codepages:
  ----------

STANDARD (0 changed characters)


0.01 seconds assembly time

    518 lines source file
    554 lines incl. macro expansions
      2 passes
      0 errors
      0 warnings
