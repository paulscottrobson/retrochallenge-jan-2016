 AS V1.42 Beta [Bld 102] - source file monitor.asm - page 1 - 11/29/2015 19:31:32


       1/       0 :                     ; ******************************************************************************************************************
       2/       0 :                     ; ******************************************************************************************************************
       3/       0 :                     ; ******************************************************************************************************************
       4/       0 :                     ;
       5/       0 :                     ;												Machine Language Monitor
       6/       0 :                     ;
       7/       0 :                     ; ******************************************************************************************************************
       8/       0 :                     ; ******************************************************************************************************************
       9/       0 :                     ; ******************************************************************************************************************
      10/       0 :                     
      11/       0 :                     ; TODO: 
      12/       0 :                     ; 		Fix bug, does not assemble CAS etc.
      13/       0 :                     ; 		Disassembler - expand @Pn
      14/       0 :                     ; 		16 bit maths routines.
      15/       0 :                     ; 		Decode addresses on disassembler.
      16/       0 :                     ; 		Print message on first clear screen.
      17/       0 :                     
      18/       0 :                     		cpu	sc/mp
      19/       0 :                     
      20/       0 : =0xC00              labels 		= 0xC00												; labels, 1 byte each
      21/       0 : =0x20               labelCount 	= 32 												; number of labels (perhaps a bit generous ?)
      22/       0 :                     
      23/       0 : =0xC20              varBase 	= labels+labelCount 								; variables after labels start here.
      24/       0 :                     
      25/       0 : =0xC20              cursor 		= varBase 											; cursor position
      26/       0 : =0xC21              current 	= varBase+1 										; current address (lo,hi)
      27/       0 : =0xC23              parPosn		= varBase+3 										; current param offset in buffer (low addr)
      28/       0 : =0xC24              modifier  	= varBase+4 										; instruction modifier (@,Pn)
      29/       0 : =0xC25              kbdBuffer 	= varBase+5 										; 16 character keyboard buffer
      30/       0 : =0x10               kbdBufferLn = 16 										
      31/       0 :                     
      32/       0 : =0xC35              codeStart 	= kbdBuffer+kbdBufferLn								; code starts here.
      33/       0 :                     
      34/       0 : =0x4                tapeDelay 	= 4 												; DLY parameter for 1 tape bit width.
      35/       0 :                     																; (smaller = faster tape I/O)
      36/       0 :                     
      37/       0 :                     		org 	0x0000
      38/       0 : 08                  		nop
      39/       1 :                     
      40/       1 :                     ; ******************************************************************************************************************
      41/       1 :                     ;
      42/       1 :                     ;									Find Top of Memory to initialise the stack.
      43/       1 :                     ;
      44/       1 :                     ; ******************************************************************************************************************
      45/       1 :                     
      46/       1 : C4 0F               		ldi 	0x0F 											; point P2 to theoretical top of RAM on basic m/c
      47/       3 : 36                  		xpah 	p2 												; e.g. 0xFFF
      48/       4 : C4 FF               		ldi 	0xFF 											; ideally you'd make this 0x003F and remove the ld
      49/       6 : 32                  		xpal 	p2 												; but the emulators don't do 4+12 math. Only matters here.
      50/       7 : C6 40               		ld 		@64(p2) 										; fix the predecrement (wrap around not emulated)
      51/       9 :                     FindTopMemory:
      52/       9 : C4 A5               		ldi 	0xA5 											; try to write this to memory
      53/       B : CE C0               		st 		@-64(p2) 										; predecrementing by 64.
      54/       D : E2 00               		xor 	(p2) 											; did it write correctly.
      55/       F : 9C F8               		jnz 	FindTopMemory 									; now P2 points to top of memory.
      56/      11 :                     
      57/      11 :                     ; ******************************************************************************************************************
      58/      11 :                     ;
      59/      11 :                     ;									Reset cursor position and current address.
      60/      11 :                     ;
 AS V1.42 Beta [Bld 102] - source file monitor.asm - page 2 - 11/29/2015 19:31:32


      61/      11 :                     ; ******************************************************************************************************************
      62/      11 :                     
      63/      11 : C4 0C               		ldi 	Current/256 									; set P1 to current address
      64/      13 : 35                  		xpah 	p1
      65/      14 : C4 21               		ldi 	Current&255
      66/      16 : 31                  		xpal 	p1
      67/      17 : C4 35               		ldi 	codeStart & 255 								; reset current address to code start
      68/      19 : CD 01               		st 		@1(p1)
      69/      1B : C4 0C               		ldi 	codeStart / 256
      70/      1D : CD 00               		st 		@(p1)
      71/      1F :                     
      72/      1F :                     ; ******************************************************************************************************************
      73/      1F :                     ;
      74/      1F :                     ;												Clear the screen
      75/      1F :                     ;
      76/      1F :                     ; ******************************************************************************************************************
      77/      1F :                     
      78/      1F :                     ClearScreen_Command:
      79/      1F : C4 00               		ldi 	0
      80/      21 : 35                  		xpah 	p1
      81/      22 : C4 00               		ldi 	0
      82/      24 :                     ClearScreenLoop:
      83/      24 : 31                  		xpal 	p1												; clear screen
      84/      25 : C4 20               		ldi 	' '
      85/      27 : CD 01               		st 		@1(p1)
      86/      29 : 31                  		xpal 	p1
      87/      2A : 94 F8               		jp 		ClearScreenLoop
      88/      2C : C4 0C               		ldi 	Cursor/256 										; reset the cursor position to TOS
      89/      2E : 35                  		xpah 	p1
      90/      2F : C4 20               		ldi 	Cursor&255
      91/      31 : 31                  		xpal 	p1 
      92/      32 : C4 00               		ldi 	0
      93/      34 : C9 00               		st 		0(p1)											
      94/      36 :                     
      95/      36 :                     ; ****************************************************************************************************************
      96/      36 :                     ;
      97/      36 :                     ;													Main Loop
      98/      36 :                     ;
      99/      36 :                     ; ****************************************************************************************************************
     100/      36 :                     
     101/      36 :                     CommandMainLoop:
     102/      36 : C4 03               		ldi 	(PrintAddressData-1)/256						; print Address only
     103/      38 : 37                  		xpah 	p3
     104/      39 : C4 E4               		ldi 	(PrintAddressData-1)&255
     105/      3B : 33                  		xpal 	p3
     106/      3C : C4 00               		ldi 	0
     107/      3E : 3F                  		xppc 	p3
     108/      3F :                     
     109/      3F : C4 03               		ldi 	(PrintCharacter-1)/256 							; set P3 = print character.
     110/      41 : 37                  		xpah 	p3
     111/      42 : C4 77               		ldi 	(PrintCharacter-1)&255
     112/      44 : 33                  		xpal 	p3
     113/      45 : C4 5D               		ldi 	']'												; print the prompt.
     114/      47 : 3F                  		xppc 	p3
     115/      48 :                     
     116/      48 :                     ; ****************************************************************************************************************
     117/      48 :                     ;
     118/      48 :                     ;											Keyboard Line Input
     119/      48 :                     ;
     120/      48 :                     ; ****************************************************************************************************************
 AS V1.42 Beta [Bld 102] - source file monitor.asm - page 3 - 11/29/2015 19:31:32


     121/      48 :                     
     122/      48 : C4 00               		ldi 	0 												; set E = character position.
     123/      4A : 01                  		xae 
     124/      4B :                     KeyboardLoop:
     125/      4B : C4 08               		ldi 	0x8 											; set P1 to point to keyboard latch
     126/      4D : 35                  		xpah 	p1
     127/      4E :                     _KBDWaitRelease:
     128/      4E : C1 00               		ld 		0(p1) 											; wait for strobe to clear
     129/      50 : 94 02               		jp 		_KBDWaitKey
     130/      52 : 90 FA               		jmp 	_KBDWaitRelease
     131/      54 :                     _KBDWaitKey:
     132/      54 : C1 00               		ld 		0(p1) 											; wait for strobe, i.e. new key
     133/      56 : 94 FC               		jp 		_KBDWaitKey
     134/      58 : D4 7F               		ani 	0x7F 											; throw away bit 7
     135/      5A : CA FF               		st 		-1(p2) 											; save key.
     136/      5C :                     
     137/      5C : C4 0C               		ldi 	kbdBuffer/256 									; set P1 = keyboard buffer
     138/      5E : 35                  		xpah 	p1
     139/      5F : C4 25               		ldi 	kbdBuffer&255
     140/      61 : 31                  		xpal 	p1		
     141/      62 :                     
     142/      62 : C2 FF               		ld 		-1(p2) 											; read key
     143/      64 : E4 08               		xri 	8 												; is it backspace
     144/      66 : 98 1E               		jz 		__KBDBackSpace
     145/      68 : E4 05               		xri 	8!13 											; is it CR, then exit
     146/      6A : 98 28               		jz 		__KBDExit
     147/      6C :                     
     148/      6C : 40                  		lde 													; have we a full buffer.
     149/      6D : E4 10               		xri 	kbdBufferLn 									; if so, ignore the key.
     150/      6F : 98 DA               		jz 		KeyboardLoop
     151/      71 :                     
     152/      71 : C2 FF               		ld 		-1(p2) 											; restore the key.
     153/      73 : 02                  		ccl
     154/      74 : F4 20               		adi 	0x20											; will make lower case -ve
     155/      76 : 94 02               		jp 		__KBDNotLower
     156/      78 : FC 20               		cai 	0x20 											; capitalise
     157/      7A :                     __KBDNotLower:
     158/      7A : F4 E0               		adi 	0xE0 											; fix up.
     159/      7C : C9 80               		st 		-0x80(p1) 										; save in the buffer using E as index.
     160/      7E : 3F                  		xppc 	p3 												; print the character
     161/      7F : 01                  		xae 													; increment E
     162/      80 : 02                  		ccl
     163/      81 : F4 01               		adi 	1
     164/      83 : 01                  		xae
     165/      84 : 90 C5               		jmp 	KeyboardLoop 									; and get the next key.
     166/      86 :                     
     167/      86 :                     __KBDBackSpace:
     168/      86 : 40                  		lde 													; get position
     169/      87 : 98 C2               		jz 		KeyboardLoop 									; can't go back if at beginning
     170/      89 : 03                  		scl 													; go back 1 from E
     171/      8A : FC 01               		cai 	1
     172/      8C : 01                  		xae 
     173/      8D : C4 08               		ldi 	8 												; print a backspace
     174/      8F : 3F                  		xppc 	p3
     175/      90 : 90 B9               		jmp 	KeyboardLoop 									; and go round again.
     176/      92 :                     
     177/      92 :                     __CmdMainLoop1:
     178/      92 : 90 A2               		jmp 	CommandMainLoop
     179/      94 :                     
     180/      94 :                     __KBDExit:
 AS V1.42 Beta [Bld 102] - source file monitor.asm - page 4 - 11/29/2015 19:31:32


     181/      94 : C9 80               		st 		-0x80(p1) 										; add the ASCIIZ terminator.
     182/      96 : C4 0D               		ldi 	13												; print a new line.
     183/      98 : 3F                  		xppc 	p3
     184/      99 :                     
     185/      99 :                     ; ****************************************************************************************************************
     186/      99 :                     ;
     187/      99 :                     ;						Extract the 5 bit 3 letter (max command value). P1 points to buffer
     188/      99 :                     ;
     189/      99 :                     ; ****************************************************************************************************************
     190/      99 :                     
     191/      99 : C4 00               		ldi 	0
     192/      9B : 01                  		xae 													; E contains the LSB of the 5 bit shift
     193/      9C : 40                  		lde 	
     194/      9D : CA FF               		st 		-1(p2) 											; -1(P2) contains the MSB
     195/      9F : C9 FF               		st 		modifier-kbdBuffer(p1)							; clear the modifier.
     196/      A1 :                     Extract5Bit:
     197/      A1 : C1 00               		ld 		(p1) 											; look at character
     198/      A3 : 02                  		ccl 													; add 128-65, will be +ve if < 64
     199/      A4 : F4 3F               		adi 	128-65
     200/      A6 : 94 1A               		jp 		__ExtractEnd
     201/      A8 : C4 05               		ldi 	5 												; shift current value left 5 times using -2(p2)
     202/      AA : CA FE               		st 		-2(p2)
     203/      AC :                     __Ex5Shift:
     204/      AC : 40                  		lde 													; shift E left into CY/L
     205/      AD : 02                  		ccl
     206/      AE : 70                  		ade 
     207/      AF : 01                  		xae
     208/      B0 : C2 FF               		ld 		-1(p2) 											; shift CY/L into -1(p2) and carry/link
     209/      B2 : F2 FF               		add 	-1(p2)
     210/      B4 : CA FF               		st 		-1(p2)
     211/      B6 : BA FE               		dld 	-2(p2) 											; done it 5 times ?
     212/      B8 : 9C F2               		jnz 	__Ex5Shift
     213/      BA : C5 01               		ld 		@1(p1) 											; re-read character.
     214/      BC : D4 1F               		ani 	0x1F 											; lower 5 bits only.
     215/      BE : 58                  		ore 													; OR into E
     216/      BF : 01                  		xae
     217/      C0 : 90 DF               		jmp 	Extract5Bit 									; go and get the next one.
     218/      C2 :                     
     219/      C2 :                     __ExtractEnd:
     220/      C2 : C4 23               		ldi 	parPosn & 255 									; P1.L = Parameter Position, A = first non cmd char
     221/      C4 : 31                  		xpal	p1
     222/      C5 : C9 00               		st 		(p1) 											; write to parameter position.
     223/      C7 :                     
     224/      C7 :                     ; ****************************************************************************************************************
     225/      C7 :                     ;
     226/      C7 :                     ;						Find command in -1 (P2) (High) E (Low) in Command table
     227/      C7 :                     ;	
     228/      C7 :                     ; ****************************************************************************************************************
     229/      C7 :                     
     230/      C7 : C4 47               		ldi 	__commandList & 255 							; point P1 to the command list
     231/      C9 : 31                  		xpal 	p1
     232/      CA : C4 07               		ldi 	__commandList / 256 		
     233/      CC : 35                  		xpah 	p1	
     234/      CD :                     __FindCommandLoop:
     235/      CD : C1 00               		ld 		0(p1) 											; reached the end of the table ?
     236/      CF : D9 01               		or 		1(p1)											; which is marked by word 0000
     237/      D1 : 98 31               		jz 		__CommandError
     238/      D3 : C5 03               		ld 		@3(p1) 											; read low byte, and point to next
     239/      D5 : 60                  		xre
     240/      D6 : 9C F5               		jnz 	__FindCommandLoop 								; if different to LSB loop back.
 AS V1.42 Beta [Bld 102] - source file monitor.asm - page 5 - 11/29/2015 19:31:32


     241/      D8 : C1 FE               		ld 		-2(p1) 											; read the high byte
     242/      DA : E2 FF               		xor 	-1(p2) 											; if different to the MSB loop back.
     243/      DC : 9C EF               		jnz 	__FindCommandLoop
     244/      DE :                     
     245/      DE :                     ; ****************************************************************************************************************
     246/      DE :                     ;
     247/      DE :                     ;				Found command, figure out if ASM or Command, if Command go to that routine
     248/      DE :                     ;
     249/      DE :                     ; ****************************************************************************************************************
     250/      DE :                     
     251/      DE : C4 17               		ldi 	(GetParameter-1) & 255 							; point P3 to the get parameter code.
     252/      E0 : 33                  		xpal 	p3
     253/      E1 : C4 04               		ldi 	(GetParameter-1) / 256
     254/      E3 : 37                  		xpah 	p3
     255/      E4 :                     
     256/      E4 : C1 FF               		ld 		-1(p1) 											; read the operation code.
     257/      E6 : D4 F0               		ani 	0xF0 											; look at the m-s-nibble - commands are 0x20.
     258/      E8 : E4 20               		xri 	0x20
     259/      EA : 9C 22               		jnz 	__Assembler
     260/      EC :                     
     261/      EC : C1 FF               		ld 		-1(p1) 											; re-read it
     262/      EE : 02                  		ccl
     263/      EF : F1 FF               		add 	-1(p1) 											; double it
     264/      F1 : D4 1F               		ani 	0x1F 											; lower 5 bits only.
     265/      F3 : F4 EE               		adi 	__CommandTable & 255 							; make P1 point to the command table entry
     266/      F5 : 31                  		xpal 	p1
     267/      F6 : C4 07               		ldi 	__CommandTable / 256 					
     268/      F8 : 35                  		xpah 	p1
     269/      F9 : C1 00               		ld 		0(p1) 											; read low address
     270/      FB : 01                  		xae
     271/      FC : C1 01               		ld 		1(p1) 											; read high address
     272/      FE : 35                  		xpah 	p1 												; put in P1.H
     273/      FF : 40                  		lde 													; get low address
     274/     100 : 31                  		xpal 	p1 												; put in P1.L
     275/     101 : C5 FF               		ld 		@-1(p1) 										; fix up for the pre-increment
     276/     103 : 3D                  		xppc 	p1 												; and go there.
     277/     104 :                     
     278/     104 :                     __CommandError: 												; unknown command.
     279/     104 : C4 03               		ldi 	3 												; set the beeper on
     280/     106 : 07                  		cas
     281/     107 : 8F FF               		dly 	0xFF 											; short delay
     282/     109 : C4 00               		ldi 	0 												; set the beeper off
     283/     10B : 07                  		cas
     284/     10C : 90 84               		jmp 	__CmdMainLoop1
     285/     10E :                     
     286/     10E :                     ; ****************************************************************************************************************
     287/     10E :                     ;												In line Assembler
     288/     10E :                     ; ****************************************************************************************************************
     289/     10E :                     
     290/     10E :                     __Assembler:
     291/     10E : C1 FF               		ld 		-1(p1) 											; this is the operation code to use.
     292/     110 : CE FF               		st 		@-1(p2) 										; push on the stack.
     293/     112 :                     
     294/     112 : 3F                  		xppc 	p3 												; evaluate (any) parameter if present
     295/     113 : 06                  		csa 													; check carry flag set
     296/     114 : 94 27               		jp 		__ASMNoParameter  								; if clear, no parameter was provided.
     297/     116 :                     
     298/     116 : C4 23               		ldi 	parPosn & 255
     299/     118 : 31                  		xpal 	p1 												; get the parameter LSB
     300/     119 : CE FF               		st 		@-1(p2) 										; push that on the stack, set P1 to parPosn
 AS V1.42 Beta [Bld 102] - source file monitor.asm - page 6 - 11/29/2015 19:31:32


     301/     11B : C4 0C               		ldi 	parPosn / 256
     302/     11D : 35                  		xpah 	p1
     303/     11E : C1 00               		ld 		(p1) 											; read current position
     304/     120 : 31                  		xpal 	p1 												; P1 now points to character.
     305/     121 : C1 00               		ld 		(p1) 											; read character
     306/     123 : E4 21               		xri 	'!'												; is it the label pling ?
     307/     125 : 9C 1E               		jnz 	__ASMContinue 									; we don't need to change this pointer , we should technically.
     308/     127 : C2 00               		ld 		(p2) 											; read the value, which is the label number
     309/     129 : 03                  		scl
     310/     12A : FC 20               		cai 	labelCount 										; is it a valid label number
     311/     12C : 94 D6               		jp 		__CommandError 									; no, beep.
     312/     12E : C2 00               		ld 		(p2) 											; re-read the label number
     313/     130 : 01                  		xae 													; put in E
     314/     131 : C4 0C               		ldi 	Labels/256 										; point p1 to labels
     315/     133 : 35                  		xpah 	p1
     316/     134 : C4 00               		ldi 	Labels&255 
     317/     136 : 31                  		xpal 	p1
     318/     137 : C1 80               		ld 		-0x80(p1) 										; read label indexed using E.
     319/     139 : CA 00               		st 		(p2) 											; save as the operand
     320/     13B : 90 08               		jmp 	__ASMContinue 									; and continue
     321/     13D :                     
     322/     13D :                     __ASMNoParameter:
     323/     13D : C2 00               		ld 		(p2) 											; read the pushed operation code
     324/     13F : D4 80               		ani 	0x80 											; is bit 7 set ?
     325/     141 : 9C C1               		jnz 	__CommandError 									; if it is, we need a parameter
     326/     143 : CE FF               		st 		@-1(p2) 										; push zero on the stack as a dummy parameter.
     327/     145 :                     
     328/     145 :                     __ASMContinue:
     329/     145 : C4 0C               		ldi 	Current/256 									; p3 = &Current Address
     330/     147 : 37                  		xpah 	p3
     331/     148 : C4 21               		ldi 	Current&255
     332/     14A : 33                  		xpal 	p3
     333/     14B :                     
     334/     14B : C3 03               		ld 		modifier-Current(p3) 							; get the modifier (e.g. @,Pn etc.)
     335/     14D : 02                  		ccl
     336/     14E : F2 01               		add 	1(p2) 											; add to the opcode and write it back
     337/     150 : CA 01               		st 		1(p2)
     338/     152 :                     
     339/     152 : C3 00               		ld 		(p3) 											; read current address into P1
     340/     154 : 31                  		xpal 	p1
     341/     155 : C3 01               		ld 		1(p3)
     342/     157 : 35                  		xpah 	p1
     343/     158 :                     
     344/     158 : C2 01               		ld 		1(p2) 											; read opcode.
     345/     15A : CD 01               		st 		@1(p1) 											; write out to current address and bump it.
     346/     15C : 94 1F               		jp 		__ASMExit 										; if +ve then no operand byte, exit.
     347/     15E :                     
     348/     15E : C2 00               		ld 		(p2) 											; read the operand byte
     349/     160 : CD 01               		st 		@1(p1) 											; write that out as well.
     350/     162 :                     
     351/     162 : C3 03               		ld 		modifier-Current(p3) 							; look at the modifier 
     352/     164 : 9C 17               		jnz 	__ASMExit 										; if non zero we don't need to do anything P0 = 00
     353/     166 : C2 01               		ld 		1(p2) 											; DLY is a special case
     354/     168 : E4 8F               		xri 	0x8F 											; where the modifier is zero but not PC relative.
     355/     16A : 98 11               		jz 		__ASMExit 												
     356/     16C :                     
     357/     16C : C1 FF               		ld 		-1(p1) 											; read operand
     358/     16E : 02                  		ccl 													; one fewer because we want the current addr+1 low
     359/     16F : FB 00               		cad 	(p3) 											; subtract the current address low.
     360/     171 : C9 FF               		st 		-1(p1) 											; write it back
 AS V1.42 Beta [Bld 102] - source file monitor.asm - page 7 - 11/29/2015 19:31:32


     361/     173 :                     
     362/     173 : C2 01               		ld 		1(p2) 											; read opcode again
     363/     175 : D4 F0               		ani 	0xF0 											; is it 9x (a JMP command)
     364/     177 : E4 90               		xri 	0x90
     365/     179 : 9C 02               		jnz 	__ASMExit 										; if not, we are done
     366/     17B : B9 FF               		dld 	-1(p1) 											; one fewer because of the pre-increment
     367/     17D :                     __ASMExit:
     368/     17D : 31                  		xpal 	p1 												; write current address back out
     369/     17E : CB 00               		st 		(p3)
     370/     180 : 35                  		xpah 	p1
     371/     181 : CB 01               		st 		1(p3)
     372/     183 : C6 02               		ld 		@2(p2) 											; drop stack values.
     373/     185 :                     
     374/     185 : 90 0C               		jmp 	__CmdMainLoop2 									; back to command loop
     375/     187 :                     
     376/     187 :                     ; ****************************************************************************************************************
     377/     187 :                     ; ****************************************************************************************************************
     378/     187 :                     ;
     379/     187 :                     ;												Commands Section
     380/     187 :                     ;
     381/     187 :                     ; ****************************************************************************************************************
     382/     187 :                     ; ****************************************************************************************************************
     383/     187 :                     
     384/     187 :                     ; ****************************************************************************************************************
     385/     187 :                     ;											A : Set Current address
     386/     187 :                     ; ****************************************************************************************************************
     387/     187 :                     
     388/     187 :                     Address_Command:
     389/     187 : 3F                  		xppc 	p3 												; get parameter if exists
     390/     188 : 3F                  		xppc 	p3 												; update current if exists.
     391/     189 : 90 08               		jmp 	__CmdMainLoop2
     392/     18B :                     
     393/     18B :                     __CmdParameterFail:
     394/     18B : C4 02               		ldi 	2 												; set the beeper on
     395/     18D : 07                  		cas
     396/     18E : 8F FF               		dly 	0xFF 											; short delay
     397/     190 : C4 00               		ldi 	0 												; set the beeper off
     398/     192 : 07                  		cas
     399/     193 :                     __CmdMainLoop2:													; and go back to the start.
     400/     193 : C4 35               		ldi 	(CommandMainLoop-1) & 255
     401/     195 : 33                  		xpal 	p3
     402/     196 : C4 00               		ldi 	(CommandMainLoop-1) / 256
     403/     198 : 37                  		xpah 	p3
     404/     199 : 3F                  		xppc 	p3
     405/     19A :                     
     406/     19A :                     ; ****************************************************************************************************************
     407/     19A :                     ;										G : Go (Address must be specified.)
     408/     19A :                     ; ****************************************************************************************************************
     409/     19A :                     
     410/     19A :                     Go_Command:
     411/     19A : 3F                  		xppc 	p3 												; get parameter, which should exist.
     412/     19B : 06                  		csa 													; look at CY/L which is set if it was.
     413/     19C : 94 ED               		jp 		__CmdParameterFail 								; if it is clear, beep an error.
     414/     19E : 31                  		xpal 	p1 												; copy P1 to P3
     415/     19F : 33                  		xpal 	p3
     416/     1A0 : 35                  		xpah 	p1
     417/     1A1 : 37                  		xpah 	p3
     418/     1A2 : C7 FF               		ld 		@-1(p3) 										; fix up for pre increment
     419/     1A4 : 3F                  		xppc 	p3 												; call the routine.		
     420/     1A5 :                     __CmdMainLoop3:
 AS V1.42 Beta [Bld 102] - source file monitor.asm - page 8 - 11/29/2015 19:31:32


     421/     1A5 : 90 EC               		jmp 	__CmdMainLoop2 									; re-enter monitor.
     422/     1A7 :                     
     423/     1A7 :                     ; ****************************************************************************************************************
     424/     1A7 :                     ;			PUT Write to tape : data mandatory, it is the byte count from the current address.
     425/     1A7 :                     ; ****************************************************************************************************************
     426/     1A7 :                     
     427/     1A7 :                     PutTape_Command:
     428/     1A7 : 3F                  		xppc 	p3 												; get the bytes to write.
     429/     1A8 : 06                  		csa 													; if CC, no value was provided
     430/     1A9 : 94 E0               		jp 		__CmdParameterFail 								; which is an error.
     431/     1AB : 31                  		xpal 	p1 												; store low byte count in -1(P2)
     432/     1AC : CA FF               		st 		-1(p2)
     433/     1AE : 35                  		xpah 	p1 												; store high byte count in -2(P2)
     434/     1AF : CA FE               		st 		-2(p2)
     435/     1B1 : 02                  		ccl 													; skip over the update current address
     436/     1B2 : 3F                  		xppc 	p3 												; this won't update current address as CY/L = 0
     437/     1B3 : 3F                  		xppc 	p3 												; and load the current address into P1.
     438/     1B4 : C4 00               		ldi 	0 												; set the output tape bit low
     439/     1B6 : 01                  		xae
     440/     1B7 : 19                  		sio
     441/     1B8 : C4 20               		ldi 	32 												; tape leader
     442/     1BA : CA FD               		st 		-3(p2)
     443/     1BC :                     _PutTapeLeader:
     444/     1BC : 8F FF               		dly 	0xFF
     445/     1BE : BA FD               		dld 	-3(p2)
     446/     1C0 : 9C FA               		jnz 	_PutTapeLeader
     447/     1C2 :                     _PutTapeByte:													; output byte at P1
     448/     1C2 : C4 00               		ldi 	0 												; set output bit to 0
     449/     1C4 : 01                  		xae 	
     450/     1C5 : 19                  		sio
     451/     1C6 : 8F 10               		dly 	tapeDelay * 4 									; 0 continuation bit + gap between tapes with no signal 
     452/     1C8 : C4 80               		ldi 	0x80 											; set bit high
     453/     1CA : 01                  		xae
     454/     1CB : 19                  		sio 
     455/     1CC : C4 00               		ldi 	0
     456/     1CE : 8F 04               		dly 	tapeDelay 										; output the start bit.
     457/     1D0 : C5 01               		ld 		@1(p1) 											; read the byte and put it in E.
     458/     1D2 : 01                  		xae
     459/     1D3 : C4 08               		ldi 	8 												; output 8 bits
     460/     1D5 : CA FD               		st 		-3(p2)
     461/     1D7 :                     _PutTapeBit:
     462/     1D7 : 19                  		sio 													; output MSB and shift
     463/     1D8 : C4 00               		ldi 	0
     464/     1DA : 8F 04               		dly 	tapeDelay 								
     465/     1DC : BA FD               		dld 	-3(p2) 											; do all 8 bits.
     466/     1DE : BA FF               		dld 	-1(p2) 											; decrement counter
     467/     1E0 : 9C E0               		jnz 	_PutTapeByte
     468/     1E2 : BA FE               		dld 	-2(p2) 											; note MSB goes 0 to -1 when finished.
     469/     1E4 : 94 DC               		jp 		_PutTapeByte
     470/     1E6 : C4 80               		ldi 	0x80 											; add the termination bit.
     471/     1E8 : 01                  		xae
     472/     1E9 : 19                  		sio
     473/     1EA : C4 00               		ldi 	0 												; put that out.
     474/     1EC : 8F 04               		dly 	TapeDelay
     475/     1EE : C4 00               		ldi 	0 												; and set the leve back to 0
     476/     1F0 : 01                  		xae 
     477/     1F1 : 19                  		sio
     478/     1F2 :                     __CmdMainLoop4:
     479/     1F2 : 90 B1               		jmp 	__CmdMainLoop3
     480/     1F4 :                     
 AS V1.42 Beta [Bld 102] - source file monitor.asm - page 9 - 11/29/2015 19:31:32


     481/     1F4 :                     __CmdParameterFail1:
     482/     1F4 : 90 95               		jmp 	__CmdParameterFail
     483/     1F6 :                     
     484/     1F6 :                     ; ****************************************************************************************************************
     485/     1F6 :                     ;						GET [addr] load tape to current position or given address.
     486/     1F6 :                     ; ****************************************************************************************************************
     487/     1F6 :                     
     488/     1F6 :                     LoadTape_Command:
     489/     1F6 : 3F                  		xppc	p3 												; get parameter
     490/     1F7 : 3F                  		xppc 	p3												; update current address
     491/     1F8 : 3F                  		xppc 	p3 												; current address to P1.
     492/     1F9 : C4 08               		ldi 	0x8 											; point P3 to the keyboard.
     493/     1FB : 37                  		xpah 	p3
     494/     1FC :                     __GetTapeWait:
     495/     1FC : C3 00               		ld 		0(p3) 											; check keyboard break
     496/     1FE : D4 80               		ani 	0x80
     497/     200 : 9C F2               		jnz 	__CmdParameterFail1
     498/     202 : 19                  		sio 													; wait for the start bit, examine tape in.
     499/     203 : 40                  		lde 
     500/     204 : D4 01               		ani 	1
     501/     206 : 98 F4               		jz 		__GetTapeWait
     502/     208 : 8F 06               		dly 	tapeDelay * 3 / 2 								; half way into the first bit.
     503/     20A : C4 08               		ldi 	8 												; read in 8 bits.
     504/     20C : CA FF               		st 		-1(p2)
     505/     20E :                     __GetTapeBits:
     506/     20E : 19                  		sio 													; read in one bit
     507/     20F : C4 00               		ldi 	0
     508/     211 : 8F 04               		dly 	tapeDelay 										; delay to next bit
     509/     213 : BA FF               		dld 	-1(p2) 											; read 8 bits.
     510/     215 : 9C F7               		jnz 	__GetTapeBits 
     511/     217 : 40                  		lde 													; store byte at current address
     512/     218 : CD 01               		st 		@1(p1)
     513/     21A : 19                  		sio 													; read in the byte, which is zero if continuing.
     514/     21B : 40                  		lde  													; examine bit 0
     515/     21C : D4 01               		ani 	1
     516/     21E : 98 DC               		jz 		__GetTapeWait 									; go and wait for the next start bit.
     517/     220 :                     __CmdMainLoop5:
     518/     220 : 90 D0               		jmp 	__CmdMainLoop4
     519/     222 :                     
     520/     222 :                     ; ****************************************************************************************************************
     521/     222 :                     ;										L : nn Set Label to current address
     522/     222 :                     ; ****************************************************************************************************************
     523/     222 :                     
     524/     222 :                     Label_Command:
     525/     222 : 3F                  		xppc 	p3 												; get parameter
     526/     223 : 06                  		csa 													; check it exists, CY/L must be set
     527/     224 : 94 CE               		jp 		__CmdParameterFail1
     528/     226 : 31                  		xpal 	p1 												; get into A
     529/     227 : 01                  		xae 													; put into E
     530/     228 : 40                  		lde 													; get back
     531/     229 : 03                  		scl
     532/     22A : FC 20               		cai 	labelCount 										; check is < number of labels
     533/     22C : 94 C6               		jp 		__CmdParameterFail1
     534/     22E :                     
     535/     22E : C4 0C               		ldi 	Current/256 									; point P1 to current address
     536/     230 : 35                  		xpah 	p1
     537/     231 : C4 21               		ldi 	Current&255
     538/     233 : 31                  		xpal 	p1
     539/     234 : C1 00               		ld 		(p1) 											; read current address
     540/     236 : 31                  		xpal 	p1 												; save in P1.Low
 AS V1.42 Beta [Bld 102] - source file monitor.asm - page 10 - 11/29/2015 19:31:32


     541/     237 : C4 00               		ldi 	Labels&255 										; get labels low byte in same page as current address
     542/     239 : 02                  		ccl
     543/     23A : 70                  		ade 													; add label # to it
     544/     23B : 31                  		xpal 	p1 												; put in P1.L and restore current address low
     545/     23C : C9 00               		st 		(p1) 											; store current address low in label space.
     546/     23E : 90 E0               		jmp 	__CmdMainLoop5 									; and exit.
     547/     240 :                     
     548/     240 :                     ; ****************************************************************************************************************
     549/     240 :                     ;											M :	Dump Memory
     550/     240 :                     ; ****************************************************************************************************************
     551/     240 :                     
     552/     240 :                     MemoryDump_Command:
     553/     240 : 3F                  		xppc 	p3 												; get parameter if exists
     554/     241 : 3F                  		xppc 	p3 												; update current if exists.
     555/     242 : C4 06               		ldi 	6 												; print six rows
     556/     244 : CE FF               		st 		@-1(p2)
     557/     246 :                     __DCLoop:
     558/     246 : C4 03               		ldi 	(PrintAddressData-1)/256						; print one row of address and data.
     559/     248 : 37                  		xpah 	p3
     560/     249 : C4 E4               		ldi 	(PrintAddressData-1)&255
     561/     24B : 33                  		xpal 	p3
     562/     24C : C4 04               		ldi 	4
     563/     24E : 3F                  		xppc 	p3
     564/     24F : C4 0C               		ldi 	Current/256 									; point P1 to current
     565/     251 : 35                  		xpah 	p1
     566/     252 : C4 21               		ldi 	Current&255 
     567/     254 : 31                  		xpal 	p1
     568/     255 : C1 00               		ld 		0(p1) 											; add 4 to current address
     569/     257 : 02                  		ccl
     570/     258 : F4 04               		adi 	4
     571/     25A : C9 00               		st 		0(p1)
     572/     25C : C1 01               		ld 		1(p1)
     573/     25E : F4 00               		adi 	0
     574/     260 : C9 01               		st 		1(p1)
     575/     262 : BA 00               		dld 	(p2) 											; do it 7 times
     576/     264 : 9C E0               		jnz 	__DCLoop
     577/     266 : C6 01               		ld 		@1(p2) 											; fix up stack.
     578/     268 :                     __CmdMainLoop6:
     579/     268 : 90 B6               		jmp 	__CmdMainLoop5
     580/     26A :                     
     581/     26A :                     
     582/     26A :                     ; ****************************************************************************************************************
     583/     26A :                     ;								B: Enter Bytes (no address, sequence of byte data)
     584/     26A :                     ; ****************************************************************************************************************
     585/     26A :                     
     586/     26A :                     EnterBytes_Command:
     587/     26A : C4 17               		ldi 	(GetParameter-1) & 255 							; P3 = Get Parameter routine
     588/     26C : 33                  		xpal 	p3
     589/     26D : C4 04               		ldi 	(GetParameter-1) / 256 	
     590/     26F : 37                  		xpah 	p3
     591/     270 : 3F                  		xppc 	p3 												; get the parameter.
     592/     271 : 06                  		csa 													; look at carry
     593/     272 : 94 AC               		jp 		__CmdMainLoop5 									; carry clear, no value.
     594/     274 : C4 0C               		ldi 	Current/256 									; make P1 point to current
     595/     276 : 35                  		xpah 	p1
     596/     277 : C4 21               		ldi 	Current&255 										
     597/     279 : 31                  		xpal 	p1 												; this pulls the byte value into A
     598/     27A : 01                  		xae 													; save it in E
     599/     27B : C1 00               		ld 		0(p1) 											; copy address to save to into P3
     600/     27D : 33                  		xpal 	p3
 AS V1.42 Beta [Bld 102] - source file monitor.asm - page 11 - 11/29/2015 19:31:32


     601/     27E : C1 01               		ld 		1(p1) 
     602/     280 : 37                  		xpah 	p3 
     603/     281 : 40                  		lde 													; get byte back
     604/     282 : CB 00               		st 		(p3) 											; save it in that location
     605/     284 : A9 00               		ild 	0(p1) 											; bump current address and go back and try again.
     606/     286 : 9C E2               		jnz 	EnterBytes_Command
     607/     288 : A9 01               		ild 	1(p1)
     608/     28A : 90 DE               		jmp 	EnterBytes_Command
     609/     28C :                     
     610/     28C :                     ; ****************************************************************************************************************
     611/     28C :                     ;											D [aaaa] Disassembler
     612/     28C :                     ; ****************************************************************************************************************
     613/     28C :                     
     614/     28C :                     Disassemble_Command:	
     615/     28C : 3F                  		xppc 	p3 												; evaluate
     616/     28D : 3F                  		xppc 	p3 												; update current if new value
     617/     28E : C4 06               		ldi 	6 												; instructions to disassemble counter
     618/     290 : CE FC               		st 		@-4(p2)											; p2 + 0 = counter p2 + 1 = opcode p2 + 2 = operand
     619/     292 :                     __DAssLoop:														; p2 + 3 = opcode - base opcode.
     620/     292 : C4 03               		ldi 	(PrintAddressData-1)/256						; print Address only
     621/     294 : 37                  		xpah 	p3
     622/     295 : C4 E4               		ldi 	(PrintAddressData-1)&255
     623/     297 : 33                  		xpal 	p3
     624/     298 : C4 00               		ldi 	0
     625/     29A : 3F                  		xppc 	p3
     626/     29B : C4 0C               		ldi 	Current / 256 									; point P1 to current address
     627/     29D : 35                  		xpah 	p1
     628/     29E : C4 21               		ldi 	Current & 255
     629/     2A0 : 31                  		xpal 	p1
     630/     2A1 : C1 00               		ld 		0(p1) 											; load current address into P3
     631/     2A3 : 33                  		xpal 	p3
     632/     2A4 : C1 01               		ld 		1(p1)
     633/     2A6 : 37                  		xpah 	p3
     634/     2A7 : C7 01               		ld 		@1(p3) 											; read opcode
     635/     2A9 : CA 01               		st 		1(p2) 											; save it
     636/     2AB : 94 04               		jp 		__DAssNoOperand 								; if +ve no operand
     637/     2AD : C7 01               		ld 		@1(p3) 											; read operand
     638/     2AF : CA 02               		st 		2(p2) 											; save it
     639/     2B1 :                     __DAssNoOperand:
     640/     2B1 : C4 E9               		ldi 	(__CommandListEnd-3) & 255
     641/     2B3 : 33                  		xpal 	p3 												; update current position, setting P3 to last entry
     642/     2B4 : C9 00               		st 		0(p1)											; in command table.
     643/     2B6 : C4 07               		ldi 	(__CommandListEnd-3) / 256
     644/     2B8 : 37                  		xpah 	p3
     645/     2B9 : C9 01               		st 		1(p1)
     646/     2BB :                     
     647/     2BB :                     __DAssFindOpcode: 												; the table is : text (word) opcode (byte)
     648/     2BB : C2 01               		ld 		1(p2) 											; get opcode
     649/     2BD : E3 02               		xor 	2(p3) 											; check in the same 8 byte page.
     650/     2BF : D4 F0               		ani 	0xF0
     651/     2C1 : 9C 0B               		jnz 	__DAssNextOpcode
     652/     2C3 : C2 01               		ld 		1(p2) 											; get opcode
     653/     2C5 : 03                  		scl
     654/     2C6 : FB 02               		cad 	2(p3) 											; subtract the base opcode.
     655/     2C8 : CA 03               		st 		3(p2) 											; save a the offset (possible)
     656/     2CA : D4 E0               		ani 	0xE0 											; it needs to be 0x20 or less
     657/     2CC : 98 08               		jz 		__DAssFoundOpcode 								; if >= 0 then found the correct opcode.
     658/     2CE :                     __DAssNextOpcode:
     659/     2CE : C7 FD               		ld 		@-3(p3) 										; go to previous entry in table
     660/     2D0 : 90 E9               		jmp 	__DAssFindOpcode
 AS V1.42 Beta [Bld 102] - source file monitor.asm - page 12 - 11/29/2015 19:31:32


     661/     2D2 :                     
     662/     2D2 :                     __DAssLoop2:
     663/     2D2 : 90 BE               		jmp 	__DAssLoop
     664/     2D4 :                     __CmdMainLoop7:
     665/     2D4 : 90 92               		jmp 	__CmdMainLoop6
     666/     2D6 :                     
     667/     2D6 :                     __DAssFoundOpcode:
     668/     2D6 : C3 02               		ld 		2(p3) 											; look at opcode that matched.
     669/     2D8 : D4 87               		ani 	0x87 											; match with 1xxx x100
     670/     2DA : E4 84               		xri 	0x84 											; which is all the immediate instructions.		
     671/     2DC : 9C 04               		jnz 	__DAssNotImmediate
     672/     2DE : C2 03               		ld 		3(p2) 											; only do immediate if base offset is zero
     673/     2E0 : 9C EC               		jnz 	__DAssNextOpcode 								; fixes C0-C7 being LD, but C4 being LDI.
     674/     2E2 :                     __DAssNotImmediate:
     675/     2E2 : C3 00               		ld 		0(p3) 											; save LSB of text on stack
     676/     2E4 : CE FF               		st 		@-1(p2)
     677/     2E6 : C3 01               		ld 		1(p3) 											; and the MSB of text on stack
     678/     2E8 : CE FF               		st 		@-1(p2)
     679/     2EA :                     
     680/     2EA : C4 03               		ldi 	(PrintCharacter-1) / 256 						; set P3 up to print characters
     681/     2EC : 37                  		xpah 	p3
     682/     2ED : C4 77               		ldi 	(PrintCharacter-1) & 255 
     683/     2EF : 33                  		xpal 	p3
     684/     2F0 : C4 20               		ldi 	' '												; print a space.
     685/     2F2 : 3F                  		xppc 	p3
     686/     2F3 :                     
     687/     2F3 : C4 03               		ldi 	3 												; print 3 characters
     688/     2F5 : CE FF               		st 		@-1(p2) 										; so +0 is count, +1 = text MSB, +2 = text LSB
     689/     2F7 :                     __DAssPrintMnemonic:
     690/     2F7 : C2 01               		ld 		1(p2) 											; get text MSB which is in bits .xxxxx..
     691/     2F9 : 1C                  		sr 														; shift right twice.
     692/     2FA : 1C                  		sr
     693/     2FB : D4 1F               		ani 	0x1F 											; lower 5 bits only
     694/     2FD : 9C 02               		jnz 	__DAssNotSpace 									; if zero it is a space.
     695/     2FF : C4 E0               		ldi 	-32 											; will map 0 onto 32 when 64 is added.
     696/     301 :                     __DAssNotSpace:
     697/     301 : 02                  		ccl 													; make it 7 bit ASCII code.
     698/     302 : F4 40               		adi 	64 							
     699/     304 : 3F                  		xppc 	p3 												; display the character
     700/     305 : C4 05               		ldi 	5 												; now shift the encoded data left 5 times
     701/     307 : CA FF               		st 		-1(p2)
     702/     309 :                     __DAssShiftEncode:
     703/     309 : 02                  		ccl
     704/     30A : C2 02               		ld 		2(p2)
     705/     30C : F2 02               		add 	2(p2)
     706/     30E : CA 02               		st 		2(p2)
     707/     310 : C2 01               		ld 		1(p2)
     708/     312 : F2 01               		add 	1(p2)
     709/     314 : CA 01               		st 		1(p2)
     710/     316 : BA FF               		dld 	-1(p2)
     711/     318 : 9C EF               		jnz 	__DAssShiftEncode
     712/     31A : BA 00               		dld 	0(p2) 											; done all three characters
     713/     31C : 9C D9               		jnz 	__DAssPrintMnemonic 							; if not keep going.
     714/     31E :                     
     715/     31E : C6 03               		ld 		@3(p2) 											; remove mnemonic stuff off the stack.
     716/     320 :                     
     717/     320 : C2 03               		ld 		3(p2) 											; print instruction modifier if required.
     718/     322 : 9C 1F               		jnz 	__DAssPrintModifier
     719/     324 :                     
     720/     324 :                     __DAssPrintOperand:
 AS V1.42 Beta [Bld 102] - source file monitor.asm - page 13 - 11/29/2015 19:31:32


     721/     324 : C2 01               		ld 		1(p2) 											; get original opcode
     722/     326 : 94 0A               		jp 		__DAssNext 										; if no operand go to next line of disassembly.
     723/     328 : C4 03               		ldi 	(PrintHexByte-1) / 256 							; set P3 to point to the hex printer
     724/     32A : 37                  		xpah 	p3
     725/     32B : C4 44               		ldi 	(PrintHexByte-1) & 255
     726/     32D : 33                  		xpal 	p3
     727/     32E : C2 02               		ld 		2(p2) 											; get operand
     728/     330 : 03                  		scl 
     729/     331 : 3F                  		xppc 	p3 												; print it out with a leading space.
     730/     332 :                     
     731/     332 :                     __DAssNext:
     732/     332 : C4 03               		ldi 	(PrintCharacter-1) / 256 						; set P3 up to print characters
     733/     334 : 37                  		xpah 	p3
     734/     335 : C4 77               		ldi 	(PrintCharacter-1) & 255 
     735/     337 : 33                  		xpal 	p3
     736/     338 : C4 0D               		ldi 	13												; print a newline.
     737/     33A : 3F                  		xppc 	p3
     738/     33B :                     
     739/     33B : BA 00               		dld 	0(p2) 											; done all 6 lines
     740/     33D : 9C 93               		jnz 	__DAssLoop2 									; no, go round again.
     741/     33F : C6 04               		ld 		@4(p2) 											; fix up the stack.
     742/     341 : 90 91               		jmp 	__CmdMainLoop7 									; and time to exit.
     743/     343 :                     
     744/     343 :                     
     745/     343 :                     __DAssPrintModifier:
     746/     343 :                     
     747/     343 :                     		; TODO display the modifier (@Pn) if appropriate and a trailing space.
     748/     343 :                     
     749/     343 : 90 DF               		jmp 	__DAssPrintOperand
     750/     345 :                     
     751/     345 :                     
     752/     345 :                     ; ****************************************************************************************************************
     753/     345 :                     ; ****************************************************************************************************************
     754/     345 :                     ;
     755/     345 :                     ;						Print A as a hexadecimal 2 digit value. If CY/L set precede with space
     756/     345 :                     ;
     757/     345 :                     ; ****************************************************************************************************************
     758/     345 :                     ; ****************************************************************************************************************
     759/     345 :                     
     760/     345 :                     PrintHexByte:
     761/     345 : CE FF               		st 		@-1(p2) 										; push A and P3, set P3 up to print character
     762/     347 : C4 03               		ldi 	(PrintCharacter-1)/256
     763/     349 : 37                  		xpah 	p3
     764/     34A : CE FF               		st 		@-1(p2)
     765/     34C : C4 77               		ldi 	(PrintCharacter-1)&255
     766/     34E : 33                  		xpal 	p3
     767/     34F : CE FF               		st 		@-1(p2)
     768/     351 : 06                  		csa 													; check carry
     769/     352 : 94 03               		jp 		__PHBNoSpace									; if clear, no space.
     770/     354 : C4 20               		ldi 	' '												; print leading space
     771/     356 : 3F                  		xppc 	p3 
     772/     357 :                     __PHBNoSpace:
     773/     357 : C2 02               		ld 		2(p2) 											; read digit
     774/     359 : 1C                  		sr 														; convert MSB
     775/     35A : 1C                  		sr
     776/     35B : 1C                  		sr
     777/     35C : 1C                  		sr
     778/     35D : 02                  		ccl
     779/     35E : EC 90               		dai 	0x90
     780/     360 : EC 40               		dai 	0x40
 AS V1.42 Beta [Bld 102] - source file monitor.asm - page 14 - 11/29/2015 19:31:32


     781/     362 : 3F                  		xppc 	p3 												; print
     782/     363 : C2 02               		ld 		2(p2) 											; read digit
     783/     365 : D4 0F               		ani 	0x0F 											; convert LSB
     784/     367 : 02                  		ccl
     785/     368 : EC 90               		dai 	0x90
     786/     36A : EC 40               		dai 	0x40
     787/     36C : 3F                  		xppc 	p3 												; print
     788/     36D :                     
     789/     36D : C6 01               		ld 		@1(p2) 											; restore P3 & A and Return
     790/     36F : 33                  		xpal 	p3
     791/     370 : C6 01               		ld 		@1(p2)
     792/     372 : 37                  		xpah 	p3
     793/     373 : C6 01               		ld 		@1(p2)
     794/     375 : 3F                  		xppc 	p3
     795/     376 : 90 CD               		jmp 	PrintHexByte
     796/     378 :                     
     797/     378 :                     ; ****************************************************************************************************************
     798/     378 :                     ; ****************************************************************************************************************
     799/     378 :                     ;
     800/     378 :                     ;		Print Character in A, preserves all registers, re-entrant. Handles 13 (New Line), 8 (Backspace)
     801/     378 :                     ;		Characters 32 - 95 only.
     802/     378 :                     ;	
     803/     378 :                     ;		Rolls to screen top rather than scrolling.
     804/     378 :                     ;
     805/     378 :                     ; ****************************************************************************************************************
     806/     378 :                     ; ****************************************************************************************************************
     807/     378 :                     
     808/     378 :                     PrintCharacter:
     809/     378 : CE FF               		st 		@-1(p2) 										; save A
     810/     37A : C4 0C               		ldi 	Cursor/256 										; save P1, setting up P1 -> Cursor at same time.
     811/     37C : 35                  		xpah 	p1
     812/     37D : CE FF               		st 		@-1(p2)
     813/     37F : C4 20               		ldi 	Cursor&255
     814/     381 : 31                  		xpal 	p1
     815/     382 : CE FF               		st 		@-1(p2)
     816/     384 : C4 00               		ldi 	0 												; save P3, setting up P3 -> Page 0 (Video RAM Write)
     817/     386 : 37                  		xpah 	p3
     818/     387 : CE FF               		st 		@-1(p2)
     819/     389 : 33                  		xpal 	p3
     820/     38A : CE FF               		st 		@-1(p2)
     821/     38C :                     
     822/     38C : C1 00               		ld 		(p1) 											; read cursor position
     823/     38E : 33                  		xpal 	p3 												; put in P3.Low
     824/     38F :                     
     825/     38F : C4 20               		ldi 	' ' 											; erase the cursor.
     826/     391 : CB 00               		st 		0(p3)
     827/     393 :                     
     828/     393 : C2 04               		ld 		4(p2) 											; read character to print.
     829/     395 : E4 0D               		xri 	13 												; is it CR ?
     830/     397 : 98 40               		jz 		__PCNewLine 									; if so, go to new line.
     831/     399 : E4 05               		xri 	13!8 											; is it Backspace ?
     832/     39B : 98 30               		jz 		__PCBackSpace
     833/     39D :                     
     834/     39D : C2 04               		ld 		4(p2) 											; get character to print
     835/     39F : D4 3F               		ani 	0x3F 											; make 6 bit ASCII
     836/     3A1 : CF 01               		st 		@1(p3) 											; write into P3, e.g. the screen and bump it.
     837/     3A3 : A9 00               		ild 	(p1) 											; increment cursor position and load
     838/     3A5 : D4 0F               		ani 	15 												; are we at line start ?
     839/     3A7 : 9C 0C               		jnz 	__PCExit 										; if so, erase the current line.
     840/     3A9 :                     
 AS V1.42 Beta [Bld 102] - source file monitor.asm - page 15 - 11/29/2015 19:31:32


     841/     3A9 :                     __PCBlankNewLine:
     842/     3A9 : C4 10               		ldi 	16 												; count to 16, the number of spaces to write out.
     843/     3AB : CA FF               		st 		-1(p2) 
     844/     3AD :                     __PCBlankNewLineLoop:
     845/     3AD : C4 20               		ldi 	' '
     846/     3AF : CF 01               		st 		@1(p3)
     847/     3B1 : BA FF               		dld 	-1(p2)
     848/     3B3 : 9C F8               		jnz 	__PCBlankNewLineLoop
     849/     3B5 :                     
     850/     3B5 :                     __PCExit:
     851/     3B5 : C1 00               		ld 		(p1) 											; read cursor
     852/     3B7 : 33                  		xpal 	p3 												; put in P3.L
     853/     3B8 : C4 9B               		ldi 	0x9B 											; shaded block cursor on screen
     854/     3BA : CB 00               		st 		(p3)
     855/     3BC : C6 01               		ld 		@1(p2)											; restore P3
     856/     3BE : 33                  		xpal 	p3
     857/     3BF : C6 01               		ld 		@1(p2)
     858/     3C1 : 37                  		xpah 	p3
     859/     3C2 : C6 01               		ld 		@1(p2)											; restore P1
     860/     3C4 : 31                  		xpal 	p1
     861/     3C5 : C6 01               		ld 		@1(p2)
     862/     3C7 : 35                  		xpah 	p1
     863/     3C8 : C6 01               		ld 		@1(p2) 											; restore A and Return.	
     864/     3CA : 3F                  		xppc 	p3
     865/     3CB : 90 AB               		jmp 	PrintCharacter 									; and it is re-entrant.
     866/     3CD :                     
     867/     3CD :                     __PCBackSpace:
     868/     3CD : 33                  		xpal 	p3 												; get current cursor position
     869/     3CE : 98 E5               		jz 		__PCExit 										; if top of screen then exit.
     870/     3D0 : B9 00               		dld 	(p1) 											; backspace and load cursor
     871/     3D2 : 33                  		xpal 	p3 												; put in P3
     872/     3D3 : C4 20               		ldi 	' '												; erase character there
     873/     3D5 : CB 00               		st 		(p3)
     874/     3D7 : 90 DC               		jmp 	__PCExit 										; and exit.
     875/     3D9 :                     
     876/     3D9 :                     __PCNewLine:
     877/     3D9 : C1 00               		ld 		(p1) 											; read cursor position
     878/     3DB : D4 70               		ani 	0x70 											; line
     879/     3DD : 02                  		ccl 													; next line
     880/     3DE : F4 10               		adi 	0x10
     881/     3E0 : C9 00               		st 		(p1) 											; write back
     882/     3E2 : 33                  		xpal 	p3 												; put in P3.L
     883/     3E3 : 90 C4               		jmp 	__PCBlankNewLine
     884/     3E5 :                     
     885/     3E5 :                     ; ****************************************************************************************************************
     886/     3E5 :                     ; ****************************************************************************************************************
     887/     3E5 :                     ;
     888/     3E5 :                     ;					Print current address followed by A data bytes. Doesn't update current address
     889/     3E5 :                     ;
     890/     3E5 :                     ; ****************************************************************************************************************
     891/     3E5 :                     ; ****************************************************************************************************************
     892/     3E5 :                     
     893/     3E5 :                     PrintAddressData:
     894/     3E5 : CE FF               		st 		@-1(p2) 										; save count, we don't restore this.
     895/     3E7 : C4 03               		ldi 	(PrintHexByte-1)/256 							; save and set up P3
     896/     3E9 : 37                  		xpah 	p3
     897/     3EA : CE FF               		st 		@-1(p2)
     898/     3EC : C4 44               		ldi 	(PrintHexByte-1)&255
     899/     3EE : 33                  		xpal 	p3
     900/     3EF : CE FF               		st 		@-1(p2)
 AS V1.42 Beta [Bld 102] - source file monitor.asm - page 16 - 11/29/2015 19:31:32


     901/     3F1 : C4 0C               		ldi 	current / 256 									; point P1 to current address
     902/     3F3 : 35                  		xpah 	p1
     903/     3F4 : C4 21               		ldi 	current & 255
     904/     3F6 : 31                  		xpal 	p1
     905/     3F7 : C1 01               		ld 		1(p1) 											; read high byte of address
     906/     3F9 : 02                  		ccl
     907/     3FA : 3F                  		xppc 	p3												; print w/o leading space
     908/     3FB : C1 00               		ld 		0(p1)											; read low byte of address
     909/     3FD : 02                  		ccl 	
     910/     3FE : 3F                  		xppc 	p3 												; print w/o leading space.
     911/     3FF : 01                  		xae 													; put in E
     912/     400 : C1 01               		ld 		1(p1) 											; high byte to P1.H
     913/     402 : 35                  		xpah 	p1
     914/     403 : 40                  		lde 													; low byte to P1.H
     915/     404 : 31                  		xpal 	p1
     916/     405 :                     _PADLoop:
     917/     405 : BA 02               		dld 	2(p2) 											; decrement counter
     918/     407 : 94 09               		jp 		_PADPrint 										; if +ve print another byte
     919/     409 :                     
     920/     409 : C6 01               		ld 		@1(p2) 											; restore P3, skipping A hence @2
     921/     40B : 33                  		xpal 	p3
     922/     40C : C6 02               		ld 		@2(p2)
     923/     40E : 37                  		xpah 	p3
     924/     40F : 3F                  		xppc 	p3
     925/     410 : 90 D3               		jmp 	PrintAddressData
     926/     412 :                     
     927/     412 :                     _PADPrint:
     928/     412 : C5 01               		ld 		@1(p1) 											; read byte advance pointer
     929/     414 : 03                  		scl
     930/     415 : 3F                  		xppc 	p3 												; print with space.
     931/     416 : 90 ED               		jmp 	_PADLoop
     932/     418 :                     
     933/     418 :                     ; ****************************************************************************************************************
     934/     418 :                     ;
     935/     418 :                     ;		Look at the parameter string for a parameter, processing @ and Pn as you go, CS if parameter found
     936/     418 :                     ; 		CC otherwise. Return parameter value in P1. Falls through
     937/     418 :                     ;
     938/     418 :                     ; ****************************************************************************************************************
     939/     418 :                     
     940/     418 :                     GetParameter:
     941/     418 : C4 0C               		ldi 	parPosn/256 									; current position into P1
     942/     41A : 35                  		xpah 	p1
     943/     41B : C4 23               		ldi 	parPosn&255 					
     944/     41D : 31                  		xpal 	p1
     945/     41E : C4 00               		ldi 	0 												; -1(p2) is the low byte result
     946/     420 : CA FF               		st 		-1(p2) 											; -2(p2) is the high byte result
     947/     422 : CA FE               		st 		-2(p2)
     948/     424 :                     
     949/     424 : C1 00               		ld 		(p1) 											; read the current position,P1 points to character
     950/     426 : 31                  		xpal 	p1 												; when we put it in P1.L
     951/     427 :                     
     952/     427 :                     __GPASkip:														; skip over spaces to first alphanumeric.
     953/     427 : C1 00               		ld 		(p1) 											; read character
     954/     429 : 98 7B               		jz 		__GPAExitFail 									; if zero, then end of the input string.
     955/     42B : C5 01               		ld 		@1(p1) 											; read it, advancing.
     956/     42D : E4 20               		xri 	32 												; is it space ?
     957/     42F : 98 F6               		jz 		__GPASkip 
     958/     431 : E4 60               		xri 	32!'@'											; is it @ ?
     959/     433 : 98 5E               		jz 		__GPAAtModifier 
     960/     435 : E4 10               		xri 	'@'!'P' 										; is it P ?
 AS V1.42 Beta [Bld 102] - source file monitor.asm - page 17 - 11/29/2015 19:31:32


     961/     437 : 98 4C               		jz 		__GPAPointerModifier
     962/     439 :                     
     963/     439 :                     __GPANextCharacter:
     964/     439 : C1 FF               		ld 		-1(p1) 											; get value back after post increment.
     965/     43B : 02                  		ccl
     966/     43C : F4 50               		adi 	128-48 											; this will be +ve if A < '0'
     967/     43E : 94 66               		jp 		__GPAExitFail
     968/     440 : FC 09               		cai 	9 												; will be +ve if A < '9', CY/L was clear.	
     969/     442 : 94 0A               		jp 		__GPAFoundHex
     970/     444 : FC 07               		cai 	7 												; will be +ve if A < 'A', CY/L was set
     971/     446 : 94 5E               		jp 		__GPAExitFail
     972/     448 : F4 79               		adi 	0xFF-0x85-1 									; will be +ve if A > 'F', CY/L was set.
     973/     44A : 94 5A               		jp 		__GPAExitFail 					
     974/     44C : F4 76               		adi 	(0x70-0xFA) & 0xFF 								; make the range as below, CY/L was clear
     975/     44E :                     __GPAFoundHex: 													; enter here 0-9 = $76..$7F, A-F = $70..$75
     976/     44E : 02                  		ccl  													; convert that to a hex nibble.
     977/     44F : F4 0A               		adi 	10
     978/     451 : D4 0F               		ani 	0xF
     979/     453 : 01                  		xae 													; save in E, temporarily
     980/     454 : C4 04               		ldi 	4 												; now shift the result 4 bits to the left.
     981/     456 : CA FD               		st 		-3(p2) 											; -3(p2) is the counter
     982/     458 :                     __GPAShift:
     983/     458 : 02                  		ccl
     984/     459 : C2 FF               		ld 		-1(p2) 											; shift 16 bit result 1 bit to the left.
     985/     45B : F2 FF               		add 	-1(p2)
     986/     45D : CA FF               		st 		-1(p2)
     987/     45F : C2 FE               		ld 		-2(p2)
     988/     461 : F2 FE               		add 	-2(p2)
     989/     463 : CA FE               		st 		-2(p2)
     990/     465 : BA FD               		dld 	-3(p2) 											; do it four times
     991/     467 : 9C EF               		jnz 	__GPAShift 	
     992/     469 : C2 FF               		ld 		-1(p2) 											; Or E into the LSB
     993/     46B : 58                  		ore
     994/     46C : CA FF               		st 		-1(p2)
     995/     46E :                     
     996/     46E : C5 01               		ld 		@1(p1) 											; look at next character, post incrementing.
     997/     470 : 03                  		scl
     998/     471 : FC 22               		cai 	34 												; if it is after space and ! (label marker)
     999/     473 : 94 C4               		jp 		__GPANextCharacter 								; go back and put it in place.
    1000/     475 :                     
    1001/     475 : C5 FF               		ld 		@-1(p1) 										; undo the increment, incase we've just read zero.
    1002/     477 :                     
    1003/     477 : C4 23               		ldi 	parPosn & 255 									; put the parPosn address in P1.L, new posn into A
    1004/     479 : 31                  		xpal 	p1
    1005/     47A : C9 00               		st 		(p1) 											; and write it back
    1006/     47C : C2 FF               		ld 		-1(p2) 											; put the result into P1
    1007/     47E : 31                  		xpal 	p1
    1008/     47F : C2 FE               		ld 		-2(p2)
    1009/     481 : 35                  		xpah 	p1
    1010/     482 : 03                  		scl 													; set CY/L to indicate okay
    1011/     483 : 90 22               		jmp 	__GPAExit
    1012/     485 :                     
    1013/     485 :                     __GPAPointerModifier:
    1014/     485 : C1 00               		ld 		(p1) 											; read P<something> ?
    1015/     487 : D4 FC               		ani 	0xFC 											; is it '0' .. '3'?
    1016/     489 : E4 30               		xri 	'0'
    1017/     48B : 9C 19               		jnz 	__GPAExitFail 									; it didn't work, not 0..3
    1018/     48D : C5 01               		ld 		@1(p1) 											; re-read it and advance
    1019/     48F : D4 03               		ani 	3												; lower 2 bits only
    1020/     491 : 90 02               		jmp 	__GPAAdjustModifier
 AS V1.42 Beta [Bld 102] - source file monitor.asm - page 18 - 11/29/2015 19:31:32


    1021/     493 :                     __GPAAtModifier:
    1022/     493 : C4 04               		ldi 	4 												; set modifier adjustment to +4
    1023/     495 :                     __GPAAdjustModifier:
    1024/     495 : CA FD               		st 		-3(p2) 
    1025/     497 : C4 24               		ldi 	modifier & 255 									; point P1 to modifier, save current address in E
    1026/     499 : 31                  		xpal 	p1
    1027/     49A : 01                  		xae 
    1028/     49B : C1 00               		ld 		(p1) 											; read modifier
    1029/     49D : 02                  		ccl
    1030/     49E : F2 FD               		add 	-3(p2) 											; add the modifying value to it.
    1031/     4A0 : C9 00               		st 		(p1) 											; write modifier.
    1032/     4A2 : 40                  		lde 													; restore current address to P1.L
    1033/     4A3 : 31                  		xpal 	p1
    1034/     4A4 : 90 81               		jmp 	__GPASkip 										; go back to skip over.
    1035/     4A6 :                     
    1036/     4A6 :                     __GPAExitFail:
    1037/     4A6 : 02                  		ccl 													; carry clear, e.g. nothing read in / error.
    1038/     4A7 :                     __GPAExit:
    1039/     4A7 : 3F                  		xppc 	p3
    1040/     4A8 :                     
    1041/     4A8 :                     ; ****************************************************************************************************************
    1042/     4A8 :                     ;
    1043/     4A8 :                     ;		Store parameter value in P1 in the current address, if CS. Falls through.
    1044/     4A8 :                     ;
    1045/     4A8 :                     ; ****************************************************************************************************************
    1046/     4A8 :                     
    1047/     4A8 :                     UpdateCurrentAddress:
    1048/     4A8 : 06                  		csa 													; get status reg
    1049/     4A9 : 94 0C               		jp 		__UCAExit 										; if carry flag clear then exit.
    1050/     4AB :                     
    1051/     4AB : C4 21               		ldi 	current & 255 									; current address to P1.L, acquired address to E
    1052/     4AD : 31                  		xpal 	p1
    1053/     4AE : 01                  		xae
    1054/     4AF : C4 0C               		ldi 	current / 256 									; current address to P1.H, acquired to A
    1055/     4B1 : 35                  		xpah 	p1
    1056/     4B2 : C9 01               		st 		1(p1) 											; store address back
    1057/     4B4 : 40                  		lde
    1058/     4B5 : C9 00               		st 		0(p1)
    1059/     4B7 :                     __UCAExit:
    1060/     4B7 : 3F                  		xppc 	p3
    1061/     4B8 :                     
    1062/     4B8 :                     ; ****************************************************************************************************************
    1063/     4B8 :                     ;
    1064/     4B8 :                     ;		Get current address into P1.
    1065/     4B8 :                     ;
    1066/     4B8 :                     ; ****************************************************************************************************************
    1067/     4B8 :                     
    1068/     4B8 :                     GetCurrentAddress:
    1069/     4B8 : C4 0C               		ldi 	current/256 									; current address ptr in P1
    1070/     4BA : 35                  		xpah 	p1
    1071/     4BB : C4 21               		ldi 	current&255
    1072/     4BD : 31                  		xpal 	p1
    1073/     4BE : C1 00               		ld 		0(p1) 											; low byte to E
    1074/     4C0 : 01                  		xae
    1075/     4C1 : C1 01               		ld 		1(p1) 											; high byte to A
    1076/     4C3 : 35                  		xpah 	p1 												; then to P1.H
    1077/     4C4 : 40                  		lde 													; low byte to P1.L
    1078/     4C5 : 31                  		xpal 	p1 
    1079/     4C6 : 3F                  		xppc 	p3
    1080/     4C7 :                     
 AS V1.42 Beta [Bld 102] - source file monitor.asm - page 19 - 11/29/2015 19:31:32


    1081/     4C7 :                     ; ****************************************************************************************************************
    1082/     4C7 :                     ;
    1083/     4C7 :                     ;											List of commands and Jump Table
    1084/     4C7 :                     ;
    1085/     4C7 :                     ; ****************************************************************************************************************
    1086/     4C7 :                     
    1087/     4C7 :                     		include commands.inc 									; must be at the end, so the command table is in
(1)    1/     747 :                             org 0x0747
(1)    2/     747 :                     ;
(1)    3/     747 :                     ; 	This file is generated automatically by gencommands.py
(1)    4/     747 :                     ;
(1)    5/     747 :                     __CommandList:
(1)    6/     747 : 94 21                       dw    0x2194 ; HLT
(1)    7/     749 : 00                          db    0x00
(1)    8/     74A : 25 60                       dw    0x6025 ; XAE
(1)    9/     74C : 01                          db    0x01
(1)   10/     74D : 6C 0C                       dw    0x0c6c ; CCL
(1)   11/     74F : 02                          db    0x02
(1)   12/     750 : 6C 4C                       dw    0x4c6c ; SCL
(1)   13/     752 : 03                          db    0x03
(1)   14/     753 : 2E 11                       dw    0x112e ; DIN
(1)   15/     755 : 04                          db    0x04
(1)   16/     756 : AE 24                       dw    0x24ae ; IEN
(1)   17/     758 : 05                          db    0x05
(1)   18/     759 : 61 0E                       dw    0x0e61 ; CSA
(1)   19/     75B : 06                          db    0x06
(1)   20/     75C : 33 0C                       dw    0x0c33 ; CAS
(1)   21/     75E : 07                          db    0x07
(1)   22/     75F : F0 39                       dw    0x39f0 ; NOP
(1)   23/     761 : 08                          db    0x08
(1)   24/     762 : 2F 4D                       dw    0x4d2f ; SIO
(1)   25/     764 : 19                          db    0x19
(1)   26/     765 : 72 02                       dw    0x0272 ; SR
(1)   27/     767 : 1C                          db    0x1c
(1)   28/     768 : 4C 4E                       dw    0x4e4c ; SRL
(1)   29/     76A : 1D                          db    0x1d
(1)   30/     76B : 52 02                       dw    0x0252 ; RR
(1)   31/     76D : 1E                          db    0x1e
(1)   32/     76E : 4C 4A                       dw    0x4a4c ; RRL
(1)   33/     770 : 1F                          db    0x1f
(1)   34/     771 : 0D 00                       dw    0x000d ; M
(1)   35/     773 : 20                          db    0x20
(1)   36/     774 : 01 00                       dw    0x0001 ; A
(1)   37/     776 : 21                          db    0x21
(1)   38/     777 : 07 00                       dw    0x0007 ; G
(1)   39/     779 : 22                          db    0x22
(1)   40/     77A : B4 42                       dw    0x42b4 ; PUT
(1)   41/     77C : 23                          db    0x23
(1)   42/     77D : B4 1C                       dw    0x1cb4 ; GET
(1)   43/     77F : 24                          db    0x24
(1)   44/     780 : 03 00                       dw    0x0003 ; C
(1)   45/     782 : 25                          db    0x25
(1)   46/     783 : 02 00                       dw    0x0002 ; B
(1)   47/     785 : 26                          db    0x26
(1)   48/     786 : 0C 00                       dw    0x000c ; L
(1)   49/     788 : 27                          db    0x27
(1)   50/     789 : 04 00                       dw    0x0004 ; D
(1)   51/     78B : 28                          db    0x28
(1)   52/     78C : 0C 62                       dw    0x620c ; XPL
(1)   53/     78E : 30                          db    0x30
 AS V1.42 Beta [Bld 102] - source file monitor.asm(commands.inc) - page 20 - 11/29/2015 19:31:32


(1)   54/     78F : 08 62                       dw    0x6208 ; XPH
(1)   55/     791 : 34                          db    0x34
(1)   56/     792 : 03 62                       dw    0x6203 ; XPC
(1)   57/     794 : 3C                          db    0x3c
(1)   58/     795 : 85 30                       dw    0x3085 ; LDE
(1)   59/     797 : 40                          db    0x40
(1)   60/     798 : C5 05                       dw    0x05c5 ; ANE
(1)   61/     79A : 50                          db    0x50
(1)   62/     79B : 45 3E                       dw    0x3e45 ; ORE
(1)   63/     79D : 58                          db    0x58
(1)   64/     79E : 45 62                       dw    0x6245 ; XRE
(1)   65/     7A0 : 60                          db    0x60
(1)   66/     7A1 : 25 10                       dw    0x1025 ; DAE
(1)   67/     7A3 : 68                          db    0x68
(1)   68/     7A4 : 85 04                       dw    0x0485 ; ADE
(1)   69/     7A6 : 70                          db    0x70
(1)   70/     7A7 : 25 0C                       dw    0x0c25 ; CAE
(1)   71/     7A9 : 78                          db    0x78
(1)   72/     7AA : 99 11                       dw    0x1199 ; DLY
(1)   73/     7AC : 8F                          db    0x8f
(1)   74/     7AD : B0 29                       dw    0x29b0 ; JMP
(1)   75/     7AF : 90                          db    0x90
(1)   76/     7B0 : 50 01                       dw    0x0150 ; JP
(1)   77/     7B2 : 94                          db    0x94
(1)   78/     7B3 : 5A 01                       dw    0x015a ; JZ
(1)   79/     7B5 : 98                          db    0x98
(1)   80/     7B6 : DA 29                       dw    0x29da ; JNZ
(1)   81/     7B8 : 9C                          db    0x9c
(1)   82/     7B9 : 84 25                       dw    0x2584 ; ILD
(1)   83/     7BB : A8                          db    0xa8
(1)   84/     7BC : 84 11                       dw    0x1184 ; DLD
(1)   85/     7BE : B8                          db    0xb8
(1)   86/     7BF : 84 01                       dw    0x0184 ; LD
(1)   87/     7C1 : C0                          db    0xc0
(1)   88/     7C2 : 89 30                       dw    0x3089 ; LDI
(1)   89/     7C4 : C4                          db    0xc4
(1)   90/     7C5 : 74 02                       dw    0x0274 ; ST
(1)   91/     7C7 : C8                          db    0xc8
(1)   92/     7C8 : C4 05                       dw    0x05c4 ; AND
(1)   93/     7CA : D0                          db    0xd0
(1)   94/     7CB : C9 05                       dw    0x05c9 ; ANI
(1)   95/     7CD : D4                          db    0xd4
(1)   96/     7CE : F2 01                       dw    0x01f2 ; OR
(1)   97/     7D0 : D8                          db    0xd8
(1)   98/     7D1 : 49 3E                       dw    0x3e49 ; ORI
(1)   99/     7D3 : DC                          db    0xdc
(1)  100/     7D4 : F2 61                       dw    0x61f2 ; XOR
(1)  101/     7D6 : E0                          db    0xe0
(1)  102/     7D7 : 49 62                       dw    0x6249 ; XRI
(1)  103/     7D9 : E4                          db    0xe4
(1)  104/     7DA : 24 10                       dw    0x1024 ; DAD
(1)  105/     7DC : E8                          db    0xe8
(1)  106/     7DD : 29 10                       dw    0x1029 ; DAI
(1)  107/     7DF : EC                          db    0xec
(1)  108/     7E0 : 84 04                       dw    0x0484 ; ADD
(1)  109/     7E2 : F0                          db    0xf0
(1)  110/     7E3 : 89 04                       dw    0x0489 ; ADI
(1)  111/     7E5 : F4                          db    0xf4
(1)  112/     7E6 : 24 0C                       dw    0x0c24 ; CAD
(1)  113/     7E8 : F8                          db    0xf8
 AS V1.42 Beta [Bld 102] - source file monitor.asm(commands.inc) - page 21 - 11/29/2015 19:31:32


(1)  114/     7E9 : 29 0C                       dw    0x0c29 ; CAI
(1)  115/     7EB : FC                          db    0xfc
(1)  116/     7EC :                     __CommandListEnd:
(1)  117/     7EC : 00 00                       dw    0x0000 ; End Marker	
(1)  118/     7EE :                     
(1)  119/     7EE :                     __CommandTable:
(1)  120/     7EE : 40 02                       dw    MemoryDump_Command
(1)  121/     7F0 : 87 01                       dw    Address_Command
(1)  122/     7F2 : 9A 01                       dw    Go_Command
(1)  123/     7F4 : A7 01                       dw    PutTape_Command
(1)  124/     7F6 : F6 01                       dw    LoadTape_Command
(1)  125/     7F8 : 1F 00                       dw    ClearScreen_Command
(1)  126/     7FA : 6A 02                       dw    EnterBytes_Command
(1)  127/     7FC : 22 02                       dw    Label_Command
(1)  128/     7FE : 8C 02                       dw    Disassemble_Command
(1)  129/     800 :                     
    1088/     800 :                     																; the same page.
    1089/     800 :                     
    1090/     800 :                     ; ****************************************************************************************************************
    1091/     800 :                     ;
    1092/     800 :                     ;													Tape Format. 
    1093/     800 :                     ;
    1094/     800 :                     ; ****************************************************************************************************************
    1095/     800 :                     ;
    1096/     800 :                     ;		1 x start bit 		'1' value is held for period of time.
    1097/     800 :                     ;		8 x data bits  		'0 or 1' value is held for a period of time.
    1098/     800 :                     ;		1 x continuation	'0' if another bit follows, '1' if end.
    1099/     800 :                     ;		at least 2 bit times between bytes.
    1100/     800 :                     ;
    1101/     800 :                     ;		Use DLY 4 with A = 0 (DLY 6 to skip half-start)
    1102/     800 :                     ; 		= 13 + 2 * 0 + 514 * 4 microcycles
    1103/     800 :                     ;		= 2,069 microcycles
    1104/     800 :                     ;	
    1105/     800 :                     ;		which is about 240 bits per second.
    1106/     800 :                     ;
    1107/     800 :                     ; ****************************************************************************************************************
    1108/     800 :                     ;
    1109/     800 :                     ;												Monitor Commands
    1110/     800 :                     ;
    1111/     800 :                     ; ****************************************************************************************************************
    1112/     800 :                     ;
    1113/     800 :                     ;		A [aaaa] 			Set current address to aaaa
    1114/     800 :                     ;		B [cc] [dd] [ee]..	Fill memory from current address
    1115/     800 :                     ; 		C 					Clear screen
    1116/     800 :                     ;		D [aaaa] 			Disassemble from aaaa (not complete yet)
    1117/     800 :                     ;		G aaaa 				Run from address - address must be given - return with XPPC P3
    1118/     800 :                     ; 		L n 				Set label n to the current address (up to 32 labels 00-1F)
    1119/     800 :                     ; 		M [aaaa] 			Memory dump from current address/aaaa (6 lines, 4 bytes per line)
    1120/     800 :                     ; 		GET [aaaa] 			Load tape to current address/aaa
    1121/     800 :                     ;		PUT [nnnn]			Write nnnn bytes from current address onwards to tape.
    1122/     800 :                     ;
    1123/     800 :                     ;		Assembler
    1124/     800 :                     ;
    1125/     800 :                     ;		Standard SC/MP mnemonics, except for XPAH, XPAL, XPPC, HALT and DINT which are XPH XPL XPC HLT DIN
    1126/     800 :                     ;		respectively (4 character mnemonics not supported)
    1127/     800 :                     ;
    1128/     800 :                     ;		Address modes are written as such:
    1129/     800 :                     ;
    1130/     800 :                     ;		Direct:			LD 	address 					(offset auto calculated, also for jump)
    1131/     800 :                     ;		Indexed:		LD  P1 7 						(normally ld 7(p1))
 AS V1.42 Beta [Bld 102] - source file monitor.asm - page 22 - 11/29/2015 19:31:32


    1132/     800 :                     ;		Immediate:		DLY 42 					
    1133/     800 :                     ;		AutoIndexed:	LD @P1 4 						(normally ld @4(p1))
    1134/     800 :                     ;
    1135/     800 :                     ;		Labels are accessed via the pling, so to jump to label 4 rather than address 4 you write
    1136/     800 :                     ;
    1137/     800 :                     ;		JMP 4!
    1138/     800 :                     ;
    1139/     800 :                     ; ****************************************************************************************************************
    1140/     800 :                     
 AS V1.42 Beta [Bld 102] - source file monitor.asm - page 23 - 11/29/2015 19:31:32


  symbol table (* = unused):
  ------------------------

 ADDRESS_COMMAND :              187 C | *ARCHITECTURE :  i386-unknown-win32 - |
*BIGENDIAN :                      0 - | *BRANCHEXT :                      0 - |
*CASESENSITIVE :                  0 - |  CLEARSCREENLOOP :               24 C |
 CLEARSCREEN_COMMAND :           1F C |  CODESTART :                    C35 - |
 COMMANDMAINLOOP :               36 C | *CONSTPI :        3.141592653589793 - |
 CURRENT :                      C21 - |  CURSOR :                       C20 - |
*DATE :                  11/29/2015 - |  DISASSEMBLE_COMMAND :          28C C |
 ENTERBYTES_COMMAND :           26A C |  EXTRACT5BIT :                   A1 C |
*FALSE :                          0 - |  FINDTOPMEMORY :                  9 C |
*FULLPMMU :                       1 - | *GETCURRENTADDRESS :            4B8 C |
 GETPARAMETER :                 418 C |  GO_COMMAND :                   19A C |
*HAS64 :                          1 - | *HASDSP :                         0 - |
*HASFPU :                         0 - | *HASPMMU :                        0 - |
*INEXTMODE :                      0 - | *INLWORDMODE :                    0 - |
*INMAXMODE :                      0 - | *INSRCMODE :                      0 - |
*INSUPMODE :                      0 - |  KBDBUFFER :                    C25 - |
 KBDBUFFERLN :                   10 - |  KEYBOARDLOOP :                  4B C |
 LABELCOUNT :                    20 - |  LABELS :                       C00 - |
 LABEL_COMMAND :                222 C | *LISTON :                         1 - |
 LOADTAPE_COMMAND :             1F6 C | *MACEXP :                         1 - |
 MEMORYDUMP_COMMAND :           240 C |  MODIFIER :                     C24 - |
*MOMCPU :                         C - | *MOMCPUNAME :                 SC/MP - |
*NESTMAX :                      100 - | *PACKING :                        0 - |
*PADDING :                        1 - |  PARPOSN :                      C23 - |
 PRINTADDRESSDATA :             3E5 C |  PRINTCHARACTER :               378 C |
 PRINTHEXBYTE :                 345 C |  PUTTAPE_COMMAND :              1A7 C |
*RELAXED :                        0 - |  TAPEDELAY :                      4 - |
*TIME :                    19:31:32 - | *TRUE :                           1 - |
*UPDATECURRENTADDRESS :         4A8 C |  VARBASE :                      C20 - |
*VERSION :                     142F - |  _KBDWAITKEY :                   54 C |
 _KBDWAITRELEASE :               4E C |  _PADLOOP :                     405 C |
 _PADPRINT :                    412 C | *_PUTTAPEBIT :                  1D7 C |
 _PUTTAPEBYTE :                 1C2 C |  _PUTTAPELEADER :               1BC C |
 __ASMCONTINUE :                145 C |  __ASMEXIT :                    17D C |
 __ASMNOPARAMETER :             13D C |  __ASSEMBLER :                  10E C |
 __CMDMAINLOOP1 :                92 C |  __CMDMAINLOOP2 :               193 C |
 __CMDMAINLOOP3 :               1A5 C |  __CMDMAINLOOP4 :               1F2 C |
 __CMDMAINLOOP5 :               220 C |  __CMDMAINLOOP6 :               268 C |
 __CMDMAINLOOP7 :               2D4 C |  __CMDPARAMETERFAIL :           18B C |
 __CMDPARAMETERFAIL1 :          1F4 C |  __COMMANDERROR :               104 C |
 __COMMANDLIST :                747 C |  __COMMANDLISTEND :             7EC C |
 __COMMANDTABLE :               7EE C |  __DASSFINDOPCODE :             2BB C |
 __DASSFOUNDOPCODE :            2D6 C |  __DASSLOOP :                   292 C |
 __DASSLOOP2 :                  2D2 C |  __DASSNEXT :                   332 C |
 __DASSNEXTOPCODE :             2CE C |  __DASSNOOPERAND :              2B1 C |
 __DASSNOTIMMEDIATE :           2E2 C |  __DASSNOTSPACE :               301 C |
 __DASSPRINTMNEMONIC :          2F7 C |  __DASSPRINTMODIFIER :          343 C |
 __DASSPRINTOPERAND :           324 C |  __DASSSHIFTENCODE :            309 C |
 __DCLOOP :                     246 C |  __EX5SHIFT :                    AC C |
 __EXTRACTEND :                  C2 C |  __FINDCOMMANDLOOP :             CD C |
 __GETTAPEBITS :                20E C |  __GETTAPEWAIT :                1FC C |
 __GPAADJUSTMODIFIER :          495 C |  __GPAATMODIFIER :              493 C |
 __GPAEXIT :                    4A7 C |  __GPAEXITFAIL :                4A6 C |
 __GPAFOUNDHEX :                44E C |  __GPANEXTCHARACTER :           439 C |
 __GPAPOINTERMODIFIER :         485 C |  __GPASHIFT :                   458 C |
 __GPASKIP :                    427 C |  __KBDBACKSPACE :                86 C |
 __KBDEXIT :                     94 C |  __KBDNOTLOWER :                 7A C |
 AS V1.42 Beta [Bld 102] - source file monitor.asm - page 24 - 11/29/2015 19:31:32


 __PCBACKSPACE :                3CD C |  __PCBLANKNEWLINE :             3A9 C |
 __PCBLANKNEWLINELOOP :         3AD C |  __PCEXIT :                     3B5 C |
 __PCNEWLINE :                  3D9 C |  __PHBNOSPACE :                 357 C |
 __UCAEXIT :                    4B7 C |

    121 symbols
     31 unused symbols

 AS V1.42 Beta [Bld 102] - source file monitor.asm - page 25 - 11/29/2015 19:31:32


  codepages:
  ----------

STANDARD (0 changed characters)


0.02 seconds assembly time

   1269 lines source file
      2 passes
      0 errors
      0 warnings
