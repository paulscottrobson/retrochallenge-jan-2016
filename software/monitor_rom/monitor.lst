 AS V1.42 Beta [Bld 102] - source file monitor.asm - page 1 - 11/30/2015 17:34:15


       1/       0 :                     ; ******************************************************************************************************************
       2/       0 :                     ; ******************************************************************************************************************
       3/       0 :                     ; ******************************************************************************************************************
       4/       0 :                     ;
       5/       0 :                     ;												Machine Language Monitor
       6/       0 :                     ;
       7/       0 :                     ; ******************************************************************************************************************
       8/       0 :                     ; ******************************************************************************************************************
       9/       0 :                     ; ******************************************************************************************************************
      10/       0 :                     
      11/       0 :                     ; TODO: 
      12/       0 :                     ; 		complete and further test 16 bit divide routine.
      13/       0 :                     ;		Check any other (random # ?)
      14/       0 :                     ; 		Decode addresses on disassembler (?)
      15/       0 :                     ; 		Print message on first clear screen (?)
      16/       0 :                     
      17/       0 :                     		cpu	sc/mp
      18/       0 :                     
      19/       0 : =0xC00              labels 		= 0xC00												; labels, 1 byte each
      20/       0 : =0x20               labelCount 	= 32 												; number of labels (perhaps a bit generous ?)
      21/       0 :                     
      22/       0 : =0xC20              varBase 	= labels+labelCount 								; variables after labels start here.
      23/       0 :                     
      24/       0 : =0xC20              cursor 		= varBase 											; cursor position
      25/       0 : =0xC21              current 	= varBase+1 										; current address (lo,hi)
      26/       0 : =0xC23              parPosn		= varBase+3 										; current param offset in buffer (low addr)
      27/       0 : =0xC24              modifier  	= varBase+4 										; instruction modifier (@,Pn)
      28/       0 : =0xC25              kbdBuffer 	= varBase+5 										; 16 character keyboard buffer
      29/       0 : =0x10               kbdBufferLn = 16 										
      30/       0 :                     
      31/       0 : =0xC35              codeStart 	= kbdBuffer+kbdBufferLn								; code starts here.
      32/       0 :                     
      33/       0 : =0x4                tapeDelay 	= 4 												; DLY parameter for 1 tape bit width.
      34/       0 :                     																; (smaller = faster tape I/O - see file end.)
      35/       0 :                     
      36/       0 :                     		org 	0x0000
      37/       0 : 08                  		nop
      38/       1 :                     
      39/       1 :                     		include maths.asm 										; import the maths routines.
(1)    1/       1 :                     ; ******************************************************************************************************************
(1)    2/       1 :                     ; ******************************************************************************************************************
(1)    3/       1 :                     ;
(1)    4/       1 :                     ;										16 bit Arithmetic routines
(1)    5/       1 :                     ;
(1)    6/       1 :                     ; ******************************************************************************************************************
(1)    7/       1 :                     ; ******************************************************************************************************************
(1)    8/       1 :                     
(1)    9/       1 :                     ;
(1)   10/       1 :                     ;	Priority order : * / + - anything else VTL-2 might use ASCII -> int int -> ASCII
(1)   11/       1 :                     ;
(1)   12/       1 :                     ;	jmp	 	GoBoot 												; this will be at location 1.
(1)   13/       1 : 90 07               	jmp 	Maths 												; maths routine, at location 3.
(1)   14/       3 :                     	; any other routines you care to call.
(1)   15/       3 :                     
(1)   16/       3 :                     GoBoot:
(1)   17/       3 : C4 02               	ldi 	(BootMonitor-1) & 255 								; jump to Boot Monitor
(1)   18/       5 : 33                  	xpal 	p3
(1)   19/       6 : C4 01               	ldi 	(BootMonitor-1) / 256
(1)   20/       8 : 37                  	xpah 	p3
(1)   21/       9 : 3F                  	xppc 	p3
 AS V1.42 Beta [Bld 102] - source file monitor.asm(maths.asm) - page 2 - 11/30/2015 17:34:15


(1)   22/       A :                     
(1)   23/       A :                     ; ******************************************************************************************************************
(1)   24/       A :                     ;
(1)   25/       A :                     ;		Maths routines : the (P2) stack functions as a number stack.  So to push $1234 on the stack you do
(1)   26/       A :                     ;
(1)   27/       A :                     ;		ld 	#$12
(1)   28/       A :                     ;		st 	@-1(p2) 					1(p2) is the MSB of TOS
(1)   29/       A :                     ;		ld 	#$34
(1)   30/       A :                     ;		st 	@-1(p2) 					0(p2) is the LSB of TOS
(1)   31/       A :                     ;
(1)   32/       A :                     ;		on entry, A is the function (+,-,*,/ etc.). P2 should be left in the 'correct' state afterwards,
(1)   33/       A :                     ;		so if you add two numbers then p2 will be 2 higher than when the routine was entered.
(1)   34/       A :                     ;
(1)   35/       A :                     ; ******************************************************************************************************************
(1)   36/       A :                     
(1)   37/       A : =0x796D             n1 = 31085
(1)   38/       A : =0x666              n2 = 1638
(1)   39/       A :                     
(1)   40/       A :                     Maths:															; maths support routine.
(1)   41/       A : C4 0C               	ldi 	0xC
(1)   42/       C : 36                  	xpah 	p2
(1)   43/       D : C4 30               	ldi 	0x30
(1)   44/       F : 32                  	xpal 	p2
(1)   45/      10 :                     
(1)   46/      10 : C4 79               	ldi 	n1 / 256
(1)   47/      12 : CE FF               	st 		@-1(p2)
(1)   48/      14 : C4 6D               	ldi 	n1 & 255
(1)   49/      16 : CE FF               	st 		@-1(p2)
(1)   50/      18 :                     
(1)   51/      18 : C4 06               	ldi 	n2 / 256
(1)   52/      1A : CE FF               	st 		@-1(p2)
(1)   53/      1C : C4 66               	ldi 	n2 & 255
(1)   54/      1E : CE FF               	st 		@-1(p2)
(1)   55/      20 :                     	
(1)   56/      20 : C4 2F               	ldi 	'/'
(1)   57/      22 :                     
(1)   58/      22 : E4 2B               	xri 	'+' 												; dispatch function in A to the executing code.
(1)   59/      24 : 98 0E               	jz 		MATH_Add
(1)   60/      26 : E4 06               	xri 	'+'!'-'
(1)   61/      28 : 98 19               	jz 		MATH_Subtract
(1)   62/      2A : E4 07               	xri 	'-'!'*'
(1)   63/      2C : 98 26               	jz 		MATH_Multiply
(1)   64/      2E : E4 05               	xri 	'*'!'/'
(1)   65/      30 : 98 67               	jz 		MATH_Divide
(1)   66/      32 :                     
(1)   67/      32 :                     MATH_Exit:
(1)   68/      32 : 90 FE               	jmp  	MATH_Exit
(1)   69/      34 :                     
(1)   70/      34 :                     ; ******************************************************************************************************************
(1)   71/      34 :                     ;														16 Bit Add
(1)   72/      34 :                     ; ******************************************************************************************************************
(1)   73/      34 :                     
(1)   74/      34 :                     MATH_Add:
(1)   75/      34 : 02                  	ccl 										
(1)   76/      35 : C6 01               	ld 		@1(p2) 												; read LSB of TOS and unstack
(1)   77/      37 : F2 01               	add 	1(p2)
(1)   78/      39 : CA 01               	st 		1(p2)
(1)   79/      3B : C6 01               	ld 		@1(p2) 												; read MSB of TOS and unstack
(1)   80/      3D : F2 01               	add 	1(p2)
(1)   81/      3F : CA 01               	st 		1(p2)
 AS V1.42 Beta [Bld 102] - source file monitor.asm(maths.asm) - page 3 - 11/30/2015 17:34:15


(1)   82/      41 : 90 EF               	jmp 	MATH_Exit
(1)   83/      43 :                     
(1)   84/      43 :                     ; ******************************************************************************************************************
(1)   85/      43 :                     ;													16 Bit Subtract
(1)   86/      43 :                     ; ******************************************************************************************************************
(1)   87/      43 :                     
(1)   88/      43 :                     MATH_Subtract:
(1)   89/      43 : 03                  	scl 										
(1)   90/      44 : C2 02               	ld 		2(p2) 												; read LSB of TOS 
(1)   91/      46 : FA 00               	cad 	0(p2)
(1)   92/      48 : CA 02               	st 		2(p2)
(1)   93/      4A : C2 03               	ld 		3(p2) 												; read MSB of TOS
(1)   94/      4C : FA 01               	cad 	1(p2)
(1)   95/      4E : CA 03               	st 		3(p2)
(1)   96/      50 : C6 02               	ld 		@2(p2)
(1)   97/      52 : 90 DE               	jmp 	MATH_Exit
(1)   98/      54 :                     
(1)   99/      54 :                     ; ******************************************************************************************************************
(1)  100/      54 :                     ;											16 Bit shift left/right macros
(1)  101/      54 :                     ; ******************************************************************************************************************
(1)  102/      54 :                     
(1)  103/      54 :                     shiftLeft macro val
(1)  104/      54 :                     	ccl 													
(1)  105/      54 :                     	ld 		val(p2)
(1)  106/      54 :                     	add 	val(p2)
(1)  107/      54 :                     	st 		val(p2)
(1)  108/      54 :                     	ld 		val+1(p2)
(1)  109/      54 :                     	add 	val+1(p2)
(1)  110/      54 :                     	st 		val+1(p2)		
(1)  111/      54 :                     	endm
(1)  112/      54 :                     
(1)  113/      54 :                     shiftRight macro val
(1)  114/      54 :                     	ccl
(1)  115/      54 :                     	ld 		val+1(p2)
(1)  116/      54 :                     	rrl 
(1)  117/      54 :                     	st 		val+1(p2)
(1)  118/      54 :                     	ld 		val(p2)
(1)  119/      54 :                     	rrl 
(1)  120/      54 :                     	st 		val(p2)
(1)  121/      54 :                     	endm
(1)  122/      54 :                     
(1)  123/      54 :                     ; ******************************************************************************************************************
(1)  124/      54 :                     ;												16 bit signed multiply
(1)  125/      54 :                     ; ******************************************************************************************************************
(1)  126/      54 :                     
(1)  127/      54 :                     MATH_Multiply:
(1)  128/      54 :                     
(1)  129/      54 :                     	section SCMPMultiply
(1)  130/      54 :                     
(1)  131/      54 : =0x3                aHi = 3 														; allocated values for A,B and Result.
(1)  132/      54 : =0x2                aLo = 2 														; (see arithmetic.py)
(1)  133/      54 : =0x1                bHi = 1
(1)  134/      54 : =0x0                bLo = 0
(1)  135/      54 : =0xFFFFFFFFF..      resultHi = -1
(1)  136/      54 : =0xFFFFFFFFF..      resultLo = -2
(1)  137/      54 :                     
(1)  138/      54 : C4 00               	ldi 	0 													; clear result
(1)  139/      56 : CA FF               	st 		resultHi(p2)
(1)  140/      58 : CA FE               	st 		resultLo(p2)
(1)  141/      5A :                     __MultiplyLoop:
 AS V1.42 Beta [Bld 102] - source file monitor.asm(maths.asm) - page 4 - 11/30/2015 17:34:15


(1)  142/      5A : C2 01               	ld 		bHi(p2) 											; if b is zero then exit
(1)  143/      5C : DA 00               	or 		bLo(p2)
(1)  144/      5E : 98 2D               	jz 		__MultiplyExit
(1)  145/      60 : C2 00               	ld 		bLo(p2) 											; if b bit 0 is set.
(1)  146/      62 : D4 01               	ani 	1
(1)  147/      64 : 98 0D               	jz 		__MultiplyNoAdd
(1)  148/      66 : 02                  	ccl 														; add a to the result
(1)  149/      67 : C2 FE               	ld 		resultLo(p2)
(1)  150/      69 : F2 02               	add 	aLo(p2)
(1)  151/      6B : CA FE               	st 		resultLo(p2)
(1)  152/      6D : C2 FF               	ld 		resultHi(p2)
(1)  153/      6F : F2 03               	add 	aHi(p2)
(1)  154/      71 : CA FF               	st 		resultHi(p2)
(1)  155/      73 :                     __MultiplyNoAdd:
(1)  156/      73 : (MACRO)             	shiftleft aLo 												; shift A left once.
(1)  156/      73 : 02                          ccl                                                                                                     
(1)  156/      74 : C2 02                       ld              ALO(p2)
(1)  156/      76 : F2 02                       add     ALO(p2)
(1)  156/      78 : CA 02                       st              ALO(p2)
(1)  156/      7A : C2 03                       ld              ALO+1(p2)
(1)  156/      7C : F2 03                       add     ALO+1(p2)
(1)  156/      7E : CA 03                       st              ALO+1(p2)               
(1)  157/      80 : (MACRO)             	shiftright bLo 												; shift b right one.
(1)  157/      80 : 02                          ccl
(1)  157/      81 : C2 01                       ld              BLO+1(p2)
(1)  157/      83 : 1F                          rrl 
(1)  157/      84 : CA 01                       st              BLO+1(p2)
(1)  157/      86 : C2 00                       ld              BLO(p2)
(1)  157/      88 : 1F                          rrl 
(1)  157/      89 : CA 00                       st              BLO(p2)
(1)  158/      8B : 90 CD               	jmp 	__MultiplyLoop
(1)  159/      8D :                     
(1)  160/      8D :                     __MultiplyExit:
(1)  161/      8D : C2 FE               	ld 		resultLo(p2) 										; copy result lo to what will be new TOS
(1)  162/      8F : CA 02               	st 		2(p2)
(1)  163/      91 : C2 FF               	ld 		resultHi(p2)
(1)  164/      93 : CA 03               	st 		3(p2)
(1)  165/      95 : C6 02               	ld 		@2(p2) 												; fix up the number stack.
(1)  166/      97 :                     	endsection SCMPMultiply
(1)  167/      97 :                     
(1)  168/      97 :                     MATH_Exit1:
(1)  169/      97 : 90 99               	jmp 	MATH_Exit
(1)  170/      99 :                     
(1)  171/      99 :                     
(1)  172/      99 :                     ; ******************************************************************************************************************
(1)  173/      99 :                     ;											16 bit signed divide
(1)  174/      99 :                     ; ******************************************************************************************************************
(1)  175/      99 :                     
(1)  176/      99 :                     MATH_Divide:
(1)  177/      99 :                     
(1)  178/      99 :                     	section 	SCMPDivide
(1)  179/      99 :                     
(1)  180/      99 : =0x1                denominatorHi = 1 												; input values to division
(1)  181/      99 : =0x0                denominatorLo = 0 												; (see arithmetic.py)
(1)  182/      99 : =0x3                numeratorHi = 3
(1)  183/      99 : =0x2                numeratorLo = 2
(1)  184/      99 : =0xFFFFFFFFF..      bitHi = -1 														; bit shifted for division test.
(1)  185/      99 : =0xFFFFFFFFF..      bitLo = -2
(1)  186/      99 : =0xFFFFFFFFF..      quotientHi = -3 												; quotient
(1)  187/      99 : =0xFFFFFFFFF..      quotientLo = -4
 AS V1.42 Beta [Bld 102] - source file monitor.asm(maths.asm) - page 5 - 11/30/2015 17:34:15


(1)  188/      99 : =0xFFFFFFFFF..      remainderHi = -5 												; remainder
(1)  189/      99 : =0xFFFFFFFFF..      remainderLo = -6
(1)  190/      99 : =0xFFFFFFFFF..      tempLo = -7 													; temp (temp Hi is kept in A)
(1)  191/      99 :                     
(1)  192/      99 : C4 00               	ldi 	0 													; clear quotient and remainder
(1)  193/      9B : CA FD               	st 		quotientHi(p2)
(1)  194/      9D : CA FC               	st 		quotientLo(p2)
(1)  195/      9F : CA FB               	st 		remainderHi(p2)
(1)  196/      A1 : CA FA               	st 		remainderLo(p2)
(1)  197/      A3 : CA FE               	st 		bitLo(p2) 											; set bit to 0x8000
(1)  198/      A5 : C4 80               	ldi 	0x80 
(1)  199/      A7 : CA FF               	st 		bitHi(p2)
(1)  200/      A9 :                     
(1)  201/      A9 :                     	; TODO: unsign numerator and denominator.
(1)  202/      A9 :                     
(1)  203/      A9 :                     __DivideLoop:
(1)  204/      A9 : C2 FE               	ld 		bitLo(p2) 											; keep going until all bits done.
(1)  205/      AB : DA FF               	or 		bitHi(p2)
(1)  206/      AD : 98 52               	jz 		__DivideExit
(1)  207/      AF :                     
(1)  208/      AF : (MACRO)             	shiftleft remainderLo 										; shift remainder left.
(1)  208/      AF : 02                          ccl                                                                                                     
(1)  208/      B0 : C2 FA                       ld              REMAINDERLO(p2)
(1)  208/      B2 : F2 FA                       add     REMAINDERLO(p2)
(1)  208/      B4 : CA FA                       st              REMAINDERLO(p2)
(1)  208/      B6 : C2 FB                       ld              REMAINDERLO+1(p2)
(1)  208/      B8 : F2 FB                       add     REMAINDERLO+1(p2)
(1)  208/      BA : CA FB                       st              REMAINDERLO+1(p2)               
(1)  209/      BC :                     
(1)  210/      BC : C2 03               	ld 		numeratorHi(p2)										; if numerator MSB is set
(1)  211/      BE : 94 06               	jp 		__DivideNoIncRemainder
(1)  212/      C0 :                     
(1)  213/      C0 : AA FA               	ild 	remainderLo(p2) 									; then increment remainder
(1)  214/      C2 : 9C 02               	jnz 	__DivideNoIncRemainder
(1)  215/      C4 : AA FB               	ild 	remainderHi(p2)
(1)  216/      C6 :                     __DivideNoIncRemainder:
(1)  217/      C6 :                     
(1)  218/      C6 : 03                  	scl 														; calculate remainder-denominator (temp)
(1)  219/      C7 : C2 FA               	ld 		remainderLo(p2)
(1)  220/      C9 : FA 00               	cad 	denominatorLo(p2)
(1)  221/      CB : CA F9               	st 		tempLo(p2) 											; save in temp.low
(1)  222/      CD : C2 FB               	ld 		remainderHi(p2)
(1)  223/      CF : FA 01               	cad 	denominatorHi(p2) 									; temp.high is now in A
(1)  224/      D1 : 94 1A               	jp 		__DivideRemainderGreater 							; if >= 0 then remainder >= denominator
(1)  225/      D3 :                     
(1)  226/      D3 :                     __DivideContinue:
(1)  227/      D3 : (MACRO)             	shiftright 	bitLo 											; shift bit right
(1)  227/      D3 : 02                          ccl
(1)  227/      D4 : C2 FF                       ld              BITLO+1(p2)
(1)  227/      D6 : 1F                          rrl 
(1)  227/      D7 : CA FF                       st              BITLO+1(p2)
(1)  227/      D9 : C2 FE                       ld              BITLO(p2)
(1)  227/      DB : 1F                          rrl 
(1)  227/      DC : CA FE                       st              BITLO(p2)
(1)  228/      DE : (MACRO)             	shiftleft   numeratorLo 									; shift numerator left
(1)  228/      DE : 02                          ccl                                                                                                     
(1)  228/      DF : C2 02                       ld              NUMERATORLO(p2)
(1)  228/      E1 : F2 02                       add     NUMERATORLO(p2)
(1)  228/      E3 : CA 02                       st              NUMERATORLO(p2)
(1)  228/      E5 : C2 03                       ld              NUMERATORLO+1(p2)
 AS V1.42 Beta [Bld 102] - source file monitor.asm(maths.asm) - page 6 - 11/30/2015 17:34:15


(1)  228/      E7 : F2 03                       add     NUMERATORLO+1(p2)
(1)  228/      E9 : CA 03                       st              NUMERATORLO+1(p2)               
(1)  229/      EB : 90 BC               	jmp 		__DivideLoop
(1)  230/      ED :                     
(1)  231/      ED :                     __DivideRemainderGreater: 										; this is the "if temp >= 0 bit"
(1)  232/      ED : CA FB               	st 		remainderHi(p2) 									; save temp.high value into remainder.high
(1)  233/      EF : C2 F9               	ld 		tempLo(p2) 											; copy temp.low to remainder.low
(1)  234/      F1 : CA FA               	st 		remainderLo(p2) 
(1)  235/      F3 :                     
(1)  236/      F3 : C2 FC               	ld 		quotientLo(p2) 										; or bit into quotient
(1)  237/      F5 : DA FE               	or 		bitLo(p2)
(1)  238/      F7 : CA FC               	st 		quotientLo(p2)
(1)  239/      F9 : C2 FD               	ld 		quotientHi(p2)
(1)  240/      FB : DA FF               	or 		bitHi(p2)
(1)  241/      FD : CA FD               	st 		quotientHi(p2)
(1)  242/      FF : 90 D2               	jmp 	__DivideContinue
(1)  243/     101 :                     
(1)  244/     101 :                     __DivideExit:
(1)  245/     101 :                     	; TODO: Copy quotient/remainder to better positions.
(1)  246/     101 :                     	; TODO: resign quotient
(1)  247/     101 :                     
(1)  248/     101 : 90 94               	jmp 	MATH_Exit1
(1)  249/     103 :                     
(1)  250/     103 :                     
(1)  251/     103 :                     	endsection	SCMPDivide
(1)  252/     103 :                     
      40/     103 :                     
      41/     103 :                     ; ******************************************************************************************************************
      42/     103 :                     ;
      43/     103 :                     ;									Find Top of Memory to initialise the stack.
      44/     103 :                     ;
      45/     103 :                     ; ******************************************************************************************************************
      46/     103 :                     
      47/     103 :                     BootMonitor:
      48/     103 : C4 0F               		ldi 	0x0F 											; point P2 to theoretical top of RAM on basic m/c
      49/     105 : 36                  		xpah 	p2 												; e.g. 0xFFF
      50/     106 : C4 FF               		ldi 	0xFF 											; ideally you'd make this 0x003F and remove the ld
      51/     108 : 32                  		xpal 	p2 												; but the emulators don't do 4+12 math. Only matters here.
      52/     109 : C6 40               		ld 		@64(p2) 										; fix the predecrement (wrap around not emulated)
      53/     10B :                     FindTopMemory:
      54/     10B : C4 A5               		ldi 	0xA5 											; try to write this to memory
      55/     10D : CE C0               		st 		@-64(p2) 										; predecrementing by 64.
      56/     10F : E2 00               		xor 	(p2) 											; did it write correctly.
      57/     111 : 9C F8               		jnz 	FindTopMemory 									; now P2 points to top of memory.
      58/     113 :                     
      59/     113 :                     ; ******************************************************************************************************************
      60/     113 :                     ;
      61/     113 :                     ;									Reset cursor position and current address.
      62/     113 :                     ;
      63/     113 :                     ; ******************************************************************************************************************
      64/     113 :                     
      65/     113 : C4 0C               		ldi 	Current/256 									; set P1 to current address
      66/     115 : 35                  		xpah 	p1
      67/     116 : C4 21               		ldi 	Current&255
      68/     118 : 31                  		xpal 	p1
      69/     119 : C4 35               		ldi 	codeStart & 255 								; reset current address to code start
      70/     11B : CD 01               		st 		@1(p1)
      71/     11D : C4 0C               		ldi 	codeStart / 256
      72/     11F : CD 00               		st 		@(p1)
      73/     121 :                     
 AS V1.42 Beta [Bld 102] - source file monitor.asm - page 7 - 11/30/2015 17:34:15


      74/     121 :                     ; ******************************************************************************************************************
      75/     121 :                     ;
      76/     121 :                     ;												Clear the screen
      77/     121 :                     ;
      78/     121 :                     ; ******************************************************************************************************************
      79/     121 :                     
      80/     121 :                     ClearScreen_Command:
      81/     121 : C4 00               		ldi 	0
      82/     123 : 35                  		xpah 	p1
      83/     124 : C4 00               		ldi 	0
      84/     126 :                     ClearScreenLoop:
      85/     126 : 31                  		xpal 	p1												; clear screen
      86/     127 : C4 20               		ldi 	' '
      87/     129 : CD 01               		st 		@1(p1)
      88/     12B : 31                  		xpal 	p1
      89/     12C : 94 F8               		jp 		ClearScreenLoop
      90/     12E : C4 0C               		ldi 	Cursor/256 										; reset the cursor position to TOS
      91/     130 : 35                  		xpah 	p1
      92/     131 : C4 20               		ldi 	Cursor&255
      93/     133 : 31                  		xpal 	p1 
      94/     134 : C4 00               		ldi 	0
      95/     136 : C9 00               		st 		0(p1)											
      96/     138 :                     
      97/     138 :                     ; ****************************************************************************************************************
      98/     138 :                     ;
      99/     138 :                     ;													Main Loop
     100/     138 :                     ;
     101/     138 :                     ; ****************************************************************************************************************
     102/     138 :                     
     103/     138 :                     CommandMainLoop:
     104/     138 : C4 04               		ldi 	(PrintAddressData-1)/256						; print Address only
     105/     13A : 37                  		xpah 	p3
     106/     13B : C4 F8               		ldi 	(PrintAddressData-1)&255
     107/     13D : 33                  		xpal 	p3
     108/     13E : C4 00               		ldi 	0
     109/     140 : 3F                  		xppc 	p3
     110/     141 :                     
     111/     141 : C4 04               		ldi 	(PrintCharacter-1)/256 							; set P3 = print character.
     112/     143 : 37                  		xpah 	p3
     113/     144 : C4 8B               		ldi 	(PrintCharacter-1)&255
     114/     146 : 33                  		xpal 	p3
     115/     147 : C4 5D               		ldi 	']'												; print the prompt.
     116/     149 : 3F                  		xppc 	p3
     117/     14A :                     
     118/     14A :                     ; ****************************************************************************************************************
     119/     14A :                     ;
     120/     14A :                     ;											Keyboard Line Input
     121/     14A :                     ;
     122/     14A :                     ; ****************************************************************************************************************
     123/     14A :                     
     124/     14A : C4 00               		ldi 	0 												; set E = character position.
     125/     14C : 01                  		xae 
     126/     14D :                     KeyboardLoop:
     127/     14D : C4 08               		ldi 	0x8 											; set P1 to point to keyboard latch
     128/     14F : 35                  		xpah 	p1
     129/     150 :                     _KBDWaitRelease:
     130/     150 : C1 00               		ld 		0(p1) 											; wait for strobe to clear
     131/     152 : 94 02               		jp 		_KBDWaitKey
     132/     154 : 90 FA               		jmp 	_KBDWaitRelease
     133/     156 :                     _KBDWaitKey:
 AS V1.42 Beta [Bld 102] - source file monitor.asm - page 8 - 11/30/2015 17:34:15


     134/     156 : C1 00               		ld 		0(p1) 											; wait for strobe, i.e. new key
     135/     158 : 94 FC               		jp 		_KBDWaitKey
     136/     15A : D4 7F               		ani 	0x7F 											; throw away bit 7
     137/     15C : CA FF               		st 		-1(p2) 											; save key.
     138/     15E :                     
     139/     15E : C4 0C               		ldi 	kbdBuffer/256 									; set P1 = keyboard buffer
     140/     160 : 35                  		xpah 	p1
     141/     161 : C4 25               		ldi 	kbdBuffer&255
     142/     163 : 31                  		xpal 	p1		
     143/     164 :                     
     144/     164 : C2 FF               		ld 		-1(p2) 											; read key
     145/     166 : E4 08               		xri 	8 												; is it backspace
     146/     168 : 98 1E               		jz 		__KBDBackSpace
     147/     16A : E4 05               		xri 	8!13 											; is it CR, then exit
     148/     16C : 98 28               		jz 		__KBDExit
     149/     16E :                     
     150/     16E : 40                  		lde 													; have we a full buffer.
     151/     16F : E4 10               		xri 	kbdBufferLn 									; if so, ignore the key.
     152/     171 : 98 DA               		jz 		KeyboardLoop
     153/     173 :                     
     154/     173 : C2 FF               		ld 		-1(p2) 											; restore the key.
     155/     175 : 02                  		ccl
     156/     176 : F4 20               		adi 	0x20											; will make lower case -ve
     157/     178 : 94 02               		jp 		__KBDNotLower
     158/     17A : FC 20               		cai 	0x20 											; capitalise
     159/     17C :                     __KBDNotLower:
     160/     17C : F4 E0               		adi 	0xE0 											; fix up.
     161/     17E : C9 80               		st 		-0x80(p1) 										; save in the buffer using E as index.
     162/     180 : 3F                  		xppc 	p3 												; print the character
     163/     181 : 01                  		xae 													; increment E
     164/     182 : 02                  		ccl
     165/     183 : F4 01               		adi 	1
     166/     185 : 01                  		xae
     167/     186 : 90 C5               		jmp 	KeyboardLoop 									; and get the next key.
     168/     188 :                     
     169/     188 :                     __KBDBackSpace:
     170/     188 : 40                  		lde 													; get position
     171/     189 : 98 C2               		jz 		KeyboardLoop 									; can't go back if at beginning
     172/     18B : 03                  		scl 													; go back 1 from E
     173/     18C : FC 01               		cai 	1
     174/     18E : 01                  		xae 
     175/     18F : C4 08               		ldi 	8 												; print a backspace
     176/     191 : 3F                  		xppc 	p3
     177/     192 : 90 B9               		jmp 	KeyboardLoop 									; and go round again.
     178/     194 :                     
     179/     194 :                     __CmdMainLoop1:
     180/     194 : 90 A2               		jmp 	CommandMainLoop
     181/     196 :                     
     182/     196 :                     __KBDExit:
     183/     196 : C9 80               		st 		-0x80(p1) 										; add the ASCIIZ terminator.
     184/     198 : C4 0D               		ldi 	13												; print a new line.
     185/     19A : 3F                  		xppc 	p3
     186/     19B :                     
     187/     19B :                     ; ****************************************************************************************************************
     188/     19B :                     ;
     189/     19B :                     ;						Extract the 5 bit 3 letter (max command value). P1 points to buffer
     190/     19B :                     ;
     191/     19B :                     ; ****************************************************************************************************************
     192/     19B :                     
     193/     19B : C4 00               		ldi 	0
 AS V1.42 Beta [Bld 102] - source file monitor.asm - page 9 - 11/30/2015 17:34:15


     194/     19D : 01                  		xae 													; E contains the LSB of the 5 bit shift
     195/     19E : 40                  		lde 	
     196/     19F : CA FF               		st 		-1(p2) 											; -1(P2) contains the MSB
     197/     1A1 : C9 FF               		st 		modifier-kbdBuffer(p1)							; clear the modifier.
     198/     1A3 :                     Extract5Bit:
     199/     1A3 : C1 00               		ld 		(p1) 											; look at character
     200/     1A5 : 02                  		ccl 													; add 128-65, will be +ve if < 64
     201/     1A6 : F4 3F               		adi 	128-65
     202/     1A8 : 94 1A               		jp 		__ExtractEnd
     203/     1AA : C4 05               		ldi 	5 												; shift current value left 5 times using -2(p2)
     204/     1AC : CA FE               		st 		-2(p2)
     205/     1AE :                     __Ex5Shift:
     206/     1AE : 40                  		lde 													; shift E left into CY/L
     207/     1AF : 02                  		ccl
     208/     1B0 : 70                  		ade 
     209/     1B1 : 01                  		xae
     210/     1B2 : C2 FF               		ld 		-1(p2) 											; shift CY/L into -1(p2) and carry/link
     211/     1B4 : F2 FF               		add 	-1(p2)
     212/     1B6 : CA FF               		st 		-1(p2)
     213/     1B8 : BA FE               		dld 	-2(p2) 											; done it 5 times ?
     214/     1BA : 9C F2               		jnz 	__Ex5Shift
     215/     1BC : C5 01               		ld 		@1(p1) 											; re-read character.
     216/     1BE : D4 1F               		ani 	0x1F 											; lower 5 bits only.
     217/     1C0 : 58                  		ore 													; OR into E
     218/     1C1 : 01                  		xae
     219/     1C2 : 90 DF               		jmp 	Extract5Bit 									; go and get the next one.
     220/     1C4 :                     
     221/     1C4 :                     __ExtractEnd:
     222/     1C4 : C4 23               		ldi 	parPosn & 255 									; P1.L = Parameter Position, A = first non cmd char
     223/     1C6 : 31                  		xpal	p1
     224/     1C7 : C9 00               		st 		(p1) 											; write to parameter position.
     225/     1C9 :                     
     226/     1C9 :                     ; ****************************************************************************************************************
     227/     1C9 :                     ;
     228/     1C9 :                     ;						Find command in -1 (P2) (High) E (Low) in Command table
     229/     1C9 :                     ;	
     230/     1C9 :                     ; ****************************************************************************************************************
     231/     1C9 :                     
     232/     1C9 : C4 47               		ldi 	__commandList & 255 							; point P1 to the command list
     233/     1CB : 31                  		xpal 	p1
     234/     1CC : C4 07               		ldi 	__commandList / 256 		
     235/     1CE : 35                  		xpah 	p1	
     236/     1CF :                     __FindCommandLoop:
     237/     1CF : C1 00               		ld 		0(p1) 											; reached the end of the table ?
     238/     1D1 : D9 01               		or 		1(p1)											; which is marked by word 0000
     239/     1D3 : 98 31               		jz 		__CommandError
     240/     1D5 : C5 03               		ld 		@3(p1) 											; read low byte, and point to next
     241/     1D7 : 60                  		xre
     242/     1D8 : 9C F5               		jnz 	__FindCommandLoop 								; if different to LSB loop back.
     243/     1DA : C1 FE               		ld 		-2(p1) 											; read the high byte
     244/     1DC : E2 FF               		xor 	-1(p2) 											; if different to the MSB loop back.
     245/     1DE : 9C EF               		jnz 	__FindCommandLoop
     246/     1E0 :                     
     247/     1E0 :                     ; ****************************************************************************************************************
     248/     1E0 :                     ;
     249/     1E0 :                     ;				Found command, figure out if ASM or Command, if Command go to that routine
     250/     1E0 :                     ;
     251/     1E0 :                     ; ****************************************************************************************************************
     252/     1E0 :                     
     253/     1E0 : C4 2B               		ldi 	(GetParameter-1) & 255 							; point P3 to the get parameter code.
 AS V1.42 Beta [Bld 102] - source file monitor.asm - page 10 - 11/30/2015 17:34:15


     254/     1E2 : 33                  		xpal 	p3
     255/     1E3 : C4 05               		ldi 	(GetParameter-1) / 256
     256/     1E5 : 37                  		xpah 	p3
     257/     1E6 :                     
     258/     1E6 : C1 FF               		ld 		-1(p1) 											; read the operation code.
     259/     1E8 : D4 F0               		ani 	0xF0 											; look at the m-s-nibble - commands are 0x20.
     260/     1EA : E4 20               		xri 	0x20
     261/     1EC : 9C 22               		jnz 	__Assembler
     262/     1EE :                     
     263/     1EE : C1 FF               		ld 		-1(p1) 											; re-read it
     264/     1F0 : 02                  		ccl
     265/     1F1 : F1 FF               		add 	-1(p1) 											; double it
     266/     1F3 : D4 1F               		ani 	0x1F 											; lower 5 bits only.
     267/     1F5 : F4 EE               		adi 	__CommandTable & 255 							; make P1 point to the command table entry
     268/     1F7 : 31                  		xpal 	p1
     269/     1F8 : C4 07               		ldi 	__CommandTable / 256 					
     270/     1FA : 35                  		xpah 	p1
     271/     1FB : C1 00               		ld 		0(p1) 											; read low address
     272/     1FD : 01                  		xae
     273/     1FE : C1 01               		ld 		1(p1) 											; read high address
     274/     200 : 35                  		xpah 	p1 												; put in P1.H
     275/     201 : 40                  		lde 													; get low address
     276/     202 : 31                  		xpal 	p1 												; put in P1.L
     277/     203 : C5 FF               		ld 		@-1(p1) 										; fix up for the pre-increment
     278/     205 : 3D                  		xppc 	p1 												; and go there.
     279/     206 :                     
     280/     206 :                     __CommandError: 												; unknown command.
     281/     206 : C4 03               		ldi 	3 												; set the beeper on
     282/     208 : 07                  		cas
     283/     209 : 8F FF               		dly 	0xFF 											; short delay
     284/     20B : C4 00               		ldi 	0 												; set the beeper off
     285/     20D : 07                  		cas
     286/     20E : 90 84               		jmp 	__CmdMainLoop1
     287/     210 :                     
     288/     210 :                     ; ****************************************************************************************************************
     289/     210 :                     ;												In line Assembler
     290/     210 :                     ; ****************************************************************************************************************
     291/     210 :                     
     292/     210 :                     __Assembler:
     293/     210 : C1 FF               		ld 		-1(p1) 											; this is the operation code to use.
     294/     212 : CE FF               		st 		@-1(p2) 										; push on the stack.
     295/     214 :                     
     296/     214 : 3F                  		xppc 	p3 												; evaluate (any) parameter if present
     297/     215 : 06                  		csa 													; check carry flag set
     298/     216 : 94 27               		jp 		__ASMNoParameter  								; if clear, no parameter was provided.
     299/     218 :                     
     300/     218 : C4 23               		ldi 	parPosn & 255
     301/     21A : 31                  		xpal 	p1 												; get the parameter LSB
     302/     21B : CE FF               		st 		@-1(p2) 										; push that on the stack, set P1 to parPosn
     303/     21D : C4 0C               		ldi 	parPosn / 256
     304/     21F : 35                  		xpah 	p1
     305/     220 : C1 00               		ld 		(p1) 											; read current position
     306/     222 : 31                  		xpal 	p1 												; P1 now points to character.
     307/     223 : C1 00               		ld 		(p1) 											; read character
     308/     225 : E4 21               		xri 	'!'												; is it the label pling ?
     309/     227 : 9C 1E               		jnz 	__ASMContinue 									; we don't need to change this pointer , we should technically.
     310/     229 : C2 00               		ld 		(p2) 											; read the value, which is the label number
     311/     22B : 03                  		scl
     312/     22C : FC 20               		cai 	labelCount 										; is it a valid label number
     313/     22E : 94 D6               		jp 		__CommandError 									; no, beep.
 AS V1.42 Beta [Bld 102] - source file monitor.asm - page 11 - 11/30/2015 17:34:15


     314/     230 : C2 00               		ld 		(p2) 											; re-read the label number
     315/     232 : 01                  		xae 													; put in E
     316/     233 : C4 0C               		ldi 	Labels/256 										; point p1 to labels
     317/     235 : 35                  		xpah 	p1
     318/     236 : C4 00               		ldi 	Labels&255 
     319/     238 : 31                  		xpal 	p1
     320/     239 : C1 80               		ld 		-0x80(p1) 										; read label indexed using E.
     321/     23B : CA 00               		st 		(p2) 											; save as the operand
     322/     23D : 90 08               		jmp 	__ASMContinue 									; and continue
     323/     23F :                     
     324/     23F :                     __ASMNoParameter:
     325/     23F : C2 00               		ld 		(p2) 											; read the pushed operation code
     326/     241 : D4 80               		ani 	0x80 											; is bit 7 set ?
     327/     243 : 9C C1               		jnz 	__CommandError 									; if it is, we need a parameter
     328/     245 : CE FF               		st 		@-1(p2) 										; push zero on the stack as a dummy parameter.
     329/     247 :                     
     330/     247 :                     __ASMContinue:
     331/     247 : C4 0C               		ldi 	Current/256 									; p3 = &Current Address
     332/     249 : 37                  		xpah 	p3
     333/     24A : C4 21               		ldi 	Current&255
     334/     24C : 33                  		xpal 	p3
     335/     24D :                     
     336/     24D : C3 03               		ld 		modifier-Current(p3) 							; get the modifier (e.g. @,Pn etc.)
     337/     24F : 02                  		ccl
     338/     250 : F2 01               		add 	1(p2) 											; add to the opcode and write it back
     339/     252 : CA 01               		st 		1(p2)
     340/     254 :                     
     341/     254 : C3 00               		ld 		(p3) 											; read current address into P1
     342/     256 : 31                  		xpal 	p1
     343/     257 : C3 01               		ld 		1(p3)
     344/     259 : 35                  		xpah 	p1
     345/     25A :                     
     346/     25A : C2 01               		ld 		1(p2) 											; read opcode.
     347/     25C : CD 01               		st 		@1(p1) 											; write out to current address and bump it.
     348/     25E : 94 1F               		jp 		__ASMExit 										; if +ve then no operand byte, exit.
     349/     260 :                     
     350/     260 : C2 00               		ld 		(p2) 											; read the operand byte
     351/     262 : CD 01               		st 		@1(p1) 											; write that out as well.
     352/     264 :                     
     353/     264 : C3 03               		ld 		modifier-Current(p3) 							; look at the modifier 
     354/     266 : 9C 17               		jnz 	__ASMExit 										; if non zero we don't need to do anything P0 = 00
     355/     268 : C2 01               		ld 		1(p2) 											; DLY is a special case
     356/     26A : E4 8F               		xri 	0x8F 											; where the modifier is zero but not PC relative.
     357/     26C : 98 11               		jz 		__ASMExit 												
     358/     26E :                     
     359/     26E : C1 FF               		ld 		-1(p1) 											; read operand
     360/     270 : 02                  		ccl 													; one fewer because we want the current addr+1 low
     361/     271 : FB 00               		cad 	(p3) 											; subtract the current address low.
     362/     273 : C9 FF               		st 		-1(p1) 											; write it back
     363/     275 :                     
     364/     275 : C2 01               		ld 		1(p2) 											; read opcode again
     365/     277 : D4 F0               		ani 	0xF0 											; is it 9x (a JMP command)
     366/     279 : E4 90               		xri 	0x90
     367/     27B : 9C 02               		jnz 	__ASMExit 										; if not, we are done
     368/     27D : B9 FF               		dld 	-1(p1) 											; one fewer because of the pre-increment
     369/     27F :                     __ASMExit:
     370/     27F : 31                  		xpal 	p1 												; write current address back out
     371/     280 : CB 00               		st 		(p3)
     372/     282 : 35                  		xpah 	p1
     373/     283 : CB 01               		st 		1(p3)
 AS V1.42 Beta [Bld 102] - source file monitor.asm - page 12 - 11/30/2015 17:34:15


     374/     285 : C6 02               		ld 		@2(p2) 											; drop stack values.
     375/     287 :                     
     376/     287 : 90 0C               		jmp 	__CmdMainLoop2 									; back to command loop
     377/     289 :                     
     378/     289 :                     ; ****************************************************************************************************************
     379/     289 :                     ; ****************************************************************************************************************
     380/     289 :                     ;
     381/     289 :                     ;												Commands Section
     382/     289 :                     ;
     383/     289 :                     ; ****************************************************************************************************************
     384/     289 :                     ; ****************************************************************************************************************
     385/     289 :                     
     386/     289 :                     ; ****************************************************************************************************************
     387/     289 :                     ;											A : Set Current address
     388/     289 :                     ; ****************************************************************************************************************
     389/     289 :                     
     390/     289 :                     Address_Command:
     391/     289 : 3F                  		xppc 	p3 												; get parameter if exists
     392/     28A : 3F                  		xppc 	p3 												; update current if exists.
     393/     28B : 90 08               		jmp 	__CmdMainLoop2
     394/     28D :                     
     395/     28D :                     __CmdParameterFail:
     396/     28D : C4 02               		ldi 	2 												; set the beeper on
     397/     28F : 07                  		cas
     398/     290 : 8F FF               		dly 	0xFF 											; short delay
     399/     292 : C4 00               		ldi 	0 												; set the beeper off
     400/     294 : 07                  		cas
     401/     295 :                     __CmdMainLoop2:													; and go back to the start.
     402/     295 : C4 37               		ldi 	(CommandMainLoop-1) & 255
     403/     297 : 33                  		xpal 	p3
     404/     298 : C4 01               		ldi 	(CommandMainLoop-1) / 256
     405/     29A : 37                  		xpah 	p3
     406/     29B : 3F                  		xppc 	p3
     407/     29C :                     
     408/     29C :                     ; ****************************************************************************************************************
     409/     29C :                     ;										G : Go (Address must be specified.)
     410/     29C :                     ; ****************************************************************************************************************
     411/     29C :                     
     412/     29C :                     Go_Command:
     413/     29C : 3F                  		xppc 	p3 												; get parameter, which should exist.
     414/     29D : 06                  		csa 													; look at CY/L which is set if it was.
     415/     29E : 94 ED               		jp 		__CmdParameterFail 								; if it is clear, beep an error.
     416/     2A0 : 31                  		xpal 	p1 												; copy P1 to P3
     417/     2A1 : 33                  		xpal 	p3
     418/     2A2 : 35                  		xpah 	p1
     419/     2A3 : 37                  		xpah 	p3
     420/     2A4 : C7 FF               		ld 		@-1(p3) 										; fix up for pre increment
     421/     2A6 : 3F                  		xppc 	p3 												; call the routine.		
     422/     2A7 :                     __CmdMainLoop3:
     423/     2A7 : 90 EC               		jmp 	__CmdMainLoop2 									; re-enter monitor.
     424/     2A9 :                     
     425/     2A9 :                     ; ****************************************************************************************************************
     426/     2A9 :                     ;			PUT Write to tape : data mandatory, it is the byte count from the current address.
     427/     2A9 :                     ; ****************************************************************************************************************
     428/     2A9 :                     
     429/     2A9 :                     PutTape_Command:
     430/     2A9 : 3F                  		xppc 	p3 												; get the bytes to write.
     431/     2AA : 06                  		csa 													; if CC, no value was provided
     432/     2AB : 94 E0               		jp 		__CmdParameterFail 								; which is an error.
     433/     2AD : 31                  		xpal 	p1 												; store low byte count in -1(P2)
 AS V1.42 Beta [Bld 102] - source file monitor.asm - page 13 - 11/30/2015 17:34:15


     434/     2AE : CA FF               		st 		-1(p2)
     435/     2B0 : 35                  		xpah 	p1 												; store high byte count in -2(P2)
     436/     2B1 : CA FE               		st 		-2(p2)
     437/     2B3 : 02                  		ccl 													; skip over the update current address
     438/     2B4 : 3F                  		xppc 	p3 												; this won't update current address as CY/L = 0
     439/     2B5 : 3F                  		xppc 	p3 												; and load the current address into P1.
     440/     2B6 : C4 00               		ldi 	0 												; set the output tape bit low
     441/     2B8 : 01                  		xae
     442/     2B9 : 19                  		sio
     443/     2BA : C4 20               		ldi 	32 												; tape leader
     444/     2BC : CA FD               		st 		-3(p2)
     445/     2BE :                     _PutTapeLeader:
     446/     2BE : 8F FF               		dly 	0xFF
     447/     2C0 : BA FD               		dld 	-3(p2)
     448/     2C2 : 9C FA               		jnz 	_PutTapeLeader
     449/     2C4 :                     _PutTapeByte:													; output byte at P1
     450/     2C4 : C4 00               		ldi 	0 												; set output bit to 0
     451/     2C6 : 01                  		xae 	
     452/     2C7 : 19                  		sio
     453/     2C8 : 8F 10               		dly 	tapeDelay * 4 									; 0 continuation bit + gap between tapes with no signal 
     454/     2CA : C4 01               		ldi 	0x1 											; set bit high
     455/     2CC : 01                  		xae
     456/     2CD : 19                  		sio 
     457/     2CE : C4 00               		ldi 	0
     458/     2D0 : 8F 04               		dly 	tapeDelay 										; output the start bit.
     459/     2D2 : C5 01               		ld 		@1(p1) 											; read the byte and put it in E.
     460/     2D4 : 01                  		xae
     461/     2D5 : C4 08               		ldi 	8 												; output 8 bits
     462/     2D7 : CA FD               		st 		-3(p2)
     463/     2D9 :                     _PutTapeBit:
     464/     2D9 : 19                  		sio 													; output MSB and shift
     465/     2DA : C4 00               		ldi 	0
     466/     2DC : 8F 04               		dly 	tapeDelay 								
     467/     2DE : BA FD               		dld 	-3(p2) 											; do all 8 bits.
     468/     2E0 : 9C F7               		jnz 	_PutTapeBit
     469/     2E2 : BA FF               		dld 	-1(p2) 											; decrement counter
     470/     2E4 : 9C DE               		jnz 	_PutTapeByte
     471/     2E6 : BA FE               		dld 	-2(p2) 											; note MSB goes 0 to -1 when finished.
     472/     2E8 : 94 DA               		jp 		_PutTapeByte
     473/     2EA : C4 01               		ldi 	0x01 											; add the termination bit.
     474/     2EC : 01                  		xae
     475/     2ED : 19                  		sio
     476/     2EE : C4 00               		ldi 	0 												; put that out.
     477/     2F0 : 8F 04               		dly 	TapeDelay
     478/     2F2 : C4 00               		ldi 	0 												; and set the leve back to 0
     479/     2F4 : 01                  		xae 
     480/     2F5 : 19                  		sio
     481/     2F6 :                     __CmdMainLoop4:
     482/     2F6 : 90 AF               		jmp 	__CmdMainLoop3
     483/     2F8 :                     
     484/     2F8 :                     __CmdParameterFail1:
     485/     2F8 : 90 93               		jmp 	__CmdParameterFail
     486/     2FA :                     
     487/     2FA :                     ; ****************************************************************************************************************
     488/     2FA :                     ;						GET [addr] load tape to current position or given address.
     489/     2FA :                     ; ****************************************************************************************************************
     490/     2FA :                     
     491/     2FA :                     LoadTape_Command:
     492/     2FA : 3F                  		xppc	p3 												; get parameter
     493/     2FB : 3F                  		xppc 	p3												; update current address
 AS V1.42 Beta [Bld 102] - source file monitor.asm - page 14 - 11/30/2015 17:34:15


     494/     2FC : 3F                  		xppc 	p3 												; current address to P1.
     495/     2FD : C4 08               		ldi 	0x8 											; point P3 to the keyboard.
     496/     2FF : 37                  		xpah 	p3
     497/     300 :                     __GetTapeWait:
     498/     300 : C3 00               		ld 		0(p3) 											; check keyboard break
     499/     302 : D4 80               		ani 	0x80
     500/     304 : 9C F2               		jnz 	__CmdParameterFail1
     501/     306 : 19                  		sio 													; wait for the start bit, examine tape in.
     502/     307 : 40                  		lde 
     503/     308 : 94 F6               		jp 		__GetTapeWait
     504/     30A : 8F 06               		dly 	tapeDelay * 3 / 2 								; half way into the first bit.
     505/     30C : C4 08               		ldi 	8 												; read in 8 bits.
     506/     30E : CA FF               		st 		-1(p2)
     507/     310 :                     __GetTapeBits:
     508/     310 : 19                  		sio 													; read in one bit
     509/     311 : C4 00               		ldi 	0
     510/     313 : 8F 04               		dly 	tapeDelay 										; delay to next bit
     511/     315 : BA FF               		dld 	-1(p2) 											; read 8 bits.
     512/     317 : 9C F7               		jnz 	__GetTapeBits 
     513/     319 : 40                  		lde 													; store byte at current address
     514/     31A : CD 01               		st 		@1(p1)
     515/     31C : 19                  		sio 													; read in the byte, which is zero if continuing.
     516/     31D : 40                  		lde  													; examine bit 7 shifted in.
     517/     31E : 94 E0               		jp 		__GetTapeWait 									; if zero, wait for the next start bit.
     518/     320 :                     __CmdMainLoop5:
     519/     320 : 90 D4               		jmp 	__CmdMainLoop4
     520/     322 :                     
     521/     322 :                     ; ****************************************************************************************************************
     522/     322 :                     ;										L : nn Set Label to current address
     523/     322 :                     ; ****************************************************************************************************************
     524/     322 :                     
     525/     322 :                     Label_Command:
     526/     322 : 3F                  		xppc 	p3 												; get parameter
     527/     323 : 06                  		csa 													; check it exists, CY/L must be set
     528/     324 : 94 D2               		jp 		__CmdParameterFail1
     529/     326 : 31                  		xpal 	p1 												; get into A
     530/     327 : 01                  		xae 													; put into E
     531/     328 : 40                  		lde 													; get back
     532/     329 : 03                  		scl
     533/     32A : FC 20               		cai 	labelCount 										; check is < number of labels
     534/     32C : 94 CA               		jp 		__CmdParameterFail1
     535/     32E :                     
     536/     32E : C4 0C               		ldi 	Current/256 									; point P1 to current address
     537/     330 : 35                  		xpah 	p1
     538/     331 : C4 21               		ldi 	Current&255
     539/     333 : 31                  		xpal 	p1
     540/     334 : C1 00               		ld 		(p1) 											; read current address
     541/     336 : 31                  		xpal 	p1 												; save in P1.Low
     542/     337 : C4 00               		ldi 	Labels&255 										; get labels low byte in same page as current address
     543/     339 : 02                  		ccl
     544/     33A : 70                  		ade 													; add label # to it
     545/     33B : 31                  		xpal 	p1 												; put in P1.L and restore current address low
     546/     33C : C9 00               		st 		(p1) 											; store current address low in label space.
     547/     33E : 90 E0               		jmp 	__CmdMainLoop5 									; and exit.
     548/     340 :                     
     549/     340 :                     ; ****************************************************************************************************************
     550/     340 :                     ;											M :	Dump Memory
     551/     340 :                     ; ****************************************************************************************************************
     552/     340 :                     
     553/     340 :                     MemoryDump_Command:
 AS V1.42 Beta [Bld 102] - source file monitor.asm - page 15 - 11/30/2015 17:34:15


     554/     340 : 3F                  		xppc 	p3 												; get parameter if exists
     555/     341 : 3F                  		xppc 	p3 												; update current if exists.
     556/     342 : C4 07               		ldi 	7 												; print seven rows
     557/     344 : CE FF               		st 		@-1(p2)
     558/     346 :                     __DCLoop:
     559/     346 : C4 04               		ldi 	(PrintAddressData-1)/256						; print one row of address and data.
     560/     348 : 37                  		xpah 	p3
     561/     349 : C4 F8               		ldi 	(PrintAddressData-1)&255
     562/     34B : 33                  		xpal 	p3
     563/     34C : C4 04               		ldi 	4
     564/     34E : 3F                  		xppc 	p3
     565/     34F : C4 0C               		ldi 	Current/256 									; point P1 to current
     566/     351 : 35                  		xpah 	p1
     567/     352 : C4 21               		ldi 	Current&255 
     568/     354 : 31                  		xpal 	p1
     569/     355 : C1 00               		ld 		0(p1) 											; add 4 to current address
     570/     357 : 02                  		ccl
     571/     358 : F4 04               		adi 	4
     572/     35A : C9 00               		st 		0(p1)
     573/     35C : C1 01               		ld 		1(p1)
     574/     35E : F4 00               		adi 	0
     575/     360 : C9 01               		st 		1(p1)
     576/     362 : BA 00               		dld 	(p2) 											; do it 7 times
     577/     364 : 9C E0               		jnz 	__DCLoop
     578/     366 : C6 01               		ld 		@1(p2) 											; fix up stack.
     579/     368 :                     __CmdMainLoop6:
     580/     368 : 90 B6               		jmp 	__CmdMainLoop5
     581/     36A :                     
     582/     36A :                     
     583/     36A :                     ; ****************************************************************************************************************
     584/     36A :                     ;								B: Enter Bytes (no address, sequence of byte data)
     585/     36A :                     ; ****************************************************************************************************************
     586/     36A :                     
     587/     36A :                     EnterBytes_Command:
     588/     36A : C4 2B               		ldi 	(GetParameter-1) & 255 							; P3 = Get Parameter routine
     589/     36C : 33                  		xpal 	p3
     590/     36D : C4 05               		ldi 	(GetParameter-1) / 256 	
     591/     36F : 37                  		xpah 	p3
     592/     370 : 3F                  		xppc 	p3 												; get the parameter.
     593/     371 : 06                  		csa 													; look at carry
     594/     372 : 94 AC               		jp 		__CmdMainLoop5 									; carry clear, no value.
     595/     374 : C4 0C               		ldi 	Current/256 									; make P1 point to current
     596/     376 : 35                  		xpah 	p1
     597/     377 : C4 21               		ldi 	Current&255 										
     598/     379 : 31                  		xpal 	p1 												; this pulls the byte value into A
     599/     37A : 01                  		xae 													; save it in E
     600/     37B : C1 00               		ld 		0(p1) 											; copy address to save to into P3
     601/     37D : 33                  		xpal 	p3
     602/     37E : C1 01               		ld 		1(p1) 
     603/     380 : 37                  		xpah 	p3 
     604/     381 : 40                  		lde 													; get byte back
     605/     382 : CB 00               		st 		(p3) 											; save it in that location
     606/     384 : A9 00               		ild 	0(p1) 											; bump current address and go back and try again.
     607/     386 : 9C E2               		jnz 	EnterBytes_Command
     608/     388 : A9 01               		ild 	1(p1)
     609/     38A : 90 DE               		jmp 	EnterBytes_Command
     610/     38C :                     
     611/     38C :                     ; ****************************************************************************************************************
     612/     38C :                     ;											D [aaaa] Disassembler
     613/     38C :                     ; ****************************************************************************************************************
 AS V1.42 Beta [Bld 102] - source file monitor.asm - page 16 - 11/30/2015 17:34:15


     614/     38C :                     
     615/     38C :                     Disassemble_Command:	
     616/     38C : 3F                  		xppc 	p3 												; evaluate
     617/     38D : 3F                  		xppc 	p3 												; update current if new value
     618/     38E : C4 07               		ldi 	7												; instructions to disassemble counter
     619/     390 : CE FC               		st 		@-4(p2)											; p2 + 0 = counter p2 + 1 = opcode p2 + 2 = operand
     620/     392 :                     __DAssLoop:														; p2 + 3 = opcode - base opcode.
     621/     392 : C4 04               		ldi 	(PrintAddressData-1)/256						; print Address only
     622/     394 : 37                  		xpah 	p3
     623/     395 : C4 F8               		ldi 	(PrintAddressData-1)&255
     624/     397 : 33                  		xpal 	p3
     625/     398 : C4 00               		ldi 	0
     626/     39A : 3F                  		xppc 	p3
     627/     39B : C4 0C               		ldi 	Current / 256 									; point P1 to current address
     628/     39D : 35                  		xpah 	p1
     629/     39E : C4 21               		ldi 	Current & 255
     630/     3A0 : 31                  		xpal 	p1
     631/     3A1 : C1 00               		ld 		0(p1) 											; load current address into P3
     632/     3A3 : 33                  		xpal 	p3
     633/     3A4 : C1 01               		ld 		1(p1)
     634/     3A6 : 37                  		xpah 	p3
     635/     3A7 : C7 01               		ld 		@1(p3) 											; read opcode
     636/     3A9 : CA 01               		st 		1(p2) 											; save it
     637/     3AB : 94 04               		jp 		__DAssNoOperand 								; if +ve no operand
     638/     3AD : C7 01               		ld 		@1(p3) 											; read operand
     639/     3AF : CA 02               		st 		2(p2) 											; save it
     640/     3B1 :                     __DAssNoOperand:
     641/     3B1 : C4 E9               		ldi 	(__CommandListEnd-3) & 255
     642/     3B3 : 33                  		xpal 	p3 												; update current position, setting P3 to last entry
     643/     3B4 : C9 00               		st 		0(p1)											; in command table.
     644/     3B6 : C4 07               		ldi 	(__CommandListEnd-3) / 256
     645/     3B8 : 37                  		xpah 	p3
     646/     3B9 : C9 01               		st 		1(p1)
     647/     3BB :                     
     648/     3BB :                     __DAssFindOpcode: 												; the table is : text (word) opcode (byte)
     649/     3BB : C2 01               		ld 		1(p2) 											; get opcode
     650/     3BD : E3 02               		xor 	2(p3) 											; check in the same 8 byte page.
     651/     3BF : D4 F0               		ani 	0xF0
     652/     3C1 : 9C 0B               		jnz 	__DAssNextOpcode
     653/     3C3 : C2 01               		ld 		1(p2) 											; get opcode
     654/     3C5 : 03                  		scl
     655/     3C6 : FB 02               		cad 	2(p3) 											; subtract the base opcode.
     656/     3C8 : CA 03               		st 		3(p2) 											; save a the offset (possible)
     657/     3CA : D4 E0               		ani 	0xE0 											; it needs to be 0x20 or less
     658/     3CC : 98 08               		jz 		__DAssFoundOpcode 								; if >= 0 then found the correct opcode.
     659/     3CE :                     __DAssNextOpcode:
     660/     3CE : C7 FD               		ld 		@-3(p3) 										; go to previous entry in table
     661/     3D0 : 90 E9               		jmp 	__DAssFindOpcode
     662/     3D2 :                     
     663/     3D2 :                     __DAssLoop2:
     664/     3D2 : 90 BE               		jmp 	__DAssLoop
     665/     3D4 :                     __CmdMainLoop7:
     666/     3D4 : 90 92               		jmp 	__CmdMainLoop6
     667/     3D6 :                     
     668/     3D6 :                     __DAssFoundOpcode:
     669/     3D6 : C3 02               		ld 		2(p3) 											; look at opcode that matched.
     670/     3D8 : D4 87               		ani 	0x87 											; match with 1xxx x100
     671/     3DA : E4 84               		xri 	0x84 											; which is all the immediate instructions.		
     672/     3DC : 9C 04               		jnz 	__DAssNotImmediate
     673/     3DE : C2 03               		ld 		3(p2) 											; only do immediate if base offset is zero
 AS V1.42 Beta [Bld 102] - source file monitor.asm - page 17 - 11/30/2015 17:34:15


     674/     3E0 : 9C EC               		jnz 	__DAssNextOpcode 								; fixes C0-C7 being LD, but C4 being LDI.
     675/     3E2 :                     __DAssNotImmediate:
     676/     3E2 : C3 00               		ld 		0(p3) 											; save LSB of text on stack
     677/     3E4 : CE FF               		st 		@-1(p2)
     678/     3E6 : C3 01               		ld 		1(p3) 											; and the MSB of text on stack
     679/     3E8 : CE FF               		st 		@-1(p2)
     680/     3EA :                     
     681/     3EA : C4 04               		ldi 	(PrintCharacter-1) / 256 						; set P3 up to print characters
     682/     3EC : 37                  		xpah 	p3
     683/     3ED : C4 8B               		ldi 	(PrintCharacter-1) & 255 
     684/     3EF : 33                  		xpal 	p3
     685/     3F0 : C4 20               		ldi 	' '												; print a space.
     686/     3F2 : 3F                  		xppc 	p3
     687/     3F3 :                     
     688/     3F3 : C4 03               		ldi 	3 												; print 3 characters
     689/     3F5 : CE FF               		st 		@-1(p2) 										; so +0 is count, +1 = text MSB, +2 = text LSB
     690/     3F7 :                     __DAssPrintMnemonic:
     691/     3F7 : C2 01               		ld 		1(p2) 											; get text MSB which is in bits .xxxxx..
     692/     3F9 : 1C                  		sr 														; shift right twice.
     693/     3FA : 1C                  		sr
     694/     3FB : D4 1F               		ani 	0x1F 											; lower 5 bits only
     695/     3FD : 98 04               		jz 		__DAssSkipSpace 								; don't print spaces (00000)
     696/     3FF : 02                  		ccl 													; make it 7 bit ASCII code.
     697/     400 : F4 40               		adi 	64 							
     698/     402 : 3F                  		xppc 	p3 												; display the character
     699/     403 :                     __DAssSkipSpace:
     700/     403 : C4 05               		ldi 	5 												; now shift the encoded data left 5 times
     701/     405 : CA FF               		st 		-1(p2)
     702/     407 :                     __DAssShiftEncode:
     703/     407 : 02                  		ccl
     704/     408 : C2 02               		ld 		2(p2)
     705/     40A : F2 02               		add 	2(p2)
     706/     40C : CA 02               		st 		2(p2)
     707/     40E : C2 01               		ld 		1(p2)
     708/     410 : F2 01               		add 	1(p2)
     709/     412 : CA 01               		st 		1(p2)
     710/     414 : BA FF               		dld 	-1(p2)
     711/     416 : 9C EF               		jnz 	__DAssShiftEncode
     712/     418 : BA 00               		dld 	0(p2) 											; done all three characters
     713/     41A : 9C DB               		jnz 	__DAssPrintMnemonic 							; if not keep going.
     714/     41C :                     
     715/     41C : C6 03               		ld 		@3(p2) 											; remove mnemonic stuff off the stack.
     716/     41E :                     
     717/     41E : C2 03               		ld 		3(p2) 											; print instruction modifier if required.
     718/     420 : 9C 1F               		jnz 	__DAssPrintModifier
     719/     422 :                     
     720/     422 :                     __DAssPrintOperand:
     721/     422 : C2 01               		ld 		1(p2) 											; get original opcode
     722/     424 : 94 0A               		jp 		__DAssNext 										; if no operand go to next line of disassembly.
     723/     426 : C4 04               		ldi 	(PrintHexByte-1) / 256 							; set P3 to point to the hex printer
     724/     428 : 37                  		xpah 	p3
     725/     429 : C4 58               		ldi 	(PrintHexByte-1) & 255
     726/     42B : 33                  		xpal 	p3
     727/     42C : C2 02               		ld 		2(p2) 											; get operand
     728/     42E : 03                  		scl 
     729/     42F : 3F                  		xppc 	p3 												; print it out with a leading space.
     730/     430 :                     
     731/     430 :                     __DAssNext:
     732/     430 : C4 04               		ldi 	(PrintCharacter-1) / 256 						; set P3 up to print characters
     733/     432 : 37                  		xpah 	p3
 AS V1.42 Beta [Bld 102] - source file monitor.asm - page 18 - 11/30/2015 17:34:15


     734/     433 : C4 8B               		ldi 	(PrintCharacter-1) & 255 
     735/     435 : 33                  		xpal 	p3
     736/     436 : C4 0D               		ldi 	13												; print a newline.
     737/     438 : 3F                  		xppc 	p3
     738/     439 :                     
     739/     439 : BA 00               		dld 	0(p2) 											; done all 6 lines
     740/     43B : 9C 95               		jnz 	__DAssLoop2 									; no, go round again.
     741/     43D : C6 04               		ld 		@4(p2) 											; fix up the stack.
     742/     43F : 90 93               		jmp 	__CmdMainLoop7 									; and time to exit.
     743/     441 :                     
     744/     441 :                     
     745/     441 :                     __DAssPrintModifier:
     746/     441 : C4 20               		ldi 	' '												; print leading space
     747/     443 : 3F                  		xppc 	p3
     748/     444 : C2 03               		ld 		3(p2) 											; read modifier
     749/     446 : D4 04               		ani 	0x04 											; is @ bit set
     750/     448 : 98 03               		jz 		__DAssNotAutoIndexed
     751/     44A : C4 40               		ldi 	'@'												; print '@'
     752/     44C : 3F                  		xppc 	p3
     753/     44D :                     __DAssNotAutoIndexed:
     754/     44D : C4 50               		ldi 	'P'												; print 'P'
     755/     44F : 3F                  		xppc 	p3
     756/     450 : C2 03               		ld 		3(p2) 											; print pointer register
     757/     452 : D4 03               		ani 	3
     758/     454 : DC 30               		ori 	'0'
     759/     456 : 3F                  		xppc 	p3
     760/     457 : 90 C9               		jmp 	__DAssPrintOperand 								; and print operand.
     761/     459 :                     
     762/     459 :                     
     763/     459 :                     ; ****************************************************************************************************************
     764/     459 :                     ; ****************************************************************************************************************
     765/     459 :                     ;
     766/     459 :                     ;						Print A as a hexadecimal 2 digit value. If CY/L set precede with space
     767/     459 :                     ;
     768/     459 :                     ; ****************************************************************************************************************
     769/     459 :                     ; ****************************************************************************************************************
     770/     459 :                     
     771/     459 :                     PrintHexByte:
     772/     459 : CE FF               		st 		@-1(p2) 										; push A and P3, set P3 up to print character
     773/     45B : C4 04               		ldi 	(PrintCharacter-1)/256
     774/     45D : 37                  		xpah 	p3
     775/     45E : CE FF               		st 		@-1(p2)
     776/     460 : C4 8B               		ldi 	(PrintCharacter-1)&255
     777/     462 : 33                  		xpal 	p3
     778/     463 : CE FF               		st 		@-1(p2)
     779/     465 : 06                  		csa 													; check carry
     780/     466 : 94 03               		jp 		__PHBNoSpace									; if clear, no space.
     781/     468 : C4 20               		ldi 	' '												; print leading space
     782/     46A : 3F                  		xppc 	p3 
     783/     46B :                     __PHBNoSpace:
     784/     46B : C2 02               		ld 		2(p2) 											; read digit
     785/     46D : 1C                  		sr 														; convert MSB
     786/     46E : 1C                  		sr
     787/     46F : 1C                  		sr
     788/     470 : 1C                  		sr
     789/     471 : 02                  		ccl
     790/     472 : EC 90               		dai 	0x90
     791/     474 : EC 40               		dai 	0x40
     792/     476 : 3F                  		xppc 	p3 												; print
     793/     477 : C2 02               		ld 		2(p2) 											; read digit
 AS V1.42 Beta [Bld 102] - source file monitor.asm - page 19 - 11/30/2015 17:34:15


     794/     479 : D4 0F               		ani 	0x0F 											; convert LSB
     795/     47B : 02                  		ccl
     796/     47C : EC 90               		dai 	0x90
     797/     47E : EC 40               		dai 	0x40
     798/     480 : 3F                  		xppc 	p3 												; print
     799/     481 :                     
     800/     481 : C6 01               		ld 		@1(p2) 											; restore P3 & A and Return
     801/     483 : 33                  		xpal 	p3
     802/     484 : C6 01               		ld 		@1(p2)
     803/     486 : 37                  		xpah 	p3
     804/     487 : C6 01               		ld 		@1(p2)
     805/     489 : 3F                  		xppc 	p3
     806/     48A : 90 CD               		jmp 	PrintHexByte
     807/     48C :                     
     808/     48C :                     ; ****************************************************************************************************************
     809/     48C :                     ; ****************************************************************************************************************
     810/     48C :                     ;
     811/     48C :                     ;		Print Character in A, preserves all registers, re-entrant. Handles 13 (New Line), 8 (Backspace)
     812/     48C :                     ;		Characters 32 - 95 only.
     813/     48C :                     ;	
     814/     48C :                     ;		Rolls to screen top rather than scrolling.
     815/     48C :                     ;
     816/     48C :                     ; ****************************************************************************************************************
     817/     48C :                     ; ****************************************************************************************************************
     818/     48C :                     
     819/     48C :                     PrintCharacter:
     820/     48C : CE FF               		st 		@-1(p2) 										; save A
     821/     48E : C4 0C               		ldi 	Cursor/256 										; save P1, setting up P1 -> Cursor at same time.
     822/     490 : 35                  		xpah 	p1
     823/     491 : CE FF               		st 		@-1(p2)
     824/     493 : C4 20               		ldi 	Cursor&255
     825/     495 : 31                  		xpal 	p1
     826/     496 : CE FF               		st 		@-1(p2)
     827/     498 : C4 00               		ldi 	0 												; save P3, setting up P3 -> Page 0 (Video RAM Write)
     828/     49A : 37                  		xpah 	p3
     829/     49B : CE FF               		st 		@-1(p2)
     830/     49D : 33                  		xpal 	p3
     831/     49E : CE FF               		st 		@-1(p2)
     832/     4A0 :                     
     833/     4A0 : C1 00               		ld 		(p1) 											; read cursor position
     834/     4A2 : 33                  		xpal 	p3 												; put in P3.Low
     835/     4A3 :                     
     836/     4A3 : C4 20               		ldi 	' ' 											; erase the cursor.
     837/     4A5 : CB 00               		st 		0(p3)
     838/     4A7 :                     
     839/     4A7 : C2 04               		ld 		4(p2) 											; read character to print.
     840/     4A9 : E4 0D               		xri 	13 												; is it CR ?
     841/     4AB : 98 40               		jz 		__PCNewLine 									; if so, go to new line.
     842/     4AD : E4 05               		xri 	13!8 											; is it Backspace ?
     843/     4AF : 98 30               		jz 		__PCBackSpace
     844/     4B1 :                     
     845/     4B1 : C2 04               		ld 		4(p2) 											; get character to print
     846/     4B3 : D4 3F               		ani 	0x3F 											; make 6 bit ASCII
     847/     4B5 : CF 01               		st 		@1(p3) 											; write into P3, e.g. the screen and bump it.
     848/     4B7 : A9 00               		ild 	(p1) 											; increment cursor position and load
     849/     4B9 : D4 0F               		ani 	15 												; are we at line start ?
     850/     4BB : 9C 0C               		jnz 	__PCExit 										; if so, erase the current line.
     851/     4BD :                     
     852/     4BD :                     __PCBlankNewLine:
     853/     4BD : C4 10               		ldi 	16 												; count to 16, the number of spaces to write out.
 AS V1.42 Beta [Bld 102] - source file monitor.asm - page 20 - 11/30/2015 17:34:15


     854/     4BF : CA FF               		st 		-1(p2) 
     855/     4C1 :                     __PCBlankNewLineLoop:
     856/     4C1 : C4 20               		ldi 	' '
     857/     4C3 : CF 01               		st 		@1(p3)
     858/     4C5 : BA FF               		dld 	-1(p2)
     859/     4C7 : 9C F8               		jnz 	__PCBlankNewLineLoop
     860/     4C9 :                     
     861/     4C9 :                     __PCExit:
     862/     4C9 : C1 00               		ld 		(p1) 											; read cursor
     863/     4CB : 33                  		xpal 	p3 												; put in P3.L
     864/     4CC : C4 9B               		ldi 	0x9B 											; shaded block cursor on screen
     865/     4CE : CB 00               		st 		(p3)
     866/     4D0 : C6 01               		ld 		@1(p2)											; restore P3
     867/     4D2 : 33                  		xpal 	p3
     868/     4D3 : C6 01               		ld 		@1(p2)
     869/     4D5 : 37                  		xpah 	p3
     870/     4D6 : C6 01               		ld 		@1(p2)											; restore P1
     871/     4D8 : 31                  		xpal 	p1
     872/     4D9 : C6 01               		ld 		@1(p2)
     873/     4DB : 35                  		xpah 	p1
     874/     4DC : C6 01               		ld 		@1(p2) 											; restore A and Return.	
     875/     4DE : 3F                  		xppc 	p3
     876/     4DF : 90 AB               		jmp 	PrintCharacter 									; and it is re-entrant.
     877/     4E1 :                     
     878/     4E1 :                     __PCBackSpace:
     879/     4E1 : 33                  		xpal 	p3 												; get current cursor position
     880/     4E2 : 98 E5               		jz 		__PCExit 										; if top of screen then exit.
     881/     4E4 : B9 00               		dld 	(p1) 											; backspace and load cursor
     882/     4E6 : 33                  		xpal 	p3 												; put in P3
     883/     4E7 : C4 20               		ldi 	' '												; erase character there
     884/     4E9 : CB 00               		st 		(p3)
     885/     4EB : 90 DC               		jmp 	__PCExit 										; and exit.
     886/     4ED :                     
     887/     4ED :                     __PCNewLine:
     888/     4ED : C1 00               		ld 		(p1) 											; read cursor position
     889/     4EF : D4 70               		ani 	0x70 											; line
     890/     4F1 : 02                  		ccl 													; next line
     891/     4F2 : F4 10               		adi 	0x10
     892/     4F4 : C9 00               		st 		(p1) 											; write back
     893/     4F6 : 33                  		xpal 	p3 												; put in P3.L
     894/     4F7 : 90 C4               		jmp 	__PCBlankNewLine
     895/     4F9 :                     
     896/     4F9 :                     ; ****************************************************************************************************************
     897/     4F9 :                     ; ****************************************************************************************************************
     898/     4F9 :                     ;
     899/     4F9 :                     ;					Print current address followed by A data bytes. Doesn't update current address
     900/     4F9 :                     ;
     901/     4F9 :                     ; ****************************************************************************************************************
     902/     4F9 :                     ; ****************************************************************************************************************
     903/     4F9 :                     
     904/     4F9 :                     PrintAddressData:
     905/     4F9 : CE FF               		st 		@-1(p2) 										; save count, we don't restore this.
     906/     4FB : C4 04               		ldi 	(PrintHexByte-1)/256 							; save and set up P3
     907/     4FD : 37                  		xpah 	p3
     908/     4FE : CE FF               		st 		@-1(p2)
     909/     500 : C4 58               		ldi 	(PrintHexByte-1)&255
     910/     502 : 33                  		xpal 	p3
     911/     503 : CE FF               		st 		@-1(p2)
     912/     505 : C4 0C               		ldi 	current / 256 									; point P1 to current address
     913/     507 : 35                  		xpah 	p1
 AS V1.42 Beta [Bld 102] - source file monitor.asm - page 21 - 11/30/2015 17:34:15


     914/     508 : C4 21               		ldi 	current & 255
     915/     50A : 31                  		xpal 	p1
     916/     50B : C1 01               		ld 		1(p1) 											; read high byte of address
     917/     50D : 02                  		ccl
     918/     50E : 3F                  		xppc 	p3												; print w/o leading space
     919/     50F : C1 00               		ld 		0(p1)											; read low byte of address
     920/     511 : 02                  		ccl 	
     921/     512 : 3F                  		xppc 	p3 												; print w/o leading space.
     922/     513 : 01                  		xae 													; put in E
     923/     514 : C1 01               		ld 		1(p1) 											; high byte to P1.H
     924/     516 : 35                  		xpah 	p1
     925/     517 : 40                  		lde 													; low byte to P1.H
     926/     518 : 31                  		xpal 	p1
     927/     519 :                     _PADLoop:
     928/     519 : BA 02               		dld 	2(p2) 											; decrement counter
     929/     51B : 94 09               		jp 		_PADPrint 										; if +ve print another byte
     930/     51D :                     
     931/     51D : C6 01               		ld 		@1(p2) 											; restore P3, skipping A hence @2
     932/     51F : 33                  		xpal 	p3
     933/     520 : C6 02               		ld 		@2(p2)
     934/     522 : 37                  		xpah 	p3
     935/     523 : 3F                  		xppc 	p3
     936/     524 : 90 D3               		jmp 	PrintAddressData
     937/     526 :                     
     938/     526 :                     _PADPrint:
     939/     526 : C5 01               		ld 		@1(p1) 											; read byte advance pointer
     940/     528 : 03                  		scl
     941/     529 : 3F                  		xppc 	p3 												; print with space.
     942/     52A : 90 ED               		jmp 	_PADLoop
     943/     52C :                     
     944/     52C :                     ; ****************************************************************************************************************
     945/     52C :                     ;
     946/     52C :                     ;		Look at the parameter string for a parameter, processing @ and Pn as you go, CS if parameter found
     947/     52C :                     ; 		CC otherwise. Return parameter value in P1. Falls through
     948/     52C :                     ;
     949/     52C :                     ; ****************************************************************************************************************
     950/     52C :                     
     951/     52C :                     GetParameter:
     952/     52C : C4 0C               		ldi 	parPosn/256 									; current position into P1
     953/     52E : 35                  		xpah 	p1
     954/     52F : C4 23               		ldi 	parPosn&255 					
     955/     531 : 31                  		xpal 	p1
     956/     532 : C4 00               		ldi 	0 												; -1(p2) is the low byte result
     957/     534 : CA FF               		st 		-1(p2) 											; -2(p2) is the high byte result
     958/     536 : CA FE               		st 		-2(p2)
     959/     538 :                     
     960/     538 : C1 00               		ld 		(p1) 											; read the current position,P1 points to character
     961/     53A : 31                  		xpal 	p1 												; when we put it in P1.L
     962/     53B :                     
     963/     53B :                     __GPASkip:														; skip over spaces to first alphanumeric.
     964/     53B : C1 00               		ld 		(p1) 											; read character
     965/     53D : 98 7B               		jz 		__GPAExitFail 									; if zero, then end of the input string.
     966/     53F : C5 01               		ld 		@1(p1) 											; read it, advancing.
     967/     541 : E4 20               		xri 	32 												; is it space ?
     968/     543 : 98 F6               		jz 		__GPASkip 
     969/     545 : E4 60               		xri 	32!'@'											; is it @ ?
     970/     547 : 98 5E               		jz 		__GPAAtModifier 
     971/     549 : E4 10               		xri 	'@'!'P' 										; is it P ?
     972/     54B : 98 4C               		jz 		__GPAPointerModifier
     973/     54D :                     
 AS V1.42 Beta [Bld 102] - source file monitor.asm - page 22 - 11/30/2015 17:34:15


     974/     54D :                     __GPANextCharacter:
     975/     54D : C1 FF               		ld 		-1(p1) 											; get value back after post increment.
     976/     54F : 02                  		ccl
     977/     550 : F4 50               		adi 	128-48 											; this will be +ve if A < '0'
     978/     552 : 94 66               		jp 		__GPAExitFail
     979/     554 : FC 09               		cai 	9 												; will be +ve if A < '9', CY/L was clear.	
     980/     556 : 94 0A               		jp 		__GPAFoundHex
     981/     558 : FC 07               		cai 	7 												; will be +ve if A < 'A', CY/L was set
     982/     55A : 94 5E               		jp 		__GPAExitFail
     983/     55C : F4 79               		adi 	0xFF-0x85-1 									; will be +ve if A > 'F', CY/L was set.
     984/     55E : 94 5A               		jp 		__GPAExitFail 					
     985/     560 : F4 76               		adi 	(0x70-0xFA) & 0xFF 								; make the range as below, CY/L was clear
     986/     562 :                     __GPAFoundHex: 													; enter here 0-9 = $76..$7F, A-F = $70..$75
     987/     562 : 02                  		ccl  													; convert that to a hex nibble.
     988/     563 : F4 0A               		adi 	10
     989/     565 : D4 0F               		ani 	0xF
     990/     567 : 01                  		xae 													; save in E, temporarily
     991/     568 : C4 04               		ldi 	4 												; now shift the result 4 bits to the left.
     992/     56A : CA FD               		st 		-3(p2) 											; -3(p2) is the counter
     993/     56C :                     __GPAShift:
     994/     56C : 02                  		ccl
     995/     56D : C2 FF               		ld 		-1(p2) 											; shift 16 bit result 1 bit to the left.
     996/     56F : F2 FF               		add 	-1(p2)
     997/     571 : CA FF               		st 		-1(p2)
     998/     573 : C2 FE               		ld 		-2(p2)
     999/     575 : F2 FE               		add 	-2(p2)
    1000/     577 : CA FE               		st 		-2(p2)
    1001/     579 : BA FD               		dld 	-3(p2) 											; do it four times
    1002/     57B : 9C EF               		jnz 	__GPAShift 	
    1003/     57D : C2 FF               		ld 		-1(p2) 											; Or E into the LSB
    1004/     57F : 58                  		ore
    1005/     580 : CA FF               		st 		-1(p2)
    1006/     582 :                     
    1007/     582 : C5 01               		ld 		@1(p1) 											; look at next character, post incrementing.
    1008/     584 : 03                  		scl
    1009/     585 : FC 22               		cai 	34 												; if it is after space and ! (label marker)
    1010/     587 : 94 C4               		jp 		__GPANextCharacter 								; go back and put it in place.
    1011/     589 :                     
    1012/     589 : C5 FF               		ld 		@-1(p1) 										; undo the increment, incase we've just read zero.
    1013/     58B :                     
    1014/     58B : C4 23               		ldi 	parPosn & 255 									; put the parPosn address in P1.L, new posn into A
    1015/     58D : 31                  		xpal 	p1
    1016/     58E : C9 00               		st 		(p1) 											; and write it back
    1017/     590 : C2 FF               		ld 		-1(p2) 											; put the result into P1
    1018/     592 : 31                  		xpal 	p1
    1019/     593 : C2 FE               		ld 		-2(p2)
    1020/     595 : 35                  		xpah 	p1
    1021/     596 : 03                  		scl 													; set CY/L to indicate okay
    1022/     597 : 90 22               		jmp 	__GPAExit
    1023/     599 :                     
    1024/     599 :                     __GPAPointerModifier:
    1025/     599 : C1 00               		ld 		(p1) 											; read P<something> ?
    1026/     59B : D4 FC               		ani 	0xFC 											; is it '0' .. '3'?
    1027/     59D : E4 30               		xri 	'0'
    1028/     59F : 9C 19               		jnz 	__GPAExitFail 									; it didn't work, not 0..3
    1029/     5A1 : C5 01               		ld 		@1(p1) 											; re-read it and advance
    1030/     5A3 : D4 03               		ani 	3												; lower 2 bits only
    1031/     5A5 : 90 02               		jmp 	__GPAAdjustModifier
    1032/     5A7 :                     __GPAAtModifier:
    1033/     5A7 : C4 04               		ldi 	4 												; set modifier adjustment to +4
 AS V1.42 Beta [Bld 102] - source file monitor.asm - page 23 - 11/30/2015 17:34:15


    1034/     5A9 :                     __GPAAdjustModifier:
    1035/     5A9 : CA FD               		st 		-3(p2) 
    1036/     5AB : C4 24               		ldi 	modifier & 255 									; point P1 to modifier, save current address in E
    1037/     5AD : 31                  		xpal 	p1
    1038/     5AE : 01                  		xae 
    1039/     5AF : C1 00               		ld 		(p1) 											; read modifier
    1040/     5B1 : 02                  		ccl
    1041/     5B2 : F2 FD               		add 	-3(p2) 											; add the modifying value to it.
    1042/     5B4 : C9 00               		st 		(p1) 											; write modifier.
    1043/     5B6 : 40                  		lde 													; restore current address to P1.L
    1044/     5B7 : 31                  		xpal 	p1
    1045/     5B8 : 90 81               		jmp 	__GPASkip 										; go back to skip over.
    1046/     5BA :                     
    1047/     5BA :                     __GPAExitFail:
    1048/     5BA : 02                  		ccl 													; carry clear, e.g. nothing read in / error.
    1049/     5BB :                     __GPAExit:
    1050/     5BB : 3F                  		xppc 	p3
    1051/     5BC :                     
    1052/     5BC :                     ; ****************************************************************************************************************
    1053/     5BC :                     ;
    1054/     5BC :                     ;		Store parameter value in P1 in the current address, if CS. Falls through.
    1055/     5BC :                     ;
    1056/     5BC :                     ; ****************************************************************************************************************
    1057/     5BC :                     
    1058/     5BC :                     UpdateCurrentAddress:
    1059/     5BC : 06                  		csa 													; get status reg
    1060/     5BD : 94 0C               		jp 		__UCAExit 										; if carry flag clear then exit.
    1061/     5BF :                     
    1062/     5BF : C4 21               		ldi 	current & 255 									; current address to P1.L, acquired address to E
    1063/     5C1 : 31                  		xpal 	p1
    1064/     5C2 : 01                  		xae
    1065/     5C3 : C4 0C               		ldi 	current / 256 									; current address to P1.H, acquired to A
    1066/     5C5 : 35                  		xpah 	p1
    1067/     5C6 : C9 01               		st 		1(p1) 											; store address back
    1068/     5C8 : 40                  		lde
    1069/     5C9 : C9 00               		st 		0(p1)
    1070/     5CB :                     __UCAExit:
    1071/     5CB : 3F                  		xppc 	p3
    1072/     5CC :                     
    1073/     5CC :                     ; ****************************************************************************************************************
    1074/     5CC :                     ;
    1075/     5CC :                     ;		Get current address into P1.
    1076/     5CC :                     ;
    1077/     5CC :                     ; ****************************************************************************************************************
    1078/     5CC :                     
    1079/     5CC :                     GetCurrentAddress:
    1080/     5CC : C4 0C               		ldi 	current/256 									; current address ptr in P1
    1081/     5CE : 35                  		xpah 	p1
    1082/     5CF : C4 21               		ldi 	current&255
    1083/     5D1 : 31                  		xpal 	p1
    1084/     5D2 : C1 00               		ld 		0(p1) 											; low byte to E
    1085/     5D4 : 01                  		xae
    1086/     5D5 : C1 01               		ld 		1(p1) 											; high byte to A
    1087/     5D7 : 35                  		xpah 	p1 												; then to P1.H
    1088/     5D8 : 40                  		lde 													; low byte to P1.L
    1089/     5D9 : 31                  		xpal 	p1 
    1090/     5DA : 3F                  		xppc 	p3
    1091/     5DB :                     
    1092/     5DB :                     ; ****************************************************************************************************************
    1093/     5DB :                     ;
 AS V1.42 Beta [Bld 102] - source file monitor.asm - page 24 - 11/30/2015 17:34:15


    1094/     5DB :                     ;											List of commands and Jump Table
    1095/     5DB :                     ;
    1096/     5DB :                     ; ****************************************************************************************************************
    1097/     5DB :                     
    1098/     5DB :                     		include commands.inc 									; must be at the end, so the command table is in
(1)    1/     747 :                             org 0x0747
(1)    2/     747 :                     ;
(1)    3/     747 :                     ; 	This file is generated automatically by gencommands.py
(1)    4/     747 :                     ;
(1)    5/     747 :                     __CommandList:
(1)    6/     747 : 94 21                       dw    0x2194 ; HLT
(1)    7/     749 : 00                          db    0x00
(1)    8/     74A : 25 60                       dw    0x6025 ; XAE
(1)    9/     74C : 01                          db    0x01
(1)   10/     74D : 6C 0C                       dw    0x0c6c ; CCL
(1)   11/     74F : 02                          db    0x02
(1)   12/     750 : 6C 4C                       dw    0x4c6c ; SCL
(1)   13/     752 : 03                          db    0x03
(1)   14/     753 : 2E 11                       dw    0x112e ; DIN
(1)   15/     755 : 04                          db    0x04
(1)   16/     756 : AE 24                       dw    0x24ae ; IEN
(1)   17/     758 : 05                          db    0x05
(1)   18/     759 : 61 0E                       dw    0x0e61 ; CSA
(1)   19/     75B : 06                          db    0x06
(1)   20/     75C : 33 0C                       dw    0x0c33 ; CAS
(1)   21/     75E : 07                          db    0x07
(1)   22/     75F : F0 39                       dw    0x39f0 ; NOP
(1)   23/     761 : 08                          db    0x08
(1)   24/     762 : 2F 4D                       dw    0x4d2f ; SIO
(1)   25/     764 : 19                          db    0x19
(1)   26/     765 : 72 02                       dw    0x0272 ; SR
(1)   27/     767 : 1C                          db    0x1c
(1)   28/     768 : 4C 4E                       dw    0x4e4c ; SRL
(1)   29/     76A : 1D                          db    0x1d
(1)   30/     76B : 52 02                       dw    0x0252 ; RR
(1)   31/     76D : 1E                          db    0x1e
(1)   32/     76E : 4C 4A                       dw    0x4a4c ; RRL
(1)   33/     770 : 1F                          db    0x1f
(1)   34/     771 : 0D 00                       dw    0x000d ; M
(1)   35/     773 : 20                          db    0x20
(1)   36/     774 : 01 00                       dw    0x0001 ; A
(1)   37/     776 : 21                          db    0x21
(1)   38/     777 : 07 00                       dw    0x0007 ; G
(1)   39/     779 : 22                          db    0x22
(1)   40/     77A : B4 42                       dw    0x42b4 ; PUT
(1)   41/     77C : 23                          db    0x23
(1)   42/     77D : B4 1C                       dw    0x1cb4 ; GET
(1)   43/     77F : 24                          db    0x24
(1)   44/     780 : 03 00                       dw    0x0003 ; C
(1)   45/     782 : 25                          db    0x25
(1)   46/     783 : 02 00                       dw    0x0002 ; B
(1)   47/     785 : 26                          db    0x26
(1)   48/     786 : 0C 00                       dw    0x000c ; L
(1)   49/     788 : 27                          db    0x27
(1)   50/     789 : 04 00                       dw    0x0004 ; D
(1)   51/     78B : 28                          db    0x28
(1)   52/     78C : 0C 62                       dw    0x620c ; XPL
(1)   53/     78E : 30                          db    0x30
(1)   54/     78F : 08 62                       dw    0x6208 ; XPH
(1)   55/     791 : 34                          db    0x34
 AS V1.42 Beta [Bld 102] - source file monitor.asm(commands.inc) - page 25 - 11/30/2015 17:34:15


(1)   56/     792 : 03 62                       dw    0x6203 ; XPC
(1)   57/     794 : 3C                          db    0x3c
(1)   58/     795 : 85 30                       dw    0x3085 ; LDE
(1)   59/     797 : 40                          db    0x40
(1)   60/     798 : C5 05                       dw    0x05c5 ; ANE
(1)   61/     79A : 50                          db    0x50
(1)   62/     79B : 45 3E                       dw    0x3e45 ; ORE
(1)   63/     79D : 58                          db    0x58
(1)   64/     79E : 45 62                       dw    0x6245 ; XRE
(1)   65/     7A0 : 60                          db    0x60
(1)   66/     7A1 : 25 10                       dw    0x1025 ; DAE
(1)   67/     7A3 : 68                          db    0x68
(1)   68/     7A4 : 85 04                       dw    0x0485 ; ADE
(1)   69/     7A6 : 70                          db    0x70
(1)   70/     7A7 : 25 0C                       dw    0x0c25 ; CAE
(1)   71/     7A9 : 78                          db    0x78
(1)   72/     7AA : 99 11                       dw    0x1199 ; DLY
(1)   73/     7AC : 8F                          db    0x8f
(1)   74/     7AD : B0 29                       dw    0x29b0 ; JMP
(1)   75/     7AF : 90                          db    0x90
(1)   76/     7B0 : 50 01                       dw    0x0150 ; JP
(1)   77/     7B2 : 94                          db    0x94
(1)   78/     7B3 : 5A 01                       dw    0x015a ; JZ
(1)   79/     7B5 : 98                          db    0x98
(1)   80/     7B6 : DA 29                       dw    0x29da ; JNZ
(1)   81/     7B8 : 9C                          db    0x9c
(1)   82/     7B9 : 84 25                       dw    0x2584 ; ILD
(1)   83/     7BB : A8                          db    0xa8
(1)   84/     7BC : 84 11                       dw    0x1184 ; DLD
(1)   85/     7BE : B8                          db    0xb8
(1)   86/     7BF : 84 01                       dw    0x0184 ; LD
(1)   87/     7C1 : C0                          db    0xc0
(1)   88/     7C2 : 89 30                       dw    0x3089 ; LDI
(1)   89/     7C4 : C4                          db    0xc4
(1)   90/     7C5 : 74 02                       dw    0x0274 ; ST
(1)   91/     7C7 : C8                          db    0xc8
(1)   92/     7C8 : C4 05                       dw    0x05c4 ; AND
(1)   93/     7CA : D0                          db    0xd0
(1)   94/     7CB : C9 05                       dw    0x05c9 ; ANI
(1)   95/     7CD : D4                          db    0xd4
(1)   96/     7CE : F2 01                       dw    0x01f2 ; OR
(1)   97/     7D0 : D8                          db    0xd8
(1)   98/     7D1 : 49 3E                       dw    0x3e49 ; ORI
(1)   99/     7D3 : DC                          db    0xdc
(1)  100/     7D4 : F2 61                       dw    0x61f2 ; XOR
(1)  101/     7D6 : E0                          db    0xe0
(1)  102/     7D7 : 49 62                       dw    0x6249 ; XRI
(1)  103/     7D9 : E4                          db    0xe4
(1)  104/     7DA : 24 10                       dw    0x1024 ; DAD
(1)  105/     7DC : E8                          db    0xe8
(1)  106/     7DD : 29 10                       dw    0x1029 ; DAI
(1)  107/     7DF : EC                          db    0xec
(1)  108/     7E0 : 84 04                       dw    0x0484 ; ADD
(1)  109/     7E2 : F0                          db    0xf0
(1)  110/     7E3 : 89 04                       dw    0x0489 ; ADI
(1)  111/     7E5 : F4                          db    0xf4
(1)  112/     7E6 : 24 0C                       dw    0x0c24 ; CAD
(1)  113/     7E8 : F8                          db    0xf8
(1)  114/     7E9 : 29 0C                       dw    0x0c29 ; CAI
(1)  115/     7EB : FC                          db    0xfc
 AS V1.42 Beta [Bld 102] - source file monitor.asm(commands.inc) - page 26 - 11/30/2015 17:34:15


(1)  116/     7EC :                     __CommandListEnd:
(1)  117/     7EC : 00 00                       dw    0x0000 ; End Marker	
(1)  118/     7EE :                     
(1)  119/     7EE :                     __CommandTable:
(1)  120/     7EE : 40 03                       dw    MemoryDump_Command
(1)  121/     7F0 : 89 02                       dw    Address_Command
(1)  122/     7F2 : 9C 02                       dw    Go_Command
(1)  123/     7F4 : A9 02                       dw    PutTape_Command
(1)  124/     7F6 : FA 02                       dw    LoadTape_Command
(1)  125/     7F8 : 21 01                       dw    ClearScreen_Command
(1)  126/     7FA : 6A 03                       dw    EnterBytes_Command
(1)  127/     7FC : 22 03                       dw    Label_Command
(1)  128/     7FE : 8C 03                       dw    Disassemble_Command
(1)  129/     800 :                     
    1099/     800 :                     																; the same page.
    1100/     800 :                     
    1101/     800 :                     ; ****************************************************************************************************************
    1102/     800 :                     ;
    1103/     800 :                     ;													Tape Format. 
    1104/     800 :                     ;
    1105/     800 :                     ; ****************************************************************************************************************
    1106/     800 :                     ;
    1107/     800 :                     ;		1 x start bit 		'1' value is held for period of time.
    1108/     800 :                     ;		8 x data bits  		'0 or 1' value is held for a period of time.
    1109/     800 :                     ;		1 x continuation	'0' if another bit follows, '1' if end.
    1110/     800 :                     ;		at least 2 bit times between bytes.
    1111/     800 :                     ;
    1112/     800 :                     ;		Use DLY 4 with A = 0 (DLY 6 to skip half-start)
    1113/     800 :                     ; 		= 13 + 2 * 0 + 514 * 4 microcycles
    1114/     800 :                     ;		= 2,069 microcycles
    1115/     800 :                     ;	
    1116/     800 :                     ;		which is about 240 bits per second.
    1117/     800 :                     ;
    1118/     800 :                     ; ****************************************************************************************************************
    1119/     800 :                     ;
    1120/     800 :                     ;												Monitor Commands
    1121/     800 :                     ;
    1122/     800 :                     ; ****************************************************************************************************************
    1123/     800 :                     ;
    1124/     800 :                     ;		A [aaaa] 			Set current address to aaaa
    1125/     800 :                     ;		B [cc] [dd] [ee]..	Fill memory from current address
    1126/     800 :                     ; 		C 					Clear screen
    1127/     800 :                     ;		D [aaaa] 			Disassemble from aaaa
    1128/     800 :                     ;		G aaaa 				Run from address - address must be given - return with XPPC P3
    1129/     800 :                     ; 		L n 				Set label n to the current address (up to 32 labels 00-1F)
    1130/     800 :                     ; 		M [aaaa] 			Memory dump from current address/aaaa (6 lines, 4 bytes per line)
    1131/     800 :                     ; 		GET [aaaa] 			Load tape to current address/aaa
    1132/     800 :                     ;		PUT [nnnn]			Write nnnn bytes from current address onwards to tape.
    1133/     800 :                     ;
    1134/     800 :                     ;		Command Line Assembler
    1135/     800 :                     ;
    1136/     800 :                     ;		Standard SC/MP mnemonics, except for XPAH, XPAL, XPPC, HALT and DINT which are XPH XPL XPC HLT DIN
    1137/     800 :                     ;		respectively (4 character mnemonics not supported)
    1138/     800 :                     ;
    1139/     800 :                     ;		Address modes are written as such:
    1140/     800 :                     ;
    1141/     800 :                     ;		Direct:			LD 	address 					(offset auto calculated, also for jump)
    1142/     800 :                     ;		Indexed:		LD  P1 7 						(normally ld 7(p1))
    1143/     800 :                     ;		Immediate:		DLY 42 					
    1144/     800 :                     ;		AutoIndexed:	LD @P1 4 						(normally ld @4(p1))
 AS V1.42 Beta [Bld 102] - source file monitor.asm - page 27 - 11/30/2015 17:34:15


    1145/     800 :                     ;
    1146/     800 :                     ;		Labels are accessed via the pling, so to jump to label 4 rather than address 4 you write
    1147/     800 :                     ;
    1148/     800 :                     ;		JMP 4!
    1149/     800 :                     ;
    1150/     800 :                     ; ****************************************************************************************************************
    1151/     800 :                     
 AS V1.42 Beta [Bld 102] - source file monitor.asm - page 28 - 11/30/2015 17:34:15


  symbol table (* = unused):
  ------------------------

 ADDRESS_COMMAND :              289 C |  AHI [SCMPMULTIPLY] :             3 - |
 ALO [SCMPMULTIPLY] :             2 - | *ARCHITECTURE :  i386-unknown-win32 - |
 BHI [SCMPMULTIPLY] :             1 - | *BIGENDIAN :                      0 - |
 BITHI [SCMPDIVIDE] :                                      FFFFFFFFFFFFFFFF - |
 BITLO [SCMPDIVIDE] :                                      FFFFFFFFFFFFFFFE - |
 BLO [SCMPMULTIPLY] :             0 - |  BOOTMONITOR :                  103 C |
*BRANCHEXT :                      0 - | *CASESENSITIVE :                  0 - |
 CLEARSCREENLOOP :              126 C |  CLEARSCREEN_COMMAND :          121 C |
 CODESTART :                    C35 - |  COMMANDMAINLOOP :              138 C |
*CONSTPI :        3.141592653589793 - |  CURRENT :                      C21 - |
 CURSOR :                       C20 - | *DATE :                  11/30/2015 - |
 DENOMINATORHI [SCMPDIVIDE] :     1 - |  DENOMINATORLO [SCMPDIVIDE] :     0 - |
 DISASSEMBLE_COMMAND :          38C C |  ENTERBYTES_COMMAND :           36A C |
 EXTRACT5BIT :                  1A3 C | *FALSE :                          0 - |
 FINDTOPMEMORY :                10B C | *FULLPMMU :                       1 - |
*GETCURRENTADDRESS :            5CC C |  GETPARAMETER :                 52C C |
*GOBOOT :                         3 C |  GO_COMMAND :                   29C C |
*HAS64 :                          1 - | *HASDSP :                         0 - |
*HASFPU :                         0 - | *HASPMMU :                        0 - |
*INEXTMODE :                      0 - | *INLWORDMODE :                    0 - |
*INMAXMODE :                      0 - | *INSRCMODE :                      0 - |
*INSUPMODE :                      0 - |  KBDBUFFER :                    C25 - |
 KBDBUFFERLN :                   10 - |  KEYBOARDLOOP :                 14D C |
 LABELCOUNT :                    20 - |  LABELS :                       C00 - |
 LABEL_COMMAND :                322 C | *LISTON :                         1 - |
 LOADTAPE_COMMAND :             2FA C | *MACEXP :                         1 - |
 MATHS :                          A C |  MATH_ADD :                      34 C |
 MATH_DIVIDE :                   99 C |  MATH_EXIT :                     32 C |
 MATH_EXIT1 :                    97 C |  MATH_MULTIPLY :                 54 C |
 MATH_SUBTRACT :                 43 C |  MEMORYDUMP_COMMAND :           340 C |
 MODIFIER :                     C24 - | *MOMCPU :                         C - |
*MOMCPUNAME :                 SC/MP - |  N1 :                          796D - |
 N2 :                           666 - | *NESTMAX :                      100 - |
 NUMERATORHI [SCMPDIVIDE] :       3 - |  NUMERATORLO [SCMPDIVIDE] :       2 - |
*PACKING :                        0 - | *PADDING :                        1 - |
 PARPOSN :                      C23 - |  PRINTADDRESSDATA :             4F9 C |
 PRINTCHARACTER :               48C C |  PRINTHEXBYTE :                 459 C |
 PUTTAPE_COMMAND :              2A9 C |
 QUOTIENTHI [SCMPDIVIDE] :                                 FFFFFFFFFFFFFFFD - |
 QUOTIENTLO [SCMPDIVIDE] :                                 FFFFFFFFFFFFFFFC - |
*RELAXED :                        0 - |
 REMAINDERHI [SCMPDIVIDE] :                                FFFFFFFFFFFFFFFB - |
 REMAINDERLO [SCMPDIVIDE] :                                FFFFFFFFFFFFFFFA - |
 RESULTHI [SCMPMULTIPLY] :                                 FFFFFFFFFFFFFFFF - |
 RESULTLO [SCMPMULTIPLY] :                                 FFFFFFFFFFFFFFFE - |
 TAPEDELAY :                      4 - |
 TEMPLO [SCMPDIVIDE] :                                     FFFFFFFFFFFFFFF9 - |
*TIME :                    17:34:14 - | *TRUE :                           1 - |
*UPDATECURRENTADDRESS :         5BC C |  VARBASE :                      C20 - |
*VERSION :                     142F - |  _KBDWAITKEY :                  156 C |
 _KBDWAITRELEASE :              150 C |  _PADLOOP :                     519 C |
 _PADPRINT :                    526 C |  _PUTTAPEBIT :                  2D9 C |
 _PUTTAPEBYTE :                 2C4 C |  _PUTTAPELEADER :               2BE C |
 __ASMCONTINUE :                247 C |  __ASMEXIT :                    27F C |
 __ASMNOPARAMETER :             23F C |  __ASSEMBLER :                  210 C |
 __CMDMAINLOOP1 :               194 C |  __CMDMAINLOOP2 :               295 C |
 __CMDMAINLOOP3 :               2A7 C |  __CMDMAINLOOP4 :               2F6 C |
 AS V1.42 Beta [Bld 102] - source file monitor.asm - page 29 - 11/30/2015 17:34:15


 __CMDMAINLOOP5 :               320 C |  __CMDMAINLOOP6 :               368 C |
 __CMDMAINLOOP7 :               3D4 C |  __CMDPARAMETERFAIL :           28D C |
 __CMDPARAMETERFAIL1 :          2F8 C |  __COMMANDERROR :               206 C |
 __COMMANDLIST :                747 C |  __COMMANDLISTEND :             7EC C |
 __COMMANDTABLE :               7EE C |  __DASSFINDOPCODE :             3BB C |
 __DASSFOUNDOPCODE :            3D6 C |  __DASSLOOP :                   392 C |
 __DASSLOOP2 :                  3D2 C |  __DASSNEXT :                   430 C |
 __DASSNEXTOPCODE :             3CE C |  __DASSNOOPERAND :              3B1 C |
 __DASSNOTAUTOINDEXED :         44D C |  __DASSNOTIMMEDIATE :           3E2 C |
 __DASSPRINTMNEMONIC :          3F7 C |  __DASSPRINTMODIFIER :          441 C |
 __DASSPRINTOPERAND :           422 C |  __DASSSHIFTENCODE :            407 C |
 __DASSSKIPSPACE :              403 C |  __DCLOOP :                     346 C |
 __DIVIDECONTINUE [SCMPDIVIDE] : D3 C |  __DIVIDEEXIT [SCMPDIVIDE] :    101 C |
 __DIVIDELOOP [SCMPDIVIDE] :     A9 C |
 __DIVIDENOINCREMAINDER [SCMPDIVIDE] :                                   C6 C |
 __DIVIDEREMAINDERGREATER [SCMPDIVIDE] :                                 ED C |
 __EX5SHIFT :                   1AE C |  __EXTRACTEND :                 1C4 C |
 __FINDCOMMANDLOOP :            1CF C |  __GETTAPEBITS :                310 C |
 __GETTAPEWAIT :                300 C |  __GPAADJUSTMODIFIER :          5A9 C |
 __GPAATMODIFIER :              5A7 C |  __GPAEXIT :                    5BB C |
 __GPAEXITFAIL :                5BA C |  __GPAFOUNDHEX :                562 C |
 __GPANEXTCHARACTER :           54D C |  __GPAPOINTERMODIFIER :         599 C |
 __GPASHIFT :                   56C C |  __GPASKIP :                    53B C |
 __KBDBACKSPACE :               188 C |  __KBDEXIT :                    196 C |
 __KBDNOTLOWER :                17C C |  __MULTIPLYEXIT [SCMPMULTIPLY] : 8D C |
 __MULTIPLYLOOP [SCMPMULTIPLY] : 5A C |
 __MULTIPLYNOADD [SCMPMULTIPLY] : 73 C |
 __PCBACKSPACE :                4E1 C |  __PCBLANKNEWLINE :             4BD C |
 __PCBLANKNEWLINELOOP :         4C1 C |  __PCEXIT :                     4C9 C |
 __PCNEWLINE :                  4ED C |  __PHBNOSPACE :                 46B C |
 __UCAEXIT :                    5CB C |

    158 symbols
     31 unused symbols

 AS V1.42 Beta [Bld 102] - source file monitor.asm - page 30 - 11/30/2015 17:34:15


  defined macros:
  ---------------

SHIFTLEFT                             | SHIFTRIGHT                           

      2 macros

 AS V1.42 Beta [Bld 102] - source file monitor.asm - page 31 - 11/30/2015 17:34:15


  codepages:
  ----------

STANDARD (0 changed characters)


0.03 seconds assembly time

   1532 lines source file
   1567 lines incl. macro expansions
      2 passes
      0 errors
      0 warnings
