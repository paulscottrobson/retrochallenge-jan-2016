 AS V1.42 Beta [Bld 102] - source file monitor.asm - page 1 - 12/3/2015 9:31:18


       1/       0 :                     ; ******************************************************************************************************************
       2/       0 :                     ; ******************************************************************************************************************
       3/       0 :                     ; ******************************************************************************************************************
       4/       0 :                     ;
       5/       0 :                     ;												Machine Language Monitor
       6/       0 :                     ;
       7/       0 :                     ; ******************************************************************************************************************
       8/       0 :                     ; ******************************************************************************************************************
       9/       0 :                     ; ******************************************************************************************************************
      10/       0 :                     
      11/       0 :                     		cpu	sc/mp
      12/       0 :                     
      13/       0 : =0xC00              labels 		= 0xC00												; labels, 1 byte each
      14/       0 : =0x18               labelCount 	= 24 												; number of labels.
      15/       0 :                     
      16/       0 : =0xC18              varBase 	= labels+labelCount 								; variables after labels start here.
      17/       0 :                     
      18/       0 : =0xC18              cursor 		= varBase 											; cursor position ($00-$7F)
      19/       0 : =0xC19              current 	= varBase+1 										; current address (lo,hi)
      20/       0 : =0xC1B              isInit      = varBase+3 										; if already initialised, this is $A7.
      21/       0 : =0xC1C              parPosn		= varBase+4 										; current param offset in buffer (low addr)
      22/       0 : =0xC1D              modifier  	= varBase+5 										; instruction modifier (@,Pn) when assembling.
      23/       0 : =0xC1E              kbdBuffer 	= varBase+6 										; 16 character keyboard buffer
      24/       0 : =0x10               kbdBufferLn = 16 										
      25/       0 :                     
      26/       0 : =0xC2E              codeStart 	= kbdBuffer+kbdBufferLn								; code starts here after the keyboard buffer.
      27/       0 :                     
      28/       0 : =0x4                tapeDelay 	= 4 												; DLY parameter for 1 tape bit width.
      29/       0 :                     																; (smaller = faster tape I/O - see file end.)
      30/       0 :                     
      31/       0 :                     		org 	0x0000
      32/       0 : 08                  		nop 													; mandatory pre-increment NOP
      33/       1 :                     
      34/       1 :                     		include maths.asm 										; import the maths routines.
(1)    1/       1 :                     ; ******************************************************************************************************************
(1)    2/       1 :                     ; ******************************************************************************************************************
(1)    3/       1 :                     ;
(1)    4/       1 :                     ;										16 bit Arithmetic routines
(1)    5/       1 :                     ;
(1)    6/       1 :                     ; ******************************************************************************************************************
(1)    7/       1 :                     ; ******************************************************************************************************************
(1)    8/       1 :                     
(1)    9/       1 : 90 02               	jmp	 	GoBoot 												; this will be at location 1.
(1)   10/       3 : 90 07               	jmp 	Maths 												; maths routine, at location 3.
(1)   11/       5 :                     
(1)   12/       5 :                     	; any other routines you care to call.
(1)   13/       5 :                     
(1)   14/       5 :                     GoBoot:
(1)   15/       5 : C4 C5               	ldi 	(BootMonitor-1) & 255 								; jump to Boot Monitor
(1)   16/       7 : 33                  	xpal 	p3
(1)   17/       8 : C4 01               	ldi 	(BootMonitor-1) / 256
(1)   18/       A : 37                  	xpah 	p3
(1)   19/       B : 3F                  	xppc 	p3
(1)   20/       C :                     
(1)   21/       C :                     ; ******************************************************************************************************************
(1)   22/       C :                     ;											16 Bit shift left/right macros
(1)   23/       C :                     ; ******************************************************************************************************************
(1)   24/       C :                     
(1)   25/       C :                     shiftLeft macro val
(1)   26/       C :                     	ccl 													
 AS V1.42 Beta [Bld 102] - source file monitor.asm(maths.asm) - page 2 - 12/3/2015 9:31:18


(1)   27/       C :                     	ld 		val(p2)
(1)   28/       C :                     	add 	val(p2)
(1)   29/       C :                     	st 		val(p2)
(1)   30/       C :                     	ld 		val+1(p2)
(1)   31/       C :                     	add 	val+1(p2)
(1)   32/       C :                     	st 		val+1(p2)		
(1)   33/       C :                     	endm
(1)   34/       C :                     
(1)   35/       C :                     shiftRight macro val
(1)   36/       C :                     	ccl
(1)   37/       C :                     	ld 		val+1(p2)
(1)   38/       C :                     	rrl 
(1)   39/       C :                     	st 		val+1(p2)
(1)   40/       C :                     	ld 		val(p2)
(1)   41/       C :                     	rrl 
(1)   42/       C :                     	st 		val(p2)
(1)   43/       C :                     	endm
(1)   44/       C :                     
(1)   45/       C :                     ; ******************************************************************************************************************
(1)   46/       C :                     ;
(1)   47/       C :                     ;		Maths routines : the (P2) stack functions as a number stack.  So to push $1234 on the stack you do
(1)   48/       C :                     ;
(1)   49/       C :                     ;		ld 	#$12
(1)   50/       C :                     ;		st 	@-1(p2) 					1(p2) is the MSB of TOS
(1)   51/       C :                     ;		ld 	#$34
(1)   52/       C :                     ;		st 	@-1(p2) 					0(p2) is the LSB of TOS
(1)   53/       C :                     ;
(1)   54/       C :                     ;		on entry, A is the function (+,-,*,/ etc.). P2 should be left in the 'correct' state afterwards,
(1)   55/       C :                     ;		so if you add two numbers then p2 will be 2 higher than when the routine was entered.
(1)   56/       C :                     ;
(1)   57/       C :                     ;		Supported : + - * / ? (ASCII @ p1 -> integer, p1 updated) \ (unsigned divide)
(1)   58/       C :                     ;
(1)   59/       C :                     ;		Returns CS on error (division by zero, bad ASCII String) - in this case the parameters are not touched.
(1)   60/       C :                     ;
(1)   61/       C :                     ;		Note that division uses a fair chunk of the stack :)
(1)   62/       C :                     ;
(1)   63/       C :                     ; ******************************************************************************************************************
(1)   64/       C :                     
(1)   65/       C :                     Maths:															; maths support routine.
(1)   66/       C :                     
(1)   67/       C : E4 2B               	xri 	'+' 												; 16 bit addition
(1)   68/       E : 98 1A               	jz 		MATH_Add 
(1)   69/      10 : E4 06               	xri 	'+'!'-' 											; 16 bit subtraction
(1)   70/      12 : 98 26               	jz 		MATH_Subtract
(1)   71/      14 : E4 07               	xri 	'-'!'*'												; 16 bit signed/unsigned multiplication
(1)   72/      16 : 98 34               	jz 		MATH_Multiply 										
(1)   73/      18 : E4 05               	xri 	'*'!'/' 											; 16 bit signed division
(1)   74/      1A : 02                  	ccl 
(1)   75/      1B : 98 75               	jz 		MATH_Divide2
(1)   76/      1D : E4 73               	xri 	'/'!'\\' 											; 16 bit unsigned division
(1)   77/      1F : 03                  	scl
(1)   78/      20 : 98 70               	jz 		MATH_Divide2
(1)   79/      22 : E4 63               	xri 	'\\'!'?' 											; ASCII (P1) -> Integer (? operator)
(1)   80/      24 : 98 6E               	jz 		MATH_ToInteger
(1)   81/      26 :                     
(1)   82/      26 :                     MATH_Error:
(1)   83/      26 : 03                  	scl 														; error, unknown command.
(1)   84/      27 :                     
(1)   85/      27 :                     MATH_Exit:
(1)   86/      27 : 3F                  	xppc 	p3 													; return
 AS V1.42 Beta [Bld 102] - source file monitor.asm(maths.asm) - page 3 - 12/3/2015 9:31:18


(1)   87/      28 : 90 E2               	jmp  	Maths 												; re-entrant
(1)   88/      2A :                     
(1)   89/      2A :                     ; ******************************************************************************************************************
(1)   90/      2A :                     ;													+ :	16 Bit Add
(1)   91/      2A :                     ; ******************************************************************************************************************
(1)   92/      2A :                     
(1)   93/      2A :                     MATH_Add:
(1)   94/      2A : 02                  	ccl 										
(1)   95/      2B : C6 01               	ld 		@1(p2) 												; read LSB of TOS and unstack
(1)   96/      2D : F2 01               	add 	1(p2)
(1)   97/      2F : CA 01               	st 		1(p2)
(1)   98/      31 : C6 01               	ld 		@1(p2) 												; read MSB of TOS and unstack
(1)   99/      33 : F2 01               	add 	1(p2)
(1)  100/      35 : CA 01               	st 		1(p2)
(1)  101/      37 : 02                  	ccl
(1)  102/      38 : 90 ED               	jmp 	MATH_Exit
(1)  103/      3A :                     
(1)  104/      3A :                     ; ******************************************************************************************************************
(1)  105/      3A :                     ;												 - : 16 Bit Subtract
(1)  106/      3A :                     ; ******************************************************************************************************************
(1)  107/      3A :                     
(1)  108/      3A :                     MATH_Subtract:
(1)  109/      3A : 03                  	scl 										
(1)  110/      3B : C2 02               	ld 		2(p2) 												; read LSB of TOS 
(1)  111/      3D : FA 00               	cad 	0(p2)
(1)  112/      3F : CA 02               	st 		2(p2)
(1)  113/      41 : C2 03               	ld 		3(p2) 												; read MSB of TOS
(1)  114/      43 : FA 01               	cad 	1(p2)
(1)  115/      45 : CA 03               	st 		3(p2)
(1)  116/      47 : C6 02               	ld 		@2(p2)
(1)  117/      49 : 02                  	ccl
(1)  118/      4A : 90 DB               	jmp 	MATH_Exit
(1)  119/      4C :                     
(1)  120/      4C :                     ; ******************************************************************************************************************
(1)  121/      4C :                     ;									'*' : 16 bit signed or unsigned multiply
(1)  122/      4C :                     ; ******************************************************************************************************************
(1)  123/      4C :                     
(1)  124/      4C :                     MATH_Multiply:
(1)  125/      4C :                     
(1)  126/      4C :                     	section SCMPMultiply
(1)  127/      4C :                     
(1)  128/      4C : =0x3                aHi = 3 														; allocated values for A,B and Result.
(1)  129/      4C : =0x2                aLo = 2 														; (see arithmetic.py)
(1)  130/      4C : =0x1                bHi = 1
(1)  131/      4C : =0x0                bLo = 0
(1)  132/      4C : =0xFFFFFFFFF..      resultHi = -1
(1)  133/      4C : =0xFFFFFFFFF..      resultLo = -2
(1)  134/      4C :                     
(1)  135/      4C : C4 00               	ldi 	0 													; clear result
(1)  136/      4E : CA FF               	st 		resultHi(p2)
(1)  137/      50 : CA FE               	st 		resultLo(p2)
(1)  138/      52 :                     __MultiplyLoop:
(1)  139/      52 : C2 01               	ld 		bHi(p2) 											; if b is zero then exit
(1)  140/      54 : DA 00               	or 		bLo(p2)
(1)  141/      56 : 98 2D               	jz 		__MultiplyExit
(1)  142/      58 : C2 00               	ld 		bLo(p2) 											; if b bit 0 is set.
(1)  143/      5A : D4 01               	ani 	1
(1)  144/      5C : 98 0D               	jz 		__MultiplyNoAdd
(1)  145/      5E : 02                  	ccl 														; add a to the result
(1)  146/      5F : C2 FE               	ld 		resultLo(p2)
 AS V1.42 Beta [Bld 102] - source file monitor.asm(maths.asm) - page 4 - 12/3/2015 9:31:18


(1)  147/      61 : F2 02               	add 	aLo(p2)
(1)  148/      63 : CA FE               	st 		resultLo(p2)
(1)  149/      65 : C2 FF               	ld 		resultHi(p2)
(1)  150/      67 : F2 03               	add 	aHi(p2)
(1)  151/      69 : CA FF               	st 		resultHi(p2)
(1)  152/      6B :                     __MultiplyNoAdd:
(1)  153/      6B : (MACRO)             	shiftleft aLo 												; shift A left once.
(1)  153/      6B : 02                          ccl                                                                                                     
(1)  153/      6C : C2 02                       ld              ALO(p2)
(1)  153/      6E : F2 02                       add     ALO(p2)
(1)  153/      70 : CA 02                       st              ALO(p2)
(1)  153/      72 : C2 03                       ld              ALO+1(p2)
(1)  153/      74 : F2 03                       add     ALO+1(p2)
(1)  153/      76 : CA 03                       st              ALO+1(p2)               
(1)  154/      78 : (MACRO)             	shiftright bLo 												; shift b right one.
(1)  154/      78 : 02                          ccl
(1)  154/      79 : C2 01                       ld              BLO+1(p2)
(1)  154/      7B : 1F                          rrl 
(1)  154/      7C : CA 01                       st              BLO+1(p2)
(1)  154/      7E : C2 00                       ld              BLO(p2)
(1)  154/      80 : 1F                          rrl 
(1)  154/      81 : CA 00                       st              BLO(p2)
(1)  155/      83 : 90 CD               	jmp 	__MultiplyLoop
(1)  156/      85 :                     
(1)  157/      85 :                     __MultiplyExit:
(1)  158/      85 : C2 FE               	ld 		resultLo(p2) 										; copy result lo to what will be new TOS
(1)  159/      87 : CA 02               	st 		2(p2)
(1)  160/      89 : C2 FF               	ld 		resultHi(p2)
(1)  161/      8B : CA 03               	st 		3(p2)
(1)  162/      8D : C6 02               	ld 		@2(p2) 												; fix up the number stack.
(1)  163/      8F :                     	endsection SCMPMultiply
(1)  164/      8F :                     
(1)  165/      8F : 02                  	ccl
(1)  166/      90 :                     MATH_Exit1:
(1)  167/      90 : 90 95               	jmp 	MATH_Exit
(1)  168/      92 :                     
(1)  169/      92 :                     ; ******************************************************************************************************************
(1)  170/      92 :                     ;								? Convert string at P1 to 16 bit integer base 10
(1)  171/      92 :                     ; ******************************************************************************************************************
(1)  172/      92 :                     
(1)  173/      92 :                     MATH_Divide2:
(1)  174/      92 : 90 66               	jmp 	MATH_Divide
(1)  175/      94 :                     
(1)  176/      94 :                     MATH_ToInteger:
(1)  177/      94 :                     
(1)  178/      94 :                     	section SCMPToInteger
(1)  179/      94 :                     
(1)  180/      94 : =0xFFFFFFFFF..      digitCount = -1													; digits converted.
(1)  181/      94 : =0xFFFFFFFFF..      resultHi = -2  													; result is pushed at the end
(1)  182/      94 : =0xFFFFFFFFF..      resultLo = -3 
(1)  183/      94 : =0xFFFFFFFFF..      shiftCount = -4 												; counter used when multiplying by 10.
(1)  184/      94 : =0xFFFFFFFFF..      tempHi = -5 													; temporary result for x 10.
(1)  185/      94 : =0xFFFFFFFFF..      tempLo = -6
(1)  186/      94 :                     
(1)  187/      94 : C4 00               	ldi 	0 													; clear digitcount and result to zero
(1)  188/      96 : CA FF               	st 		digitCount(p2)
(1)  189/      98 : CA FE               	st 		resultHi(p2)
(1)  190/      9A : CA FD               	st 		resultLo(p2)
(1)  191/      9C :                     ToInt_Loop:
(1)  192/      9C : C1 00               	ld 		0(p1) 												; read next digit
 AS V1.42 Beta [Bld 102] - source file monitor.asm(maths.asm) - page 5 - 12/3/2015 9:31:18


(1)  193/      9E : 03                  	scl 	
(1)  194/      9F : FC 3A               	cai 	'9'+1
(1)  195/      A1 : 94 44               	jp 		ToInt_End 											; if > 9 then fail.
(1)  196/      A3 : F4 8A               	adi 	128+10 												; if < 0 then fail
(1)  197/      A5 : 94 40               	jp 		ToInt_End
(1)  198/      A7 : AA FF               	ild 	digitCount(p2) 										; increment count of digits converted.
(1)  199/      A9 : C4 02               	ldi 	2 													; set shift counter to 2
(1)  200/      AB : CA FC               	st 		shiftCount(p2)
(1)  201/      AD : C2 FE               	ld 		resultHi(p2) 										; copy result current to temp
(1)  202/      AF : CA FB               	st 		tempHi(p2)
(1)  203/      B1 : C2 FD               	ld 		resultLo(p2)
(1)  204/      B3 : CA FA               	st 		tempLo(p2)
(1)  205/      B5 :                     ToInt_Shift:
(1)  206/      B5 : (MACRO)             	shiftleft resultLo 											; shift result left
(1)  206/      B5 : 02                          ccl                                                                                                     
(1)  206/      B6 : C2 FD                       ld              RESULTLO(p2)
(1)  206/      B8 : F2 FD                       add     RESULTLO(p2)
(1)  206/      BA : CA FD                       st              RESULTLO(p2)
(1)  206/      BC : C2 FE                       ld              RESULTLO+1(p2)
(1)  206/      BE : F2 FE                       add     RESULTLO+1(p2)
(1)  206/      C0 : CA FE                       st              RESULTLO+1(p2)               
(1)  207/      C2 : BA FC               	dld 	shiftCount(p2) 										; after 2nd time round (x 4) will be zero
(1)  208/      C4 : 9C 0D               	jnz 	ToInt_NoAdd
(1)  209/      C6 : 02                  	ccl 														; add original value when x 4 - e.g. x 5
(1)  210/      C7 : C2 FD               	ld 		resultLo(p2)
(1)  211/      C9 : F2 FA               	add 	tempLo(p2)
(1)  212/      CB : CA FD               	st 		resultLo(p2)
(1)  213/      CD : C2 FE               	ld 		resultHi(p2)
(1)  214/      CF : F2 FB               	add 	tempHi(p2)
(1)  215/      D1 : CA FE               	st 		resultHi(p2)
(1)  216/      D3 :                     ToInt_NoAdd:
(1)  217/      D3 : C2 FC               	ld 		shiftCount(p2) 										; go round until -ve, e.g. 3 in total.
(1)  218/      D5 : 94 DE               	jp 		ToInt_Shift
(1)  219/      D7 :                     
(1)  220/      D7 : C5 01               	ld 		@1(p1) 												; read the digit already tested.
(1)  221/      D9 : D4 0F               	ani 	0x0F 												; to a number
(1)  222/      DB : 02                  	ccl 
(1)  223/      DC : F2 FD               	add 	resultLo(p2) 										; add to result
(1)  224/      DE : CA FD               	st 		resultLo(p2)
(1)  225/      E0 : 06                  	csa 														; if carry clear
(1)  226/      E1 : 94 B9               	jp 		ToInt_Loop 											; go round again.
(1)  227/      E3 : AA FE               	ild 	resultHi(p2) 										; adds the carry to high
(1)  228/      E5 : 90 B5               	jmp 	ToInt_Loop
(1)  229/      E7 :                     
(1)  230/      E7 :                     ToInt_End:
(1)  231/      E7 : C2 FF               	ld 		digitCount(p2) 										; if digit count = 0, e.g. nothing converted
(1)  232/      E9 : 03                  	scl
(1)  233/      EA : 98 A4               	jz 		MATH_Exit1 											; exit with carry set
(1)  234/      EC :                     
(1)  235/      EC : C2 FE               	ld 		resultHi(p2) 										; save result on stack
(1)  236/      EE : CA FF               	st 		-1(p2)
(1)  237/      F0 : C2 FD               	ld 		resultLo(p2)
(1)  238/      F2 : CE FE               	st 		@-2(p2)
(1)  239/      F4 : 02                  	ccl 														; clear carry as okay, and exit.
(1)  240/      F5 :                     	endsection SCMPToInteger
(1)  241/      F5 :                     
(1)  242/      F5 :                     MATH_Exit3:
(1)  243/      F5 : 90 99               	jmp 	MATH_Exit1
(1)  244/      F7 :                     
(1)  245/      F7 :                     ; ******************************************************************************************************************
 AS V1.42 Beta [Bld 102] - source file monitor.asm(maths.asm) - page 6 - 12/3/2015 9:31:18


(1)  246/      F7 :                     ;							'/' : 16 bit signed/unsigned divide (CY/L = 0 = signed)
(1)  247/      F7 :                     ; ******************************************************************************************************************
(1)  248/      F7 :                     
(1)  249/      F7 :                     MATH_DivideByZero:												; come here for divide by zero.
(1)  250/      F7 : 03                  	scl
(1)  251/      F8 : 90 FB               	jmp 	MATH_Exit3
(1)  252/      FA :                     
(1)  253/      FA :                     MATH_Divide:
(1)  254/      FA :                     
(1)  255/      FA :                     	section 	SCMPDivide
(1)  256/      FA :                     
(1)  257/      FA : =0x1                denominatorHi = 1 												; input values to division
(1)  258/      FA : =0x0                denominatorLo = 0 												; (see arithmetic.py)
(1)  259/      FA : =0x3                numeratorHi = 3
(1)  260/      FA : =0x2                numeratorLo = 2
(1)  261/      FA : =0xFFFFFFFFF..      bitHi = -1 														; bit shifted for division test.
(1)  262/      FA : =0xFFFFFFFFF..      bitLo = -2
(1)  263/      FA : =0xFFFFFFFFF..      quotientHi = -3 												; quotient
(1)  264/      FA : =0xFFFFFFFFF..      quotientLo = -4
(1)  265/      FA : =0xFFFFFFFFF..      remainderHi = -5 												; remainder
(1)  266/      FA : =0xFFFFFFFFF..      remainderLo = -6
(1)  267/      FA : =0xFFFFFFFFF..      signCount = -7 													; sign of result (bit 0)
(1)  268/      FA : =0xFFFFFFFFF..      eTemp = -8 														; temporary value of sign.
(1)  269/      FA : =0xFFFFFFFFF..      tempHi = -9 													; high byte temporary
(1)  270/      FA :                     
(1)  271/      FA : C2 00               	ld 		denominatorLo(p2) 									; check denominator 
(1)  272/      FC : DA 01               	or 		denominatorHi(p2) 
(1)  273/      FE : 98 F7               	jz 		MATH_DivideByZero 									; fail if dividing by zero.
(1)  274/     100 :                     
(1)  275/     100 : C4 00               	ldi 	0 													; clear quotient and remainder
(1)  276/     102 : CA FD               	st 		quotientHi(p2)
(1)  277/     104 : CA FC               	st 		quotientLo(p2)
(1)  278/     106 : CA FB               	st 		remainderHi(p2)
(1)  279/     108 : CA FA               	st 		remainderLo(p2)
(1)  280/     10A : CA F9               	st 		signCount(p2)
(1)  281/     10C : CA FE               	st 		bitLo(p2) 											; set bit to 0x8000
(1)  282/     10E : C4 80               	ldi 	0x80 
(1)  283/     110 : CA FF               	st 		bitHi(p2)
(1)  284/     112 :                     
(1)  285/     112 : 40                  	lde 														; save E
(1)  286/     113 : CA F8               	st 		eTemp(p2)
(1)  287/     115 :                     
(1)  288/     115 : 06                  	csa 														; look at carry bit
(1)  289/     116 : D4 80               	ani 	0x80 												; if set, unsigned division.
(1)  290/     118 : 9C 24               	jnz 	__DivideLoop 										; so skip over the sign removal code.
(1)  291/     11A :                     
(1)  292/     11A : C4 03               	ldi 	3
(1)  293/     11C :                     __DivideUnsignLoop:
(1)  294/     11C : 01                  	xae 														; store in E
(1)  295/     11D : C2 80               	ld 		-0x80(p2) 											; read high byte
(1)  296/     11F : 94 13               	jp 		__DivideNotSigned 									; if +ve then skip
(1)  297/     121 : AA F9               	ild 	signCount(p2) 										; bump sign count
(1)  298/     123 : C6 FF               	ld 		@-1(p2) 											; dec P2 to access the LSB
(1)  299/     125 : C4 00               	ldi 	0
(1)  300/     127 : 03                  	scl 
(1)  301/     128 : FA 80               	cad 	-0x80(p2)
(1)  302/     12A : CA 80               	st 		-0x80(p2)
(1)  303/     12C : C6 01               	ld 		@1(p2) 												; inc P2 to access the MSB
(1)  304/     12E : C4 00               	ldi 	0
(1)  305/     130 : FA 80               	cad 	-0x80(p2)
 AS V1.42 Beta [Bld 102] - source file monitor.asm(maths.asm) - page 7 - 12/3/2015 9:31:18


(1)  306/     132 : CA 80               	st 		-0x80(p2)
(1)  307/     134 :                     __DivideNotSigned:
(1)  308/     134 : 01                  	xae 														; retrieve E
(1)  309/     135 : 03                  	scl 														; subtract 2
(1)  310/     136 : FC 02               	cai 	2
(1)  311/     138 : 94 E2               	jp 		__DivideUnsignLoop 									; not finished yet.
(1)  312/     13A : 90 02               	jmp 	__DivideLoop
(1)  313/     13C :                     
(1)  314/     13C :                     __MATH_Exit2
(1)  315/     13C : 90 B7               	jmp 	MATH_Exit3
(1)  316/     13E :                     
(1)  317/     13E :                     __DivideLoop:
(1)  318/     13E : C2 FE               	ld 		bitLo(p2) 											; keep going until all bits done.
(1)  319/     140 : DA FF               	or 		bitHi(p2)
(1)  320/     142 : 98 42               	jz 		__DivideExit
(1)  321/     144 :                     
(1)  322/     144 : (MACRO)             	shiftleft remainderLo 										; shift remainder left.
(1)  322/     144 : 02                          ccl                                                                                                     
(1)  322/     145 : C2 FA                       ld              REMAINDERLO(p2)
(1)  322/     147 : F2 FA                       add     REMAINDERLO(p2)
(1)  322/     149 : CA FA                       st              REMAINDERLO(p2)
(1)  322/     14B : C2 FB                       ld              REMAINDERLO+1(p2)
(1)  322/     14D : F2 FB                       add     REMAINDERLO+1(p2)
(1)  322/     14F : CA FB                       st              REMAINDERLO+1(p2)               
(1)  323/     151 :                     
(1)  324/     151 : C2 03               	ld 		numeratorHi(p2)										; if numerator MSB is set
(1)  325/     153 : 94 06               	jp 		__DivideNoIncRemainder
(1)  326/     155 :                     
(1)  327/     155 : AA FA               	ild 	remainderLo(p2) 									; then increment remainder
(1)  328/     157 : 9C 02               	jnz 	__DivideNoIncRemainder
(1)  329/     159 : AA FB               	ild 	remainderHi(p2)
(1)  330/     15B :                     __DivideNoIncRemainder:
(1)  331/     15B :                     
(1)  332/     15B : 03                  	scl 														; calculate remainder-denominator (temp)
(1)  333/     15C : C2 FA               	ld 		remainderLo(p2)
(1)  334/     15E : FA 00               	cad 	denominatorLo(p2)
(1)  335/     160 : 01                  	xae 														; save in E.
(1)  336/     161 : C2 FB               	ld 		remainderHi(p2)
(1)  337/     163 : FA 01               	cad 	denominatorHi(p2) 									; temp.high is now in A
(1)  338/     165 : CA F7               	st 		tempHi(p2) 											; temp.high now saved
(1)  339/     167 : 06                  	csa 														; check carry flag
(1)  340/     168 : D4 80               	ani 	0x80 	
(1)  341/     16A : 9C 45               	jnz 	__DivideRemainderGreater 							; if set then remainder >= denominator
(1)  342/     16C :                     
(1)  343/     16C :                     __DivideContinue:
(1)  344/     16C : (MACRO)             	shiftright 	bitLo 											; shift bit right
(1)  344/     16C : 02                          ccl
(1)  344/     16D : C2 FF                       ld              BITLO+1(p2)
(1)  344/     16F : 1F                          rrl 
(1)  344/     170 : CA FF                       st              BITLO+1(p2)
(1)  344/     172 : C2 FE                       ld              BITLO(p2)
(1)  344/     174 : 1F                          rrl 
(1)  344/     175 : CA FE                       st              BITLO(p2)
(1)  345/     177 : (MACRO)             	shiftleft   numeratorLo 									; shift numerator left
(1)  345/     177 : 02                          ccl                                                                                                     
(1)  345/     178 : C2 02                       ld              NUMERATORLO(p2)
(1)  345/     17A : F2 02                       add     NUMERATORLO(p2)
(1)  345/     17C : CA 02                       st              NUMERATORLO(p2)
(1)  345/     17E : C2 03                       ld              NUMERATORLO+1(p2)
(1)  345/     180 : F2 03                       add     NUMERATORLO+1(p2)
 AS V1.42 Beta [Bld 102] - source file monitor.asm(maths.asm) - page 8 - 12/3/2015 9:31:18


(1)  345/     182 : CA 03                       st              NUMERATORLO+1(p2)               
(1)  346/     184 : 90 B8               	jmp 		__DivideLoop
(1)  347/     186 :                     
(1)  348/     186 :                     __DivideExit:
(1)  349/     186 : C2 F9               	ld 		signCount(p2) 										; is the result signed
(1)  350/     188 : D4 01               	ani 	0x01
(1)  351/     18A : 98 0D               	jz 		__DivideComplete
(1)  352/     18C : 03                  	scl 														; if so, reapply the sign.
(1)  353/     18D : C4 00               	ldi 	0
(1)  354/     18F : FA FC               	cad 	quotientLo(p2)
(1)  355/     191 : CA FC               	st 		quotientLo(p2)
(1)  356/     193 : C4 00               	ldi 	0
(1)  357/     195 : FA FD               	cad 	quotientHi(p2)
(1)  358/     197 : CA FD               	st 		quotientHi(p2)
(1)  359/     199 :                     
(1)  360/     199 :                     __DivideComplete:
(1)  361/     199 : C2 FD               	ld 		quotientHi(p2) 										; copy quotient to what will be TOS
(1)  362/     19B : CA 03               	st 		3(p2)
(1)  363/     19D : C2 FC               	ld 		quotientLo(p2)
(1)  364/     19F : CA 02               	st 		2(p2)
(1)  365/     1A1 : C2 FB               	ld 		remainderHi(p2) 									; put remainder immediately after it if we want it
(1)  366/     1A3 : CA 01               	st 		1(p2)
(1)  367/     1A5 : C2 FA               	ld 		remainderLo(p2) 
(1)  368/     1A7 : CA 00               	st 		0(p2)
(1)  369/     1A9 :                     
(1)  370/     1A9 : C2 F8               	ld 		eTemp(p2) 											; restore E
(1)  371/     1AB : 01                  	xae 
(1)  372/     1AC : C6 02               	ld 		@2(p2) 												; fix stack back up leaving quotient and hidden remainder
(1)  373/     1AE : 02                  	ccl 														; return no error.
(1)  374/     1AF : 90 8B               	jmp 	__MATH_Exit2
(1)  375/     1B1 :                     
(1)  376/     1B1 :                     __DivideRemainderGreater: 										; this is the "if temp >= 0 bit"
(1)  377/     1B1 : C2 F7               	ld 		tempHi(p2) 											; get the difference back.
(1)  378/     1B3 : CA FB               	st 		remainderHi(p2) 									; save temp.high value into remainder.high
(1)  379/     1B5 : 40                  	lde 														; copy temp.low to remainder.low
(1)  380/     1B6 : CA FA               	st 		remainderLo(p2) 
(1)  381/     1B8 :                     
(1)  382/     1B8 : C2 FC               	ld 		quotientLo(p2) 										; or bit into quotient
(1)  383/     1BA : DA FE               	or 		bitLo(p2)
(1)  384/     1BC : CA FC               	st 		quotientLo(p2)
(1)  385/     1BE : C2 FD               	ld 		quotientHi(p2)
(1)  386/     1C0 : DA FF               	or 		bitHi(p2)
(1)  387/     1C2 : CA FD               	st 		quotientHi(p2)
(1)  388/     1C4 : 90 A6               	jmp 	__DivideContinue
(1)  389/     1C6 :                     
(1)  390/     1C6 :                     
(1)  391/     1C6 :                     	endsection	SCMPDivide
(1)  392/     1C6 :                     
      35/     1C6 :                     
      36/     1C6 :                     ; ******************************************************************************************************************
      37/     1C6 :                     ;
      38/     1C6 :                     ;				Boot Up. First we check for a ROM @ $9000 and if it is 0x68 we boot there instead
      39/     1C6 :                     ;
      40/     1C6 :                     ; ******************************************************************************************************************
      41/     1C6 :                     
      42/     1C6 :                     BootMonitor:
      43/     1C6 : C4 90               		ldi 	0x90 											; point P1 to $9000 which is the first ROM.
      44/     1C8 : 35                  		xpah 	p1
      45/     1C9 : C1 00               		ld 		0(p1) 											; if that byte is $68, go straight there.
      46/     1CB : E4 68               		xri 	0x68
 AS V1.42 Beta [Bld 102] - source file monitor.asm - page 9 - 12/3/2015 9:31:18


      47/     1CD : 9C 01               		jnz 	__BootMonitor
      48/     1CF : 3D                  		xppc 	p1 												; e.g. JMP $9001
      49/     1D0 :                     __BootMonitor:
      50/     1D0 :                     
      51/     1D0 :                     ; ******************************************************************************************************************
      52/     1D0 :                     ;
      53/     1D0 :                     ;									Find Top of Memory to initialise the stack.
      54/     1D0 :                     ;
      55/     1D0 :                     ;			(slightly tweaked to work round 4+12 emulator limitations - will work on real chip)
      56/     1D0 :                     ; ******************************************************************************************************************
      57/     1D0 :                     
      58/     1D0 : C4 0F               		ldi 	0x0F 											; point P2 to theoretical top of RAM on basic m/c
      59/     1D2 : 36                  		xpah 	p2 												; e.g. 0xFFF
      60/     1D3 : C4 FF               		ldi 	0xFF 											; ideally you'd make this 0x003F and remove the ld
      61/     1D5 : 32                  		xpal 	p2 												; but the emulators don't do 4+12 math. Only matters here.
      62/     1D6 : C6 40               		ld 		@64(p2) 										; fix the predecrement (wrap around not emulated)
      63/     1D8 :                     FindTopMemory:
      64/     1D8 : C4 A5               		ldi 	0xA5 											; try to write this to memory
      65/     1DA : CE C0               		st 		@-64(p2) 										; predecrementing by 64.
      66/     1DC : E2 00               		xor 	(p2) 											; did it write correctly.
      67/     1DE : 9C F8               		jnz 	FindTopMemory 									; now P2 points to top of memory.
      68/     1E0 :                     
      69/     1E0 :                     ; ******************************************************************************************************************
      70/     1E0 :                     ;
      71/     1E0 :                     ;												Clear the screen
      72/     1E0 :                     ;
      73/     1E0 :                     ; ******************************************************************************************************************
      74/     1E0 :                     
      75/     1E0 :                     ClearScreen_Command:
      76/     1E0 : C4 00               		ldi 	0 												; set P1 to zero to access VRAM via write.
      77/     1E2 : 35                  		xpah 	p1
      78/     1E3 : C4 00               		ldi 	0
      79/     1E5 :                     ClearScreenLoop:
      80/     1E5 : 31                  		xpal 	p1												; clear screen
      81/     1E6 : C4 20               		ldi 	' '
      82/     1E8 : CD 01               		st 		@1(p1)
      83/     1EA : 31                  		xpal 	p1
      84/     1EB : 94 F8               		jp 		ClearScreenLoop
      85/     1ED : C4 0C               		ldi 	Cursor/256 										; reset the cursor position to TOS
      86/     1EF : 35                  		xpah 	p1
      87/     1F0 : C4 18               		ldi 	Cursor&255
      88/     1F2 : 31                  		xpal 	p1 
      89/     1F3 : C4 00               		ldi 	0 												; Note: could save 2 bytes here, P1.H is 0.
      90/     1F5 : C9 00               		st 		0(p1)											
      91/     1F7 :                     
      92/     1F7 :                     ; ****************************************************************************************************************
      93/     1F7 :                     ;
      94/     1F7 :                     ;												Check if initialised.
      95/     1F7 :                     ;
      96/     1F7 :                     ; ****************************************************************************************************************
      97/     1F7 :                     
      98/     1F7 : C1 03               		ld 		isInit-Cursor(p1) 								; have we initialised ?
      99/     1F9 : E4 A7               		xri 	0xA7 											; if so this byte should be $A7
     100/     1FB : 98 4B               		jz 		CommandMainLoop
     101/     1FD : C4 A7               		ldi 	0xA7 											; set the initialised byte
     102/     1FF : C9 03               		st 		isInit-Cursor(p1)
     103/     201 :                     
     104/     201 : C4 0C               		ldi 	codeStart/256 									; set the initial work address
     105/     203 : C9 02               		st 		Current-Cursor+1(p1)
     106/     205 : C4 2E               		ldi 	codeStart&255
 AS V1.42 Beta [Bld 102] - source file monitor.asm - page 10 - 12/3/2015 9:31:18


     107/     207 : C9 01               		st 		Current-Cursor(p1)
     108/     209 :                     																; print boot message - can lose this if required.
     109/     209 : C4 05               		ldi 	(PrintCharacter-1)/256 							; set P3 = print character.
     110/     20B : 37                  		xpah 	p3 
     111/     20C : C4 9B               		ldi 	(PrintCharacter-1)&255
     112/     20E : 33                  		xpal 	p3
     113/     20F : C4 02               		ldi 	Message / 256 									; set P1 = boot message
     114/     211 : 35                  		xpah 	p1
     115/     212 : C4 1C               		ldi 	Message & 255
     116/     214 : 31                  		xpal 	p1
     117/     215 :                     MessageLoop:
     118/     215 : C5 01               		ld 		@1(p1) 											; read character
     119/     217 : 98 22               		jz 		InitialBeep 									; end of message
     120/     219 : 3F                  		xppc 	p3 												; print it
     121/     21A : 90 F9               		jmp 	MessageLoop
     122/     21C :                     
     123/     21C :                     Message:
     124/     21C : 2A 2A 20 53 43 2F   		db 		"** SC/MP OS **",13
                    4D 50 20 4F 53 20 
                    2A 2A 0D 
     125/     22B : 56 30 2E 39 31 20   		db 		"V0.91 PSR 2016",13
                    50 53 52 20 32 30 
                    31 36 0D 
     126/     23A : 00                  		db 		0
     127/     23B :                     
     128/     23B :                     InitialBeep:
     129/     23B : C4 01               		ldi 	1 												; Beep on booting.
     130/     23D : 07                  		cas
     131/     23E : 8F FF               		dly 	0xFF
     132/     240 : C4 03               		ldi 	3
     133/     242 : 07                  		cas
     134/     243 : 8F FF               		dly 	0xFF
     135/     245 : C4 00               		ldi 	0
     136/     247 : 07                  		cas
     137/     248 :                     
     138/     248 :                     ; ****************************************************************************************************************
     139/     248 :                     ;
     140/     248 :                     ;													Main Loop
     141/     248 :                     ;
     142/     248 :                     ; ****************************************************************************************************************
     143/     248 :                     
     144/     248 :                     CommandMainLoop:
     145/     248 : C4 06               		ldi 	(PrintAddressData-1)/256						; print Address only
     146/     24A : 37                  		xpah 	p3
     147/     24B : C4 08               		ldi 	(PrintAddressData-1)&255
     148/     24D : 33                  		xpal 	p3
     149/     24E : C4 00               		ldi 	0 												; no data elements
     150/     250 : 3F                  		xppc 	p3
     151/     251 :                     
     152/     251 : C4 05               		ldi 	(PrintCharacter-1)/256 							; set P3 = print character.
     153/     253 : 37                  		xpah 	p3
     154/     254 : C4 9B               		ldi 	(PrintCharacter-1)&255
     155/     256 : 33                  		xpal 	p3
     156/     257 : C4 5D               		ldi 	']'												; print the prompt.
     157/     259 : 3F                  		xppc 	p3
     158/     25A :                     
     159/     25A :                     ; ****************************************************************************************************************
     160/     25A :                     ;
     161/     25A :                     ;											Keyboard Line Input
     162/     25A :                     ;
 AS V1.42 Beta [Bld 102] - source file monitor.asm - page 11 - 12/3/2015 9:31:18


     163/     25A :                     ; ****************************************************************************************************************
     164/     25A :                     
     165/     25A : C4 00               		ldi 	0 												; set E = character position.
     166/     25C : 01                  		xae 
     167/     25D :                     KeyboardLoop:
     168/     25D : C4 08               		ldi 	0x8 											; set P1 to point to keyboard latch
     169/     25F : 35                  		xpah 	p1
     170/     260 :                     _KBDWaitRelease:
     171/     260 : C1 00               		ld 		0(p1) 											; wait for strobe to clear
     172/     262 : 94 02               		jp 		_KBDWaitKey
     173/     264 : 90 FA               		jmp 	_KBDWaitRelease
     174/     266 :                     _KBDWaitKey:
     175/     266 : C1 00               		ld 		0(p1) 											; wait for strobe, i.e. new key
     176/     268 : 94 FC               		jp 		_KBDWaitKey
     177/     26A : D4 7F               		ani 	0x7F 											; throw away bit 7
     178/     26C : CA FF               		st 		-1(p2) 											; save key.
     179/     26E :                     
     180/     26E : C4 0C               		ldi 	kbdBuffer/256 									; set P1 = keyboard buffer
     181/     270 : 35                  		xpah 	p1
     182/     271 : C4 1E               		ldi 	kbdBuffer&255
     183/     273 : 31                  		xpal 	p1		
     184/     274 :                     
     185/     274 : C2 FF               		ld 		-1(p2) 											; read key
     186/     276 : E4 08               		xri 	8 												; is it backspace
     187/     278 : 98 1E               		jz 		__KBDBackSpace
     188/     27A : E4 05               		xri 	8!13 											; is it CR, then exit
     189/     27C : 98 28               		jz 		__KBDExit
     190/     27E :                     
     191/     27E : 40                  		lde 													; have we a full buffer.
     192/     27F : E4 10               		xri 	kbdBufferLn 									; if so, ignore the key.
     193/     281 : 98 DA               		jz 		KeyboardLoop
     194/     283 :                     
     195/     283 : C2 FF               		ld 		-1(p2) 											; restore the key.
     196/     285 : 02                  		ccl
     197/     286 : F4 20               		adi 	0x20											; will make lower case -ve
     198/     288 : 94 02               		jp 		__KBDNotLower
     199/     28A : FC 20               		cai 	0x20 											; capitalise
     200/     28C :                     __KBDNotLower:
     201/     28C : F4 E0               		adi 	0xE0 											; fix up.
     202/     28E : C9 80               		st 		-0x80(p1) 										; save in the buffer using E as index.
     203/     290 : 3F                  		xppc 	p3 												; print the character
     204/     291 : 01                  		xae 													; increment E
     205/     292 : 02                  		ccl
     206/     293 : F4 01               		adi 	1
     207/     295 : 01                  		xae
     208/     296 : 90 C5               		jmp 	KeyboardLoop 									; and get the next key.
     209/     298 :                     
     210/     298 :                     __KBDBackSpace:
     211/     298 : 40                  		lde 													; get position
     212/     299 : 98 C2               		jz 		KeyboardLoop 									; can't go back if at beginning
     213/     29B : 03                  		scl 													; go back 1 from E
     214/     29C : FC 01               		cai 	1
     215/     29E : 01                  		xae 
     216/     29F : C4 08               		ldi 	8 												; print a backspace
     217/     2A1 : 3F                  		xppc 	p3
     218/     2A2 : 90 B9               		jmp 	KeyboardLoop 									; and go round again.
     219/     2A4 :                     
     220/     2A4 :                     __CmdMainLoop1:
     221/     2A4 : 90 A2               		jmp 	CommandMainLoop
     222/     2A6 :                     
 AS V1.42 Beta [Bld 102] - source file monitor.asm - page 12 - 12/3/2015 9:31:18


     223/     2A6 :                     __KBDExit:
     224/     2A6 : C9 80               		st 		-0x80(p1) 										; add the ASCIIZ terminator.
     225/     2A8 : C4 0D               		ldi 	13												; print a new line.
     226/     2AA : 3F                  		xppc 	p3
     227/     2AB :                     
     228/     2AB :                     ; ****************************************************************************************************************
     229/     2AB :                     ;
     230/     2AB :                     ;						Extract the 5 bit 3 letter (max command value). P1 points to buffer
     231/     2AB :                     ;
     232/     2AB :                     ; ****************************************************************************************************************
     233/     2AB :                     
     234/     2AB : C4 00               		ldi 	0
     235/     2AD : 01                  		xae 													; E contains the LSB of the 5 bit shift
     236/     2AE : 40                  		lde 	
     237/     2AF : CA FF               		st 		-1(p2) 											; -1(P2) contains the MSB
     238/     2B1 : C9 FF               		st 		modifier-kbdBuffer(p1)							; clear the modifier.
     239/     2B3 :                     Extract5Bit:
     240/     2B3 : C1 00               		ld 		(p1) 											; look at character
     241/     2B5 : 02                  		ccl 													; add 128-65, will be +ve if < 64
     242/     2B6 : F4 3F               		adi 	128-65
     243/     2B8 : 94 1A               		jp 		__ExtractEnd
     244/     2BA : C4 05               		ldi 	5 												; shift current value left 5 times using -2(p2)
     245/     2BC : CA FE               		st 		-2(p2)
     246/     2BE :                     __Ex5Shift:
     247/     2BE : 40                  		lde 													; shift E left into CY/L
     248/     2BF : 02                  		ccl
     249/     2C0 : 70                  		ade 
     250/     2C1 : 01                  		xae
     251/     2C2 : C2 FF               		ld 		-1(p2) 											; shift CY/L into -1(p2) and carry/link
     252/     2C4 : F2 FF               		add 	-1(p2)
     253/     2C6 : CA FF               		st 		-1(p2)
     254/     2C8 : BA FE               		dld 	-2(p2) 											; done it 5 times ?
     255/     2CA : 9C F2               		jnz 	__Ex5Shift
     256/     2CC : C5 01               		ld 		@1(p1) 											; re-read character.
     257/     2CE : D4 1F               		ani 	0x1F 											; lower 5 bits only.
     258/     2D0 : 58                  		ore 													; OR into E
     259/     2D1 : 01                  		xae
     260/     2D2 : 90 DF               		jmp 	Extract5Bit 									; go and get the next one.
     261/     2D4 :                     
     262/     2D4 :                     __ExtractEnd:
     263/     2D4 : C4 1C               		ldi 	parPosn & 255 									; P1.L = Parameter Position, A = first non cmd char
     264/     2D6 : 31                  		xpal	p1
     265/     2D7 : C9 00               		st 		(p1) 											; write to parameter position.
     266/     2D9 :                     
     267/     2D9 :                     ; ****************************************************************************************************************
     268/     2D9 :                     ;
     269/     2D9 :                     ;						Find command in -1 (P2) (High) E (Low) in Command table
     270/     2D9 :                     ;	
     271/     2D9 :                     ; ****************************************************************************************************************
     272/     2D9 :                     
     273/     2D9 : C4 47               		ldi 	__commandList & 255 							; point P1 to the command list
     274/     2DB : 31                  		xpal 	p1
     275/     2DC : C4 07               		ldi 	__commandList / 256 		
     276/     2DE : 35                  		xpah 	p1	
     277/     2DF :                     __FindCommandLoop:
     278/     2DF : C1 00               		ld 		0(p1) 											; reached the end of the table ?
     279/     2E1 : D9 01               		or 		1(p1)											; which is marked by word 0000
     280/     2E3 : 98 31               		jz 		__CommandError
     281/     2E5 : C5 03               		ld 		@3(p1) 											; read low byte, and point to next
     282/     2E7 : 60                  		xre
 AS V1.42 Beta [Bld 102] - source file monitor.asm - page 13 - 12/3/2015 9:31:18


     283/     2E8 : 9C F5               		jnz 	__FindCommandLoop 								; if different to LSB loop back.
     284/     2EA : C1 FE               		ld 		-2(p1) 											; read the high byte
     285/     2EC : E2 FF               		xor 	-1(p2) 											; if different to the MSB loop back.
     286/     2EE : 9C EF               		jnz 	__FindCommandLoop
     287/     2F0 :                     
     288/     2F0 :                     ; ****************************************************************************************************************
     289/     2F0 :                     ;
     290/     2F0 :                     ;				Found command, figure out if ASM or Command, if Command go to that routine
     291/     2F0 :                     ;
     292/     2F0 :                     ; ****************************************************************************************************************
     293/     2F0 :                     
     294/     2F0 : C4 3B               		ldi 	(GetParameter-1) & 255 							; point P3 to the get parameter code.
     295/     2F2 : 33                  		xpal 	p3
     296/     2F3 : C4 06               		ldi 	(GetParameter-1) / 256
     297/     2F5 : 37                  		xpah 	p3
     298/     2F6 :                     
     299/     2F6 : C1 FF               		ld 		-1(p1) 											; read the operation code.
     300/     2F8 : D4 F0               		ani 	0xF0 											; look at the m-s-nibble - commands are 0x20.
     301/     2FA : E4 20               		xri 	0x20
     302/     2FC : 9C 22               		jnz 	__Assembler
     303/     2FE :                     
     304/     2FE : C1 FF               		ld 		-1(p1) 											; re-read it
     305/     300 : 02                  		ccl
     306/     301 : F1 FF               		add 	-1(p1) 											; double it
     307/     303 : D4 1F               		ani 	0x1F 											; lower 5 bits only.
     308/     305 : F4 EE               		adi 	__CommandTable & 255 							; make P1 point to the command table entry
     309/     307 : 31                  		xpal 	p1
     310/     308 : C4 07               		ldi 	__CommandTable / 256 					
     311/     30A : 35                  		xpah 	p1
     312/     30B : C1 00               		ld 		0(p1) 											; read low address
     313/     30D : 01                  		xae
     314/     30E : C1 01               		ld 		1(p1) 											; read high address
     315/     310 : 35                  		xpah 	p1 												; put in P1.H
     316/     311 : 40                  		lde 													; get low address
     317/     312 : 31                  		xpal 	p1 												; put in P1.L
     318/     313 : C5 FF               		ld 		@-1(p1) 										; fix up for the pre-increment
     319/     315 : 3D                  		xppc 	p1 												; and go there.
     320/     316 :                     
     321/     316 :                     __CommandError: 												; unknown command.
     322/     316 : C4 03               		ldi 	3 												; set the beeper on
     323/     318 : 07                  		cas
     324/     319 : 8F FF               		dly 	0xFF 											; short delay
     325/     31B : C4 00               		ldi 	0 												; set the beeper off
     326/     31D : 07                  		cas
     327/     31E : 90 84               		jmp 	__CmdMainLoop1
     328/     320 :                     
     329/     320 :                     ; ****************************************************************************************************************
     330/     320 :                     ;												In line Assembler
     331/     320 :                     ; ****************************************************************************************************************
     332/     320 :                     
     333/     320 :                     __Assembler:
     334/     320 : C1 FF               		ld 		-1(p1) 											; this is the operation code to use.
     335/     322 : CE FF               		st 		@-1(p2) 										; push on the stack.
     336/     324 :                     
     337/     324 : 3F                  		xppc 	p3 												; evaluate (any) parameter if present
     338/     325 : 06                  		csa 													; check carry flag set
     339/     326 : 94 27               		jp 		__ASMNoParameter  								; if clear, no parameter was provided.
     340/     328 :                     
     341/     328 : C4 1C               		ldi 	parPosn & 255
     342/     32A : 31                  		xpal 	p1 												; get the parameter LSB
 AS V1.42 Beta [Bld 102] - source file monitor.asm - page 14 - 12/3/2015 9:31:18


     343/     32B : CE FF               		st 		@-1(p2) 										; push that on the stack, set P1 to parPosn
     344/     32D : C4 0C               		ldi 	parPosn / 256
     345/     32F : 35                  		xpah 	p1
     346/     330 : C1 00               		ld 		(p1) 											; read current position
     347/     332 : 31                  		xpal 	p1 												; P1 now points to character.
     348/     333 : C1 00               		ld 		(p1) 											; read character
     349/     335 : E4 21               		xri 	'!'												; is it the label pling ?
     350/     337 : 9C 1E               		jnz 	__ASMContinue 									; we don't need to change this pointer , we should technically.
     351/     339 : C2 00               		ld 		(p2) 											; read the value, which is the label number
     352/     33B : 03                  		scl
     353/     33C : FC 18               		cai 	labelCount 										; is it a valid label number
     354/     33E : 94 D6               		jp 		__CommandError 									; no, beep.
     355/     340 : C2 00               		ld 		(p2) 											; re-read the label number
     356/     342 : 01                  		xae 													; put in E
     357/     343 : C4 0C               		ldi 	Labels/256 										; point p1 to labels
     358/     345 : 35                  		xpah 	p1
     359/     346 : C4 00               		ldi 	Labels&255 
     360/     348 : 31                  		xpal 	p1
     361/     349 : C1 80               		ld 		-0x80(p1) 										; read label indexed using E.
     362/     34B : CA 00               		st 		(p2) 											; save as the operand
     363/     34D : 90 08               		jmp 	__ASMContinue 									; and continue
     364/     34F :                     
     365/     34F :                     __ASMNoParameter:
     366/     34F : C2 00               		ld 		(p2) 											; read the pushed operation code
     367/     351 : D4 80               		ani 	0x80 											; is bit 7 set ?
     368/     353 : 9C C1               		jnz 	__CommandError 									; if it is, we need a parameter
     369/     355 : CE FF               		st 		@-1(p2) 										; push zero on the stack as a dummy parameter.
     370/     357 :                     
     371/     357 :                     __ASMContinue:
     372/     357 : C4 0C               		ldi 	Current/256 									; p3 = &Current Address
     373/     359 : 37                  		xpah 	p3
     374/     35A : C4 19               		ldi 	Current&255
     375/     35C : 33                  		xpal 	p3
     376/     35D :                     
     377/     35D : C3 04               		ld 		modifier-Current(p3) 							; get the modifier (e.g. @,Pn etc.)
     378/     35F : 02                  		ccl
     379/     360 : F2 01               		add 	1(p2) 											; add to the opcode and write it back
     380/     362 : CA 01               		st 		1(p2)
     381/     364 :                     
     382/     364 : C3 00               		ld 		(p3) 											; read current address into P1
     383/     366 : 31                  		xpal 	p1
     384/     367 : C3 01               		ld 		1(p3)
     385/     369 : 35                  		xpah 	p1
     386/     36A :                     
     387/     36A : C2 01               		ld 		1(p2) 											; read opcode.
     388/     36C : CD 01               		st 		@1(p1) 											; write out to current address and bump it.
     389/     36E : 94 1F               		jp 		__ASMExit 										; if +ve then no operand byte, exit.
     390/     370 :                     
     391/     370 : C2 00               		ld 		(p2) 											; read the operand byte
     392/     372 : CD 01               		st 		@1(p1) 											; write that out as well.
     393/     374 :                     
     394/     374 : C3 04               		ld 		modifier-Current(p3) 							; look at the modifier 
     395/     376 : 9C 17               		jnz 	__ASMExit 										; if non zero we don't need to do anything P0 = 00
     396/     378 : C2 01               		ld 		1(p2) 											; DLY is a special case
     397/     37A : E4 8F               		xri 	0x8F 											; where the modifier is zero but not PC relative.
     398/     37C : 98 11               		jz 		__ASMExit 												
     399/     37E :                     
     400/     37E : C1 FF               		ld 		-1(p1) 											; read operand
     401/     380 : 02                  		ccl 													; one fewer because we want the current addr+1 low
     402/     381 : FB 00               		cad 	(p3) 											; subtract the current address low.
 AS V1.42 Beta [Bld 102] - source file monitor.asm - page 15 - 12/3/2015 9:31:18


     403/     383 : C9 FF               		st 		-1(p1) 											; write it back
     404/     385 :                     
     405/     385 : C2 01               		ld 		1(p2) 											; read opcode again
     406/     387 : D4 F0               		ani 	0xF0 											; is it 9x (a JMP command)
     407/     389 : E4 90               		xri 	0x90
     408/     38B : 9C 02               		jnz 	__ASMExit 										; if not, we are done
     409/     38D : B9 FF               		dld 	-1(p1) 											; one fewer because of the pre-increment
     410/     38F :                     __ASMExit:
     411/     38F : 31                  		xpal 	p1 												; write current address back out
     412/     390 : CB 00               		st 		(p3)
     413/     392 : 35                  		xpah 	p1
     414/     393 : CB 01               		st 		1(p3)
     415/     395 : C6 02               		ld 		@2(p2) 											; drop stack values.
     416/     397 :                     
     417/     397 : 90 0C               		jmp 	__CmdMainLoop2 									; back to command loop
     418/     399 :                     
     419/     399 :                     ; ****************************************************************************************************************
     420/     399 :                     ; ****************************************************************************************************************
     421/     399 :                     ;
     422/     399 :                     ;												Commands Section
     423/     399 :                     ;
     424/     399 :                     ; ****************************************************************************************************************
     425/     399 :                     ; ****************************************************************************************************************
     426/     399 :                     
     427/     399 :                     ; ****************************************************************************************************************
     428/     399 :                     ;											A : Set Current address
     429/     399 :                     ; ****************************************************************************************************************
     430/     399 :                     
     431/     399 :                     Address_Command:
     432/     399 : 3F                  		xppc 	p3 												; get parameter if exists
     433/     39A : 3F                  		xppc 	p3 												; update current if exists.
     434/     39B : 90 08               		jmp 	__CmdMainLoop2
     435/     39D :                     
     436/     39D :                     __CmdParameterFail:
     437/     39D : C4 02               		ldi 	2 												; set the beeper on
     438/     39F : 07                  		cas
     439/     3A0 : 8F FF               		dly 	0xFF 											; short delay
     440/     3A2 : C4 00               		ldi 	0 												; set the beeper off
     441/     3A4 : 07                  		cas
     442/     3A5 :                     __CmdMainLoop2:													; and go back to the start.
     443/     3A5 : C4 47               		ldi 	(CommandMainLoop-1) & 255
     444/     3A7 : 33                  		xpal 	p3
     445/     3A8 : C4 02               		ldi 	(CommandMainLoop-1) / 256
     446/     3AA : 37                  		xpah 	p3
     447/     3AB : 3F                  		xppc 	p3
     448/     3AC :                     
     449/     3AC :                     ; ****************************************************************************************************************
     450/     3AC :                     ;										G : Go (Address must be specified.)
     451/     3AC :                     ; ****************************************************************************************************************
     452/     3AC :                     
     453/     3AC :                     Go_Command:
     454/     3AC : 3F                  		xppc 	p3 												; get parameter, which should exist.
     455/     3AD : 06                  		csa 													; look at CY/L which is set if it was.
     456/     3AE : 94 ED               		jp 		__CmdParameterFail 								; if it is clear, beep an error.
     457/     3B0 : 31                  		xpal 	p1 												; copy P1 to P3
     458/     3B1 : 33                  		xpal 	p3
     459/     3B2 : 35                  		xpah 	p1
     460/     3B3 : 37                  		xpah 	p3
     461/     3B4 : C7 FF               		ld 		@-1(p3) 										; fix up for pre increment
     462/     3B6 : 3F                  		xppc 	p3 												; call the routine.		
 AS V1.42 Beta [Bld 102] - source file monitor.asm - page 16 - 12/3/2015 9:31:18


     463/     3B7 :                     __CmdMainLoop3:
     464/     3B7 : 90 EC               		jmp 	__CmdMainLoop2 									; re-enter monitor.
     465/     3B9 :                     
     466/     3B9 :                     ; ****************************************************************************************************************
     467/     3B9 :                     ;			PUT Write to tape : data mandatory, it is the byte count from the current address.
     468/     3B9 :                     ; ****************************************************************************************************************
     469/     3B9 :                     
     470/     3B9 :                     PutTape_Command:
     471/     3B9 : 3F                  		xppc 	p3 												; get the bytes to write.
     472/     3BA : 06                  		csa 													; if CC, no value was provided
     473/     3BB : 94 E0               		jp 		__CmdParameterFail 								; which is an error.
     474/     3BD : 31                  		xpal 	p1 												; store low byte count in -1(P2)
     475/     3BE : CA FF               		st 		-1(p2)
     476/     3C0 : 35                  		xpah 	p1 												; store high byte count in -2(P2)
     477/     3C1 : CA FE               		st 		-2(p2)
     478/     3C3 : 02                  		ccl 													; skip over the update current address
     479/     3C4 : 3F                  		xppc 	p3 												; this won't update current address as CY/L = 0
     480/     3C5 : 3F                  		xppc 	p3 												; and load the current address into P1.
     481/     3C6 : C4 00               		ldi 	0 												; set the output tape bit low
     482/     3C8 : 01                  		xae
     483/     3C9 : 19                  		sio
     484/     3CA : C4 20               		ldi 	32 												; tape leader
     485/     3CC : CA FD               		st 		-3(p2)
     486/     3CE :                     _PutTapeLeader:
     487/     3CE : 8F FF               		dly 	0xFF
     488/     3D0 : BA FD               		dld 	-3(p2)
     489/     3D2 : 9C FA               		jnz 	_PutTapeLeader
     490/     3D4 :                     _PutTapeByte:													; output byte at P1
     491/     3D4 : C4 00               		ldi 	0 												; set output bit to 0
     492/     3D6 : 01                  		xae 	
     493/     3D7 : 19                  		sio
     494/     3D8 : 8F 10               		dly 	tapeDelay * 4 									; 0 continuation bit + gap between tapes with no signal 
     495/     3DA : C4 01               		ldi 	0x1 											; set bit high
     496/     3DC : 01                  		xae
     497/     3DD : 19                  		sio 
     498/     3DE : C4 00               		ldi 	0
     499/     3E0 : 8F 04               		dly 	tapeDelay 										; output the start bit.
     500/     3E2 : C5 01               		ld 		@1(p1) 											; read the byte and put it in E.
     501/     3E4 : 01                  		xae
     502/     3E5 : C4 08               		ldi 	8 												; output 8 bits
     503/     3E7 : CA FD               		st 		-3(p2)
     504/     3E9 :                     _PutTapeBit:
     505/     3E9 : 19                  		sio 													; output MSB and shift
     506/     3EA : C4 00               		ldi 	0
     507/     3EC : 8F 04               		dly 	tapeDelay 								
     508/     3EE : BA FD               		dld 	-3(p2) 											; do all 8 bits.
     509/     3F0 : 9C F7               		jnz 	_PutTapeBit
     510/     3F2 : BA FF               		dld 	-1(p2) 											; decrement counter
     511/     3F4 : 9C DE               		jnz 	_PutTapeByte
     512/     3F6 : BA FE               		dld 	-2(p2) 											; note MSB goes 0 to -1 when finished.
     513/     3F8 : 94 DA               		jp 		_PutTapeByte
     514/     3FA : C4 01               		ldi 	0x01 											; add the termination bit.
     515/     3FC : 01                  		xae
     516/     3FD : 19                  		sio
     517/     3FE : C4 00               		ldi 	0 												; put that out.
     518/     400 : 8F 04               		dly 	TapeDelay
     519/     402 : C4 00               		ldi 	0 												; and set the leve back to 0
     520/     404 : 01                  		xae 
     521/     405 : 19                  		sio
     522/     406 :                     __CmdMainLoop4:
 AS V1.42 Beta [Bld 102] - source file monitor.asm - page 17 - 12/3/2015 9:31:18


     523/     406 : 90 AF               		jmp 	__CmdMainLoop3
     524/     408 :                     
     525/     408 :                     __CmdParameterFail1:
     526/     408 : 90 93               		jmp 	__CmdParameterFail
     527/     40A :                     
     528/     40A :                     ; ****************************************************************************************************************
     529/     40A :                     ;						GET [addr] load tape to current position or given address.
     530/     40A :                     ; ****************************************************************************************************************
     531/     40A :                     
     532/     40A :                     LoadTape_Command:
     533/     40A : 3F                  		xppc	p3 												; get parameter
     534/     40B : 3F                  		xppc 	p3												; update current address
     535/     40C : 3F                  		xppc 	p3 												; current address to P1.
     536/     40D : C4 08               		ldi 	0x8 											; point P3 to the keyboard.
     537/     40F : 37                  		xpah 	p3
     538/     410 :                     __GetTapeWait:
     539/     410 : C3 00               		ld 		0(p3) 											; check keyboard break
     540/     412 : D4 80               		ani 	0x80
     541/     414 : 9C F2               		jnz 	__CmdParameterFail1
     542/     416 : 19                  		sio 													; wait for the start bit, examine tape in.
     543/     417 : 40                  		lde 
     544/     418 : 94 F6               		jp 		__GetTapeWait
     545/     41A : 8F 06               		dly 	tapeDelay * 3 / 2 								; half way into the first bit.
     546/     41C : C4 08               		ldi 	8 												; read in 8 bits.
     547/     41E : CA FF               		st 		-1(p2)
     548/     420 :                     __GetTapeBits:
     549/     420 : 19                  		sio 													; read in one bit
     550/     421 : C4 00               		ldi 	0
     551/     423 : 8F 04               		dly 	tapeDelay 										; delay to next bit
     552/     425 : BA FF               		dld 	-1(p2) 											; read 8 bits.
     553/     427 : 9C F7               		jnz 	__GetTapeBits 
     554/     429 : 40                  		lde 													; store byte at current address
     555/     42A : CD 01               		st 		@1(p1)
     556/     42C : 19                  		sio 													; read in the byte, which is zero if continuing.
     557/     42D : 40                  		lde  													; examine bit 7 shifted in.
     558/     42E : 94 E0               		jp 		__GetTapeWait 									; if zero, wait for the next start bit.
     559/     430 :                     __CmdMainLoop5:
     560/     430 : 90 D4               		jmp 	__CmdMainLoop4
     561/     432 :                     
     562/     432 :                     ; ****************************************************************************************************************
     563/     432 :                     ;										L : nn Set Label to current address
     564/     432 :                     ; ****************************************************************************************************************
     565/     432 :                     
     566/     432 :                     Label_Command:
     567/     432 : 3F                  		xppc 	p3 												; get parameter
     568/     433 : 06                  		csa 													; check it exists, CY/L must be set
     569/     434 : 94 D2               		jp 		__CmdParameterFail1
     570/     436 : 31                  		xpal 	p1 												; get into A
     571/     437 : 01                  		xae 													; put into E
     572/     438 : 40                  		lde 													; get back
     573/     439 : 03                  		scl
     574/     43A : FC 18               		cai 	labelCount 										; check is < number of labels
     575/     43C : 94 CA               		jp 		__CmdParameterFail1
     576/     43E :                     
     577/     43E : C4 0C               		ldi 	Current/256 									; point P1 to current address
     578/     440 : 35                  		xpah 	p1
     579/     441 : C4 19               		ldi 	Current&255
     580/     443 : 31                  		xpal 	p1
     581/     444 : C1 00               		ld 		(p1) 											; read current address
     582/     446 : 31                  		xpal 	p1 												; save in P1.Low
 AS V1.42 Beta [Bld 102] - source file monitor.asm - page 18 - 12/3/2015 9:31:18


     583/     447 : C4 00               		ldi 	Labels&255 										; get labels low byte in same page as current address
     584/     449 : 02                  		ccl
     585/     44A : 70                  		ade 													; add label # to it
     586/     44B : 31                  		xpal 	p1 												; put in P1.L and restore current address low
     587/     44C : C9 00               		st 		(p1) 											; store current address low in label space.
     588/     44E : 90 E0               		jmp 	__CmdMainLoop5 									; and exit.
     589/     450 :                     
     590/     450 :                     ; ****************************************************************************************************************
     591/     450 :                     ;											M :	Dump Memory
     592/     450 :                     ; ****************************************************************************************************************
     593/     450 :                     
     594/     450 :                     MemoryDump_Command:
     595/     450 : 3F                  		xppc 	p3 												; get parameter if exists
     596/     451 : 3F                  		xppc 	p3 												; update current if exists.
     597/     452 : C4 07               		ldi 	7 												; print seven rows
     598/     454 : CE FF               		st 		@-1(p2)
     599/     456 :                     __DCLoop:
     600/     456 : C4 06               		ldi 	(PrintAddressData-1)/256						; print one row of address and data.
     601/     458 : 37                  		xpah 	p3
     602/     459 : C4 08               		ldi 	(PrintAddressData-1)&255
     603/     45B : 33                  		xpal 	p3
     604/     45C : C4 04               		ldi 	4
     605/     45E : 3F                  		xppc 	p3
     606/     45F : C4 0C               		ldi 	Current/256 									; point P1 to current
     607/     461 : 35                  		xpah 	p1
     608/     462 : C4 19               		ldi 	Current&255 
     609/     464 : 31                  		xpal 	p1
     610/     465 : C1 00               		ld 		0(p1) 											; add 4 to current address
     611/     467 : 02                  		ccl
     612/     468 : F4 04               		adi 	4
     613/     46A : C9 00               		st 		0(p1)
     614/     46C : C1 01               		ld 		1(p1)
     615/     46E : F4 00               		adi 	0
     616/     470 : C9 01               		st 		1(p1)
     617/     472 : BA 00               		dld 	(p2) 											; do it 7 times
     618/     474 : 9C E0               		jnz 	__DCLoop
     619/     476 : C6 01               		ld 		@1(p2) 											; fix up stack.
     620/     478 :                     __CmdMainLoop6:
     621/     478 : 90 B6               		jmp 	__CmdMainLoop5
     622/     47A :                     
     623/     47A :                     
     624/     47A :                     ; ****************************************************************************************************************
     625/     47A :                     ;								B: Enter Bytes (no address, sequence of byte data)
     626/     47A :                     ; ****************************************************************************************************************
     627/     47A :                     
     628/     47A :                     EnterBytes_Command:
     629/     47A : C4 3B               		ldi 	(GetParameter-1) & 255 							; P3 = Get Parameter routine
     630/     47C : 33                  		xpal 	p3
     631/     47D : C4 06               		ldi 	(GetParameter-1) / 256 	
     632/     47F : 37                  		xpah 	p3
     633/     480 : 3F                  		xppc 	p3 												; get the parameter.
     634/     481 : 06                  		csa 													; look at carry
     635/     482 : 94 AC               		jp 		__CmdMainLoop5 									; carry clear, no value.
     636/     484 : C4 0C               		ldi 	Current/256 									; make P1 point to current
     637/     486 : 35                  		xpah 	p1
     638/     487 : C4 19               		ldi 	Current&255 										
     639/     489 : 31                  		xpal 	p1 												; this pulls the byte value into A
     640/     48A : 01                  		xae 													; save it in E
     641/     48B : C1 00               		ld 		0(p1) 											; copy address to save to into P3
     642/     48D : 33                  		xpal 	p3
 AS V1.42 Beta [Bld 102] - source file monitor.asm - page 19 - 12/3/2015 9:31:18


     643/     48E : C1 01               		ld 		1(p1) 
     644/     490 : 37                  		xpah 	p3 
     645/     491 : 40                  		lde 													; get byte back
     646/     492 : CB 00               		st 		(p3) 											; save it in that location
     647/     494 : A9 00               		ild 	0(p1) 											; bump current address and go back and try again.
     648/     496 : 9C E2               		jnz 	EnterBytes_Command
     649/     498 : A9 01               		ild 	1(p1)
     650/     49A : 90 DE               		jmp 	EnterBytes_Command
     651/     49C :                     
     652/     49C :                     ; ****************************************************************************************************************
     653/     49C :                     ;											D [aaaa] Disassembler
     654/     49C :                     ; ****************************************************************************************************************
     655/     49C :                     
     656/     49C :                     Disassemble_Command:	
     657/     49C : 3F                  		xppc 	p3 												; evaluate
     658/     49D : 3F                  		xppc 	p3 												; update current if new value
     659/     49E : C4 07               		ldi 	7												; instructions to disassemble counter
     660/     4A0 : CE FC               		st 		@-4(p2)											; p2 + 0 = counter p2 + 1 = opcode p2 + 2 = operand
     661/     4A2 :                     __DAssLoop:														; p2 + 3 = opcode - base opcode.
     662/     4A2 : C4 06               		ldi 	(PrintAddressData-1)/256						; print Address only
     663/     4A4 : 37                  		xpah 	p3
     664/     4A5 : C4 08               		ldi 	(PrintAddressData-1)&255
     665/     4A7 : 33                  		xpal 	p3
     666/     4A8 : C4 00               		ldi 	0
     667/     4AA : 3F                  		xppc 	p3
     668/     4AB : C4 0C               		ldi 	Current / 256 									; point P1 to current address
     669/     4AD : 35                  		xpah 	p1
     670/     4AE : C4 19               		ldi 	Current & 255
     671/     4B0 : 31                  		xpal 	p1
     672/     4B1 : C1 00               		ld 		0(p1) 											; load current address into P3
     673/     4B3 : 33                  		xpal 	p3
     674/     4B4 : C1 01               		ld 		1(p1)
     675/     4B6 : 37                  		xpah 	p3
     676/     4B7 : C7 01               		ld 		@1(p3) 											; read opcode
     677/     4B9 : CA 01               		st 		1(p2) 											; save it
     678/     4BB : 94 04               		jp 		__DAssNoOperand 								; if +ve no operand
     679/     4BD : C7 01               		ld 		@1(p3) 											; read operand
     680/     4BF : CA 02               		st 		2(p2) 											; save it
     681/     4C1 :                     __DAssNoOperand:
     682/     4C1 : C4 E9               		ldi 	(__CommandListEnd-3) & 255
     683/     4C3 : 33                  		xpal 	p3 												; update current position, setting P3 to last entry
     684/     4C4 : C9 00               		st 		0(p1)											; in command table.
     685/     4C6 : C4 07               		ldi 	(__CommandListEnd-3) / 256
     686/     4C8 : 37                  		xpah 	p3
     687/     4C9 : C9 01               		st 		1(p1)
     688/     4CB :                     
     689/     4CB :                     __DAssFindOpcode: 												; the table is : text (word) opcode (byte)
     690/     4CB : C2 01               		ld 		1(p2) 											; get opcode
     691/     4CD : E3 02               		xor 	2(p3) 											; check in the same 8 byte page.
     692/     4CF : D4 F0               		ani 	0xF0
     693/     4D1 : 9C 0B               		jnz 	__DAssNextOpcode
     694/     4D3 : C2 01               		ld 		1(p2) 											; get opcode
     695/     4D5 : 03                  		scl
     696/     4D6 : FB 02               		cad 	2(p3) 											; subtract the base opcode.
     697/     4D8 : CA 03               		st 		3(p2) 											; save a the offset (possible)
     698/     4DA : D4 E0               		ani 	0xE0 											; it needs to be 0x20 or less
     699/     4DC : 98 08               		jz 		__DAssFoundOpcode 								; if >= 0 then found the correct opcode.
     700/     4DE :                     __DAssNextOpcode:
     701/     4DE : C7 FD               		ld 		@-3(p3) 										; go to previous entry in table
     702/     4E0 : 90 E9               		jmp 	__DAssFindOpcode
 AS V1.42 Beta [Bld 102] - source file monitor.asm - page 20 - 12/3/2015 9:31:18


     703/     4E2 :                     
     704/     4E2 :                     __DAssLoop2:
     705/     4E2 : 90 BE               		jmp 	__DAssLoop
     706/     4E4 :                     __CmdMainLoop7:
     707/     4E4 : 90 92               		jmp 	__CmdMainLoop6
     708/     4E6 :                     
     709/     4E6 :                     __DAssFoundOpcode:
     710/     4E6 : C3 02               		ld 		2(p3) 											; look at opcode that matched.
     711/     4E8 : D4 87               		ani 	0x87 											; match with 1xxx x100
     712/     4EA : E4 84               		xri 	0x84 											; which is all the immediate instructions.		
     713/     4EC : 9C 04               		jnz 	__DAssNotImmediate
     714/     4EE : C2 03               		ld 		3(p2) 											; only do immediate if base offset is zero
     715/     4F0 : 9C EC               		jnz 	__DAssNextOpcode 								; fixes C0-C7 being LD, but C4 being LDI.
     716/     4F2 :                     __DAssNotImmediate:
     717/     4F2 : C3 00               		ld 		0(p3) 											; save LSB of text on stack
     718/     4F4 : CE FF               		st 		@-1(p2)
     719/     4F6 : C3 01               		ld 		1(p3) 											; and the MSB of text on stack
     720/     4F8 : CE FF               		st 		@-1(p2)
     721/     4FA :                     
     722/     4FA : C4 05               		ldi 	(PrintCharacter-1) / 256 						; set P3 up to print characters
     723/     4FC : 37                  		xpah 	p3
     724/     4FD : C4 9B               		ldi 	(PrintCharacter-1) & 255 
     725/     4FF : 33                  		xpal 	p3
     726/     500 : C4 20               		ldi 	' '												; print a space.
     727/     502 : 3F                  		xppc 	p3
     728/     503 :                     
     729/     503 : C4 03               		ldi 	3 												; print 3 characters
     730/     505 : CE FF               		st 		@-1(p2) 										; so +0 is count, +1 = text MSB, +2 = text LSB
     731/     507 :                     __DAssPrintMnemonic:
     732/     507 : C2 01               		ld 		1(p2) 											; get text MSB which is in bits .xxxxx..
     733/     509 : 1C                  		sr 														; shift right twice.
     734/     50A : 1C                  		sr
     735/     50B : D4 1F               		ani 	0x1F 											; lower 5 bits only
     736/     50D : 98 04               		jz 		__DAssSkipSpace 								; don't print spaces (00000)
     737/     50F : 02                  		ccl 													; make it 7 bit ASCII code.
     738/     510 : F4 40               		adi 	64 							
     739/     512 : 3F                  		xppc 	p3 												; display the character
     740/     513 :                     __DAssSkipSpace:
     741/     513 : C4 05               		ldi 	5 												; now shift the encoded data left 5 times
     742/     515 : CA FF               		st 		-1(p2)
     743/     517 :                     __DAssShiftEncode:
     744/     517 : 02                  		ccl
     745/     518 : C2 02               		ld 		2(p2)
     746/     51A : F2 02               		add 	2(p2)
     747/     51C : CA 02               		st 		2(p2)
     748/     51E : C2 01               		ld 		1(p2)
     749/     520 : F2 01               		add 	1(p2)
     750/     522 : CA 01               		st 		1(p2)
     751/     524 : BA FF               		dld 	-1(p2)
     752/     526 : 9C EF               		jnz 	__DAssShiftEncode
     753/     528 : BA 00               		dld 	0(p2) 											; done all three characters
     754/     52A : 9C DB               		jnz 	__DAssPrintMnemonic 							; if not keep going.
     755/     52C :                     
     756/     52C : C6 03               		ld 		@3(p2) 											; remove mnemonic stuff off the stack.
     757/     52E :                     
     758/     52E : C2 03               		ld 		3(p2) 											; print instruction modifier if required.
     759/     530 : 9C 1F               		jnz 	__DAssPrintModifier
     760/     532 :                     
     761/     532 :                     __DAssPrintOperand:
     762/     532 : C2 01               		ld 		1(p2) 											; get original opcode
 AS V1.42 Beta [Bld 102] - source file monitor.asm - page 21 - 12/3/2015 9:31:18


     763/     534 : 94 0A               		jp 		__DAssNext 										; if no operand go to next line of disassembly.
     764/     536 : C4 05               		ldi 	(PrintHexByte-1) / 256 							; set P3 to point to the hex printer
     765/     538 : 37                  		xpah 	p3
     766/     539 : C4 68               		ldi 	(PrintHexByte-1) & 255
     767/     53B : 33                  		xpal 	p3
     768/     53C : C2 02               		ld 		2(p2) 											; get operand
     769/     53E : 03                  		scl 
     770/     53F : 3F                  		xppc 	p3 												; print it out with a leading space.
     771/     540 :                     
     772/     540 :                     __DAssNext:
     773/     540 : C4 05               		ldi 	(PrintCharacter-1) / 256 						; set P3 up to print characters
     774/     542 : 37                  		xpah 	p3
     775/     543 : C4 9B               		ldi 	(PrintCharacter-1) & 255 
     776/     545 : 33                  		xpal 	p3
     777/     546 : C4 0D               		ldi 	13												; print a newline.
     778/     548 : 3F                  		xppc 	p3
     779/     549 :                     
     780/     549 : BA 00               		dld 	0(p2) 											; done all 6 lines
     781/     54B : 9C 95               		jnz 	__DAssLoop2 									; no, go round again.
     782/     54D : C6 04               		ld 		@4(p2) 											; fix up the stack.
     783/     54F : 90 93               		jmp 	__CmdMainLoop7 									; and time to exit.
     784/     551 :                     
     785/     551 :                     
     786/     551 :                     __DAssPrintModifier:
     787/     551 : C4 20               		ldi 	' '												; print leading space
     788/     553 : 3F                  		xppc 	p3
     789/     554 : C2 03               		ld 		3(p2) 											; read modifier
     790/     556 : D4 04               		ani 	0x04 											; is @ bit set
     791/     558 : 98 03               		jz 		__DAssNotAutoIndexed
     792/     55A : C4 40               		ldi 	'@'												; print '@'
     793/     55C : 3F                  		xppc 	p3
     794/     55D :                     __DAssNotAutoIndexed:
     795/     55D : C4 50               		ldi 	'P'												; print 'P'
     796/     55F : 3F                  		xppc 	p3
     797/     560 : C2 03               		ld 		3(p2) 											; print pointer register
     798/     562 : D4 03               		ani 	3
     799/     564 : DC 30               		ori 	'0'
     800/     566 : 3F                  		xppc 	p3
     801/     567 : 90 C9               		jmp 	__DAssPrintOperand 								; and print operand.
     802/     569 :                     
     803/     569 :                     
     804/     569 :                     ; ****************************************************************************************************************
     805/     569 :                     ; ****************************************************************************************************************
     806/     569 :                     ;
     807/     569 :                     ;						Print A as a hexadecimal 2 digit value. If CY/L set precede with space
     808/     569 :                     ;
     809/     569 :                     ; ****************************************************************************************************************
     810/     569 :                     ; ****************************************************************************************************************
     811/     569 :                     
     812/     569 :                     PrintHexByte:
     813/     569 : CE FF               		st 		@-1(p2) 										; push A and P3, set P3 up to print character
     814/     56B : C4 05               		ldi 	(PrintCharacter-1)/256
     815/     56D : 37                  		xpah 	p3
     816/     56E : CE FF               		st 		@-1(p2)
     817/     570 : C4 9B               		ldi 	(PrintCharacter-1)&255
     818/     572 : 33                  		xpal 	p3
     819/     573 : CE FF               		st 		@-1(p2)
     820/     575 : 06                  		csa 													; check carry
     821/     576 : 94 03               		jp 		__PHBNoSpace									; if clear, no space.
     822/     578 : C4 20               		ldi 	' '												; print leading space
 AS V1.42 Beta [Bld 102] - source file monitor.asm - page 22 - 12/3/2015 9:31:18


     823/     57A : 3F                  		xppc 	p3 
     824/     57B :                     __PHBNoSpace:
     825/     57B : C2 02               		ld 		2(p2) 											; read digit
     826/     57D : 1C                  		sr 														; convert MSB
     827/     57E : 1C                  		sr
     828/     57F : 1C                  		sr
     829/     580 : 1C                  		sr
     830/     581 : 02                  		ccl
     831/     582 : EC 90               		dai 	0x90
     832/     584 : EC 40               		dai 	0x40
     833/     586 : 3F                  		xppc 	p3 												; print
     834/     587 : C2 02               		ld 		2(p2) 											; read digit
     835/     589 : D4 0F               		ani 	0x0F 											; convert LSB
     836/     58B : 02                  		ccl
     837/     58C : EC 90               		dai 	0x90
     838/     58E : EC 40               		dai 	0x40
     839/     590 : 3F                  		xppc 	p3 												; print
     840/     591 :                     
     841/     591 : C6 01               		ld 		@1(p2) 											; restore P3 & A and Return
     842/     593 : 33                  		xpal 	p3
     843/     594 : C6 01               		ld 		@1(p2)
     844/     596 : 37                  		xpah 	p3
     845/     597 : C6 01               		ld 		@1(p2)
     846/     599 : 3F                  		xppc 	p3
     847/     59A : 90 CD               		jmp 	PrintHexByte
     848/     59C :                     
     849/     59C :                     ; ****************************************************************************************************************
     850/     59C :                     ; ****************************************************************************************************************
     851/     59C :                     ;
     852/     59C :                     ;		Print Character in A, preserves all registers, re-entrant. Handles 13 (New Line), 8 (Backspace)
     853/     59C :                     ;		Characters 32 - 95 only.
     854/     59C :                     ;	
     855/     59C :                     ;		Rolls to screen top rather than scrolling.
     856/     59C :                     ;
     857/     59C :                     ; ****************************************************************************************************************
     858/     59C :                     ; ****************************************************************************************************************
     859/     59C :                     
     860/     59C :                     PrintCharacter:
     861/     59C : CE FF               		st 		@-1(p2) 										; save A
     862/     59E : C4 0C               		ldi 	Cursor/256 										; save P1, setting up P1 -> Cursor at same time.
     863/     5A0 : 35                  		xpah 	p1
     864/     5A1 : CE FF               		st 		@-1(p2)
     865/     5A3 : C4 18               		ldi 	Cursor&255
     866/     5A5 : 31                  		xpal 	p1
     867/     5A6 : CE FF               		st 		@-1(p2)
     868/     5A8 : C4 00               		ldi 	0 												; save P3, setting up P3 -> Page 0 (Video RAM Write)
     869/     5AA : 37                  		xpah 	p3
     870/     5AB : CE FF               		st 		@-1(p2)
     871/     5AD : 33                  		xpal 	p3
     872/     5AE : CE FF               		st 		@-1(p2)
     873/     5B0 :                     
     874/     5B0 : C1 00               		ld 		(p1) 											; read cursor position
     875/     5B2 : 33                  		xpal 	p3 												; put in P3.Low
     876/     5B3 :                     
     877/     5B3 : C4 20               		ldi 	' ' 											; erase the cursor.
     878/     5B5 : CB 00               		st 		0(p3)
     879/     5B7 :                     
     880/     5B7 : C2 04               		ld 		4(p2) 											; read character to print.
     881/     5B9 : E4 0D               		xri 	13 												; is it CR ?
     882/     5BB : 98 40               		jz 		__PCNewLine 									; if so, go to new line.
 AS V1.42 Beta [Bld 102] - source file monitor.asm - page 23 - 12/3/2015 9:31:18


     883/     5BD : E4 05               		xri 	13!8 											; is it Backspace ?
     884/     5BF : 98 30               		jz 		__PCBackSpace
     885/     5C1 :                     
     886/     5C1 : C2 04               		ld 		4(p2) 											; get character to print
     887/     5C3 : D4 3F               		ani 	0x3F 											; make 6 bit ASCII
     888/     5C5 : CF 01               		st 		@1(p3) 											; write into P3, e.g. the screen and bump it.
     889/     5C7 : A9 00               		ild 	(p1) 											; increment cursor position and load
     890/     5C9 : D4 0F               		ani 	15 												; are we at line start ?
     891/     5CB : 9C 0C               		jnz 	__PCExit 										; if so, erase the current line.
     892/     5CD :                     
     893/     5CD :                     __PCBlankNewLine:
     894/     5CD : C4 10               		ldi 	16 												; count to 16, the number of spaces to write out.
     895/     5CF : CA FF               		st 		-1(p2) 
     896/     5D1 :                     __PCBlankNewLineLoop:
     897/     5D1 : C4 20               		ldi 	' '
     898/     5D3 : CF 01               		st 		@1(p3)
     899/     5D5 : BA FF               		dld 	-1(p2)
     900/     5D7 : 9C F8               		jnz 	__PCBlankNewLineLoop
     901/     5D9 :                     
     902/     5D9 :                     __PCExit:
     903/     5D9 : C1 00               		ld 		(p1) 											; read cursor
     904/     5DB : 33                  		xpal 	p3 												; put in P3.L
     905/     5DC : C4 9B               		ldi 	0x9B 											; shaded block cursor on screen
     906/     5DE : CB 00               		st 		(p3)
     907/     5E0 : C6 01               		ld 		@1(p2)											; restore P3
     908/     5E2 : 33                  		xpal 	p3
     909/     5E3 : C6 01               		ld 		@1(p2)
     910/     5E5 : 37                  		xpah 	p3
     911/     5E6 : C6 01               		ld 		@1(p2)											; restore P1
     912/     5E8 : 31                  		xpal 	p1
     913/     5E9 : C6 01               		ld 		@1(p2)
     914/     5EB : 35                  		xpah 	p1
     915/     5EC : C6 01               		ld 		@1(p2) 											; restore A and Return.	
     916/     5EE : 3F                  		xppc 	p3
     917/     5EF : 90 AB               		jmp 	PrintCharacter 									; and it is re-entrant.
     918/     5F1 :                     
     919/     5F1 :                     __PCBackSpace:
     920/     5F1 : 33                  		xpal 	p3 												; get current cursor position
     921/     5F2 : 98 E5               		jz 		__PCExit 										; if top of screen then exit.
     922/     5F4 : B9 00               		dld 	(p1) 											; backspace and load cursor
     923/     5F6 : 33                  		xpal 	p3 												; put in P3
     924/     5F7 : C4 20               		ldi 	' '												; erase character there
     925/     5F9 : CB 00               		st 		(p3)
     926/     5FB : 90 DC               		jmp 	__PCExit 										; and exit.
     927/     5FD :                     
     928/     5FD :                     __PCNewLine:
     929/     5FD : C1 00               		ld 		(p1) 											; read cursor position
     930/     5FF : D4 70               		ani 	0x70 											; line
     931/     601 : 02                  		ccl 													; next line
     932/     602 : F4 10               		adi 	0x10
     933/     604 : C9 00               		st 		(p1) 											; write back
     934/     606 : 33                  		xpal 	p3 												; put in P3.L
     935/     607 : 90 C4               		jmp 	__PCBlankNewLine
     936/     609 :                     
     937/     609 :                     ; ****************************************************************************************************************
     938/     609 :                     ; ****************************************************************************************************************
     939/     609 :                     ;
     940/     609 :                     ;					Print current address followed by A data bytes. Doesn't update current address
     941/     609 :                     ;
     942/     609 :                     ; ****************************************************************************************************************
 AS V1.42 Beta [Bld 102] - source file monitor.asm - page 24 - 12/3/2015 9:31:18


     943/     609 :                     ; ****************************************************************************************************************
     944/     609 :                     
     945/     609 :                     PrintAddressData:
     946/     609 : CE FF               		st 		@-1(p2) 										; save count, we don't restore this.
     947/     60B : C4 05               		ldi 	(PrintHexByte-1)/256 							; save and set up P3
     948/     60D : 37                  		xpah 	p3
     949/     60E : CE FF               		st 		@-1(p2)
     950/     610 : C4 68               		ldi 	(PrintHexByte-1)&255
     951/     612 : 33                  		xpal 	p3
     952/     613 : CE FF               		st 		@-1(p2)
     953/     615 : C4 0C               		ldi 	current / 256 									; point P1 to current address
     954/     617 : 35                  		xpah 	p1
     955/     618 : C4 19               		ldi 	current & 255
     956/     61A : 31                  		xpal 	p1
     957/     61B : C1 01               		ld 		1(p1) 											; read high byte of address
     958/     61D : 02                  		ccl
     959/     61E : 3F                  		xppc 	p3												; print w/o leading space
     960/     61F : C1 00               		ld 		0(p1)											; read low byte of address
     961/     621 : 02                  		ccl 	
     962/     622 : 3F                  		xppc 	p3 												; print w/o leading space.
     963/     623 : 01                  		xae 													; put in E
     964/     624 : C1 01               		ld 		1(p1) 											; high byte to P1.H
     965/     626 : 35                  		xpah 	p1
     966/     627 : 40                  		lde 													; low byte to P1.H
     967/     628 : 31                  		xpal 	p1
     968/     629 :                     _PADLoop:
     969/     629 : BA 02               		dld 	2(p2) 											; decrement counter
     970/     62B : 94 09               		jp 		_PADPrint 										; if +ve print another byte
     971/     62D :                     
     972/     62D : C6 01               		ld 		@1(p2) 											; restore P3, skipping A hence @2
     973/     62F : 33                  		xpal 	p3
     974/     630 : C6 02               		ld 		@2(p2)
     975/     632 : 37                  		xpah 	p3
     976/     633 : 3F                  		xppc 	p3
     977/     634 : 90 D3               		jmp 	PrintAddressData
     978/     636 :                     
     979/     636 :                     _PADPrint:
     980/     636 : C5 01               		ld 		@1(p1) 											; read byte advance pointer
     981/     638 : 03                  		scl
     982/     639 : 3F                  		xppc 	p3 												; print with space.
     983/     63A : 90 ED               		jmp 	_PADLoop
     984/     63C :                     
     985/     63C :                     ; ****************************************************************************************************************
     986/     63C :                     ;
     987/     63C :                     ;		Look at the parameter string for a parameter, processing @ and Pn as you go, CS if parameter found
     988/     63C :                     ; 		CC otherwise. Return parameter value in P1. Falls through
     989/     63C :                     ;
     990/     63C :                     ; ****************************************************************************************************************
     991/     63C :                     
     992/     63C :                     GetParameter:
     993/     63C : C4 0C               		ldi 	parPosn/256 									; current position into P1
     994/     63E : 35                  		xpah 	p1
     995/     63F : C4 1C               		ldi 	parPosn&255 					
     996/     641 : 31                  		xpal 	p1
     997/     642 : C4 00               		ldi 	0 												; -1(p2) is the low byte result
     998/     644 : CA FF               		st 		-1(p2) 											; -2(p2) is the high byte result
     999/     646 : CA FE               		st 		-2(p2)
    1000/     648 :                     
    1001/     648 : C1 00               		ld 		(p1) 											; read the current position,P1 points to character
    1002/     64A : 31                  		xpal 	p1 												; when we put it in P1.L
 AS V1.42 Beta [Bld 102] - source file monitor.asm - page 25 - 12/3/2015 9:31:18


    1003/     64B :                     
    1004/     64B :                     __GPASkip:														; skip over spaces to first alphanumeric.
    1005/     64B : C1 00               		ld 		(p1) 											; read character
    1006/     64D : 98 7B               		jz 		__GPAExitFail 									; if zero, then end of the input string.
    1007/     64F : C5 01               		ld 		@1(p1) 											; read it, advancing.
    1008/     651 : E4 20               		xri 	32 												; is it space ?
    1009/     653 : 98 F6               		jz 		__GPASkip 
    1010/     655 : E4 60               		xri 	32!'@'											; is it @ ?
    1011/     657 : 98 5E               		jz 		__GPAAtModifier 
    1012/     659 : E4 10               		xri 	'@'!'P' 										; is it P ?
    1013/     65B : 98 4C               		jz 		__GPAPointerModifier
    1014/     65D :                     
    1015/     65D :                     __GPANextCharacter:
    1016/     65D : C1 FF               		ld 		-1(p1) 											; get value back after post increment.
    1017/     65F : 02                  		ccl
    1018/     660 : F4 50               		adi 	128-48 											; this will be +ve if A < '0'
    1019/     662 : 94 66               		jp 		__GPAExitFail
    1020/     664 : FC 09               		cai 	9 												; will be +ve if A < '9', CY/L was clear.	
    1021/     666 : 94 0A               		jp 		__GPAFoundHex
    1022/     668 : FC 07               		cai 	7 												; will be +ve if A < 'A', CY/L was set
    1023/     66A : 94 5E               		jp 		__GPAExitFail
    1024/     66C : F4 79               		adi 	0xFF-0x85-1 									; will be +ve if A > 'F', CY/L was set.
    1025/     66E : 94 5A               		jp 		__GPAExitFail 					
    1026/     670 : F4 76               		adi 	(0x70-0xFA) & 0xFF 								; make the range as below, CY/L was clear
    1027/     672 :                     __GPAFoundHex: 													; enter here 0-9 = $76..$7F, A-F = $70..$75
    1028/     672 : 02                  		ccl  													; convert that to a hex nibble.
    1029/     673 : F4 0A               		adi 	10
    1030/     675 : D4 0F               		ani 	0xF
    1031/     677 : 01                  		xae 													; save in E, temporarily
    1032/     678 : C4 04               		ldi 	4 												; now shift the result 4 bits to the left.
    1033/     67A : CA FD               		st 		-3(p2) 											; -3(p2) is the counter
    1034/     67C :                     __GPAShift:
    1035/     67C : 02                  		ccl
    1036/     67D : C2 FF               		ld 		-1(p2) 											; shift 16 bit result 1 bit to the left.
    1037/     67F : F2 FF               		add 	-1(p2)
    1038/     681 : CA FF               		st 		-1(p2)
    1039/     683 : C2 FE               		ld 		-2(p2)
    1040/     685 : F2 FE               		add 	-2(p2)
    1041/     687 : CA FE               		st 		-2(p2)
    1042/     689 : BA FD               		dld 	-3(p2) 											; do it four times
    1043/     68B : 9C EF               		jnz 	__GPAShift 	
    1044/     68D : C2 FF               		ld 		-1(p2) 											; Or E into the LSB
    1045/     68F : 58                  		ore
    1046/     690 : CA FF               		st 		-1(p2)
    1047/     692 :                     
    1048/     692 : C5 01               		ld 		@1(p1) 											; look at next character, post incrementing.
    1049/     694 : 03                  		scl
    1050/     695 : FC 22               		cai 	34 												; if it is after space and ! (label marker)
    1051/     697 : 94 C4               		jp 		__GPANextCharacter 								; go back and put it in place.
    1052/     699 :                     
    1053/     699 : C5 FF               		ld 		@-1(p1) 										; undo the increment, incase we've just read zero.
    1054/     69B :                     
    1055/     69B : C4 1C               		ldi 	parPosn & 255 									; put the parPosn address in P1.L, new posn into A
    1056/     69D : 31                  		xpal 	p1
    1057/     69E : C9 00               		st 		(p1) 											; and write it back
    1058/     6A0 : C2 FF               		ld 		-1(p2) 											; put the result into P1
    1059/     6A2 : 31                  		xpal 	p1
    1060/     6A3 : C2 FE               		ld 		-2(p2)
    1061/     6A5 : 35                  		xpah 	p1
    1062/     6A6 : 03                  		scl 													; set CY/L to indicate okay
 AS V1.42 Beta [Bld 102] - source file monitor.asm - page 26 - 12/3/2015 9:31:18


    1063/     6A7 : 90 22               		jmp 	__GPAExit
    1064/     6A9 :                     
    1065/     6A9 :                     __GPAPointerModifier:
    1066/     6A9 : C1 00               		ld 		(p1) 											; read P<something> ?
    1067/     6AB : D4 FC               		ani 	0xFC 											; is it '0' .. '3'?
    1068/     6AD : E4 30               		xri 	'0'
    1069/     6AF : 9C 19               		jnz 	__GPAExitFail 									; it didn't work, not 0..3
    1070/     6B1 : C5 01               		ld 		@1(p1) 											; re-read it and advance
    1071/     6B3 : D4 03               		ani 	3												; lower 2 bits only
    1072/     6B5 : 90 02               		jmp 	__GPAAdjustModifier
    1073/     6B7 :                     __GPAAtModifier:
    1074/     6B7 : C4 04               		ldi 	4 												; set modifier adjustment to +4
    1075/     6B9 :                     __GPAAdjustModifier:
    1076/     6B9 : CA FD               		st 		-3(p2) 
    1077/     6BB : C4 1D               		ldi 	modifier & 255 									; point P1 to modifier, save current address in E
    1078/     6BD : 31                  		xpal 	p1
    1079/     6BE : 01                  		xae 
    1080/     6BF : C1 00               		ld 		(p1) 											; read modifier
    1081/     6C1 : 02                  		ccl
    1082/     6C2 : F2 FD               		add 	-3(p2) 											; add the modifying value to it.
    1083/     6C4 : C9 00               		st 		(p1) 											; write modifier.
    1084/     6C6 : 40                  		lde 													; restore current address to P1.L
    1085/     6C7 : 31                  		xpal 	p1
    1086/     6C8 : 90 81               		jmp 	__GPASkip 										; go back to skip over.
    1087/     6CA :                     
    1088/     6CA :                     __GPAExitFail:
    1089/     6CA : 02                  		ccl 													; carry clear, e.g. nothing read in / error.
    1090/     6CB :                     __GPAExit:
    1091/     6CB : 3F                  		xppc 	p3
    1092/     6CC :                     
    1093/     6CC :                     ; ****************************************************************************************************************
    1094/     6CC :                     ;
    1095/     6CC :                     ;		Store parameter value in P1 in the current address, if CS. Falls through.
    1096/     6CC :                     ;
    1097/     6CC :                     ; ****************************************************************************************************************
    1098/     6CC :                     
    1099/     6CC :                     UpdateCurrentAddress:
    1100/     6CC : 06                  		csa 													; get status reg
    1101/     6CD : 94 0C               		jp 		__UCAExit 										; if carry flag clear then exit.
    1102/     6CF :                     
    1103/     6CF : C4 19               		ldi 	current & 255 									; current address to P1.L, acquired address to E
    1104/     6D1 : 31                  		xpal 	p1
    1105/     6D2 : 01                  		xae
    1106/     6D3 : C4 0C               		ldi 	current / 256 									; current address to P1.H, acquired to A
    1107/     6D5 : 35                  		xpah 	p1
    1108/     6D6 : C9 01               		st 		1(p1) 											; store address back
    1109/     6D8 : 40                  		lde
    1110/     6D9 : C9 00               		st 		0(p1)
    1111/     6DB :                     __UCAExit:
    1112/     6DB : 3F                  		xppc 	p3
    1113/     6DC :                     
    1114/     6DC :                     ; ****************************************************************************************************************
    1115/     6DC :                     ;
    1116/     6DC :                     ;		Get current address into P1.
    1117/     6DC :                     ;
    1118/     6DC :                     ; ****************************************************************************************************************
    1119/     6DC :                     
    1120/     6DC :                     GetCurrentAddress:
    1121/     6DC : C4 0C               		ldi 	current/256 									; current address ptr in P1
    1122/     6DE : 35                  		xpah 	p1
 AS V1.42 Beta [Bld 102] - source file monitor.asm - page 27 - 12/3/2015 9:31:18


    1123/     6DF : C4 19               		ldi 	current&255
    1124/     6E1 : 31                  		xpal 	p1
    1125/     6E2 : C1 00               		ld 		0(p1) 											; low byte to E
    1126/     6E4 : 01                  		xae
    1127/     6E5 : C1 01               		ld 		1(p1) 											; high byte to A
    1128/     6E7 : 35                  		xpah 	p1 												; then to P1.H
    1129/     6E8 : 40                  		lde 													; low byte to P1.L
    1130/     6E9 : 31                  		xpal 	p1 
    1131/     6EA : 3F                  		xppc 	p3
    1132/     6EB :                     
    1133/     6EB :                     ; ****************************************************************************************************************
    1134/     6EB :                     ;
    1135/     6EB :                     ;											List of commands and Jump Table
    1136/     6EB :                     ;
    1137/     6EB :                     ; ****************************************************************************************************************
    1138/     6EB :                     
    1139/     6EB :                     		include commands.inc 									; must be at the end, so the command table is in
(1)    1/     747 :                             org 0x0747
(1)    2/     747 :                     ;
(1)    3/     747 :                     ; 	This file is generated automatically by gencommands.py
(1)    4/     747 :                     ;
(1)    5/     747 :                     __CommandList:
(1)    6/     747 : 94 21                       dw    0x2194 ; HLT
(1)    7/     749 : 00                          db    0x00
(1)    8/     74A : 25 60                       dw    0x6025 ; XAE
(1)    9/     74C : 01                          db    0x01
(1)   10/     74D : 6C 0C                       dw    0x0c6c ; CCL
(1)   11/     74F : 02                          db    0x02
(1)   12/     750 : 6C 4C                       dw    0x4c6c ; SCL
(1)   13/     752 : 03                          db    0x03
(1)   14/     753 : 2E 11                       dw    0x112e ; DIN
(1)   15/     755 : 04                          db    0x04
(1)   16/     756 : AE 24                       dw    0x24ae ; IEN
(1)   17/     758 : 05                          db    0x05
(1)   18/     759 : 61 0E                       dw    0x0e61 ; CSA
(1)   19/     75B : 06                          db    0x06
(1)   20/     75C : 33 0C                       dw    0x0c33 ; CAS
(1)   21/     75E : 07                          db    0x07
(1)   22/     75F : F0 39                       dw    0x39f0 ; NOP
(1)   23/     761 : 08                          db    0x08
(1)   24/     762 : 2F 4D                       dw    0x4d2f ; SIO
(1)   25/     764 : 19                          db    0x19
(1)   26/     765 : 72 02                       dw    0x0272 ; SR
(1)   27/     767 : 1C                          db    0x1c
(1)   28/     768 : 4C 4E                       dw    0x4e4c ; SRL
(1)   29/     76A : 1D                          db    0x1d
(1)   30/     76B : 52 02                       dw    0x0252 ; RR
(1)   31/     76D : 1E                          db    0x1e
(1)   32/     76E : 4C 4A                       dw    0x4a4c ; RRL
(1)   33/     770 : 1F                          db    0x1f
(1)   34/     771 : 0D 00                       dw    0x000d ; M
(1)   35/     773 : 20                          db    0x20
(1)   36/     774 : 01 00                       dw    0x0001 ; A
(1)   37/     776 : 21                          db    0x21
(1)   38/     777 : 07 00                       dw    0x0007 ; G
(1)   39/     779 : 22                          db    0x22
(1)   40/     77A : B4 42                       dw    0x42b4 ; PUT
(1)   41/     77C : 23                          db    0x23
(1)   42/     77D : B4 1C                       dw    0x1cb4 ; GET
(1)   43/     77F : 24                          db    0x24
 AS V1.42 Beta [Bld 102] - source file monitor.asm(commands.inc) - page 28 - 12/3/2015 9:31:18


(1)   44/     780 : 03 00                       dw    0x0003 ; C
(1)   45/     782 : 25                          db    0x25
(1)   46/     783 : 02 00                       dw    0x0002 ; B
(1)   47/     785 : 26                          db    0x26
(1)   48/     786 : 0C 00                       dw    0x000c ; L
(1)   49/     788 : 27                          db    0x27
(1)   50/     789 : 04 00                       dw    0x0004 ; D
(1)   51/     78B : 28                          db    0x28
(1)   52/     78C : 0C 62                       dw    0x620c ; XPL
(1)   53/     78E : 30                          db    0x30
(1)   54/     78F : 08 62                       dw    0x6208 ; XPH
(1)   55/     791 : 34                          db    0x34
(1)   56/     792 : 03 62                       dw    0x6203 ; XPC
(1)   57/     794 : 3C                          db    0x3c
(1)   58/     795 : 85 30                       dw    0x3085 ; LDE
(1)   59/     797 : 40                          db    0x40
(1)   60/     798 : C5 05                       dw    0x05c5 ; ANE
(1)   61/     79A : 50                          db    0x50
(1)   62/     79B : 45 3E                       dw    0x3e45 ; ORE
(1)   63/     79D : 58                          db    0x58
(1)   64/     79E : 45 62                       dw    0x6245 ; XRE
(1)   65/     7A0 : 60                          db    0x60
(1)   66/     7A1 : 25 10                       dw    0x1025 ; DAE
(1)   67/     7A3 : 68                          db    0x68
(1)   68/     7A4 : 85 04                       dw    0x0485 ; ADE
(1)   69/     7A6 : 70                          db    0x70
(1)   70/     7A7 : 25 0C                       dw    0x0c25 ; CAE
(1)   71/     7A9 : 78                          db    0x78
(1)   72/     7AA : 99 11                       dw    0x1199 ; DLY
(1)   73/     7AC : 8F                          db    0x8f
(1)   74/     7AD : B0 29                       dw    0x29b0 ; JMP
(1)   75/     7AF : 90                          db    0x90
(1)   76/     7B0 : 50 01                       dw    0x0150 ; JP
(1)   77/     7B2 : 94                          db    0x94
(1)   78/     7B3 : 5A 01                       dw    0x015a ; JZ
(1)   79/     7B5 : 98                          db    0x98
(1)   80/     7B6 : DA 29                       dw    0x29da ; JNZ
(1)   81/     7B8 : 9C                          db    0x9c
(1)   82/     7B9 : 84 25                       dw    0x2584 ; ILD
(1)   83/     7BB : A8                          db    0xa8
(1)   84/     7BC : 84 11                       dw    0x1184 ; DLD
(1)   85/     7BE : B8                          db    0xb8
(1)   86/     7BF : 84 01                       dw    0x0184 ; LD
(1)   87/     7C1 : C0                          db    0xc0
(1)   88/     7C2 : 89 30                       dw    0x3089 ; LDI
(1)   89/     7C4 : C4                          db    0xc4
(1)   90/     7C5 : 74 02                       dw    0x0274 ; ST
(1)   91/     7C7 : C8                          db    0xc8
(1)   92/     7C8 : C4 05                       dw    0x05c4 ; AND
(1)   93/     7CA : D0                          db    0xd0
(1)   94/     7CB : C9 05                       dw    0x05c9 ; ANI
(1)   95/     7CD : D4                          db    0xd4
(1)   96/     7CE : F2 01                       dw    0x01f2 ; OR
(1)   97/     7D0 : D8                          db    0xd8
(1)   98/     7D1 : 49 3E                       dw    0x3e49 ; ORI
(1)   99/     7D3 : DC                          db    0xdc
(1)  100/     7D4 : F2 61                       dw    0x61f2 ; XOR
(1)  101/     7D6 : E0                          db    0xe0
(1)  102/     7D7 : 49 62                       dw    0x6249 ; XRI
(1)  103/     7D9 : E4                          db    0xe4
 AS V1.42 Beta [Bld 102] - source file monitor.asm(commands.inc) - page 29 - 12/3/2015 9:31:18


(1)  104/     7DA : 24 10                       dw    0x1024 ; DAD
(1)  105/     7DC : E8                          db    0xe8
(1)  106/     7DD : 29 10                       dw    0x1029 ; DAI
(1)  107/     7DF : EC                          db    0xec
(1)  108/     7E0 : 84 04                       dw    0x0484 ; ADD
(1)  109/     7E2 : F0                          db    0xf0
(1)  110/     7E3 : 89 04                       dw    0x0489 ; ADI
(1)  111/     7E5 : F4                          db    0xf4
(1)  112/     7E6 : 24 0C                       dw    0x0c24 ; CAD
(1)  113/     7E8 : F8                          db    0xf8
(1)  114/     7E9 : 29 0C                       dw    0x0c29 ; CAI
(1)  115/     7EB : FC                          db    0xfc
(1)  116/     7EC :                     __CommandListEnd:
(1)  117/     7EC : 00 00                       dw    0x0000 ; End Marker	
(1)  118/     7EE :                     
(1)  119/     7EE :                     __CommandTable:
(1)  120/     7EE : 50 04                       dw    MemoryDump_Command
(1)  121/     7F0 : 99 03                       dw    Address_Command
(1)  122/     7F2 : AC 03                       dw    Go_Command
(1)  123/     7F4 : B9 03                       dw    PutTape_Command
(1)  124/     7F6 : 0A 04                       dw    LoadTape_Command
(1)  125/     7F8 : E0 01                       dw    ClearScreen_Command
(1)  126/     7FA : 7A 04                       dw    EnterBytes_Command
(1)  127/     7FC : 32 04                       dw    Label_Command
(1)  128/     7FE : 9C 04                       dw    Disassemble_Command
(1)  129/     800 :                     
    1140/     800 :                     																; the same page.
    1141/     800 :                     
    1142/     800 :                     ; ****************************************************************************************************************
    1143/     800 :                     ;
    1144/     800 :                     ;													Tape Format. 
    1145/     800 :                     ;
    1146/     800 :                     ; ****************************************************************************************************************
    1147/     800 :                     ;
    1148/     800 :                     ;		1 x start bit 		'1' value is held for period of time.
    1149/     800 :                     ;		8 x data bits  		'0 or 1' value is held for a period of time.
    1150/     800 :                     ;		1 x continuation	'0' if another bit follows, '1' if end.
    1151/     800 :                     ;		at least 2 bit times between bytes.
    1152/     800 :                     ;
    1153/     800 :                     ;		Use DLY 4 with A = 0 (DLY 6 to skip half-start)
    1154/     800 :                     ; 		= 13 + 2 * 0 + 514 * 4 microcycles
    1155/     800 :                     ;		= 2,069 microcycles
    1156/     800 :                     ;	
    1157/     800 :                     ;		which is about 240 bits per second.
    1158/     800 :                     ;
    1159/     800 :                     ; ****************************************************************************************************************
    1160/     800 :                     ;
    1161/     800 :                     ;												Monitor Commands
    1162/     800 :                     ;
    1163/     800 :                     ; ****************************************************************************************************************
    1164/     800 :                     ;
    1165/     800 :                     ;		A [aaaa] 			Set current address to aaaa
    1166/     800 :                     ;		B [cc] [dd] [ee]..	Fill memory from current address
    1167/     800 :                     ; 		C 					Clear screen
    1168/     800 :                     ;		D [aaaa] 			Disassemble from aaaa
    1169/     800 :                     ;		G aaaa 				Run from address - address must be given - return with XPPC P3
    1170/     800 :                     ; 		L n 				Set label n to the current address (up to 32 labels 00-1F)
    1171/     800 :                     ; 		M [aaaa] 			Memory dump from current address/aaaa (6 lines, 4 bytes per line)
    1172/     800 :                     ; 		GET [aaaa] 			Load tape to current address/aaa
    1173/     800 :                     ;		PUT [nnnn]			Write nnnn bytes from current address onwards to tape.
 AS V1.42 Beta [Bld 102] - source file monitor.asm - page 30 - 12/3/2015 9:31:18


    1174/     800 :                     ;
    1175/     800 :                     ;		Command Line Assembler
    1176/     800 :                     ;
    1177/     800 :                     ;		Standard SC/MP mnemonics, except for XPAH, XPAL, XPPC, HALT and DINT which are XPH XPL XPC HLT DIN
    1178/     800 :                     ;		respectively (4 character mnemonics not supported)
    1179/     800 :                     ;
    1180/     800 :                     ;		Address modes are written as such:
    1181/     800 :                     ;
    1182/     800 :                     ;		Direct:			LD 	address 					(offset auto calculated, also for jump)
    1183/     800 :                     ;		Indexed:		LD  P1 7 						(normally ld 7(p1))
    1184/     800 :                     ;		Immediate:		DLY 42 					
    1185/     800 :                     ;		AutoIndexed:	LD @P1 4 						(normally ld @4(p1))
    1186/     800 :                     ;
    1187/     800 :                     ;		Labels are accessed via the pling, so to jump to label 4 rather than address 4 you write
    1188/     800 :                     ;
    1189/     800 :                     ;		JMP 4!
    1190/     800 :                     ;
    1191/     800 :                     ;		Documentation of the Mathematics functions are in the included file maths.asm
    1192/     800 :                     ;
    1193/     800 :                     ; ****************************************************************************************************************
    1194/     800 :                     
 AS V1.42 Beta [Bld 102] - source file monitor.asm - page 31 - 12/3/2015 9:31:18


  symbol table (* = unused):
  ------------------------

 ADDRESS_COMMAND :              399 C |  AHI [SCMPMULTIPLY] :             3 - |
 ALO [SCMPMULTIPLY] :             2 - | *ARCHITECTURE :  i386-unknown-win32 - |
 BHI [SCMPMULTIPLY] :             1 - | *BIGENDIAN :                      0 - |
 BITHI [SCMPDIVIDE] :                                      FFFFFFFFFFFFFFFF - |
 BITLO [SCMPDIVIDE] :                                      FFFFFFFFFFFFFFFE - |
 BLO [SCMPMULTIPLY] :             0 - |  BOOTMONITOR :                  1C6 C |
*BRANCHEXT :                      0 - | *CASESENSITIVE :                  0 - |
 CLEARSCREENLOOP :              1E5 C |  CLEARSCREEN_COMMAND :          1E0 C |
 CODESTART :                    C2E - |  COMMANDMAINLOOP :              248 C |
*CONSTPI :        3.141592653589793 - |  CURRENT :                      C19 - |
 CURSOR :                       C18 - | *DATE :                   12/3/2015 - |
 DENOMINATORHI [SCMPDIVIDE] :     1 - |  DENOMINATORLO [SCMPDIVIDE] :     0 - |
 DIGITCOUNT [SCMPTOINTEGER] :                              FFFFFFFFFFFFFFFF - |
 DISASSEMBLE_COMMAND :          49C C |  ENTERBYTES_COMMAND :           47A C |
 ETEMP [SCMPDIVIDE] :                                      FFFFFFFFFFFFFFF8 - |
 EXTRACT5BIT :                  2B3 C | *FALSE :                          0 - |
 FINDTOPMEMORY :                1D8 C | *FULLPMMU :                       1 - |
*GETCURRENTADDRESS :            6DC C |  GETPARAMETER :                 63C C |
 GOBOOT :                         5 C |  GO_COMMAND :                   3AC C |
*HAS64 :                          1 - | *HASDSP :                         0 - |
*HASFPU :                         0 - | *HASPMMU :                        0 - |
*INEXTMODE :                      0 - |  INITIALBEEP :                  23B C |
*INLWORDMODE :                    0 - | *INMAXMODE :                      0 - |
*INSRCMODE :                      0 - | *INSUPMODE :                      0 - |
 ISINIT :                       C1B - |  KBDBUFFER :                    C1E - |
 KBDBUFFERLN :                   10 - |  KEYBOARDLOOP :                 25D C |
 LABELCOUNT :                    18 - |  LABELS :                       C00 - |
 LABEL_COMMAND :                432 C | *LISTON :                         1 - |
 LOADTAPE_COMMAND :             40A C | *MACEXP :                         1 - |
 MATHS :                          C C |  MATH_ADD :                      2A C |
 MATH_DIVIDE :                   FA C |  MATH_DIVIDE2 :                  92 C |
 MATH_DIVIDEBYZERO :             F7 C | *MATH_ERROR :                    26 C |
 MATH_EXIT :                     27 C |  MATH_EXIT1 :                    90 C |
 MATH_EXIT3 :                    F5 C |  MATH_MULTIPLY :                 4C C |
 MATH_SUBTRACT :                 3A C |  MATH_TOINTEGER :                94 C |
 MEMORYDUMP_COMMAND :           450 C |  MESSAGE :                      21C C |
 MESSAGELOOP :                  215 C |  MODIFIER :                     C1D - |
*MOMCPU :                         C - | *MOMCPUNAME :                 SC/MP - |
*NESTMAX :                      100 - |  NUMERATORHI [SCMPDIVIDE] :       3 - |
 NUMERATORLO [SCMPDIVIDE] :       2 - | *PACKING :                        0 - |
*PADDING :                        1 - |  PARPOSN :                      C1C - |
 PRINTADDRESSDATA :             609 C |  PRINTCHARACTER :               59C C |
 PRINTHEXBYTE :                 569 C |  PUTTAPE_COMMAND :              3B9 C |
 QUOTIENTHI [SCMPDIVIDE] :                                 FFFFFFFFFFFFFFFD - |
 QUOTIENTLO [SCMPDIVIDE] :                                 FFFFFFFFFFFFFFFC - |
*RELAXED :                        0 - |
 REMAINDERHI [SCMPDIVIDE] :                                FFFFFFFFFFFFFFFB - |
 REMAINDERLO [SCMPDIVIDE] :                                FFFFFFFFFFFFFFFA - |
 RESULTHI [SCMPMULTIPLY] :                                 FFFFFFFFFFFFFFFF - |
 RESULTHI [SCMPTOINTEGER] :                                FFFFFFFFFFFFFFFE - |
 RESULTLO [SCMPMULTIPLY] :                                 FFFFFFFFFFFFFFFE - |
 RESULTLO [SCMPTOINTEGER] :                                FFFFFFFFFFFFFFFD - |
 SHIFTCOUNT [SCMPTOINTEGER] :                              FFFFFFFFFFFFFFFC - |
 SIGNCOUNT [SCMPDIVIDE] :                                  FFFFFFFFFFFFFFF9 - |
 TAPEDELAY :                      4 - |
 TEMPHI [SCMPTOINTEGER] :                                  FFFFFFFFFFFFFFFB - |
 TEMPHI [SCMPDIVIDE] :                                     FFFFFFFFFFFFFFF7 - |
 AS V1.42 Beta [Bld 102] - source file monitor.asm - page 32 - 12/3/2015 9:31:18


 TEMPLO [SCMPTOINTEGER] :                                  FFFFFFFFFFFFFFFA - |
*TIME :                     9:31:18 - |  TOINT_END [SCMPTOINTEGER] :     E7 C |
 TOINT_LOOP [SCMPTOINTEGER] :    9C C |  TOINT_NOADD [SCMPTOINTEGER] :   D3 C |
 TOINT_SHIFT [SCMPTOINTEGER] :   B5 C | *TRUE :                           1 - |
*UPDATECURRENTADDRESS :         6CC C |  VARBASE :                      C18 - |
*VERSION :                     142F - |  _KBDWAITKEY :                  266 C |
 _KBDWAITRELEASE :              260 C |  _PADLOOP :                     629 C |
 _PADPRINT :                    636 C |  _PUTTAPEBIT :                  3E9 C |
 _PUTTAPEBYTE :                 3D4 C |  _PUTTAPELEADER :               3CE C |
 __ASMCONTINUE :                357 C |  __ASMEXIT :                    38F C |
 __ASMNOPARAMETER :             34F C |  __ASSEMBLER :                  320 C |
 __BOOTMONITOR :                1D0 C |  __CMDMAINLOOP1 :               2A4 C |
 __CMDMAINLOOP2 :               3A5 C |  __CMDMAINLOOP3 :               3B7 C |
 __CMDMAINLOOP4 :               406 C |  __CMDMAINLOOP5 :               430 C |
 __CMDMAINLOOP6 :               478 C |  __CMDMAINLOOP7 :               4E4 C |
 __CMDPARAMETERFAIL :           39D C |  __CMDPARAMETERFAIL1 :          408 C |
 __COMMANDERROR :               316 C |  __COMMANDLIST :                747 C |
 __COMMANDLISTEND :             7EC C |  __COMMANDTABLE :               7EE C |
 __DASSFINDOPCODE :             4CB C |  __DASSFOUNDOPCODE :            4E6 C |
 __DASSLOOP :                   4A2 C |  __DASSLOOP2 :                  4E2 C |
 __DASSNEXT :                   540 C |  __DASSNEXTOPCODE :             4DE C |
 __DASSNOOPERAND :              4C1 C |  __DASSNOTAUTOINDEXED :         55D C |
 __DASSNOTIMMEDIATE :           4F2 C |  __DASSPRINTMNEMONIC :          507 C |
 __DASSPRINTMODIFIER :          551 C |  __DASSPRINTOPERAND :           532 C |
 __DASSSHIFTENCODE :            517 C |  __DASSSKIPSPACE :              513 C |
 __DCLOOP :                     456 C |
 __DIVIDECOMPLETE [SCMPDIVIDE] : 199 C |
 __DIVIDECONTINUE [SCMPDIVIDE] : 16C C |
 __DIVIDEEXIT [SCMPDIVIDE] :    186 C |  __DIVIDELOOP [SCMPDIVIDE] :    13E C |
 __DIVIDENOINCREMAINDER [SCMPDIVIDE] :                                  15B C |
 __DIVIDENOTSIGNED [SCMPDIVIDE] :                                       134 C |
 __DIVIDEREMAINDERGREATER [SCMPDIVIDE] :                                1B1 C |
 __DIVIDEUNSIGNLOOP [SCMPDIVIDE] :                                      11C C |
 __EX5SHIFT :                   2BE C |  __EXTRACTEND :                 2D4 C |
 __FINDCOMMANDLOOP :            2DF C |  __GETTAPEBITS :                420 C |
 __GETTAPEWAIT :                410 C |  __GPAADJUSTMODIFIER :          6B9 C |
 __GPAATMODIFIER :              6B7 C |  __GPAEXIT :                    6CB C |
 __GPAEXITFAIL :                6CA C |  __GPAFOUNDHEX :                672 C |
 __GPANEXTCHARACTER :           65D C |  __GPAPOINTERMODIFIER :         6A9 C |
 __GPASHIFT :                   67C C |  __GPASKIP :                    64B C |
 __KBDBACKSPACE :               298 C |  __KBDEXIT :                    2A6 C |
 __KBDNOTLOWER :                28C C |  __MATH_EXIT2 [SCMPDIVIDE] :    13C C |
 __MULTIPLYEXIT [SCMPMULTIPLY] : 85 C |  __MULTIPLYLOOP [SCMPMULTIPLY] : 52 C |
 __MULTIPLYNOADD [SCMPMULTIPLY] : 6B C |
 __PCBACKSPACE :                5F1 C |  __PCBLANKNEWLINE :             5CD C |
 __PCBLANKNEWLINELOOP :         5D1 C |  __PCEXIT :                     5D9 C |
 __PCNEWLINE :                  5FD C |  __PHBNOSPACE :                 57B C |
 __UCAEXIT :                    6DB C |

    182 symbols
     31 unused symbols

 AS V1.42 Beta [Bld 102] - source file monitor.asm - page 33 - 12/3/2015 9:31:18


  defined macros:
  ---------------

SHIFTLEFT                             | SHIFTRIGHT                           

      2 macros

 AS V1.42 Beta [Bld 102] - source file monitor.asm - page 34 - 12/3/2015 9:31:18


  codepages:
  ----------

STANDARD (0 changed characters)


0.01 seconds assembly time

   1715 lines source file
   1757 lines incl. macro expansions
      2 passes
      0 errors
      0 warnings
