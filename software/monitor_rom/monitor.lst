 AS V1.42 Beta [Bld 102] - source file monitor.asm - page 1 - 11/30/2015 16:45:30


       1/       0 :                     ; ******************************************************************************************************************
       2/       0 :                     ; ******************************************************************************************************************
       3/       0 :                     ; ******************************************************************************************************************
       4/       0 :                     ;
       5/       0 :                     ;												Machine Language Monitor
       6/       0 :                     ;
       7/       0 :                     ; ******************************************************************************************************************
       8/       0 :                     ; ******************************************************************************************************************
       9/       0 :                     ; ******************************************************************************************************************
      10/       0 :                     
      11/       0 :                     ; TODO: 
      12/       0 :                     ; 		16 bit maths routines.
      13/       0 :                     ; 		Decode addresses on disassembler (?)
      14/       0 :                     ; 		Print message on first clear screen (?)
      15/       0 :                     
      16/       0 :                     		cpu	sc/mp
      17/       0 :                     
      18/       0 : =0xC00              labels 		= 0xC00												; labels, 1 byte each
      19/       0 : =0x20               labelCount 	= 32 												; number of labels (perhaps a bit generous ?)
      20/       0 :                     
      21/       0 : =0xC20              varBase 	= labels+labelCount 								; variables after labels start here.
      22/       0 :                     
      23/       0 : =0xC20              cursor 		= varBase 											; cursor position
      24/       0 : =0xC21              current 	= varBase+1 										; current address (lo,hi)
      25/       0 : =0xC23              parPosn		= varBase+3 										; current param offset in buffer (low addr)
      26/       0 : =0xC24              modifier  	= varBase+4 										; instruction modifier (@,Pn)
      27/       0 : =0xC25              kbdBuffer 	= varBase+5 										; 16 character keyboard buffer
      28/       0 : =0x10               kbdBufferLn = 16 										
      29/       0 :                     
      30/       0 : =0xC35              codeStart 	= kbdBuffer+kbdBufferLn								; code starts here.
      31/       0 :                     
      32/       0 : =0x4                tapeDelay 	= 4 												; DLY parameter for 1 tape bit width.
      33/       0 :                     																; (smaller = faster tape I/O - see file end.)
      34/       0 :                     
      35/       0 :                     		org 	0x0000
      36/       0 : 08                  		nop
      37/       1 :                     
      38/       1 :                     		include maths.asm 										; import the maths routines.
(1)    1/       1 :                     ; ******************************************************************************************************************
(1)    2/       1 :                     ; ******************************************************************************************************************
(1)    3/       1 :                     ;
(1)    4/       1 :                     ;										16 bit Arithmetic routines
(1)    5/       1 :                     ;
(1)    6/       1 :                     ; ******************************************************************************************************************
(1)    7/       1 :                     ; ******************************************************************************************************************
(1)    8/       1 :                     
(1)    9/       1 :                     ;
(1)   10/       1 :                     ;	Priority order : * / + - anything else VTL-2 might use ASCII -> int int -> ASCII
(1)   11/       1 :                     ;
(1)   12/       1 :                     ;	jmp	 	GoBoot 												; this will be at location 1.
(1)   13/       1 : 90 07               	jmp 	Maths 												; maths routine, at location 3.
(1)   14/       3 :                     	; any other routines you care to call.
(1)   15/       3 :                     
(1)   16/       3 :                     GoBoot:
(1)   17/       3 : C4 98               	ldi 	(BootMonitor-1) & 255 								; jump to Boot Monitor
(1)   18/       5 : 33                  	xpal 	p3
(1)   19/       6 : C4 00               	ldi 	(BootMonitor-1) / 256
(1)   20/       8 : 37                  	xpah 	p3
(1)   21/       9 : 3F                  	xppc 	p3
(1)   22/       A :                     
 AS V1.42 Beta [Bld 102] - source file monitor.asm(maths.asm) - page 2 - 11/30/2015 16:45:30


(1)   23/       A :                     ; ******************************************************************************************************************
(1)   24/       A :                     ;
(1)   25/       A :                     ;		Maths routines : the (P2) stack functions as a number stack.  So to push $1234 on the stack you do
(1)   26/       A :                     ;
(1)   27/       A :                     ;		ld 	#$12
(1)   28/       A :                     ;		st 	@-1(p2) 					1(p2) is the MSB of TOS
(1)   29/       A :                     ;		ld 	#$34
(1)   30/       A :                     ;		st 	@-1(p2) 					0(p2) is the LSB of TOS
(1)   31/       A :                     ;
(1)   32/       A :                     ;		on entry, A is the function (+,-,*,/ etc.). P2 should be left in the 'correct' state afterwards,
(1)   33/       A :                     ;		so if you add two numbers then p2 will be 2 higher than when the routine was entered.
(1)   34/       A :                     ;
(1)   35/       A :                     ; ******************************************************************************************************************
(1)   36/       A :                     
(1)   37/       A : =0x200              n1 = 512
(1)   38/       A : =0x10               n2 = 16
(1)   39/       A :                     
(1)   40/       A :                     Maths:															; maths support routine.
(1)   41/       A : C4 0C               	ldi 	0xC
(1)   42/       C : 36                  	xpah 	p2
(1)   43/       D : C4 2F               	ldi 	0x2F
(1)   44/       F : 32                  	xpal 	p2
(1)   45/      10 :                     
(1)   46/      10 : C4 00               	ldi 	n2 / 256
(1)   47/      12 : CE FF               	st 		@-1(p2)
(1)   48/      14 : C4 10               	ldi 	n2 & 255
(1)   49/      16 : CE FF               	st 		@-1(p2)
(1)   50/      18 :                     
(1)   51/      18 : C4 02               	ldi 	n1 / 256
(1)   52/      1A : CE FF               	st 		@-1(p2)
(1)   53/      1C : C4 00               	ldi 	n1 & 255
(1)   54/      1E : CE FF               	st 		@-1(p2)
(1)   55/      20 :                     	
(1)   56/      20 : C4 2A               	ldi 	'*'
(1)   57/      22 :                     
(1)   58/      22 : E4 2B               	xri 	'+'
(1)   59/      24 : 98 0E               	jz 		MATH_Add
(1)   60/      26 : E4 06               	xri 	'+'!'-'
(1)   61/      28 : 98 19               	jz 		MATH_Subtract
(1)   62/      2A : E4 07               	xri 	'-'!'*'
(1)   63/      2C : 98 24               	jz 		MATH_Multiply
(1)   64/      2E : E4 05               	xri 	'*'!'/'
(1)   65/      30 : 98 65               	jz 		MATH_Divide
(1)   66/      32 :                     
(1)   67/      32 :                     MATH_Exit:
(1)   68/      32 : 90 FE               	jmp  	MATH_Exit
(1)   69/      34 :                     
(1)   70/      34 :                     ; ******************************************************************************************************************
(1)   71/      34 :                     ;														16 Bit Add
(1)   72/      34 :                     ; ******************************************************************************************************************
(1)   73/      34 :                     
(1)   74/      34 :                     MATH_Add:
(1)   75/      34 : 02                  	ccl 										
(1)   76/      35 : C6 01               	ld 		@1(p2) 												; read LSB of TOS and unstack
(1)   77/      37 : F2 01               	add 	1(p2)
(1)   78/      39 : CA 01               	st 		1(p2)
(1)   79/      3B : C6 01               	ld 		@1(p2) 												; read MSB of TOS and unstack
(1)   80/      3D : F2 01               	add 	1(p2)
(1)   81/      3F : CA 01               	st 		1(p2)
(1)   82/      41 : 90 EF               	jmp 	MATH_Exit
 AS V1.42 Beta [Bld 102] - source file monitor.asm(maths.asm) - page 3 - 11/30/2015 16:45:30


(1)   83/      43 :                     
(1)   84/      43 :                     ; ******************************************************************************************************************
(1)   85/      43 :                     ;													16 Bit Subtract
(1)   86/      43 :                     ; ******************************************************************************************************************
(1)   87/      43 :                     
(1)   88/      43 :                     MATH_Subtract:
(1)   89/      43 : 03                  	scl 										
(1)   90/      44 : C6 01               	ld 		@1(p2) 												; read LSB of TOS and unstack
(1)   91/      46 : FA 01               	cad 	1(p2)
(1)   92/      48 : CA 01               	st 		1(p2)
(1)   93/      4A : C6 01               	ld 		@1(p2) 												; read MSB of TOS and unstack
(1)   94/      4C : FA 01               	cad 	1(p2)
(1)   95/      4E : CA 01               	st 		1(p2)
(1)   96/      50 : 90 E0               	jmp 	MATH_Exit
(1)   97/      52 :                     
(1)   98/      52 :                     ; ******************************************************************************************************************
(1)   99/      52 :                     ;												16 bit signed multiply
(1)  100/      52 :                     ; ******************************************************************************************************************
(1)  101/      52 :                     
(1)  102/      52 :                     MATH_Multiply:
(1)  103/      52 :                     
(1)  104/      52 :                     	section SCMPMultiply
(1)  105/      52 :                     
(1)  106/      52 : =0x3                aHi = 3 														; allocated values for A,B and Result.
(1)  107/      52 : =0x2                aLo = 2 														; (see arithmetic.py)
(1)  108/      52 : =0x1                bHi = 1
(1)  109/      52 : =0x0                bLo = 0
(1)  110/      52 : =0xFFFFFFFFF..      resultHi = -1
(1)  111/      52 : =0xFFFFFFFFF..      resultLo = -2
(1)  112/      52 :                     
(1)  113/      52 : C4 00               	ldi 	0 													; clear result
(1)  114/      54 : CA FF               	st 		resultHi(p2)
(1)  115/      56 : CA FE               	st 		resultLo(p2)
(1)  116/      58 :                     __MultiplyLoop:
(1)  117/      58 : C2 01               	ld 		bHi(p2) 											; if b is zero then exit
(1)  118/      5A : DA 00               	or 		bLo(p2)
(1)  119/      5C : 98 2D               	jz 		__MultiplyExit
(1)  120/      5E : C2 00               	ld 		bLo(p2) 											; if b bit 0 is set.
(1)  121/      60 : D4 01               	ani 	1
(1)  122/      62 : 98 0D               	jz 		__MultiplyNoAdd
(1)  123/      64 : 02                  	ccl 														; add a to the result
(1)  124/      65 : C2 FE               	ld 		resultLo(p2)
(1)  125/      67 : F2 02               	add 	aLo(p2)
(1)  126/      69 : CA FE               	st 		resultLo(p2)
(1)  127/      6B : C2 FF               	ld 		resultHi(p2)
(1)  128/      6D : F2 03               	add 	aHi(p2)
(1)  129/      6F : CA FF               	st 		resultHi(p2)
(1)  130/      71 :                     __MultiplyNoAdd:
(1)  131/      71 : 02                  	ccl 														; shift a left one.
(1)  132/      72 : C2 02               	ld 		aLo(p2)
(1)  133/      74 : F2 02               	add 	aLo(p2)
(1)  134/      76 : CA 02               	st 		aLo(p2)
(1)  135/      78 : C2 03               	ld 		aHi(p2)
(1)  136/      7A : F2 03               	add 	aHi(p2)
(1)  137/      7C : CA 03               	st 		aHi(p2)		
(1)  138/      7E :                     
(1)  139/      7E : 02                  	ccl 														; shift b right one.
(1)  140/      7F : C2 01               	ld 		bHi(p2)
(1)  141/      81 : 1F                  	rrl 
(1)  142/      82 : CA 01               	st 		bHi(p2)
 AS V1.42 Beta [Bld 102] - source file monitor.asm(maths.asm) - page 4 - 11/30/2015 16:45:30


(1)  143/      84 : C2 00               	ld 		bLo(p2)
(1)  144/      86 : 1F                  	rrl 
(1)  145/      87 : CA 00               	st 		bLo(p2)
(1)  146/      89 : 90 CD               	jmp 	__MultiplyLoop
(1)  147/      8B :                     
(1)  148/      8B :                     __MultiplyExit:
(1)  149/      8B : C2 FE               	ld 		resultLo(p2) 										; copy result lo to what will be new TOS
(1)  150/      8D : CA 02               	st 		2(p2)
(1)  151/      8F : C2 FF               	ld 		resultHi(p2)
(1)  152/      91 : CA 03               	st 		3(p2)
(1)  153/      93 : C6 02               	ld 		@2(p2) 												; fix up the number stack.
(1)  154/      95 :                     	endsection SCMPMultiply
(1)  155/      95 :                     
(1)  156/      95 :                     MATH_Exit1:
(1)  157/      95 : 90 9B               	jmp 	MATH_Exit
(1)  158/      97 :                     
(1)  159/      97 :                     
(1)  160/      97 :                     ; ******************************************************************************************************************
(1)  161/      97 :                     ;											16 bit signed divide
(1)  162/      97 :                     ; ******************************************************************************************************************
(1)  163/      97 :                     
(1)  164/      97 :                     MATH_Divide:
(1)  165/      97 :                     
(1)  166/      97 :                     	section 	SCMPDivide
(1)  167/      97 :                     
(1)  168/      97 :                     
(1)  169/      97 : 90 99               	jmp 	MATH_Exit
(1)  170/      99 :                     	endsection	SCMPDivide
(1)  171/      99 :                     
      39/      99 :                     
      40/      99 :                     ; ******************************************************************************************************************
      41/      99 :                     ;
      42/      99 :                     ;									Find Top of Memory to initialise the stack.
      43/      99 :                     ;
      44/      99 :                     ; ******************************************************************************************************************
      45/      99 :                     
      46/      99 :                     BootMonitor:
      47/      99 : C4 0F               		ldi 	0x0F 											; point P2 to theoretical top of RAM on basic m/c
      48/      9B : 36                  		xpah 	p2 												; e.g. 0xFFF
      49/      9C : C4 FF               		ldi 	0xFF 											; ideally you'd make this 0x003F and remove the ld
      50/      9E : 32                  		xpal 	p2 												; but the emulators don't do 4+12 math. Only matters here.
      51/      9F : C6 40               		ld 		@64(p2) 										; fix the predecrement (wrap around not emulated)
      52/      A1 :                     FindTopMemory:
      53/      A1 : C4 A5               		ldi 	0xA5 											; try to write this to memory
      54/      A3 : CE C0               		st 		@-64(p2) 										; predecrementing by 64.
      55/      A5 : E2 00               		xor 	(p2) 											; did it write correctly.
      56/      A7 : 9C F8               		jnz 	FindTopMemory 									; now P2 points to top of memory.
      57/      A9 :                     
      58/      A9 :                     ; ******************************************************************************************************************
      59/      A9 :                     ;
      60/      A9 :                     ;									Reset cursor position and current address.
      61/      A9 :                     ;
      62/      A9 :                     ; ******************************************************************************************************************
      63/      A9 :                     
      64/      A9 : C4 0C               		ldi 	Current/256 									; set P1 to current address
      65/      AB : 35                  		xpah 	p1
      66/      AC : C4 21               		ldi 	Current&255
      67/      AE : 31                  		xpal 	p1
      68/      AF : C4 35               		ldi 	codeStart & 255 								; reset current address to code start
      69/      B1 : CD 01               		st 		@1(p1)
 AS V1.42 Beta [Bld 102] - source file monitor.asm - page 5 - 11/30/2015 16:45:30


      70/      B3 : C4 0C               		ldi 	codeStart / 256
      71/      B5 : CD 00               		st 		@(p1)
      72/      B7 :                     
      73/      B7 :                     ; ******************************************************************************************************************
      74/      B7 :                     ;
      75/      B7 :                     ;												Clear the screen
      76/      B7 :                     ;
      77/      B7 :                     ; ******************************************************************************************************************
      78/      B7 :                     
      79/      B7 :                     ClearScreen_Command:
      80/      B7 : C4 00               		ldi 	0
      81/      B9 : 35                  		xpah 	p1
      82/      BA : C4 00               		ldi 	0
      83/      BC :                     ClearScreenLoop:
      84/      BC : 31                  		xpal 	p1												; clear screen
      85/      BD : C4 20               		ldi 	' '
      86/      BF : CD 01               		st 		@1(p1)
      87/      C1 : 31                  		xpal 	p1
      88/      C2 : 94 F8               		jp 		ClearScreenLoop
      89/      C4 : C4 0C               		ldi 	Cursor/256 										; reset the cursor position to TOS
      90/      C6 : 35                  		xpah 	p1
      91/      C7 : C4 20               		ldi 	Cursor&255
      92/      C9 : 31                  		xpal 	p1 
      93/      CA : C4 00               		ldi 	0
      94/      CC : C9 00               		st 		0(p1)											
      95/      CE :                     
      96/      CE :                     ; ****************************************************************************************************************
      97/      CE :                     ;
      98/      CE :                     ;													Main Loop
      99/      CE :                     ;
     100/      CE :                     ; ****************************************************************************************************************
     101/      CE :                     
     102/      CE :                     CommandMainLoop:
     103/      CE : C4 04               		ldi 	(PrintAddressData-1)/256						; print Address only
     104/      D0 : 37                  		xpah 	p3
     105/      D1 : C4 8E               		ldi 	(PrintAddressData-1)&255
     106/      D3 : 33                  		xpal 	p3
     107/      D4 : C4 00               		ldi 	0
     108/      D6 : 3F                  		xppc 	p3
     109/      D7 :                     
     110/      D7 : C4 04               		ldi 	(PrintCharacter-1)/256 							; set P3 = print character.
     111/      D9 : 37                  		xpah 	p3
     112/      DA : C4 21               		ldi 	(PrintCharacter-1)&255
     113/      DC : 33                  		xpal 	p3
     114/      DD : C4 5D               		ldi 	']'												; print the prompt.
     115/      DF : 3F                  		xppc 	p3
     116/      E0 :                     
     117/      E0 :                     ; ****************************************************************************************************************
     118/      E0 :                     ;
     119/      E0 :                     ;											Keyboard Line Input
     120/      E0 :                     ;
     121/      E0 :                     ; ****************************************************************************************************************
     122/      E0 :                     
     123/      E0 : C4 00               		ldi 	0 												; set E = character position.
     124/      E2 : 01                  		xae 
     125/      E3 :                     KeyboardLoop:
     126/      E3 : C4 08               		ldi 	0x8 											; set P1 to point to keyboard latch
     127/      E5 : 35                  		xpah 	p1
     128/      E6 :                     _KBDWaitRelease:
     129/      E6 : C1 00               		ld 		0(p1) 											; wait for strobe to clear
 AS V1.42 Beta [Bld 102] - source file monitor.asm - page 6 - 11/30/2015 16:45:30


     130/      E8 : 94 02               		jp 		_KBDWaitKey
     131/      EA : 90 FA               		jmp 	_KBDWaitRelease
     132/      EC :                     _KBDWaitKey:
     133/      EC : C1 00               		ld 		0(p1) 											; wait for strobe, i.e. new key
     134/      EE : 94 FC               		jp 		_KBDWaitKey
     135/      F0 : D4 7F               		ani 	0x7F 											; throw away bit 7
     136/      F2 : CA FF               		st 		-1(p2) 											; save key.
     137/      F4 :                     
     138/      F4 : C4 0C               		ldi 	kbdBuffer/256 									; set P1 = keyboard buffer
     139/      F6 : 35                  		xpah 	p1
     140/      F7 : C4 25               		ldi 	kbdBuffer&255
     141/      F9 : 31                  		xpal 	p1		
     142/      FA :                     
     143/      FA : C2 FF               		ld 		-1(p2) 											; read key
     144/      FC : E4 08               		xri 	8 												; is it backspace
     145/      FE : 98 1E               		jz 		__KBDBackSpace
     146/     100 : E4 05               		xri 	8!13 											; is it CR, then exit
     147/     102 : 98 28               		jz 		__KBDExit
     148/     104 :                     
     149/     104 : 40                  		lde 													; have we a full buffer.
     150/     105 : E4 10               		xri 	kbdBufferLn 									; if so, ignore the key.
     151/     107 : 98 DA               		jz 		KeyboardLoop
     152/     109 :                     
     153/     109 : C2 FF               		ld 		-1(p2) 											; restore the key.
     154/     10B : 02                  		ccl
     155/     10C : F4 20               		adi 	0x20											; will make lower case -ve
     156/     10E : 94 02               		jp 		__KBDNotLower
     157/     110 : FC 20               		cai 	0x20 											; capitalise
     158/     112 :                     __KBDNotLower:
     159/     112 : F4 E0               		adi 	0xE0 											; fix up.
     160/     114 : C9 80               		st 		-0x80(p1) 										; save in the buffer using E as index.
     161/     116 : 3F                  		xppc 	p3 												; print the character
     162/     117 : 01                  		xae 													; increment E
     163/     118 : 02                  		ccl
     164/     119 : F4 01               		adi 	1
     165/     11B : 01                  		xae
     166/     11C : 90 C5               		jmp 	KeyboardLoop 									; and get the next key.
     167/     11E :                     
     168/     11E :                     __KBDBackSpace:
     169/     11E : 40                  		lde 													; get position
     170/     11F : 98 C2               		jz 		KeyboardLoop 									; can't go back if at beginning
     171/     121 : 03                  		scl 													; go back 1 from E
     172/     122 : FC 01               		cai 	1
     173/     124 : 01                  		xae 
     174/     125 : C4 08               		ldi 	8 												; print a backspace
     175/     127 : 3F                  		xppc 	p3
     176/     128 : 90 B9               		jmp 	KeyboardLoop 									; and go round again.
     177/     12A :                     
     178/     12A :                     __CmdMainLoop1:
     179/     12A : 90 A2               		jmp 	CommandMainLoop
     180/     12C :                     
     181/     12C :                     __KBDExit:
     182/     12C : C9 80               		st 		-0x80(p1) 										; add the ASCIIZ terminator.
     183/     12E : C4 0D               		ldi 	13												; print a new line.
     184/     130 : 3F                  		xppc 	p3
     185/     131 :                     
     186/     131 :                     ; ****************************************************************************************************************
     187/     131 :                     ;
     188/     131 :                     ;						Extract the 5 bit 3 letter (max command value). P1 points to buffer
     189/     131 :                     ;
 AS V1.42 Beta [Bld 102] - source file monitor.asm - page 7 - 11/30/2015 16:45:30


     190/     131 :                     ; ****************************************************************************************************************
     191/     131 :                     
     192/     131 : C4 00               		ldi 	0
     193/     133 : 01                  		xae 													; E contains the LSB of the 5 bit shift
     194/     134 : 40                  		lde 	
     195/     135 : CA FF               		st 		-1(p2) 											; -1(P2) contains the MSB
     196/     137 : C9 FF               		st 		modifier-kbdBuffer(p1)							; clear the modifier.
     197/     139 :                     Extract5Bit:
     198/     139 : C1 00               		ld 		(p1) 											; look at character
     199/     13B : 02                  		ccl 													; add 128-65, will be +ve if < 64
     200/     13C : F4 3F               		adi 	128-65
     201/     13E : 94 1A               		jp 		__ExtractEnd
     202/     140 : C4 05               		ldi 	5 												; shift current value left 5 times using -2(p2)
     203/     142 : CA FE               		st 		-2(p2)
     204/     144 :                     __Ex5Shift:
     205/     144 : 40                  		lde 													; shift E left into CY/L
     206/     145 : 02                  		ccl
     207/     146 : 70                  		ade 
     208/     147 : 01                  		xae
     209/     148 : C2 FF               		ld 		-1(p2) 											; shift CY/L into -1(p2) and carry/link
     210/     14A : F2 FF               		add 	-1(p2)
     211/     14C : CA FF               		st 		-1(p2)
     212/     14E : BA FE               		dld 	-2(p2) 											; done it 5 times ?
     213/     150 : 9C F2               		jnz 	__Ex5Shift
     214/     152 : C5 01               		ld 		@1(p1) 											; re-read character.
     215/     154 : D4 1F               		ani 	0x1F 											; lower 5 bits only.
     216/     156 : 58                  		ore 													; OR into E
     217/     157 : 01                  		xae
     218/     158 : 90 DF               		jmp 	Extract5Bit 									; go and get the next one.
     219/     15A :                     
     220/     15A :                     __ExtractEnd:
     221/     15A : C4 23               		ldi 	parPosn & 255 									; P1.L = Parameter Position, A = first non cmd char
     222/     15C : 31                  		xpal	p1
     223/     15D : C9 00               		st 		(p1) 											; write to parameter position.
     224/     15F :                     
     225/     15F :                     ; ****************************************************************************************************************
     226/     15F :                     ;
     227/     15F :                     ;						Find command in -1 (P2) (High) E (Low) in Command table
     228/     15F :                     ;	
     229/     15F :                     ; ****************************************************************************************************************
     230/     15F :                     
     231/     15F : C4 47               		ldi 	__commandList & 255 							; point P1 to the command list
     232/     161 : 31                  		xpal 	p1
     233/     162 : C4 07               		ldi 	__commandList / 256 		
     234/     164 : 35                  		xpah 	p1	
     235/     165 :                     __FindCommandLoop:
     236/     165 : C1 00               		ld 		0(p1) 											; reached the end of the table ?
     237/     167 : D9 01               		or 		1(p1)											; which is marked by word 0000
     238/     169 : 98 31               		jz 		__CommandError
     239/     16B : C5 03               		ld 		@3(p1) 											; read low byte, and point to next
     240/     16D : 60                  		xre
     241/     16E : 9C F5               		jnz 	__FindCommandLoop 								; if different to LSB loop back.
     242/     170 : C1 FE               		ld 		-2(p1) 											; read the high byte
     243/     172 : E2 FF               		xor 	-1(p2) 											; if different to the MSB loop back.
     244/     174 : 9C EF               		jnz 	__FindCommandLoop
     245/     176 :                     
     246/     176 :                     ; ****************************************************************************************************************
     247/     176 :                     ;
     248/     176 :                     ;				Found command, figure out if ASM or Command, if Command go to that routine
     249/     176 :                     ;
 AS V1.42 Beta [Bld 102] - source file monitor.asm - page 8 - 11/30/2015 16:45:30


     250/     176 :                     ; ****************************************************************************************************************
     251/     176 :                     
     252/     176 : C4 C1               		ldi 	(GetParameter-1) & 255 							; point P3 to the get parameter code.
     253/     178 : 33                  		xpal 	p3
     254/     179 : C4 04               		ldi 	(GetParameter-1) / 256
     255/     17B : 37                  		xpah 	p3
     256/     17C :                     
     257/     17C : C1 FF               		ld 		-1(p1) 											; read the operation code.
     258/     17E : D4 F0               		ani 	0xF0 											; look at the m-s-nibble - commands are 0x20.
     259/     180 : E4 20               		xri 	0x20
     260/     182 : 9C 22               		jnz 	__Assembler
     261/     184 :                     
     262/     184 : C1 FF               		ld 		-1(p1) 											; re-read it
     263/     186 : 02                  		ccl
     264/     187 : F1 FF               		add 	-1(p1) 											; double it
     265/     189 : D4 1F               		ani 	0x1F 											; lower 5 bits only.
     266/     18B : F4 EE               		adi 	__CommandTable & 255 							; make P1 point to the command table entry
     267/     18D : 31                  		xpal 	p1
     268/     18E : C4 07               		ldi 	__CommandTable / 256 					
     269/     190 : 35                  		xpah 	p1
     270/     191 : C1 00               		ld 		0(p1) 											; read low address
     271/     193 : 01                  		xae
     272/     194 : C1 01               		ld 		1(p1) 											; read high address
     273/     196 : 35                  		xpah 	p1 												; put in P1.H
     274/     197 : 40                  		lde 													; get low address
     275/     198 : 31                  		xpal 	p1 												; put in P1.L
     276/     199 : C5 FF               		ld 		@-1(p1) 										; fix up for the pre-increment
     277/     19B : 3D                  		xppc 	p1 												; and go there.
     278/     19C :                     
     279/     19C :                     __CommandError: 												; unknown command.
     280/     19C : C4 03               		ldi 	3 												; set the beeper on
     281/     19E : 07                  		cas
     282/     19F : 8F FF               		dly 	0xFF 											; short delay
     283/     1A1 : C4 00               		ldi 	0 												; set the beeper off
     284/     1A3 : 07                  		cas
     285/     1A4 : 90 84               		jmp 	__CmdMainLoop1
     286/     1A6 :                     
     287/     1A6 :                     ; ****************************************************************************************************************
     288/     1A6 :                     ;												In line Assembler
     289/     1A6 :                     ; ****************************************************************************************************************
     290/     1A6 :                     
     291/     1A6 :                     __Assembler:
     292/     1A6 : C1 FF               		ld 		-1(p1) 											; this is the operation code to use.
     293/     1A8 : CE FF               		st 		@-1(p2) 										; push on the stack.
     294/     1AA :                     
     295/     1AA : 3F                  		xppc 	p3 												; evaluate (any) parameter if present
     296/     1AB : 06                  		csa 													; check carry flag set
     297/     1AC : 94 27               		jp 		__ASMNoParameter  								; if clear, no parameter was provided.
     298/     1AE :                     
     299/     1AE : C4 23               		ldi 	parPosn & 255
     300/     1B0 : 31                  		xpal 	p1 												; get the parameter LSB
     301/     1B1 : CE FF               		st 		@-1(p2) 										; push that on the stack, set P1 to parPosn
     302/     1B3 : C4 0C               		ldi 	parPosn / 256
     303/     1B5 : 35                  		xpah 	p1
     304/     1B6 : C1 00               		ld 		(p1) 											; read current position
     305/     1B8 : 31                  		xpal 	p1 												; P1 now points to character.
     306/     1B9 : C1 00               		ld 		(p1) 											; read character
     307/     1BB : E4 21               		xri 	'!'												; is it the label pling ?
     308/     1BD : 9C 1E               		jnz 	__ASMContinue 									; we don't need to change this pointer , we should technically.
     309/     1BF : C2 00               		ld 		(p2) 											; read the value, which is the label number
 AS V1.42 Beta [Bld 102] - source file monitor.asm - page 9 - 11/30/2015 16:45:30


     310/     1C1 : 03                  		scl
     311/     1C2 : FC 20               		cai 	labelCount 										; is it a valid label number
     312/     1C4 : 94 D6               		jp 		__CommandError 									; no, beep.
     313/     1C6 : C2 00               		ld 		(p2) 											; re-read the label number
     314/     1C8 : 01                  		xae 													; put in E
     315/     1C9 : C4 0C               		ldi 	Labels/256 										; point p1 to labels
     316/     1CB : 35                  		xpah 	p1
     317/     1CC : C4 00               		ldi 	Labels&255 
     318/     1CE : 31                  		xpal 	p1
     319/     1CF : C1 80               		ld 		-0x80(p1) 										; read label indexed using E.
     320/     1D1 : CA 00               		st 		(p2) 											; save as the operand
     321/     1D3 : 90 08               		jmp 	__ASMContinue 									; and continue
     322/     1D5 :                     
     323/     1D5 :                     __ASMNoParameter:
     324/     1D5 : C2 00               		ld 		(p2) 											; read the pushed operation code
     325/     1D7 : D4 80               		ani 	0x80 											; is bit 7 set ?
     326/     1D9 : 9C C1               		jnz 	__CommandError 									; if it is, we need a parameter
     327/     1DB : CE FF               		st 		@-1(p2) 										; push zero on the stack as a dummy parameter.
     328/     1DD :                     
     329/     1DD :                     __ASMContinue:
     330/     1DD : C4 0C               		ldi 	Current/256 									; p3 = &Current Address
     331/     1DF : 37                  		xpah 	p3
     332/     1E0 : C4 21               		ldi 	Current&255
     333/     1E2 : 33                  		xpal 	p3
     334/     1E3 :                     
     335/     1E3 : C3 03               		ld 		modifier-Current(p3) 							; get the modifier (e.g. @,Pn etc.)
     336/     1E5 : 02                  		ccl
     337/     1E6 : F2 01               		add 	1(p2) 											; add to the opcode and write it back
     338/     1E8 : CA 01               		st 		1(p2)
     339/     1EA :                     
     340/     1EA : C3 00               		ld 		(p3) 											; read current address into P1
     341/     1EC : 31                  		xpal 	p1
     342/     1ED : C3 01               		ld 		1(p3)
     343/     1EF : 35                  		xpah 	p1
     344/     1F0 :                     
     345/     1F0 : C2 01               		ld 		1(p2) 											; read opcode.
     346/     1F2 : CD 01               		st 		@1(p1) 											; write out to current address and bump it.
     347/     1F4 : 94 1F               		jp 		__ASMExit 										; if +ve then no operand byte, exit.
     348/     1F6 :                     
     349/     1F6 : C2 00               		ld 		(p2) 											; read the operand byte
     350/     1F8 : CD 01               		st 		@1(p1) 											; write that out as well.
     351/     1FA :                     
     352/     1FA : C3 03               		ld 		modifier-Current(p3) 							; look at the modifier 
     353/     1FC : 9C 17               		jnz 	__ASMExit 										; if non zero we don't need to do anything P0 = 00
     354/     1FE : C2 01               		ld 		1(p2) 											; DLY is a special case
     355/     200 : E4 8F               		xri 	0x8F 											; where the modifier is zero but not PC relative.
     356/     202 : 98 11               		jz 		__ASMExit 												
     357/     204 :                     
     358/     204 : C1 FF               		ld 		-1(p1) 											; read operand
     359/     206 : 02                  		ccl 													; one fewer because we want the current addr+1 low
     360/     207 : FB 00               		cad 	(p3) 											; subtract the current address low.
     361/     209 : C9 FF               		st 		-1(p1) 											; write it back
     362/     20B :                     
     363/     20B : C2 01               		ld 		1(p2) 											; read opcode again
     364/     20D : D4 F0               		ani 	0xF0 											; is it 9x (a JMP command)
     365/     20F : E4 90               		xri 	0x90
     366/     211 : 9C 02               		jnz 	__ASMExit 										; if not, we are done
     367/     213 : B9 FF               		dld 	-1(p1) 											; one fewer because of the pre-increment
     368/     215 :                     __ASMExit:
     369/     215 : 31                  		xpal 	p1 												; write current address back out
 AS V1.42 Beta [Bld 102] - source file monitor.asm - page 10 - 11/30/2015 16:45:30


     370/     216 : CB 00               		st 		(p3)
     371/     218 : 35                  		xpah 	p1
     372/     219 : CB 01               		st 		1(p3)
     373/     21B : C6 02               		ld 		@2(p2) 											; drop stack values.
     374/     21D :                     
     375/     21D : 90 0C               		jmp 	__CmdMainLoop2 									; back to command loop
     376/     21F :                     
     377/     21F :                     ; ****************************************************************************************************************
     378/     21F :                     ; ****************************************************************************************************************
     379/     21F :                     ;
     380/     21F :                     ;												Commands Section
     381/     21F :                     ;
     382/     21F :                     ; ****************************************************************************************************************
     383/     21F :                     ; ****************************************************************************************************************
     384/     21F :                     
     385/     21F :                     ; ****************************************************************************************************************
     386/     21F :                     ;											A : Set Current address
     387/     21F :                     ; ****************************************************************************************************************
     388/     21F :                     
     389/     21F :                     Address_Command:
     390/     21F : 3F                  		xppc 	p3 												; get parameter if exists
     391/     220 : 3F                  		xppc 	p3 												; update current if exists.
     392/     221 : 90 08               		jmp 	__CmdMainLoop2
     393/     223 :                     
     394/     223 :                     __CmdParameterFail:
     395/     223 : C4 02               		ldi 	2 												; set the beeper on
     396/     225 : 07                  		cas
     397/     226 : 8F FF               		dly 	0xFF 											; short delay
     398/     228 : C4 00               		ldi 	0 												; set the beeper off
     399/     22A : 07                  		cas
     400/     22B :                     __CmdMainLoop2:													; and go back to the start.
     401/     22B : C4 CD               		ldi 	(CommandMainLoop-1) & 255
     402/     22D : 33                  		xpal 	p3
     403/     22E : C4 00               		ldi 	(CommandMainLoop-1) / 256
     404/     230 : 37                  		xpah 	p3
     405/     231 : 3F                  		xppc 	p3
     406/     232 :                     
     407/     232 :                     ; ****************************************************************************************************************
     408/     232 :                     ;										G : Go (Address must be specified.)
     409/     232 :                     ; ****************************************************************************************************************
     410/     232 :                     
     411/     232 :                     Go_Command:
     412/     232 : 3F                  		xppc 	p3 												; get parameter, which should exist.
     413/     233 : 06                  		csa 													; look at CY/L which is set if it was.
     414/     234 : 94 ED               		jp 		__CmdParameterFail 								; if it is clear, beep an error.
     415/     236 : 31                  		xpal 	p1 												; copy P1 to P3
     416/     237 : 33                  		xpal 	p3
     417/     238 : 35                  		xpah 	p1
     418/     239 : 37                  		xpah 	p3
     419/     23A : C7 FF               		ld 		@-1(p3) 										; fix up for pre increment
     420/     23C : 3F                  		xppc 	p3 												; call the routine.		
     421/     23D :                     __CmdMainLoop3:
     422/     23D : 90 EC               		jmp 	__CmdMainLoop2 									; re-enter monitor.
     423/     23F :                     
     424/     23F :                     ; ****************************************************************************************************************
     425/     23F :                     ;			PUT Write to tape : data mandatory, it is the byte count from the current address.
     426/     23F :                     ; ****************************************************************************************************************
     427/     23F :                     
     428/     23F :                     PutTape_Command:
     429/     23F : 3F                  		xppc 	p3 												; get the bytes to write.
 AS V1.42 Beta [Bld 102] - source file monitor.asm - page 11 - 11/30/2015 16:45:30


     430/     240 : 06                  		csa 													; if CC, no value was provided
     431/     241 : 94 E0               		jp 		__CmdParameterFail 								; which is an error.
     432/     243 : 31                  		xpal 	p1 												; store low byte count in -1(P2)
     433/     244 : CA FF               		st 		-1(p2)
     434/     246 : 35                  		xpah 	p1 												; store high byte count in -2(P2)
     435/     247 : CA FE               		st 		-2(p2)
     436/     249 : 02                  		ccl 													; skip over the update current address
     437/     24A : 3F                  		xppc 	p3 												; this won't update current address as CY/L = 0
     438/     24B : 3F                  		xppc 	p3 												; and load the current address into P1.
     439/     24C : C4 00               		ldi 	0 												; set the output tape bit low
     440/     24E : 01                  		xae
     441/     24F : 19                  		sio
     442/     250 : C4 20               		ldi 	32 												; tape leader
     443/     252 : CA FD               		st 		-3(p2)
     444/     254 :                     _PutTapeLeader:
     445/     254 : 8F FF               		dly 	0xFF
     446/     256 : BA FD               		dld 	-3(p2)
     447/     258 : 9C FA               		jnz 	_PutTapeLeader
     448/     25A :                     _PutTapeByte:													; output byte at P1
     449/     25A : C4 00               		ldi 	0 												; set output bit to 0
     450/     25C : 01                  		xae 	
     451/     25D : 19                  		sio
     452/     25E : 8F 10               		dly 	tapeDelay * 4 									; 0 continuation bit + gap between tapes with no signal 
     453/     260 : C4 01               		ldi 	0x1 											; set bit high
     454/     262 : 01                  		xae
     455/     263 : 19                  		sio 
     456/     264 : C4 00               		ldi 	0
     457/     266 : 8F 04               		dly 	tapeDelay 										; output the start bit.
     458/     268 : C5 01               		ld 		@1(p1) 											; read the byte and put it in E.
     459/     26A : 01                  		xae
     460/     26B : C4 08               		ldi 	8 												; output 8 bits
     461/     26D : CA FD               		st 		-3(p2)
     462/     26F :                     _PutTapeBit:
     463/     26F : 19                  		sio 													; output MSB and shift
     464/     270 : C4 00               		ldi 	0
     465/     272 : 8F 04               		dly 	tapeDelay 								
     466/     274 : BA FD               		dld 	-3(p2) 											; do all 8 bits.
     467/     276 : 9C F7               		jnz 	_PutTapeBit
     468/     278 : BA FF               		dld 	-1(p2) 											; decrement counter
     469/     27A : 9C DE               		jnz 	_PutTapeByte
     470/     27C : BA FE               		dld 	-2(p2) 											; note MSB goes 0 to -1 when finished.
     471/     27E : 94 DA               		jp 		_PutTapeByte
     472/     280 : C4 01               		ldi 	0x01 											; add the termination bit.
     473/     282 : 01                  		xae
     474/     283 : 19                  		sio
     475/     284 : C4 00               		ldi 	0 												; put that out.
     476/     286 : 8F 04               		dly 	TapeDelay
     477/     288 : C4 00               		ldi 	0 												; and set the leve back to 0
     478/     28A : 01                  		xae 
     479/     28B : 19                  		sio
     480/     28C :                     __CmdMainLoop4:
     481/     28C : 90 AF               		jmp 	__CmdMainLoop3
     482/     28E :                     
     483/     28E :                     __CmdParameterFail1:
     484/     28E : 90 93               		jmp 	__CmdParameterFail
     485/     290 :                     
     486/     290 :                     ; ****************************************************************************************************************
     487/     290 :                     ;						GET [addr] load tape to current position or given address.
     488/     290 :                     ; ****************************************************************************************************************
     489/     290 :                     
 AS V1.42 Beta [Bld 102] - source file monitor.asm - page 12 - 11/30/2015 16:45:30


     490/     290 :                     LoadTape_Command:
     491/     290 : 3F                  		xppc	p3 												; get parameter
     492/     291 : 3F                  		xppc 	p3												; update current address
     493/     292 : 3F                  		xppc 	p3 												; current address to P1.
     494/     293 : C4 08               		ldi 	0x8 											; point P3 to the keyboard.
     495/     295 : 37                  		xpah 	p3
     496/     296 :                     __GetTapeWait:
     497/     296 : C3 00               		ld 		0(p3) 											; check keyboard break
     498/     298 : D4 80               		ani 	0x80
     499/     29A : 9C F2               		jnz 	__CmdParameterFail1
     500/     29C : 19                  		sio 													; wait for the start bit, examine tape in.
     501/     29D : 40                  		lde 
     502/     29E : 94 F6               		jp 		__GetTapeWait
     503/     2A0 : 8F 06               		dly 	tapeDelay * 3 / 2 								; half way into the first bit.
     504/     2A2 : C4 08               		ldi 	8 												; read in 8 bits.
     505/     2A4 : CA FF               		st 		-1(p2)
     506/     2A6 :                     __GetTapeBits:
     507/     2A6 : 19                  		sio 													; read in one bit
     508/     2A7 : C4 00               		ldi 	0
     509/     2A9 : 8F 04               		dly 	tapeDelay 										; delay to next bit
     510/     2AB : BA FF               		dld 	-1(p2) 											; read 8 bits.
     511/     2AD : 9C F7               		jnz 	__GetTapeBits 
     512/     2AF : 40                  		lde 													; store byte at current address
     513/     2B0 : CD 01               		st 		@1(p1)
     514/     2B2 : 19                  		sio 													; read in the byte, which is zero if continuing.
     515/     2B3 : 40                  		lde  													; examine bit 7 shifted in.
     516/     2B4 : 94 E0               		jp 		__GetTapeWait 									; if zero, wait for the next start bit.
     517/     2B6 :                     __CmdMainLoop5:
     518/     2B6 : 90 D4               		jmp 	__CmdMainLoop4
     519/     2B8 :                     
     520/     2B8 :                     ; ****************************************************************************************************************
     521/     2B8 :                     ;										L : nn Set Label to current address
     522/     2B8 :                     ; ****************************************************************************************************************
     523/     2B8 :                     
     524/     2B8 :                     Label_Command:
     525/     2B8 : 3F                  		xppc 	p3 												; get parameter
     526/     2B9 : 06                  		csa 													; check it exists, CY/L must be set
     527/     2BA : 94 D2               		jp 		__CmdParameterFail1
     528/     2BC : 31                  		xpal 	p1 												; get into A
     529/     2BD : 01                  		xae 													; put into E
     530/     2BE : 40                  		lde 													; get back
     531/     2BF : 03                  		scl
     532/     2C0 : FC 20               		cai 	labelCount 										; check is < number of labels
     533/     2C2 : 94 CA               		jp 		__CmdParameterFail1
     534/     2C4 :                     
     535/     2C4 : C4 0C               		ldi 	Current/256 									; point P1 to current address
     536/     2C6 : 35                  		xpah 	p1
     537/     2C7 : C4 21               		ldi 	Current&255
     538/     2C9 : 31                  		xpal 	p1
     539/     2CA : C1 00               		ld 		(p1) 											; read current address
     540/     2CC : 31                  		xpal 	p1 												; save in P1.Low
     541/     2CD : C4 00               		ldi 	Labels&255 										; get labels low byte in same page as current address
     542/     2CF : 02                  		ccl
     543/     2D0 : 70                  		ade 													; add label # to it
     544/     2D1 : 31                  		xpal 	p1 												; put in P1.L and restore current address low
     545/     2D2 : C9 00               		st 		(p1) 											; store current address low in label space.
     546/     2D4 : 90 E0               		jmp 	__CmdMainLoop5 									; and exit.
     547/     2D6 :                     
     548/     2D6 :                     ; ****************************************************************************************************************
     549/     2D6 :                     ;											M :	Dump Memory
 AS V1.42 Beta [Bld 102] - source file monitor.asm - page 13 - 11/30/2015 16:45:30


     550/     2D6 :                     ; ****************************************************************************************************************
     551/     2D6 :                     
     552/     2D6 :                     MemoryDump_Command:
     553/     2D6 : 3F                  		xppc 	p3 												; get parameter if exists
     554/     2D7 : 3F                  		xppc 	p3 												; update current if exists.
     555/     2D8 : C4 07               		ldi 	7 												; print seven rows
     556/     2DA : CE FF               		st 		@-1(p2)
     557/     2DC :                     __DCLoop:
     558/     2DC : C4 04               		ldi 	(PrintAddressData-1)/256						; print one row of address and data.
     559/     2DE : 37                  		xpah 	p3
     560/     2DF : C4 8E               		ldi 	(PrintAddressData-1)&255
     561/     2E1 : 33                  		xpal 	p3
     562/     2E2 : C4 04               		ldi 	4
     563/     2E4 : 3F                  		xppc 	p3
     564/     2E5 : C4 0C               		ldi 	Current/256 									; point P1 to current
     565/     2E7 : 35                  		xpah 	p1
     566/     2E8 : C4 21               		ldi 	Current&255 
     567/     2EA : 31                  		xpal 	p1
     568/     2EB : C1 00               		ld 		0(p1) 											; add 4 to current address
     569/     2ED : 02                  		ccl
     570/     2EE : F4 04               		adi 	4
     571/     2F0 : C9 00               		st 		0(p1)
     572/     2F2 : C1 01               		ld 		1(p1)
     573/     2F4 : F4 00               		adi 	0
     574/     2F6 : C9 01               		st 		1(p1)
     575/     2F8 : BA 00               		dld 	(p2) 											; do it 7 times
     576/     2FA : 9C E0               		jnz 	__DCLoop
     577/     2FC : C6 01               		ld 		@1(p2) 											; fix up stack.
     578/     2FE :                     __CmdMainLoop6:
     579/     2FE : 90 B6               		jmp 	__CmdMainLoop5
     580/     300 :                     
     581/     300 :                     
     582/     300 :                     ; ****************************************************************************************************************
     583/     300 :                     ;								B: Enter Bytes (no address, sequence of byte data)
     584/     300 :                     ; ****************************************************************************************************************
     585/     300 :                     
     586/     300 :                     EnterBytes_Command:
     587/     300 : C4 C1               		ldi 	(GetParameter-1) & 255 							; P3 = Get Parameter routine
     588/     302 : 33                  		xpal 	p3
     589/     303 : C4 04               		ldi 	(GetParameter-1) / 256 	
     590/     305 : 37                  		xpah 	p3
     591/     306 : 3F                  		xppc 	p3 												; get the parameter.
     592/     307 : 06                  		csa 													; look at carry
     593/     308 : 94 AC               		jp 		__CmdMainLoop5 									; carry clear, no value.
     594/     30A : C4 0C               		ldi 	Current/256 									; make P1 point to current
     595/     30C : 35                  		xpah 	p1
     596/     30D : C4 21               		ldi 	Current&255 										
     597/     30F : 31                  		xpal 	p1 												; this pulls the byte value into A
     598/     310 : 01                  		xae 													; save it in E
     599/     311 : C1 00               		ld 		0(p1) 											; copy address to save to into P3
     600/     313 : 33                  		xpal 	p3
     601/     314 : C1 01               		ld 		1(p1) 
     602/     316 : 37                  		xpah 	p3 
     603/     317 : 40                  		lde 													; get byte back
     604/     318 : CB 00               		st 		(p3) 											; save it in that location
     605/     31A : A9 00               		ild 	0(p1) 											; bump current address and go back and try again.
     606/     31C : 9C E2               		jnz 	EnterBytes_Command
     607/     31E : A9 01               		ild 	1(p1)
     608/     320 : 90 DE               		jmp 	EnterBytes_Command
     609/     322 :                     
 AS V1.42 Beta [Bld 102] - source file monitor.asm - page 14 - 11/30/2015 16:45:30


     610/     322 :                     ; ****************************************************************************************************************
     611/     322 :                     ;											D [aaaa] Disassembler
     612/     322 :                     ; ****************************************************************************************************************
     613/     322 :                     
     614/     322 :                     Disassemble_Command:	
     615/     322 : 3F                  		xppc 	p3 												; evaluate
     616/     323 : 3F                  		xppc 	p3 												; update current if new value
     617/     324 : C4 07               		ldi 	7												; instructions to disassemble counter
     618/     326 : CE FC               		st 		@-4(p2)											; p2 + 0 = counter p2 + 1 = opcode p2 + 2 = operand
     619/     328 :                     __DAssLoop:														; p2 + 3 = opcode - base opcode.
     620/     328 : C4 04               		ldi 	(PrintAddressData-1)/256						; print Address only
     621/     32A : 37                  		xpah 	p3
     622/     32B : C4 8E               		ldi 	(PrintAddressData-1)&255
     623/     32D : 33                  		xpal 	p3
     624/     32E : C4 00               		ldi 	0
     625/     330 : 3F                  		xppc 	p3
     626/     331 : C4 0C               		ldi 	Current / 256 									; point P1 to current address
     627/     333 : 35                  		xpah 	p1
     628/     334 : C4 21               		ldi 	Current & 255
     629/     336 : 31                  		xpal 	p1
     630/     337 : C1 00               		ld 		0(p1) 											; load current address into P3
     631/     339 : 33                  		xpal 	p3
     632/     33A : C1 01               		ld 		1(p1)
     633/     33C : 37                  		xpah 	p3
     634/     33D : C7 01               		ld 		@1(p3) 											; read opcode
     635/     33F : CA 01               		st 		1(p2) 											; save it
     636/     341 : 94 04               		jp 		__DAssNoOperand 								; if +ve no operand
     637/     343 : C7 01               		ld 		@1(p3) 											; read operand
     638/     345 : CA 02               		st 		2(p2) 											; save it
     639/     347 :                     __DAssNoOperand:
     640/     347 : C4 E9               		ldi 	(__CommandListEnd-3) & 255
     641/     349 : 33                  		xpal 	p3 												; update current position, setting P3 to last entry
     642/     34A : C9 00               		st 		0(p1)											; in command table.
     643/     34C : C4 07               		ldi 	(__CommandListEnd-3) / 256
     644/     34E : 37                  		xpah 	p3
     645/     34F : C9 01               		st 		1(p1)
     646/     351 :                     
     647/     351 :                     __DAssFindOpcode: 												; the table is : text (word) opcode (byte)
     648/     351 : C2 01               		ld 		1(p2) 											; get opcode
     649/     353 : E3 02               		xor 	2(p3) 											; check in the same 8 byte page.
     650/     355 : D4 F0               		ani 	0xF0
     651/     357 : 9C 0B               		jnz 	__DAssNextOpcode
     652/     359 : C2 01               		ld 		1(p2) 											; get opcode
     653/     35B : 03                  		scl
     654/     35C : FB 02               		cad 	2(p3) 											; subtract the base opcode.
     655/     35E : CA 03               		st 		3(p2) 											; save a the offset (possible)
     656/     360 : D4 E0               		ani 	0xE0 											; it needs to be 0x20 or less
     657/     362 : 98 08               		jz 		__DAssFoundOpcode 								; if >= 0 then found the correct opcode.
     658/     364 :                     __DAssNextOpcode:
     659/     364 : C7 FD               		ld 		@-3(p3) 										; go to previous entry in table
     660/     366 : 90 E9               		jmp 	__DAssFindOpcode
     661/     368 :                     
     662/     368 :                     __DAssLoop2:
     663/     368 : 90 BE               		jmp 	__DAssLoop
     664/     36A :                     __CmdMainLoop7:
     665/     36A : 90 92               		jmp 	__CmdMainLoop6
     666/     36C :                     
     667/     36C :                     __DAssFoundOpcode:
     668/     36C : C3 02               		ld 		2(p3) 											; look at opcode that matched.
     669/     36E : D4 87               		ani 	0x87 											; match with 1xxx x100
 AS V1.42 Beta [Bld 102] - source file monitor.asm - page 15 - 11/30/2015 16:45:30


     670/     370 : E4 84               		xri 	0x84 											; which is all the immediate instructions.		
     671/     372 : 9C 04               		jnz 	__DAssNotImmediate
     672/     374 : C2 03               		ld 		3(p2) 											; only do immediate if base offset is zero
     673/     376 : 9C EC               		jnz 	__DAssNextOpcode 								; fixes C0-C7 being LD, but C4 being LDI.
     674/     378 :                     __DAssNotImmediate:
     675/     378 : C3 00               		ld 		0(p3) 											; save LSB of text on stack
     676/     37A : CE FF               		st 		@-1(p2)
     677/     37C : C3 01               		ld 		1(p3) 											; and the MSB of text on stack
     678/     37E : CE FF               		st 		@-1(p2)
     679/     380 :                     
     680/     380 : C4 04               		ldi 	(PrintCharacter-1) / 256 						; set P3 up to print characters
     681/     382 : 37                  		xpah 	p3
     682/     383 : C4 21               		ldi 	(PrintCharacter-1) & 255 
     683/     385 : 33                  		xpal 	p3
     684/     386 : C4 20               		ldi 	' '												; print a space.
     685/     388 : 3F                  		xppc 	p3
     686/     389 :                     
     687/     389 : C4 03               		ldi 	3 												; print 3 characters
     688/     38B : CE FF               		st 		@-1(p2) 										; so +0 is count, +1 = text MSB, +2 = text LSB
     689/     38D :                     __DAssPrintMnemonic:
     690/     38D : C2 01               		ld 		1(p2) 											; get text MSB which is in bits .xxxxx..
     691/     38F : 1C                  		sr 														; shift right twice.
     692/     390 : 1C                  		sr
     693/     391 : D4 1F               		ani 	0x1F 											; lower 5 bits only
     694/     393 : 98 04               		jz 		__DAssSkipSpace 								; don't print spaces (00000)
     695/     395 : 02                  		ccl 													; make it 7 bit ASCII code.
     696/     396 : F4 40               		adi 	64 							
     697/     398 : 3F                  		xppc 	p3 												; display the character
     698/     399 :                     __DAssSkipSpace:
     699/     399 : C4 05               		ldi 	5 												; now shift the encoded data left 5 times
     700/     39B : CA FF               		st 		-1(p2)
     701/     39D :                     __DAssShiftEncode:
     702/     39D : 02                  		ccl
     703/     39E : C2 02               		ld 		2(p2)
     704/     3A0 : F2 02               		add 	2(p2)
     705/     3A2 : CA 02               		st 		2(p2)
     706/     3A4 : C2 01               		ld 		1(p2)
     707/     3A6 : F2 01               		add 	1(p2)
     708/     3A8 : CA 01               		st 		1(p2)
     709/     3AA : BA FF               		dld 	-1(p2)
     710/     3AC : 9C EF               		jnz 	__DAssShiftEncode
     711/     3AE : BA 00               		dld 	0(p2) 											; done all three characters
     712/     3B0 : 9C DB               		jnz 	__DAssPrintMnemonic 							; if not keep going.
     713/     3B2 :                     
     714/     3B2 : C6 03               		ld 		@3(p2) 											; remove mnemonic stuff off the stack.
     715/     3B4 :                     
     716/     3B4 : C2 03               		ld 		3(p2) 											; print instruction modifier if required.
     717/     3B6 : 9C 1F               		jnz 	__DAssPrintModifier
     718/     3B8 :                     
     719/     3B8 :                     __DAssPrintOperand:
     720/     3B8 : C2 01               		ld 		1(p2) 											; get original opcode
     721/     3BA : 94 0A               		jp 		__DAssNext 										; if no operand go to next line of disassembly.
     722/     3BC : C4 03               		ldi 	(PrintHexByte-1) / 256 							; set P3 to point to the hex printer
     723/     3BE : 37                  		xpah 	p3
     724/     3BF : C4 EE               		ldi 	(PrintHexByte-1) & 255
     725/     3C1 : 33                  		xpal 	p3
     726/     3C2 : C2 02               		ld 		2(p2) 											; get operand
     727/     3C4 : 03                  		scl 
     728/     3C5 : 3F                  		xppc 	p3 												; print it out with a leading space.
     729/     3C6 :                     
 AS V1.42 Beta [Bld 102] - source file monitor.asm - page 16 - 11/30/2015 16:45:30


     730/     3C6 :                     __DAssNext:
     731/     3C6 : C4 04               		ldi 	(PrintCharacter-1) / 256 						; set P3 up to print characters
     732/     3C8 : 37                  		xpah 	p3
     733/     3C9 : C4 21               		ldi 	(PrintCharacter-1) & 255 
     734/     3CB : 33                  		xpal 	p3
     735/     3CC : C4 0D               		ldi 	13												; print a newline.
     736/     3CE : 3F                  		xppc 	p3
     737/     3CF :                     
     738/     3CF : BA 00               		dld 	0(p2) 											; done all 6 lines
     739/     3D1 : 9C 95               		jnz 	__DAssLoop2 									; no, go round again.
     740/     3D3 : C6 04               		ld 		@4(p2) 											; fix up the stack.
     741/     3D5 : 90 93               		jmp 	__CmdMainLoop7 									; and time to exit.
     742/     3D7 :                     
     743/     3D7 :                     
     744/     3D7 :                     __DAssPrintModifier:
     745/     3D7 : C4 20               		ldi 	' '												; print leading space
     746/     3D9 : 3F                  		xppc 	p3
     747/     3DA : C2 03               		ld 		3(p2) 											; read modifier
     748/     3DC : D4 04               		ani 	0x04 											; is @ bit set
     749/     3DE : 98 03               		jz 		__DAssNotAutoIndexed
     750/     3E0 : C4 40               		ldi 	'@'												; print '@'
     751/     3E2 : 3F                  		xppc 	p3
     752/     3E3 :                     __DAssNotAutoIndexed:
     753/     3E3 : C4 50               		ldi 	'P'												; print 'P'
     754/     3E5 : 3F                  		xppc 	p3
     755/     3E6 : C2 03               		ld 		3(p2) 											; print pointer register
     756/     3E8 : D4 03               		ani 	3
     757/     3EA : DC 30               		ori 	'0'
     758/     3EC : 3F                  		xppc 	p3
     759/     3ED : 90 C9               		jmp 	__DAssPrintOperand 								; and print operand.
     760/     3EF :                     
     761/     3EF :                     
     762/     3EF :                     ; ****************************************************************************************************************
     763/     3EF :                     ; ****************************************************************************************************************
     764/     3EF :                     ;
     765/     3EF :                     ;						Print A as a hexadecimal 2 digit value. If CY/L set precede with space
     766/     3EF :                     ;
     767/     3EF :                     ; ****************************************************************************************************************
     768/     3EF :                     ; ****************************************************************************************************************
     769/     3EF :                     
     770/     3EF :                     PrintHexByte:
     771/     3EF : CE FF               		st 		@-1(p2) 										; push A and P3, set P3 up to print character
     772/     3F1 : C4 04               		ldi 	(PrintCharacter-1)/256
     773/     3F3 : 37                  		xpah 	p3
     774/     3F4 : CE FF               		st 		@-1(p2)
     775/     3F6 : C4 21               		ldi 	(PrintCharacter-1)&255
     776/     3F8 : 33                  		xpal 	p3
     777/     3F9 : CE FF               		st 		@-1(p2)
     778/     3FB : 06                  		csa 													; check carry
     779/     3FC : 94 03               		jp 		__PHBNoSpace									; if clear, no space.
     780/     3FE : C4 20               		ldi 	' '												; print leading space
     781/     400 : 3F                  		xppc 	p3 
     782/     401 :                     __PHBNoSpace:
     783/     401 : C2 02               		ld 		2(p2) 											; read digit
     784/     403 : 1C                  		sr 														; convert MSB
     785/     404 : 1C                  		sr
     786/     405 : 1C                  		sr
     787/     406 : 1C                  		sr
     788/     407 : 02                  		ccl
     789/     408 : EC 90               		dai 	0x90
 AS V1.42 Beta [Bld 102] - source file monitor.asm - page 17 - 11/30/2015 16:45:30


     790/     40A : EC 40               		dai 	0x40
     791/     40C : 3F                  		xppc 	p3 												; print
     792/     40D : C2 02               		ld 		2(p2) 											; read digit
     793/     40F : D4 0F               		ani 	0x0F 											; convert LSB
     794/     411 : 02                  		ccl
     795/     412 : EC 90               		dai 	0x90
     796/     414 : EC 40               		dai 	0x40
     797/     416 : 3F                  		xppc 	p3 												; print
     798/     417 :                     
     799/     417 : C6 01               		ld 		@1(p2) 											; restore P3 & A and Return
     800/     419 : 33                  		xpal 	p3
     801/     41A : C6 01               		ld 		@1(p2)
     802/     41C : 37                  		xpah 	p3
     803/     41D : C6 01               		ld 		@1(p2)
     804/     41F : 3F                  		xppc 	p3
     805/     420 : 90 CD               		jmp 	PrintHexByte
     806/     422 :                     
     807/     422 :                     ; ****************************************************************************************************************
     808/     422 :                     ; ****************************************************************************************************************
     809/     422 :                     ;
     810/     422 :                     ;		Print Character in A, preserves all registers, re-entrant. Handles 13 (New Line), 8 (Backspace)
     811/     422 :                     ;		Characters 32 - 95 only.
     812/     422 :                     ;	
     813/     422 :                     ;		Rolls to screen top rather than scrolling.
     814/     422 :                     ;
     815/     422 :                     ; ****************************************************************************************************************
     816/     422 :                     ; ****************************************************************************************************************
     817/     422 :                     
     818/     422 :                     PrintCharacter:
     819/     422 : CE FF               		st 		@-1(p2) 										; save A
     820/     424 : C4 0C               		ldi 	Cursor/256 										; save P1, setting up P1 -> Cursor at same time.
     821/     426 : 35                  		xpah 	p1
     822/     427 : CE FF               		st 		@-1(p2)
     823/     429 : C4 20               		ldi 	Cursor&255
     824/     42B : 31                  		xpal 	p1
     825/     42C : CE FF               		st 		@-1(p2)
     826/     42E : C4 00               		ldi 	0 												; save P3, setting up P3 -> Page 0 (Video RAM Write)
     827/     430 : 37                  		xpah 	p3
     828/     431 : CE FF               		st 		@-1(p2)
     829/     433 : 33                  		xpal 	p3
     830/     434 : CE FF               		st 		@-1(p2)
     831/     436 :                     
     832/     436 : C1 00               		ld 		(p1) 											; read cursor position
     833/     438 : 33                  		xpal 	p3 												; put in P3.Low
     834/     439 :                     
     835/     439 : C4 20               		ldi 	' ' 											; erase the cursor.
     836/     43B : CB 00               		st 		0(p3)
     837/     43D :                     
     838/     43D : C2 04               		ld 		4(p2) 											; read character to print.
     839/     43F : E4 0D               		xri 	13 												; is it CR ?
     840/     441 : 98 40               		jz 		__PCNewLine 									; if so, go to new line.
     841/     443 : E4 05               		xri 	13!8 											; is it Backspace ?
     842/     445 : 98 30               		jz 		__PCBackSpace
     843/     447 :                     
     844/     447 : C2 04               		ld 		4(p2) 											; get character to print
     845/     449 : D4 3F               		ani 	0x3F 											; make 6 bit ASCII
     846/     44B : CF 01               		st 		@1(p3) 											; write into P3, e.g. the screen and bump it.
     847/     44D : A9 00               		ild 	(p1) 											; increment cursor position and load
     848/     44F : D4 0F               		ani 	15 												; are we at line start ?
     849/     451 : 9C 0C               		jnz 	__PCExit 										; if so, erase the current line.
 AS V1.42 Beta [Bld 102] - source file monitor.asm - page 18 - 11/30/2015 16:45:30


     850/     453 :                     
     851/     453 :                     __PCBlankNewLine:
     852/     453 : C4 10               		ldi 	16 												; count to 16, the number of spaces to write out.
     853/     455 : CA FF               		st 		-1(p2) 
     854/     457 :                     __PCBlankNewLineLoop:
     855/     457 : C4 20               		ldi 	' '
     856/     459 : CF 01               		st 		@1(p3)
     857/     45B : BA FF               		dld 	-1(p2)
     858/     45D : 9C F8               		jnz 	__PCBlankNewLineLoop
     859/     45F :                     
     860/     45F :                     __PCExit:
     861/     45F : C1 00               		ld 		(p1) 											; read cursor
     862/     461 : 33                  		xpal 	p3 												; put in P3.L
     863/     462 : C4 9B               		ldi 	0x9B 											; shaded block cursor on screen
     864/     464 : CB 00               		st 		(p3)
     865/     466 : C6 01               		ld 		@1(p2)											; restore P3
     866/     468 : 33                  		xpal 	p3
     867/     469 : C6 01               		ld 		@1(p2)
     868/     46B : 37                  		xpah 	p3
     869/     46C : C6 01               		ld 		@1(p2)											; restore P1
     870/     46E : 31                  		xpal 	p1
     871/     46F : C6 01               		ld 		@1(p2)
     872/     471 : 35                  		xpah 	p1
     873/     472 : C6 01               		ld 		@1(p2) 											; restore A and Return.	
     874/     474 : 3F                  		xppc 	p3
     875/     475 : 90 AB               		jmp 	PrintCharacter 									; and it is re-entrant.
     876/     477 :                     
     877/     477 :                     __PCBackSpace:
     878/     477 : 33                  		xpal 	p3 												; get current cursor position
     879/     478 : 98 E5               		jz 		__PCExit 										; if top of screen then exit.
     880/     47A : B9 00               		dld 	(p1) 											; backspace and load cursor
     881/     47C : 33                  		xpal 	p3 												; put in P3
     882/     47D : C4 20               		ldi 	' '												; erase character there
     883/     47F : CB 00               		st 		(p3)
     884/     481 : 90 DC               		jmp 	__PCExit 										; and exit.
     885/     483 :                     
     886/     483 :                     __PCNewLine:
     887/     483 : C1 00               		ld 		(p1) 											; read cursor position
     888/     485 : D4 70               		ani 	0x70 											; line
     889/     487 : 02                  		ccl 													; next line
     890/     488 : F4 10               		adi 	0x10
     891/     48A : C9 00               		st 		(p1) 											; write back
     892/     48C : 33                  		xpal 	p3 												; put in P3.L
     893/     48D : 90 C4               		jmp 	__PCBlankNewLine
     894/     48F :                     
     895/     48F :                     ; ****************************************************************************************************************
     896/     48F :                     ; ****************************************************************************************************************
     897/     48F :                     ;
     898/     48F :                     ;					Print current address followed by A data bytes. Doesn't update current address
     899/     48F :                     ;
     900/     48F :                     ; ****************************************************************************************************************
     901/     48F :                     ; ****************************************************************************************************************
     902/     48F :                     
     903/     48F :                     PrintAddressData:
     904/     48F : CE FF               		st 		@-1(p2) 										; save count, we don't restore this.
     905/     491 : C4 03               		ldi 	(PrintHexByte-1)/256 							; save and set up P3
     906/     493 : 37                  		xpah 	p3
     907/     494 : CE FF               		st 		@-1(p2)
     908/     496 : C4 EE               		ldi 	(PrintHexByte-1)&255
     909/     498 : 33                  		xpal 	p3
 AS V1.42 Beta [Bld 102] - source file monitor.asm - page 19 - 11/30/2015 16:45:30


     910/     499 : CE FF               		st 		@-1(p2)
     911/     49B : C4 0C               		ldi 	current / 256 									; point P1 to current address
     912/     49D : 35                  		xpah 	p1
     913/     49E : C4 21               		ldi 	current & 255
     914/     4A0 : 31                  		xpal 	p1
     915/     4A1 : C1 01               		ld 		1(p1) 											; read high byte of address
     916/     4A3 : 02                  		ccl
     917/     4A4 : 3F                  		xppc 	p3												; print w/o leading space
     918/     4A5 : C1 00               		ld 		0(p1)											; read low byte of address
     919/     4A7 : 02                  		ccl 	
     920/     4A8 : 3F                  		xppc 	p3 												; print w/o leading space.
     921/     4A9 : 01                  		xae 													; put in E
     922/     4AA : C1 01               		ld 		1(p1) 											; high byte to P1.H
     923/     4AC : 35                  		xpah 	p1
     924/     4AD : 40                  		lde 													; low byte to P1.H
     925/     4AE : 31                  		xpal 	p1
     926/     4AF :                     _PADLoop:
     927/     4AF : BA 02               		dld 	2(p2) 											; decrement counter
     928/     4B1 : 94 09               		jp 		_PADPrint 										; if +ve print another byte
     929/     4B3 :                     
     930/     4B3 : C6 01               		ld 		@1(p2) 											; restore P3, skipping A hence @2
     931/     4B5 : 33                  		xpal 	p3
     932/     4B6 : C6 02               		ld 		@2(p2)
     933/     4B8 : 37                  		xpah 	p3
     934/     4B9 : 3F                  		xppc 	p3
     935/     4BA : 90 D3               		jmp 	PrintAddressData
     936/     4BC :                     
     937/     4BC :                     _PADPrint:
     938/     4BC : C5 01               		ld 		@1(p1) 											; read byte advance pointer
     939/     4BE : 03                  		scl
     940/     4BF : 3F                  		xppc 	p3 												; print with space.
     941/     4C0 : 90 ED               		jmp 	_PADLoop
     942/     4C2 :                     
     943/     4C2 :                     ; ****************************************************************************************************************
     944/     4C2 :                     ;
     945/     4C2 :                     ;		Look at the parameter string for a parameter, processing @ and Pn as you go, CS if parameter found
     946/     4C2 :                     ; 		CC otherwise. Return parameter value in P1. Falls through
     947/     4C2 :                     ;
     948/     4C2 :                     ; ****************************************************************************************************************
     949/     4C2 :                     
     950/     4C2 :                     GetParameter:
     951/     4C2 : C4 0C               		ldi 	parPosn/256 									; current position into P1
     952/     4C4 : 35                  		xpah 	p1
     953/     4C5 : C4 23               		ldi 	parPosn&255 					
     954/     4C7 : 31                  		xpal 	p1
     955/     4C8 : C4 00               		ldi 	0 												; -1(p2) is the low byte result
     956/     4CA : CA FF               		st 		-1(p2) 											; -2(p2) is the high byte result
     957/     4CC : CA FE               		st 		-2(p2)
     958/     4CE :                     
     959/     4CE : C1 00               		ld 		(p1) 											; read the current position,P1 points to character
     960/     4D0 : 31                  		xpal 	p1 												; when we put it in P1.L
     961/     4D1 :                     
     962/     4D1 :                     __GPASkip:														; skip over spaces to first alphanumeric.
     963/     4D1 : C1 00               		ld 		(p1) 											; read character
     964/     4D3 : 98 7B               		jz 		__GPAExitFail 									; if zero, then end of the input string.
     965/     4D5 : C5 01               		ld 		@1(p1) 											; read it, advancing.
     966/     4D7 : E4 20               		xri 	32 												; is it space ?
     967/     4D9 : 98 F6               		jz 		__GPASkip 
     968/     4DB : E4 60               		xri 	32!'@'											; is it @ ?
     969/     4DD : 98 5E               		jz 		__GPAAtModifier 
 AS V1.42 Beta [Bld 102] - source file monitor.asm - page 20 - 11/30/2015 16:45:30


     970/     4DF : E4 10               		xri 	'@'!'P' 										; is it P ?
     971/     4E1 : 98 4C               		jz 		__GPAPointerModifier
     972/     4E3 :                     
     973/     4E3 :                     __GPANextCharacter:
     974/     4E3 : C1 FF               		ld 		-1(p1) 											; get value back after post increment.
     975/     4E5 : 02                  		ccl
     976/     4E6 : F4 50               		adi 	128-48 											; this will be +ve if A < '0'
     977/     4E8 : 94 66               		jp 		__GPAExitFail
     978/     4EA : FC 09               		cai 	9 												; will be +ve if A < '9', CY/L was clear.	
     979/     4EC : 94 0A               		jp 		__GPAFoundHex
     980/     4EE : FC 07               		cai 	7 												; will be +ve if A < 'A', CY/L was set
     981/     4F0 : 94 5E               		jp 		__GPAExitFail
     982/     4F2 : F4 79               		adi 	0xFF-0x85-1 									; will be +ve if A > 'F', CY/L was set.
     983/     4F4 : 94 5A               		jp 		__GPAExitFail 					
     984/     4F6 : F4 76               		adi 	(0x70-0xFA) & 0xFF 								; make the range as below, CY/L was clear
     985/     4F8 :                     __GPAFoundHex: 													; enter here 0-9 = $76..$7F, A-F = $70..$75
     986/     4F8 : 02                  		ccl  													; convert that to a hex nibble.
     987/     4F9 : F4 0A               		adi 	10
     988/     4FB : D4 0F               		ani 	0xF
     989/     4FD : 01                  		xae 													; save in E, temporarily
     990/     4FE : C4 04               		ldi 	4 												; now shift the result 4 bits to the left.
     991/     500 : CA FD               		st 		-3(p2) 											; -3(p2) is the counter
     992/     502 :                     __GPAShift:
     993/     502 : 02                  		ccl
     994/     503 : C2 FF               		ld 		-1(p2) 											; shift 16 bit result 1 bit to the left.
     995/     505 : F2 FF               		add 	-1(p2)
     996/     507 : CA FF               		st 		-1(p2)
     997/     509 : C2 FE               		ld 		-2(p2)
     998/     50B : F2 FE               		add 	-2(p2)
     999/     50D : CA FE               		st 		-2(p2)
    1000/     50F : BA FD               		dld 	-3(p2) 											; do it four times
    1001/     511 : 9C EF               		jnz 	__GPAShift 	
    1002/     513 : C2 FF               		ld 		-1(p2) 											; Or E into the LSB
    1003/     515 : 58                  		ore
    1004/     516 : CA FF               		st 		-1(p2)
    1005/     518 :                     
    1006/     518 : C5 01               		ld 		@1(p1) 											; look at next character, post incrementing.
    1007/     51A : 03                  		scl
    1008/     51B : FC 22               		cai 	34 												; if it is after space and ! (label marker)
    1009/     51D : 94 C4               		jp 		__GPANextCharacter 								; go back and put it in place.
    1010/     51F :                     
    1011/     51F : C5 FF               		ld 		@-1(p1) 										; undo the increment, incase we've just read zero.
    1012/     521 :                     
    1013/     521 : C4 23               		ldi 	parPosn & 255 									; put the parPosn address in P1.L, new posn into A
    1014/     523 : 31                  		xpal 	p1
    1015/     524 : C9 00               		st 		(p1) 											; and write it back
    1016/     526 : C2 FF               		ld 		-1(p2) 											; put the result into P1
    1017/     528 : 31                  		xpal 	p1
    1018/     529 : C2 FE               		ld 		-2(p2)
    1019/     52B : 35                  		xpah 	p1
    1020/     52C : 03                  		scl 													; set CY/L to indicate okay
    1021/     52D : 90 22               		jmp 	__GPAExit
    1022/     52F :                     
    1023/     52F :                     __GPAPointerModifier:
    1024/     52F : C1 00               		ld 		(p1) 											; read P<something> ?
    1025/     531 : D4 FC               		ani 	0xFC 											; is it '0' .. '3'?
    1026/     533 : E4 30               		xri 	'0'
    1027/     535 : 9C 19               		jnz 	__GPAExitFail 									; it didn't work, not 0..3
    1028/     537 : C5 01               		ld 		@1(p1) 											; re-read it and advance
    1029/     539 : D4 03               		ani 	3												; lower 2 bits only
 AS V1.42 Beta [Bld 102] - source file monitor.asm - page 21 - 11/30/2015 16:45:30


    1030/     53B : 90 02               		jmp 	__GPAAdjustModifier
    1031/     53D :                     __GPAAtModifier:
    1032/     53D : C4 04               		ldi 	4 												; set modifier adjustment to +4
    1033/     53F :                     __GPAAdjustModifier:
    1034/     53F : CA FD               		st 		-3(p2) 
    1035/     541 : C4 24               		ldi 	modifier & 255 									; point P1 to modifier, save current address in E
    1036/     543 : 31                  		xpal 	p1
    1037/     544 : 01                  		xae 
    1038/     545 : C1 00               		ld 		(p1) 											; read modifier
    1039/     547 : 02                  		ccl
    1040/     548 : F2 FD               		add 	-3(p2) 											; add the modifying value to it.
    1041/     54A : C9 00               		st 		(p1) 											; write modifier.
    1042/     54C : 40                  		lde 													; restore current address to P1.L
    1043/     54D : 31                  		xpal 	p1
    1044/     54E : 90 81               		jmp 	__GPASkip 										; go back to skip over.
    1045/     550 :                     
    1046/     550 :                     __GPAExitFail:
    1047/     550 : 02                  		ccl 													; carry clear, e.g. nothing read in / error.
    1048/     551 :                     __GPAExit:
    1049/     551 : 3F                  		xppc 	p3
    1050/     552 :                     
    1051/     552 :                     ; ****************************************************************************************************************
    1052/     552 :                     ;
    1053/     552 :                     ;		Store parameter value in P1 in the current address, if CS. Falls through.
    1054/     552 :                     ;
    1055/     552 :                     ; ****************************************************************************************************************
    1056/     552 :                     
    1057/     552 :                     UpdateCurrentAddress:
    1058/     552 : 06                  		csa 													; get status reg
    1059/     553 : 94 0C               		jp 		__UCAExit 										; if carry flag clear then exit.
    1060/     555 :                     
    1061/     555 : C4 21               		ldi 	current & 255 									; current address to P1.L, acquired address to E
    1062/     557 : 31                  		xpal 	p1
    1063/     558 : 01                  		xae
    1064/     559 : C4 0C               		ldi 	current / 256 									; current address to P1.H, acquired to A
    1065/     55B : 35                  		xpah 	p1
    1066/     55C : C9 01               		st 		1(p1) 											; store address back
    1067/     55E : 40                  		lde
    1068/     55F : C9 00               		st 		0(p1)
    1069/     561 :                     __UCAExit:
    1070/     561 : 3F                  		xppc 	p3
    1071/     562 :                     
    1072/     562 :                     ; ****************************************************************************************************************
    1073/     562 :                     ;
    1074/     562 :                     ;		Get current address into P1.
    1075/     562 :                     ;
    1076/     562 :                     ; ****************************************************************************************************************
    1077/     562 :                     
    1078/     562 :                     GetCurrentAddress:
    1079/     562 : C4 0C               		ldi 	current/256 									; current address ptr in P1
    1080/     564 : 35                  		xpah 	p1
    1081/     565 : C4 21               		ldi 	current&255
    1082/     567 : 31                  		xpal 	p1
    1083/     568 : C1 00               		ld 		0(p1) 											; low byte to E
    1084/     56A : 01                  		xae
    1085/     56B : C1 01               		ld 		1(p1) 											; high byte to A
    1086/     56D : 35                  		xpah 	p1 												; then to P1.H
    1087/     56E : 40                  		lde 													; low byte to P1.L
    1088/     56F : 31                  		xpal 	p1 
    1089/     570 : 3F                  		xppc 	p3
 AS V1.42 Beta [Bld 102] - source file monitor.asm - page 22 - 11/30/2015 16:45:30


    1090/     571 :                     
    1091/     571 :                     ; ****************************************************************************************************************
    1092/     571 :                     ;
    1093/     571 :                     ;											List of commands and Jump Table
    1094/     571 :                     ;
    1095/     571 :                     ; ****************************************************************************************************************
    1096/     571 :                     
    1097/     571 :                     		include commands.inc 									; must be at the end, so the command table is in
(1)    1/     747 :                             org 0x0747
(1)    2/     747 :                     ;
(1)    3/     747 :                     ; 	This file is generated automatically by gencommands.py
(1)    4/     747 :                     ;
(1)    5/     747 :                     __CommandList:
(1)    6/     747 : 94 21                       dw    0x2194 ; HLT
(1)    7/     749 : 00                          db    0x00
(1)    8/     74A : 25 60                       dw    0x6025 ; XAE
(1)    9/     74C : 01                          db    0x01
(1)   10/     74D : 6C 0C                       dw    0x0c6c ; CCL
(1)   11/     74F : 02                          db    0x02
(1)   12/     750 : 6C 4C                       dw    0x4c6c ; SCL
(1)   13/     752 : 03                          db    0x03
(1)   14/     753 : 2E 11                       dw    0x112e ; DIN
(1)   15/     755 : 04                          db    0x04
(1)   16/     756 : AE 24                       dw    0x24ae ; IEN
(1)   17/     758 : 05                          db    0x05
(1)   18/     759 : 61 0E                       dw    0x0e61 ; CSA
(1)   19/     75B : 06                          db    0x06
(1)   20/     75C : 33 0C                       dw    0x0c33 ; CAS
(1)   21/     75E : 07                          db    0x07
(1)   22/     75F : F0 39                       dw    0x39f0 ; NOP
(1)   23/     761 : 08                          db    0x08
(1)   24/     762 : 2F 4D                       dw    0x4d2f ; SIO
(1)   25/     764 : 19                          db    0x19
(1)   26/     765 : 72 02                       dw    0x0272 ; SR
(1)   27/     767 : 1C                          db    0x1c
(1)   28/     768 : 4C 4E                       dw    0x4e4c ; SRL
(1)   29/     76A : 1D                          db    0x1d
(1)   30/     76B : 52 02                       dw    0x0252 ; RR
(1)   31/     76D : 1E                          db    0x1e
(1)   32/     76E : 4C 4A                       dw    0x4a4c ; RRL
(1)   33/     770 : 1F                          db    0x1f
(1)   34/     771 : 0D 00                       dw    0x000d ; M
(1)   35/     773 : 20                          db    0x20
(1)   36/     774 : 01 00                       dw    0x0001 ; A
(1)   37/     776 : 21                          db    0x21
(1)   38/     777 : 07 00                       dw    0x0007 ; G
(1)   39/     779 : 22                          db    0x22
(1)   40/     77A : B4 42                       dw    0x42b4 ; PUT
(1)   41/     77C : 23                          db    0x23
(1)   42/     77D : B4 1C                       dw    0x1cb4 ; GET
(1)   43/     77F : 24                          db    0x24
(1)   44/     780 : 03 00                       dw    0x0003 ; C
(1)   45/     782 : 25                          db    0x25
(1)   46/     783 : 02 00                       dw    0x0002 ; B
(1)   47/     785 : 26                          db    0x26
(1)   48/     786 : 0C 00                       dw    0x000c ; L
(1)   49/     788 : 27                          db    0x27
(1)   50/     789 : 04 00                       dw    0x0004 ; D
(1)   51/     78B : 28                          db    0x28
(1)   52/     78C : 0C 62                       dw    0x620c ; XPL
 AS V1.42 Beta [Bld 102] - source file monitor.asm(commands.inc) - page 23 - 11/30/2015 16:45:30


(1)   53/     78E : 30                          db    0x30
(1)   54/     78F : 08 62                       dw    0x6208 ; XPH
(1)   55/     791 : 34                          db    0x34
(1)   56/     792 : 03 62                       dw    0x6203 ; XPC
(1)   57/     794 : 3C                          db    0x3c
(1)   58/     795 : 85 30                       dw    0x3085 ; LDE
(1)   59/     797 : 40                          db    0x40
(1)   60/     798 : C5 05                       dw    0x05c5 ; ANE
(1)   61/     79A : 50                          db    0x50
(1)   62/     79B : 45 3E                       dw    0x3e45 ; ORE
(1)   63/     79D : 58                          db    0x58
(1)   64/     79E : 45 62                       dw    0x6245 ; XRE
(1)   65/     7A0 : 60                          db    0x60
(1)   66/     7A1 : 25 10                       dw    0x1025 ; DAE
(1)   67/     7A3 : 68                          db    0x68
(1)   68/     7A4 : 85 04                       dw    0x0485 ; ADE
(1)   69/     7A6 : 70                          db    0x70
(1)   70/     7A7 : 25 0C                       dw    0x0c25 ; CAE
(1)   71/     7A9 : 78                          db    0x78
(1)   72/     7AA : 99 11                       dw    0x1199 ; DLY
(1)   73/     7AC : 8F                          db    0x8f
(1)   74/     7AD : B0 29                       dw    0x29b0 ; JMP
(1)   75/     7AF : 90                          db    0x90
(1)   76/     7B0 : 50 01                       dw    0x0150 ; JP
(1)   77/     7B2 : 94                          db    0x94
(1)   78/     7B3 : 5A 01                       dw    0x015a ; JZ
(1)   79/     7B5 : 98                          db    0x98
(1)   80/     7B6 : DA 29                       dw    0x29da ; JNZ
(1)   81/     7B8 : 9C                          db    0x9c
(1)   82/     7B9 : 84 25                       dw    0x2584 ; ILD
(1)   83/     7BB : A8                          db    0xa8
(1)   84/     7BC : 84 11                       dw    0x1184 ; DLD
(1)   85/     7BE : B8                          db    0xb8
(1)   86/     7BF : 84 01                       dw    0x0184 ; LD
(1)   87/     7C1 : C0                          db    0xc0
(1)   88/     7C2 : 89 30                       dw    0x3089 ; LDI
(1)   89/     7C4 : C4                          db    0xc4
(1)   90/     7C5 : 74 02                       dw    0x0274 ; ST
(1)   91/     7C7 : C8                          db    0xc8
(1)   92/     7C8 : C4 05                       dw    0x05c4 ; AND
(1)   93/     7CA : D0                          db    0xd0
(1)   94/     7CB : C9 05                       dw    0x05c9 ; ANI
(1)   95/     7CD : D4                          db    0xd4
(1)   96/     7CE : F2 01                       dw    0x01f2 ; OR
(1)   97/     7D0 : D8                          db    0xd8
(1)   98/     7D1 : 49 3E                       dw    0x3e49 ; ORI
(1)   99/     7D3 : DC                          db    0xdc
(1)  100/     7D4 : F2 61                       dw    0x61f2 ; XOR
(1)  101/     7D6 : E0                          db    0xe0
(1)  102/     7D7 : 49 62                       dw    0x6249 ; XRI
(1)  103/     7D9 : E4                          db    0xe4
(1)  104/     7DA : 24 10                       dw    0x1024 ; DAD
(1)  105/     7DC : E8                          db    0xe8
(1)  106/     7DD : 29 10                       dw    0x1029 ; DAI
(1)  107/     7DF : EC                          db    0xec
(1)  108/     7E0 : 84 04                       dw    0x0484 ; ADD
(1)  109/     7E2 : F0                          db    0xf0
(1)  110/     7E3 : 89 04                       dw    0x0489 ; ADI
(1)  111/     7E5 : F4                          db    0xf4
(1)  112/     7E6 : 24 0C                       dw    0x0c24 ; CAD
 AS V1.42 Beta [Bld 102] - source file monitor.asm(commands.inc) - page 24 - 11/30/2015 16:45:30


(1)  113/     7E8 : F8                          db    0xf8
(1)  114/     7E9 : 29 0C                       dw    0x0c29 ; CAI
(1)  115/     7EB : FC                          db    0xfc
(1)  116/     7EC :                     __CommandListEnd:
(1)  117/     7EC : 00 00                       dw    0x0000 ; End Marker	
(1)  118/     7EE :                     
(1)  119/     7EE :                     __CommandTable:
(1)  120/     7EE : D6 02                       dw    MemoryDump_Command
(1)  121/     7F0 : 1F 02                       dw    Address_Command
(1)  122/     7F2 : 32 02                       dw    Go_Command
(1)  123/     7F4 : 3F 02                       dw    PutTape_Command
(1)  124/     7F6 : 90 02                       dw    LoadTape_Command
(1)  125/     7F8 : B7 00                       dw    ClearScreen_Command
(1)  126/     7FA : 00 03                       dw    EnterBytes_Command
(1)  127/     7FC : B8 02                       dw    Label_Command
(1)  128/     7FE : 22 03                       dw    Disassemble_Command
(1)  129/     800 :                     
    1098/     800 :                     																; the same page.
    1099/     800 :                     
    1100/     800 :                     ; ****************************************************************************************************************
    1101/     800 :                     ;
    1102/     800 :                     ;													Tape Format. 
    1103/     800 :                     ;
    1104/     800 :                     ; ****************************************************************************************************************
    1105/     800 :                     ;
    1106/     800 :                     ;		1 x start bit 		'1' value is held for period of time.
    1107/     800 :                     ;		8 x data bits  		'0 or 1' value is held for a period of time.
    1108/     800 :                     ;		1 x continuation	'0' if another bit follows, '1' if end.
    1109/     800 :                     ;		at least 2 bit times between bytes.
    1110/     800 :                     ;
    1111/     800 :                     ;		Use DLY 4 with A = 0 (DLY 6 to skip half-start)
    1112/     800 :                     ; 		= 13 + 2 * 0 + 514 * 4 microcycles
    1113/     800 :                     ;		= 2,069 microcycles
    1114/     800 :                     ;	
    1115/     800 :                     ;		which is about 240 bits per second.
    1116/     800 :                     ;
    1117/     800 :                     ; ****************************************************************************************************************
    1118/     800 :                     ;
    1119/     800 :                     ;												Monitor Commands
    1120/     800 :                     ;
    1121/     800 :                     ; ****************************************************************************************************************
    1122/     800 :                     ;
    1123/     800 :                     ;		A [aaaa] 			Set current address to aaaa
    1124/     800 :                     ;		B [cc] [dd] [ee]..	Fill memory from current address
    1125/     800 :                     ; 		C 					Clear screen
    1126/     800 :                     ;		D [aaaa] 			Disassemble from aaaa (not complete yet)
    1127/     800 :                     ;		G aaaa 				Run from address - address must be given - return with XPPC P3
    1128/     800 :                     ; 		L n 				Set label n to the current address (up to 32 labels 00-1F)
    1129/     800 :                     ; 		M [aaaa] 			Memory dump from current address/aaaa (6 lines, 4 bytes per line)
    1130/     800 :                     ; 		GET [aaaa] 			Load tape to current address/aaa
    1131/     800 :                     ;		PUT [nnnn]			Write nnnn bytes from current address onwards to tape.
    1132/     800 :                     ;
    1133/     800 :                     ;		Command Line Assembler
    1134/     800 :                     ;
    1135/     800 :                     ;		Standard SC/MP mnemonics, except for XPAH, XPAL, XPPC, HALT and DINT which are XPH XPL XPC HLT DIN
    1136/     800 :                     ;		respectively (4 character mnemonics not supported)
    1137/     800 :                     ;
    1138/     800 :                     ;		Address modes are written as such:
    1139/     800 :                     ;
    1140/     800 :                     ;		Direct:			LD 	address 					(offset auto calculated, also for jump)
 AS V1.42 Beta [Bld 102] - source file monitor.asm - page 25 - 11/30/2015 16:45:30


    1141/     800 :                     ;		Indexed:		LD  P1 7 						(normally ld 7(p1))
    1142/     800 :                     ;		Immediate:		DLY 42 					
    1143/     800 :                     ;		AutoIndexed:	LD @P1 4 						(normally ld @4(p1))
    1144/     800 :                     ;
    1145/     800 :                     ;		Labels are accessed via the pling, so to jump to label 4 rather than address 4 you write
    1146/     800 :                     ;
    1147/     800 :                     ;		JMP 4!
    1148/     800 :                     ;
    1149/     800 :                     ; ****************************************************************************************************************
    1150/     800 :                     
 AS V1.42 Beta [Bld 102] - source file monitor.asm - page 26 - 11/30/2015 16:45:30


  symbol table (* = unused):
  ------------------------

 ADDRESS_COMMAND :              21F C |  AHI [SCMPMULTIPLY] :             3 - |
 ALO [SCMPMULTIPLY] :             2 - | *ARCHITECTURE :  i386-unknown-win32 - |
 BHI [SCMPMULTIPLY] :             1 - | *BIGENDIAN :                      0 - |
 BLO [SCMPMULTIPLY] :             0 - |  BOOTMONITOR :                   99 C |
*BRANCHEXT :                      0 - | *CASESENSITIVE :                  0 - |
 CLEARSCREENLOOP :               BC C |  CLEARSCREEN_COMMAND :           B7 C |
 CODESTART :                    C35 - |  COMMANDMAINLOOP :               CE C |
*CONSTPI :        3.141592653589793 - |  CURRENT :                      C21 - |
 CURSOR :                       C20 - | *DATE :                  11/30/2015 - |
 DISASSEMBLE_COMMAND :          322 C |  ENTERBYTES_COMMAND :           300 C |
 EXTRACT5BIT :                  139 C | *FALSE :                          0 - |
 FINDTOPMEMORY :                 A1 C | *FULLPMMU :                       1 - |
*GETCURRENTADDRESS :            562 C |  GETPARAMETER :                 4C2 C |
*GOBOOT :                         3 C |  GO_COMMAND :                   232 C |
*HAS64 :                          1 - | *HASDSP :                         0 - |
*HASFPU :                         0 - | *HASPMMU :                        0 - |
*INEXTMODE :                      0 - | *INLWORDMODE :                    0 - |
*INMAXMODE :                      0 - | *INSRCMODE :                      0 - |
*INSUPMODE :                      0 - |  KBDBUFFER :                    C25 - |
 KBDBUFFERLN :                   10 - |  KEYBOARDLOOP :                  E3 C |
 LABELCOUNT :                    20 - |  LABELS :                       C00 - |
 LABEL_COMMAND :                2B8 C | *LISTON :                         1 - |
 LOADTAPE_COMMAND :             290 C | *MACEXP :                         1 - |
 MATHS :                          A C |  MATH_ADD :                      34 C |
 MATH_DIVIDE :                   97 C |  MATH_EXIT :                     32 C |
*MATH_EXIT1 :                    95 C |  MATH_MULTIPLY :                 52 C |
 MATH_SUBTRACT :                 43 C |  MEMORYDUMP_COMMAND :           2D6 C |
 MODIFIER :                     C24 - | *MOMCPU :                         C - |
*MOMCPUNAME :                 SC/MP - |  N1 :                           200 - |
 N2 :                            10 - | *NESTMAX :                      100 - |
*PACKING :                        0 - | *PADDING :                        1 - |
 PARPOSN :                      C23 - |  PRINTADDRESSDATA :             48F C |
 PRINTCHARACTER :               422 C |  PRINTHEXBYTE :                 3EF C |
 PUTTAPE_COMMAND :              23F C | *RELAXED :                        0 - |
 RESULTHI [SCMPMULTIPLY] :                                 FFFFFFFFFFFFFFFF - |
 RESULTLO [SCMPMULTIPLY] :                                 FFFFFFFFFFFFFFFE - |
 TAPEDELAY :                      4 - | *TIME :                    16:45:30 - |
*TRUE :                           1 - | *UPDATECURRENTADDRESS :         552 C |
 VARBASE :                      C20 - | *VERSION :                     142F - |
 _KBDWAITKEY :                   EC C |  _KBDWAITRELEASE :               E6 C |
 _PADLOOP :                     4AF C |  _PADPRINT :                    4BC C |
 _PUTTAPEBIT :                  26F C |  _PUTTAPEBYTE :                 25A C |
 _PUTTAPELEADER :               254 C |  __ASMCONTINUE :                1DD C |
 __ASMEXIT :                    215 C |  __ASMNOPARAMETER :             1D5 C |
 __ASSEMBLER :                  1A6 C |  __CMDMAINLOOP1 :               12A C |
 __CMDMAINLOOP2 :               22B C |  __CMDMAINLOOP3 :               23D C |
 __CMDMAINLOOP4 :               28C C |  __CMDMAINLOOP5 :               2B6 C |
 __CMDMAINLOOP6 :               2FE C |  __CMDMAINLOOP7 :               36A C |
 __CMDPARAMETERFAIL :           223 C |  __CMDPARAMETERFAIL1 :          28E C |
 __COMMANDERROR :               19C C |  __COMMANDLIST :                747 C |
 __COMMANDLISTEND :             7EC C |  __COMMANDTABLE :               7EE C |
 __DASSFINDOPCODE :             351 C |  __DASSFOUNDOPCODE :            36C C |
 __DASSLOOP :                   328 C |  __DASSLOOP2 :                  368 C |
 __DASSNEXT :                   3C6 C |  __DASSNEXTOPCODE :             364 C |
 __DASSNOOPERAND :              347 C |  __DASSNOTAUTOINDEXED :         3E3 C |
 __DASSNOTIMMEDIATE :           378 C |  __DASSPRINTMNEMONIC :          38D C |
 __DASSPRINTMODIFIER :          3D7 C |  __DASSPRINTOPERAND :           3B8 C |
 AS V1.42 Beta [Bld 102] - source file monitor.asm - page 27 - 11/30/2015 16:45:30


 __DASSSHIFTENCODE :            39D C |  __DASSSKIPSPACE :              399 C |
 __DCLOOP :                     2DC C |  __EX5SHIFT :                   144 C |
 __EXTRACTEND :                 15A C |  __FINDCOMMANDLOOP :            165 C |
 __GETTAPEBITS :                2A6 C |  __GETTAPEWAIT :                296 C |
 __GPAADJUSTMODIFIER :          53F C |  __GPAATMODIFIER :              53D C |
 __GPAEXIT :                    551 C |  __GPAEXITFAIL :                550 C |
 __GPAFOUNDHEX :                4F8 C |  __GPANEXTCHARACTER :           4E3 C |
 __GPAPOINTERMODIFIER :         52F C |  __GPASHIFT :                   502 C |
 __GPASKIP :                    4D1 C |  __KBDBACKSPACE :               11E C |
 __KBDEXIT :                    12C C |  __KBDNOTLOWER :                112 C |
 __MULTIPLYEXIT [SCMPMULTIPLY] : 8B C |  __MULTIPLYLOOP [SCMPMULTIPLY] : 58 C |
 __MULTIPLYNOADD [SCMPMULTIPLY] : 71 C |
 __PCBACKSPACE :                477 C |  __PCBLANKNEWLINE :             453 C |
 __PCBLANKNEWLINELOOP :         457 C |  __PCEXIT :                     45F C |
 __PCNEWLINE :                  483 C |  __PHBNOSPACE :                 401 C |
 __UCAEXIT :                    561 C |

    142 symbols
     32 unused symbols

 AS V1.42 Beta [Bld 102] - source file monitor.asm - page 28 - 11/30/2015 16:45:30


  codepages:
  ----------

STANDARD (0 changed characters)


0.02 seconds assembly time

   1450 lines source file
      2 passes
      0 errors
      0 warnings
