 AS V1.42 Beta [Bld 102] - source file monitor.asm - page 1 - 12/5/2015 9:10:16


       1/       0 :                     ; ******************************************************************************************************************
       2/       0 :                     ; ******************************************************************************************************************
       3/       0 :                     ;
       4/       0 :                     ;												Machine Language Monitor
       5/       0 :                     ;
       6/       0 :                     ; ******************************************************************************************************************
       7/       0 :                     ; ******************************************************************************************************************
       8/       0 :                     
       9/       0 :                     		cpu	sc/mp
      10/       0 :                     
      11/       0 : =0xC00              labels 		= 0xC00												; labels, 1 byte each
      12/       0 : =0x18               labelCount 	= 24 												; number of labels.
      13/       0 :                     
      14/       0 : =0xC18              varBase 	= labels+labelCount 								; variables after labels start here.
      15/       0 :                     
      16/       0 : =0xC18              cursor 		= varBase 											; cursor position ($00-$7F)
      17/       0 : =0xC19              current 	= varBase+1 										; current address (lo,hi)
      18/       0 : =0xC1B              isInit      = varBase+3 										; if already initialised, this is $A7.
      19/       0 : =0xC1C              parPosn		= varBase+4 										; current param offset in buffer (low addr)
      20/       0 : =0xC1D              modifier  	= varBase+5 										; instruction modifier (@,Pn) when assembling.
      21/       0 : =0xC1E              kbdBuffer 	= varBase+6 										; 16 character keyboard buffer
      22/       0 : =0x10               kbdBufferLn = 16 										
      23/       0 :                     
      24/       0 : =0xC2E              codeStart 	= kbdBuffer+kbdBufferLn								; user code starts here after the keyboard buffer.
      25/       0 :                     														
      26/       0 : =0x4                tapeDelay 	= 4 												; DLY parameter for 1 tape bit width.
      27/       0 :                     																; (smaller = faster tape I/O - see file end.)
      28/       0 :                     
      29/       0 :                     		org 	0x0000
      30/       0 : 08                  		nop 													; mandatory pre-increment NOP
      31/       1 :                     
      32/       1 :                     		include maths.asm 										; import the maths routines, accessed via $0003
(1)    1/       1 :                     ; ******************************************************************************************************************
(1)    2/       1 :                     ; ******************************************************************************************************************
(1)    3/       1 :                     ;
(1)    4/       1 :                     ;										16 bit Arithmetic routines
(1)    5/       1 :                     ;
(1)    6/       1 :                     ; ******************************************************************************************************************
(1)    7/       1 :                     ; ******************************************************************************************************************
(1)    8/       1 :                     
(1)    9/       1 : 90 02               	jmp	 	GoBoot 												; this will be at location 1.
(1)   10/       3 : 90 43               	jmp 	Maths 												; maths routine, at location 3.
(1)   11/       5 :                     
(1)   12/       5 :                     	; any other routines you care to call.
(1)   13/       5 :                     
(1)   14/       5 :                     GoBoot:
(1)   15/       5 : C4 05               	ldi 	(BootMonitor-1) & 255 								; jump to Boot Monitor
(1)   16/       7 : 33                  	xpal 	p3
(1)   17/       8 : C4 02               	ldi 	(BootMonitor-1) / 256
(1)   18/       A : 37                  	xpah 	p3
(1)   19/       B : 3F                  	xppc 	p3
(1)   20/       C :                     
(1)   21/       C :                     ; ******************************************************************************************************************
(1)   22/       C :                     ;											16 Bit shift left/right macros
(1)   23/       C :                     ; ******************************************************************************************************************
(1)   24/       C :                     
(1)   25/       C :                     shiftLeft macro val
(1)   26/       C :                     	ccl 													
(1)   27/       C :                     	ld 		val(p2)
(1)   28/       C :                     	add 	val(p2)
 AS V1.42 Beta [Bld 102] - source file monitor.asm(maths.asm) - page 2 - 12/5/2015 9:10:16


(1)   29/       C :                     	st 		val(p2)
(1)   30/       C :                     	ld 		val+1(p2)
(1)   31/       C :                     	add 	val+1(p2)
(1)   32/       C :                     	st 		val+1(p2)		
(1)   33/       C :                     	endm
(1)   34/       C :                     
(1)   35/       C :                     shiftRight macro val
(1)   36/       C :                     	ccl
(1)   37/       C :                     	ld 		val+1(p2)
(1)   38/       C :                     	rrl 
(1)   39/       C :                     	st 		val+1(p2)
(1)   40/       C :                     	ld 		val(p2)
(1)   41/       C :                     	rrl 
(1)   42/       C :                     	st 		val(p2)
(1)   43/       C :                     	endm
(1)   44/       C :                     
(1)   45/       C :                     ; ******************************************************************************************************************
(1)   46/       C :                     ;										$ (Integer -> ASCII, p1 backwards)
(1)   47/       C :                     ; ******************************************************************************************************************
(1)   48/       C :                     
(1)   49/       C :                     MATH_ToASCII:
(1)   50/       C : C4 00               	ldi 	0 												; write a terminating NULL to the string
(1)   51/       E : C9 00               	st 		0(p1)
(1)   52/      10 :                     
(1)   53/      10 : C6 FE               	ld 		@-2(p2) 										; reserve 2 spaces on the stack.
(1)   54/      12 : C2 03               	ld 		3(p2) 											; copy original TOS to new TOS
(1)   55/      14 : CA 01               	st 		1(p2)
(1)   56/      16 : C2 02               	ld 		2(p2)
(1)   57/      18 : CA 00               	st 		0(p2)
(1)   58/      1A :                     
(1)   59/      1A : 37                  	xpah 	p3 												; save P3 on stack.
(1)   60/      1B : CA 03               	st 		3(p2) 											; where the number has just come from
(1)   61/      1D : 33                  	xpal 	p3												; we restore P3 last.
(1)   62/      1E : CA 02               	st 		2(p2)
(1)   63/      20 :                     
(1)   64/      20 :                     __ToASCII_Loop:
(1)   65/      20 : C4 00               	ldi 	(Maths-1)/256 									; set P3 to Maths routine
(1)   66/      22 : 37                  	xpah 	p3
(1)   67/      23 : C4 47               	ldi 	(Maths-1)&255
(1)   68/      25 : 33                  	xpal 	p3
(1)   69/      26 : C4 00               	ldi 	0  												; push 10 on the stack
(1)   70/      28 : CE FF               	st 		@-1(p2)
(1)   71/      2A : C4 0A               	ldi 	10
(1)   72/      2C : CE FF               	st 		@-1(p2)
(1)   73/      2E : C4 5C               	ldi 	'\\'											; unsigned division
(1)   74/      30 : 3F                  	xppc 	p3 												; calculate the result.
(1)   75/      31 :                     
(1)   76/      31 : C2 FE               	ld 		-2(p2) 											; get the remainder
(1)   77/      33 : DC 30               	ori 	'0'												; make ASCII
(1)   78/      35 : CD FF               	st 		@-1(p1) 										; save in the buffer, moving pointer backwards.
(1)   79/      37 :                     
(1)   80/      37 : C2 00               	ld 		0(p2) 											; loop back if TOS non zero
(1)   81/      39 : DA 01               	or 		1(p2)
(1)   82/      3B : 9C E3               	jnz 	__ToASCII_Loop
(1)   83/      3D :                     
(1)   84/      3D : C6 02               	ld 		@2(p2) 											; throw that away
(1)   85/      3F :                     
(1)   86/      3F : C6 01               	ld 		@1(p2) 											; restore P3
(1)   87/      41 : 33                  	xpal 	p3
(1)   88/      42 : C6 01               	ld 		@1(p2)
 AS V1.42 Beta [Bld 102] - source file monitor.asm(maths.asm) - page 3 - 12/5/2015 9:10:16


(1)   89/      44 : 37                  	xpah 	p3
(1)   90/      45 : 02                  	ccl 													; result is fine.
(1)   91/      46 : 90 1F               	jmp 	MATH_Exit
(1)   92/      48 :                     
(1)   93/      48 :                     ; ******************************************************************************************************************
(1)   94/      48 :                     ;
(1)   95/      48 :                     ;		Maths routines : the (P2) stack functions as a number stack.  So to push $1234 on the stack you do
(1)   96/      48 :                     ;
(1)   97/      48 :                     ;		ld 	#$12
(1)   98/      48 :                     ;		st 	@-1(p2) 					1(p2) is the MSB of TOS
(1)   99/      48 :                     ;		ld 	#$34
(1)  100/      48 :                     ;		st 	@-1(p2) 					0(p2) is the LSB of TOS
(1)  101/      48 :                     ;
(1)  102/      48 :                     ;		on entry, A is the function (+,-,*,/ etc.). P2 should be left in the 'correct' state afterwards,
(1)  103/      48 :                     ;		so if you add two numbers then p2 will be 2 higher than when the routine was entered.
(1)  104/      48 :                     ;
(1)  105/      48 :                     ;		Supported : + - (add/subtract)
(1)  106/      48 :                     ;					* 	(multiply) 
(1)  107/      48 :                     ;					/ 	(signed divide) 
(1)  108/      48 :                     ;					\ 	(unsigned divide)
(1)  109/      48 :                     ;					? 	(ASCII @ p1 -> Integer. CS on error. P1 points to first non numeric character
(1)  110/      48 :                     ;					$ 	(Integer -> ASCII @p1. On start, p1 should point to the end of butter as written backwards)
(1)  111/      48 :                     ;
(1)  112/      48 :                     ;		Returns CS on error:
(1)  113/      48 :                     ;				Divisons			Division by zero error, no change to the stack values
(1)  114/      48 :                     ;				ASCII->Integer 		No legal number, p1 points to 'bad' character, no change to stack.
(1)  115/      48 :                     ;									(Note that the conversion is terminated by the first non digit, so this
(1)  116/      48 :                     ;									 error means the first character was not a digit.)
(1)  117/      48 :                     ;
(1)  118/      48 :                     ;		For both divisions, the remainder is kept on the stack immediately below the TOS, this is by design.
(1)  119/      48 :                     ;		and can be accessed by ld -1(p2) (hi) ld -2(p2) (lo).
(1)  120/      48 :                     ;
(1)  121/      48 :                     ;
(1)  122/      48 :                     ;		Note that division uses a fair chunk of the stack :)
(1)  123/      48 :                     ;
(1)  124/      48 :                     ; ******************************************************************************************************************
(1)  125/      48 :                     
(1)  126/      48 :                     Maths:															; maths support routine.
(1)  127/      48 : E4 24               	xri 	'$'													; integer to ASCII conversion
(1)  128/      4A : 98 C0               	jz 		MATH_ToASCII
(1)  129/      4C : E4 0F               	xri 	'$'!'+' 											; 16 bit addition
(1)  130/      4E : 98 1A               	jz 		MATH_Add 
(1)  131/      50 : E4 06               	xri 	'+'!'-' 											; 16 bit subtraction
(1)  132/      52 : 98 26               	jz 		MATH_Subtract
(1)  133/      54 : E4 07               	xri 	'-'!'*'												; 16 bit signed/unsigned multiplication
(1)  134/      56 : 98 34               	jz 		MATH_Multiply 										
(1)  135/      58 : E4 05               	xri 	'*'!'/' 											; 16 bit signed division
(1)  136/      5A : 02                  	ccl 
(1)  137/      5B : 98 75               	jz 		MATH_Divide2
(1)  138/      5D : E4 73               	xri 	'/'!'\\' 											; 16 bit unsigned division
(1)  139/      5F : 03                  	scl
(1)  140/      60 : 98 70               	jz 		MATH_Divide2
(1)  141/      62 : E4 63               	xri 	'\\'!'?' 											; ASCII (P1) -> Integer (? operator)
(1)  142/      64 : 98 6E               	jz 		MATH_ToInteger
(1)  143/      66 :                     
(1)  144/      66 :                     MATH_Error:
(1)  145/      66 : 03                  	scl 														; error, unknown command.
(1)  146/      67 :                     
(1)  147/      67 :                     MATH_Exit:
(1)  148/      67 : 3F                  	xppc 	p3 													; return
 AS V1.42 Beta [Bld 102] - source file monitor.asm(maths.asm) - page 4 - 12/5/2015 9:10:16


(1)  149/      68 : 90 DE               	jmp  	Maths 												; re-entrant
(1)  150/      6A :                     
(1)  151/      6A :                     ; ******************************************************************************************************************
(1)  152/      6A :                     ;													+ :	16 Bit Add
(1)  153/      6A :                     ; ******************************************************************************************************************
(1)  154/      6A :                     
(1)  155/      6A :                     MATH_Add:
(1)  156/      6A : 02                  	ccl 										
(1)  157/      6B : C6 01               	ld 		@1(p2) 												; read LSB of TOS and unstack
(1)  158/      6D : F2 01               	add 	1(p2)
(1)  159/      6F : CA 01               	st 		1(p2)
(1)  160/      71 : C6 01               	ld 		@1(p2) 												; read MSB of TOS and unstack
(1)  161/      73 : F2 01               	add 	1(p2)
(1)  162/      75 : CA 01               	st 		1(p2)
(1)  163/      77 : 02                  	ccl
(1)  164/      78 : 90 ED               	jmp 	MATH_Exit
(1)  165/      7A :                     
(1)  166/      7A :                     ; ******************************************************************************************************************
(1)  167/      7A :                     ;												 - : 16 Bit Subtract
(1)  168/      7A :                     ; ******************************************************************************************************************
(1)  169/      7A :                     
(1)  170/      7A :                     MATH_Subtract:
(1)  171/      7A : 03                  	scl 										
(1)  172/      7B : C2 02               	ld 		2(p2) 												; read LSB of TOS 
(1)  173/      7D : FA 00               	cad 	0(p2)
(1)  174/      7F : CA 02               	st 		2(p2)
(1)  175/      81 : C2 03               	ld 		3(p2) 												; read MSB of TOS
(1)  176/      83 : FA 01               	cad 	1(p2)
(1)  177/      85 : CA 03               	st 		3(p2)
(1)  178/      87 : C6 02               	ld 		@2(p2)
(1)  179/      89 : 02                  	ccl
(1)  180/      8A : 90 DB               	jmp 	MATH_Exit
(1)  181/      8C :                     
(1)  182/      8C :                     ; ******************************************************************************************************************
(1)  183/      8C :                     ;									'*' : 16 bit signed or unsigned multiply
(1)  184/      8C :                     ; ******************************************************************************************************************
(1)  185/      8C :                     
(1)  186/      8C :                     MATH_Multiply:
(1)  187/      8C :                     
(1)  188/      8C :                     	section SCMPMultiply
(1)  189/      8C :                     
(1)  190/      8C : =0x3                aHi = 3 														; allocated values for A,B and Result.
(1)  191/      8C : =0x2                aLo = 2 														; (see arithmetic.py)
(1)  192/      8C : =0x1                bHi = 1
(1)  193/      8C : =0x0                bLo = 0
(1)  194/      8C : =0xFFFFFFFFF..      resultHi = -1
(1)  195/      8C : =0xFFFFFFFFF..      resultLo = -2
(1)  196/      8C :                     
(1)  197/      8C : C4 00               	ldi 	0 													; clear result
(1)  198/      8E : CA FF               	st 		resultHi(p2)
(1)  199/      90 : CA FE               	st 		resultLo(p2)
(1)  200/      92 :                     __MultiplyLoop:
(1)  201/      92 : C2 01               	ld 		bHi(p2) 											; if b is zero then exit
(1)  202/      94 : DA 00               	or 		bLo(p2)
(1)  203/      96 : 98 2D               	jz 		__MultiplyExit
(1)  204/      98 : C2 00               	ld 		bLo(p2) 											; if b bit 0 is set.
(1)  205/      9A : D4 01               	ani 	1
(1)  206/      9C : 98 0D               	jz 		__MultiplyNoAdd
(1)  207/      9E : 02                  	ccl 														; add a to the result
(1)  208/      9F : C2 FE               	ld 		resultLo(p2)
 AS V1.42 Beta [Bld 102] - source file monitor.asm(maths.asm) - page 5 - 12/5/2015 9:10:16


(1)  209/      A1 : F2 02               	add 	aLo(p2)
(1)  210/      A3 : CA FE               	st 		resultLo(p2)
(1)  211/      A5 : C2 FF               	ld 		resultHi(p2)
(1)  212/      A7 : F2 03               	add 	aHi(p2)
(1)  213/      A9 : CA FF               	st 		resultHi(p2)
(1)  214/      AB :                     __MultiplyNoAdd:
(1)  215/      AB : (MACRO)             	shiftleft aLo 												; shift A left once.
(1)  215/      AB : 02                          ccl                                                                                                     
(1)  215/      AC : C2 02                       ld              ALO(p2)
(1)  215/      AE : F2 02                       add     ALO(p2)
(1)  215/      B0 : CA 02                       st              ALO(p2)
(1)  215/      B2 : C2 03                       ld              ALO+1(p2)
(1)  215/      B4 : F2 03                       add     ALO+1(p2)
(1)  215/      B6 : CA 03                       st              ALO+1(p2)               
(1)  216/      B8 : (MACRO)             	shiftright bLo 												; shift b right one.
(1)  216/      B8 : 02                          ccl
(1)  216/      B9 : C2 01                       ld              BLO+1(p2)
(1)  216/      BB : 1F                          rrl 
(1)  216/      BC : CA 01                       st              BLO+1(p2)
(1)  216/      BE : C2 00                       ld              BLO(p2)
(1)  216/      C0 : 1F                          rrl 
(1)  216/      C1 : CA 00                       st              BLO(p2)
(1)  217/      C3 : 90 CD               	jmp 	__MultiplyLoop
(1)  218/      C5 :                     
(1)  219/      C5 :                     __MultiplyExit:
(1)  220/      C5 : C2 FE               	ld 		resultLo(p2) 										; copy result lo to what will be new TOS
(1)  221/      C7 : CA 02               	st 		2(p2)
(1)  222/      C9 : C2 FF               	ld 		resultHi(p2)
(1)  223/      CB : CA 03               	st 		3(p2)
(1)  224/      CD : C6 02               	ld 		@2(p2) 												; fix up the number stack.
(1)  225/      CF :                     	endsection SCMPMultiply
(1)  226/      CF :                     
(1)  227/      CF : 02                  	ccl
(1)  228/      D0 :                     MATH_Exit1:
(1)  229/      D0 : 90 95               	jmp 	MATH_Exit
(1)  230/      D2 :                     
(1)  231/      D2 :                     ; ******************************************************************************************************************
(1)  232/      D2 :                     ;								? Convert string at P1 to 16 bit integer base 10
(1)  233/      D2 :                     ; ******************************************************************************************************************
(1)  234/      D2 :                     
(1)  235/      D2 :                     MATH_Divide2:
(1)  236/      D2 : 90 66               	jmp 	MATH_Divide
(1)  237/      D4 :                     
(1)  238/      D4 :                     MATH_ToInteger:
(1)  239/      D4 :                     
(1)  240/      D4 :                     	section SCMPToInteger
(1)  241/      D4 :                     
(1)  242/      D4 : =0xFFFFFFFFF..      digitCount = -1													; digits converted.
(1)  243/      D4 : =0xFFFFFFFFF..      resultHi = -2  													; result is pushed at the end
(1)  244/      D4 : =0xFFFFFFFFF..      resultLo = -3 
(1)  245/      D4 : =0xFFFFFFFFF..      shiftCount = -4 												; counter used when multiplying by 10.
(1)  246/      D4 : =0xFFFFFFFFF..      tempHi = -5 													; temporary result for x 10.
(1)  247/      D4 : =0xFFFFFFFFF..      tempLo = -6
(1)  248/      D4 :                     
(1)  249/      D4 : C4 00               	ldi 	0 													; clear digitcount and result to zero
(1)  250/      D6 : CA FF               	st 		digitCount(p2)
(1)  251/      D8 : CA FE               	st 		resultHi(p2)
(1)  252/      DA : CA FD               	st 		resultLo(p2)
(1)  253/      DC :                     ToInt_Loop:
(1)  254/      DC : C1 00               	ld 		0(p1) 												; read next digit
 AS V1.42 Beta [Bld 102] - source file monitor.asm(maths.asm) - page 6 - 12/5/2015 9:10:16


(1)  255/      DE : 03                  	scl 	
(1)  256/      DF : FC 3A               	cai 	'9'+1
(1)  257/      E1 : 94 44               	jp 		ToInt_End 											; if > 9 then fail.
(1)  258/      E3 : F4 8A               	adi 	128+10 												; if < 0 then fail
(1)  259/      E5 : 94 40               	jp 		ToInt_End
(1)  260/      E7 : AA FF               	ild 	digitCount(p2) 										; increment count of digits converted.
(1)  261/      E9 : C4 02               	ldi 	2 													; set shift counter to 2
(1)  262/      EB : CA FC               	st 		shiftCount(p2)
(1)  263/      ED : C2 FE               	ld 		resultHi(p2) 										; copy result current to temp
(1)  264/      EF : CA FB               	st 		tempHi(p2)
(1)  265/      F1 : C2 FD               	ld 		resultLo(p2)
(1)  266/      F3 : CA FA               	st 		tempLo(p2)
(1)  267/      F5 :                     ToInt_Shift:
(1)  268/      F5 : (MACRO)             	shiftleft resultLo 											; shift result left
(1)  268/      F5 : 02                          ccl                                                                                                     
(1)  268/      F6 : C2 FD                       ld              RESULTLO(p2)
(1)  268/      F8 : F2 FD                       add     RESULTLO(p2)
(1)  268/      FA : CA FD                       st              RESULTLO(p2)
(1)  268/      FC : C2 FE                       ld              RESULTLO+1(p2)
(1)  268/      FE : F2 FE                       add     RESULTLO+1(p2)
(1)  268/     100 : CA FE                       st              RESULTLO+1(p2)               
(1)  269/     102 : BA FC               	dld 	shiftCount(p2) 										; after 2nd time round (x 4) will be zero
(1)  270/     104 : 9C 0D               	jnz 	ToInt_NoAdd
(1)  271/     106 : 02                  	ccl 														; add original value when x 4 - e.g. x 5
(1)  272/     107 : C2 FD               	ld 		resultLo(p2)
(1)  273/     109 : F2 FA               	add 	tempLo(p2)
(1)  274/     10B : CA FD               	st 		resultLo(p2)
(1)  275/     10D : C2 FE               	ld 		resultHi(p2)
(1)  276/     10F : F2 FB               	add 	tempHi(p2)
(1)  277/     111 : CA FE               	st 		resultHi(p2)
(1)  278/     113 :                     ToInt_NoAdd:
(1)  279/     113 : C2 FC               	ld 		shiftCount(p2) 										; go round until -ve, e.g. 3 in total.
(1)  280/     115 : 94 DE               	jp 		ToInt_Shift
(1)  281/     117 :                     
(1)  282/     117 : C5 01               	ld 		@1(p1) 												; read the digit already tested.
(1)  283/     119 : D4 0F               	ani 	0x0F 												; to a number
(1)  284/     11B : 02                  	ccl 
(1)  285/     11C : F2 FD               	add 	resultLo(p2) 										; add to result
(1)  286/     11E : CA FD               	st 		resultLo(p2)
(1)  287/     120 : 06                  	csa 														; if carry clear
(1)  288/     121 : 94 B9               	jp 		ToInt_Loop 											; go round again.
(1)  289/     123 : AA FE               	ild 	resultHi(p2) 										; adds the carry to high
(1)  290/     125 : 90 B5               	jmp 	ToInt_Loop
(1)  291/     127 :                     
(1)  292/     127 :                     ToInt_End:
(1)  293/     127 : C2 FF               	ld 		digitCount(p2) 										; if digit count = 0, e.g. nothing converted
(1)  294/     129 : 03                  	scl
(1)  295/     12A : 98 A4               	jz 		MATH_Exit1 											; exit with carry set
(1)  296/     12C :                     
(1)  297/     12C : C2 FE               	ld 		resultHi(p2) 										; save result on stack
(1)  298/     12E : CA FF               	st 		-1(p2)
(1)  299/     130 : C2 FD               	ld 		resultLo(p2)
(1)  300/     132 : CE FE               	st 		@-2(p2)
(1)  301/     134 : 02                  	ccl 														; clear carry as okay, and exit.
(1)  302/     135 :                     	endsection SCMPToInteger
(1)  303/     135 :                     
(1)  304/     135 :                     MATH_Exit3:
(1)  305/     135 : 90 99               	jmp 	MATH_Exit1
(1)  306/     137 :                     
(1)  307/     137 :                     ; ******************************************************************************************************************
 AS V1.42 Beta [Bld 102] - source file monitor.asm(maths.asm) - page 7 - 12/5/2015 9:10:16


(1)  308/     137 :                     ;							'/' : 16 bit signed/unsigned divide (CY/L = 0 = signed)
(1)  309/     137 :                     ; ******************************************************************************************************************
(1)  310/     137 :                     
(1)  311/     137 :                     MATH_DivideByZero:												; come here for divide by zero.
(1)  312/     137 : 03                  	scl
(1)  313/     138 : 90 FB               	jmp 	MATH_Exit3
(1)  314/     13A :                     
(1)  315/     13A :                     MATH_Divide:
(1)  316/     13A :                     
(1)  317/     13A :                     	section 	SCMPDivide
(1)  318/     13A :                     
(1)  319/     13A : =0x1                denominatorHi = 1 												; input values to division
(1)  320/     13A : =0x0                denominatorLo = 0 												; (see arithmetic.py)
(1)  321/     13A : =0x3                numeratorHi = 3
(1)  322/     13A : =0x2                numeratorLo = 2
(1)  323/     13A : =0xFFFFFFFFF..      bitHi = -1 														; bit shifted for division test.
(1)  324/     13A : =0xFFFFFFFFF..      bitLo = -2
(1)  325/     13A : =0xFFFFFFFFF..      quotientHi = -3 												; quotient
(1)  326/     13A : =0xFFFFFFFFF..      quotientLo = -4
(1)  327/     13A : =0xFFFFFFFFF..      remainderHi = -5 												; remainder
(1)  328/     13A : =0xFFFFFFFFF..      remainderLo = -6
(1)  329/     13A : =0xFFFFFFFFF..      signCount = -7 													; sign of result (bit 0)
(1)  330/     13A : =0xFFFFFFFFF..      eTemp = -8 														; temporary value of sign.
(1)  331/     13A : =0xFFFFFFFFF..      tempHi = -9 													; high byte temporary
(1)  332/     13A :                     
(1)  333/     13A : C2 00               	ld 		denominatorLo(p2) 									; check denominator 
(1)  334/     13C : DA 01               	or 		denominatorHi(p2) 
(1)  335/     13E : 98 F7               	jz 		MATH_DivideByZero 									; fail if dividing by zero.
(1)  336/     140 :                     
(1)  337/     140 : C4 00               	ldi 	0 													; clear quotient and remainder
(1)  338/     142 : CA FD               	st 		quotientHi(p2)
(1)  339/     144 : CA FC               	st 		quotientLo(p2)
(1)  340/     146 : CA FB               	st 		remainderHi(p2)
(1)  341/     148 : CA FA               	st 		remainderLo(p2)
(1)  342/     14A : CA F9               	st 		signCount(p2)
(1)  343/     14C : CA FE               	st 		bitLo(p2) 											; set bit to 0x8000
(1)  344/     14E : C4 80               	ldi 	0x80 
(1)  345/     150 : CA FF               	st 		bitHi(p2)
(1)  346/     152 :                     
(1)  347/     152 : 40                  	lde 														; save E
(1)  348/     153 : CA F8               	st 		eTemp(p2)
(1)  349/     155 :                     
(1)  350/     155 : 06                  	csa 														; look at carry bit
(1)  351/     156 : D4 80               	ani 	0x80 												; if set, unsigned division.
(1)  352/     158 : 9C 24               	jnz 	__DivideLoop 										; so skip over the sign removal code.
(1)  353/     15A :                     
(1)  354/     15A : C4 03               	ldi 	3
(1)  355/     15C :                     __DivideUnsignLoop:
(1)  356/     15C : 01                  	xae 														; store in E
(1)  357/     15D : C2 80               	ld 		-0x80(p2) 											; read high byte
(1)  358/     15F : 94 13               	jp 		__DivideNotSigned 									; if +ve then skip
(1)  359/     161 : AA F9               	ild 	signCount(p2) 										; bump sign count
(1)  360/     163 : C6 FF               	ld 		@-1(p2) 											; dec P2 to access the LSB
(1)  361/     165 : C4 00               	ldi 	0
(1)  362/     167 : 03                  	scl 
(1)  363/     168 : FA 80               	cad 	-0x80(p2)
(1)  364/     16A : CA 80               	st 		-0x80(p2)
(1)  365/     16C : C6 01               	ld 		@1(p2) 												; inc P2 to access the MSB
(1)  366/     16E : C4 00               	ldi 	0
(1)  367/     170 : FA 80               	cad 	-0x80(p2)
 AS V1.42 Beta [Bld 102] - source file monitor.asm(maths.asm) - page 8 - 12/5/2015 9:10:16


(1)  368/     172 : CA 80               	st 		-0x80(p2)
(1)  369/     174 :                     __DivideNotSigned:
(1)  370/     174 : 01                  	xae 														; retrieve E
(1)  371/     175 : 03                  	scl 														; subtract 2
(1)  372/     176 : FC 02               	cai 	2
(1)  373/     178 : 94 E2               	jp 		__DivideUnsignLoop 									; not finished yet.
(1)  374/     17A : 90 02               	jmp 	__DivideLoop
(1)  375/     17C :                     
(1)  376/     17C :                     __MATH_Exit2
(1)  377/     17C : 90 B7               	jmp 	MATH_Exit3
(1)  378/     17E :                     
(1)  379/     17E :                     __DivideLoop:
(1)  380/     17E : C2 FE               	ld 		bitLo(p2) 											; keep going until all bits done.
(1)  381/     180 : DA FF               	or 		bitHi(p2)
(1)  382/     182 : 98 42               	jz 		__DivideExit
(1)  383/     184 :                     
(1)  384/     184 : (MACRO)             	shiftleft remainderLo 										; shift remainder left.
(1)  384/     184 : 02                          ccl                                                                                                     
(1)  384/     185 : C2 FA                       ld              REMAINDERLO(p2)
(1)  384/     187 : F2 FA                       add     REMAINDERLO(p2)
(1)  384/     189 : CA FA                       st              REMAINDERLO(p2)
(1)  384/     18B : C2 FB                       ld              REMAINDERLO+1(p2)
(1)  384/     18D : F2 FB                       add     REMAINDERLO+1(p2)
(1)  384/     18F : CA FB                       st              REMAINDERLO+1(p2)               
(1)  385/     191 :                     
(1)  386/     191 : C2 03               	ld 		numeratorHi(p2)										; if numerator MSB is set
(1)  387/     193 : 94 06               	jp 		__DivideNoIncRemainder
(1)  388/     195 :                     
(1)  389/     195 : AA FA               	ild 	remainderLo(p2) 									; then increment remainder
(1)  390/     197 : 9C 02               	jnz 	__DivideNoIncRemainder
(1)  391/     199 : AA FB               	ild 	remainderHi(p2)
(1)  392/     19B :                     __DivideNoIncRemainder:
(1)  393/     19B :                     
(1)  394/     19B : 03                  	scl 														; calculate remainder-denominator (temp)
(1)  395/     19C : C2 FA               	ld 		remainderLo(p2)
(1)  396/     19E : FA 00               	cad 	denominatorLo(p2)
(1)  397/     1A0 : 01                  	xae 														; save in E.
(1)  398/     1A1 : C2 FB               	ld 		remainderHi(p2)
(1)  399/     1A3 : FA 01               	cad 	denominatorHi(p2) 									; temp.high is now in A
(1)  400/     1A5 : CA F7               	st 		tempHi(p2) 											; temp.high now saved
(1)  401/     1A7 : 06                  	csa 														; check carry flag
(1)  402/     1A8 : D4 80               	ani 	0x80 	
(1)  403/     1AA : 9C 45               	jnz 	__DivideRemainderGreater 							; if set then remainder >= denominator
(1)  404/     1AC :                     
(1)  405/     1AC :                     __DivideContinue:
(1)  406/     1AC : (MACRO)             	shiftright 	bitLo 											; shift bit right
(1)  406/     1AC : 02                          ccl
(1)  406/     1AD : C2 FF                       ld              BITLO+1(p2)
(1)  406/     1AF : 1F                          rrl 
(1)  406/     1B0 : CA FF                       st              BITLO+1(p2)
(1)  406/     1B2 : C2 FE                       ld              BITLO(p2)
(1)  406/     1B4 : 1F                          rrl 
(1)  406/     1B5 : CA FE                       st              BITLO(p2)
(1)  407/     1B7 : (MACRO)             	shiftleft   numeratorLo 									; shift numerator left
(1)  407/     1B7 : 02                          ccl                                                                                                     
(1)  407/     1B8 : C2 02                       ld              NUMERATORLO(p2)
(1)  407/     1BA : F2 02                       add     NUMERATORLO(p2)
(1)  407/     1BC : CA 02                       st              NUMERATORLO(p2)
(1)  407/     1BE : C2 03                       ld              NUMERATORLO+1(p2)
(1)  407/     1C0 : F2 03                       add     NUMERATORLO+1(p2)
 AS V1.42 Beta [Bld 102] - source file monitor.asm(maths.asm) - page 9 - 12/5/2015 9:10:16


(1)  407/     1C2 : CA 03                       st              NUMERATORLO+1(p2)               
(1)  408/     1C4 : 90 B8               	jmp 		__DivideLoop
(1)  409/     1C6 :                     
(1)  410/     1C6 :                     __DivideExit:
(1)  411/     1C6 : C2 F9               	ld 		signCount(p2) 										; is the result signed
(1)  412/     1C8 : D4 01               	ani 	0x01
(1)  413/     1CA : 98 0D               	jz 		__DivideComplete
(1)  414/     1CC : 03                  	scl 														; if so, reapply the sign.
(1)  415/     1CD : C4 00               	ldi 	0
(1)  416/     1CF : FA FC               	cad 	quotientLo(p2)
(1)  417/     1D1 : CA FC               	st 		quotientLo(p2)
(1)  418/     1D3 : C4 00               	ldi 	0
(1)  419/     1D5 : FA FD               	cad 	quotientHi(p2)
(1)  420/     1D7 : CA FD               	st 		quotientHi(p2)
(1)  421/     1D9 :                     
(1)  422/     1D9 :                     __DivideComplete:
(1)  423/     1D9 : C2 FD               	ld 		quotientHi(p2) 										; copy quotient to what will be TOS
(1)  424/     1DB : CA 03               	st 		3(p2)
(1)  425/     1DD : C2 FC               	ld 		quotientLo(p2)
(1)  426/     1DF : CA 02               	st 		2(p2)
(1)  427/     1E1 : C2 FB               	ld 		remainderHi(p2) 									; put remainder immediately after it if we want it
(1)  428/     1E3 : CA 01               	st 		1(p2)
(1)  429/     1E5 : C2 FA               	ld 		remainderLo(p2) 
(1)  430/     1E7 : CA 00               	st 		0(p2)
(1)  431/     1E9 :                     
(1)  432/     1E9 : C2 F8               	ld 		eTemp(p2) 											; restore E
(1)  433/     1EB : 01                  	xae 
(1)  434/     1EC : C6 02               	ld 		@2(p2) 												; fix stack back up leaving quotient and hidden remainder
(1)  435/     1EE : 02                  	ccl 														; return no error.
(1)  436/     1EF : 90 8B               	jmp 	__MATH_Exit2
(1)  437/     1F1 :                     
(1)  438/     1F1 :                     __DivideRemainderGreater: 										; this is the "if temp >= 0 bit"
(1)  439/     1F1 : C2 F7               	ld 		tempHi(p2) 											; get the difference back.
(1)  440/     1F3 : CA FB               	st 		remainderHi(p2) 									; save temp.high value into remainder.high
(1)  441/     1F5 : 40                  	lde 														; copy temp.low to remainder.low
(1)  442/     1F6 : CA FA               	st 		remainderLo(p2) 
(1)  443/     1F8 :                     
(1)  444/     1F8 : C2 FC               	ld 		quotientLo(p2) 										; or bit into quotient
(1)  445/     1FA : DA FE               	or 		bitLo(p2)
(1)  446/     1FC : CA FC               	st 		quotientLo(p2)
(1)  447/     1FE : C2 FD               	ld 		quotientHi(p2)
(1)  448/     200 : DA FF               	or 		bitHi(p2)
(1)  449/     202 : CA FD               	st 		quotientHi(p2)
(1)  450/     204 : 90 A6               	jmp 	__DivideContinue
(1)  451/     206 :                     
(1)  452/     206 :                     
(1)  453/     206 :                     	endsection	SCMPDivide
(1)  454/     206 :                     
      33/     206 :                     
      34/     206 :                     ; ******************************************************************************************************************
      35/     206 :                     ;
      36/     206 :                     ;				Boot Up. First we check for a ROM @ $9000 and if it is 0x68 we boot there instead
      37/     206 :                     ;
      38/     206 :                     ; ******************************************************************************************************************
      39/     206 :                     
      40/     206 :                     BootMonitor:
      41/     206 : C4 90               		ldi 	0x90 											; point P1 to $9000 which is the first ROM.
      42/     208 : 35                  		xpah 	p1
      43/     209 : C1 00               		ld 		0(p1) 											; if that byte is $68, go straight there.
      44/     20B : E4 68               		xri 	0x68  											; we can boot into VTL-2 or whatever.
 AS V1.42 Beta [Bld 102] - source file monitor.asm - page 10 - 12/5/2015 9:10:16


      45/     20D : 9C 01               		jnz 	__BootMonitor
      46/     20F : 3D                  		xppc 	p1 												; e.g. JMP $9001
      47/     210 :                     __BootMonitor:
      48/     210 :                     
      49/     210 :                     ; ******************************************************************************************************************
      50/     210 :                     ;
      51/     210 :                     ;									Find Top of Memory to initialise the stack.
      52/     210 :                     ;
      53/     210 :                     ;			(slightly tweaked to work round 4+12 emulator limitations - will work on real chip)
      54/     210 :                     ; ******************************************************************************************************************
      55/     210 :                     
      56/     210 : C4 0F               		ldi 	0x0F 											; point P2 to theoretical top of RAM on basic m/c
      57/     212 : 36                  		xpah 	p2 												; e.g. 0xFFF
      58/     213 : C4 FF               		ldi 	0xFF 											; ideally you'd make this 0x003F and remove the ld
      59/     215 : 32                  		xpal 	p2 												; but the emulators don't do 4+12 math. Only matters here.
      60/     216 : C6 40               		ld 		@64(p2) 										; fix the predecrement (wrap around not emulated)
      61/     218 :                     FindTopMemory:
      62/     218 : C4 A5               		ldi 	0xA5 											; try to write this to memory
      63/     21A : CE C0               		st 		@-64(p2) 										; predecrementing by 64.
      64/     21C : E2 00               		xor 	(p2) 											; did it write correctly.
      65/     21E : 9C F8               		jnz 	FindTopMemory 									; now P2 points to top of memory.
      66/     220 :                     
      67/     220 :                     ; ******************************************************************************************************************
      68/     220 :                     ;
      69/     220 :                     ;												Clear the screen
      70/     220 :                     ;
      71/     220 :                     ; ******************************************************************************************************************
      72/     220 :                     
      73/     220 :                     ClearScreen_Command:
      74/     220 : C4 00               		ldi 	0 												; set P1 to zero to access VRAM via write.
      75/     222 : 35                  		xpah 	p1
      76/     223 : C4 00               		ldi 	0
      77/     225 :                     ClearScreenLoop:
      78/     225 : 31                  		xpal 	p1												; clear screen
      79/     226 : C4 20               		ldi 	' '
      80/     228 : CD 01               		st 		@1(p1)
      81/     22A : 31                  		xpal 	p1
      82/     22B : 94 F8               		jp 		ClearScreenLoop
      83/     22D : C4 0C               		ldi 	Cursor/256 										; reset the cursor position to TOS
      84/     22F : 35                  		xpah 	p1
      85/     230 : C4 18               		ldi 	Cursor&255
      86/     232 : 31                  		xpal 	p1 
      87/     233 : C4 00               		ldi 	0 												; Note: could save 2 bytes here, P1.H is 0.
      88/     235 : C9 00               		st 		0(p1)											
      89/     237 :                     
      90/     237 :                     ; ****************************************************************************************************************
      91/     237 :                     ;
      92/     237 :                     ;												Check if initialised.
      93/     237 :                     ;
      94/     237 :                     ; ****************************************************************************************************************
      95/     237 :                     
      96/     237 : C1 03               		ld 		isInit-Cursor(p1) 								; have we initialised ?
      97/     239 : E4 A7               		xri 	0xA7 											; if so this byte should be $A7
      98/     23B : 98 4C               		jz 		CommandMainLoop
      99/     23D : C4 A7               		ldi 	0xA7 											; set the initialised byte
     100/     23F : C9 03               		st 		isInit-Cursor(p1)
     101/     241 :                     
     102/     241 : C4 0C               		ldi 	codeStart/256 									; set the initial work address
     103/     243 : C9 02               		st 		Current-Cursor+1(p1)
     104/     245 : C4 2E               		ldi 	codeStart&255
 AS V1.42 Beta [Bld 102] - source file monitor.asm - page 11 - 12/5/2015 9:10:16


     105/     247 : C9 01               		st 		Current-Cursor(p1)
     106/     249 :                     																; print boot message - can lose this if required.
     107/     249 : C4 05               		ldi 	(PrintCharacter-1)/256 							; set P3 = print character.
     108/     24B : 37                  		xpah 	p3 
     109/     24C : C4 DC               		ldi 	(PrintCharacter-1)&255
     110/     24E : 33                  		xpal 	p3
     111/     24F : C4 02               		ldi 	Message / 256 									; set P1 = boot message
     112/     251 : 35                  		xpah 	p1
     113/     252 : C4 5C               		ldi 	Message & 255
     114/     254 : 31                  		xpal 	p1
     115/     255 :                     MessageLoop:
     116/     255 : C5 01               		ld 		@1(p1) 											; read character
     117/     257 : 98 23               		jz 		InitialBeep 									; end of message
     118/     259 : 3F                  		xppc 	p3 												; print it
     119/     25A : 90 F9               		jmp 	MessageLoop
     120/     25C :                     
     121/     25C :                     Message:
     122/     25C : 2A 2A 20 53 43 2F   		db 		"** SC/MP OS **",13 							; short boot message
                    4D 50 20 4F 53 20 
                    2A 2A 0D 
     123/     26B : 56 30 2E 39 32 54   		db 		"V0.92T PSR 2016",13
                    20 50 53 52 20 32 
                    30 31 36 0D 
     124/     27B : 00                  		db 		0
     125/     27C :                     
     126/     27C :                     InitialBeep:
     127/     27C : C4 01               		ldi 	1 												; Beep on booting.
     128/     27E : 07                  		cas 													; play low tone
     129/     27F : 8F FF               		dly 	0xFF
     130/     281 : C4 05               		ldi 	5												; play high tone.
     131/     283 : 07                  		cas
     132/     284 : 8F FF               		dly 	0xFF
     133/     286 : C4 00               		ldi 	0 												; sound off.
     134/     288 : 07                  		cas
     135/     289 :                     
     136/     289 :                     ; ****************************************************************************************************************
     137/     289 :                     ;
     138/     289 :                     ;													Main Loop
     139/     289 :                     ;
     140/     289 :                     ; ****************************************************************************************************************
     141/     289 :                     
     142/     289 :                     CommandMainLoop:
     143/     289 : C4 06               		ldi 	(PrintAddressData-1)/256						; print Address only
     144/     28B : 37                  		xpah 	p3
     145/     28C : C4 49               		ldi 	(PrintAddressData-1)&255
     146/     28E : 33                  		xpal 	p3
     147/     28F : C4 00               		ldi 	0 												; no data elements
     148/     291 : 3F                  		xppc 	p3
     149/     292 :                     
     150/     292 : C4 05               		ldi 	(PrintCharacter-1)/256 							; set P3 = print character.
     151/     294 : 37                  		xpah 	p3
     152/     295 : C4 DC               		ldi 	(PrintCharacter-1)&255
     153/     297 : 33                  		xpal 	p3
     154/     298 : C4 5D               		ldi 	']'												; print the prompt.
     155/     29A : 3F                  		xppc 	p3
     156/     29B :                     
     157/     29B :                     ; ****************************************************************************************************************
     158/     29B :                     ;
     159/     29B :                     ;											Keyboard Line Input
     160/     29B :                     ;
 AS V1.42 Beta [Bld 102] - source file monitor.asm - page 12 - 12/5/2015 9:10:16


     161/     29B :                     ; ****************************************************************************************************************
     162/     29B :                     
     163/     29B : C4 00               		ldi 	0 												; set E = character position.
     164/     29D : 01                  		xae 
     165/     29E :                     KeyboardLoop:
     166/     29E : C4 08               		ldi 	0x8 											; set P1 to point to keyboard latch
     167/     2A0 : 35                  		xpah 	p1
     168/     2A1 :                     _KBDWaitRelease:
     169/     2A1 : C1 00               		ld 		0(p1) 											; wait for strobe to clear
     170/     2A3 : 94 02               		jp 		_KBDWaitKey
     171/     2A5 : 90 FA               		jmp 	_KBDWaitRelease
     172/     2A7 :                     _KBDWaitKey:
     173/     2A7 : C1 00               		ld 		0(p1) 											; wait for strobe, i.e. new key
     174/     2A9 : 94 FC               		jp 		_KBDWaitKey
     175/     2AB : D4 7F               		ani 	0x7F 											; throw away bit 7
     176/     2AD : CA FF               		st 		-1(p2) 											; save key.
     177/     2AF :                     
     178/     2AF : C4 0C               		ldi 	kbdBuffer/256 									; set P1 = keyboard buffer
     179/     2B1 : 35                  		xpah 	p1
     180/     2B2 : C4 1E               		ldi 	kbdBuffer&255
     181/     2B4 : 31                  		xpal 	p1		
     182/     2B5 :                     
     183/     2B5 : C2 FF               		ld 		-1(p2) 											; read key
     184/     2B7 : E4 08               		xri 	8 												; is it backspace
     185/     2B9 : 98 1E               		jz 		__KBDBackSpace
     186/     2BB : E4 05               		xri 	8!13 											; is it CR, then exit
     187/     2BD : 98 28               		jz 		__KBDExit
     188/     2BF :                     
     189/     2BF : 40                  		lde 													; have we a full buffer.
     190/     2C0 : E4 10               		xri 	kbdBufferLn 									; if so, ignore the key.
     191/     2C2 : 98 DA               		jz 		KeyboardLoop
     192/     2C4 :                     
     193/     2C4 : C2 FF               		ld 		-1(p2) 											; restore the key.
     194/     2C6 : 02                  		ccl
     195/     2C7 : F4 20               		adi 	0x20											; will make lower case -ve
     196/     2C9 : 94 02               		jp 		__KBDNotLower
     197/     2CB : FC 20               		cai 	0x20 											; capitalise
     198/     2CD :                     __KBDNotLower:
     199/     2CD : F4 E0               		adi 	0xE0 											; fix up.
     200/     2CF : C9 80               		st 		-0x80(p1) 										; save in the buffer using E as index.
     201/     2D1 : 3F                  		xppc 	p3 												; print the character
     202/     2D2 : 01                  		xae 													; increment E
     203/     2D3 : 02                  		ccl
     204/     2D4 : F4 01               		adi 	1
     205/     2D6 : 01                  		xae
     206/     2D7 : 90 C5               		jmp 	KeyboardLoop 									; and get the next key.
     207/     2D9 :                     
     208/     2D9 :                     __KBDBackSpace:
     209/     2D9 : 40                  		lde 													; get position
     210/     2DA : 98 C2               		jz 		KeyboardLoop 									; can't go back if at beginning
     211/     2DC : 03                  		scl 													; go back 1 from E
     212/     2DD : FC 01               		cai 	1
     213/     2DF : 01                  		xae 
     214/     2E0 : C4 08               		ldi 	8 												; print a backspace
     215/     2E2 : 3F                  		xppc 	p3
     216/     2E3 : 90 B9               		jmp 	KeyboardLoop 									; and go round again.
     217/     2E5 :                     
     218/     2E5 :                     __CmdMainLoop1:
     219/     2E5 : 90 A2               		jmp 	CommandMainLoop
     220/     2E7 :                     
 AS V1.42 Beta [Bld 102] - source file monitor.asm - page 13 - 12/5/2015 9:10:16


     221/     2E7 :                     __KBDExit:
     222/     2E7 : C9 80               		st 		-0x80(p1) 										; add the ASCIIZ terminator.
     223/     2E9 : C4 0D               		ldi 	13												; print a new line.
     224/     2EB : 3F                  		xppc 	p3
     225/     2EC :                     
     226/     2EC :                     ; ****************************************************************************************************************
     227/     2EC :                     ;
     228/     2EC :                     ;						Extract the 5 bit 3 letter (max command value). P1 points to buffer
     229/     2EC :                     ;
     230/     2EC :                     ; ****************************************************************************************************************
     231/     2EC :                     
     232/     2EC : C4 00               		ldi 	0
     233/     2EE : 01                  		xae 													; E contains the LSB of the 5 bit shift
     234/     2EF : 40                  		lde 	
     235/     2F0 : CA FF               		st 		-1(p2) 											; -1(P2) contains the MSB
     236/     2F2 : C9 FF               		st 		modifier-kbdBuffer(p1)							; clear the modifier.
     237/     2F4 :                     Extract5Bit:
     238/     2F4 : C1 00               		ld 		(p1) 											; look at character
     239/     2F6 : 02                  		ccl 													; add 128-65, will be +ve if < 64
     240/     2F7 : F4 3F               		adi 	128-65
     241/     2F9 : 94 1A               		jp 		__ExtractEnd
     242/     2FB : C4 05               		ldi 	5 												; shift current value left 5 times using -2(p2)
     243/     2FD : CA FE               		st 		-2(p2)
     244/     2FF :                     __Ex5Shift:
     245/     2FF : 40                  		lde 													; shift E left into CY/L
     246/     300 : 02                  		ccl
     247/     301 : 70                  		ade 
     248/     302 : 01                  		xae
     249/     303 : C2 FF               		ld 		-1(p2) 											; shift CY/L into -1(p2) and carry/link
     250/     305 : F2 FF               		add 	-1(p2)
     251/     307 : CA FF               		st 		-1(p2)
     252/     309 : BA FE               		dld 	-2(p2) 											; done it 5 times ?
     253/     30B : 9C F2               		jnz 	__Ex5Shift
     254/     30D : C5 01               		ld 		@1(p1) 											; re-read character.
     255/     30F : D4 1F               		ani 	0x1F 											; lower 5 bits only.
     256/     311 : 58                  		ore 													; OR into E
     257/     312 : 01                  		xae
     258/     313 : 90 DF               		jmp 	Extract5Bit 									; go and get the next one.
     259/     315 :                     
     260/     315 :                     __ExtractEnd:
     261/     315 : C4 1C               		ldi 	parPosn & 255 									; P1.L = Parameter Position, A = first non cmd char
     262/     317 : 31                  		xpal	p1
     263/     318 : C9 00               		st 		(p1) 											; write to parameter position.
     264/     31A :                     
     265/     31A :                     ; ****************************************************************************************************************
     266/     31A :                     ;
     267/     31A :                     ;						Find command in -1 (P2) (High) E (Low) in Command table
     268/     31A :                     ;	
     269/     31A :                     ; ****************************************************************************************************************
     270/     31A :                     
     271/     31A : C4 47               		ldi 	__commandList & 255 							; point P1 to the command list
     272/     31C : 31                  		xpal 	p1
     273/     31D : C4 07               		ldi 	__commandList / 256 		
     274/     31F : 35                  		xpah 	p1	
     275/     320 :                     __FindCommandLoop:
     276/     320 : C1 00               		ld 		0(p1) 											; reached the end of the table ?
     277/     322 : D9 01               		or 		1(p1)											; which is marked by word 0000
     278/     324 : 98 31               		jz 		__CommandError
     279/     326 : C5 03               		ld 		@3(p1) 											; read low byte, and point to next
     280/     328 : 60                  		xre
 AS V1.42 Beta [Bld 102] - source file monitor.asm - page 14 - 12/5/2015 9:10:16


     281/     329 : 9C F5               		jnz 	__FindCommandLoop 								; if different to LSB loop back.
     282/     32B : C1 FE               		ld 		-2(p1) 											; read the high byte
     283/     32D : E2 FF               		xor 	-1(p2) 											; if different to the MSB loop back.
     284/     32F : 9C EF               		jnz 	__FindCommandLoop
     285/     331 :                     
     286/     331 :                     ; ****************************************************************************************************************
     287/     331 :                     ;
     288/     331 :                     ;				Found command, figure out if ASM or Command, if Command go to that routine
     289/     331 :                     ;
     290/     331 :                     ; ****************************************************************************************************************
     291/     331 :                     
     292/     331 : C4 7C               		ldi 	(GetParameter-1) & 255 							; point P3 to the get parameter code.
     293/     333 : 33                  		xpal 	p3
     294/     334 : C4 06               		ldi 	(GetParameter-1) / 256
     295/     336 : 37                  		xpah 	p3
     296/     337 :                     
     297/     337 : C1 FF               		ld 		-1(p1) 											; read the operation code.
     298/     339 : D4 F0               		ani 	0xF0 											; look at the m-s-nibble - commands are 0x20.
     299/     33B : E4 20               		xri 	0x20
     300/     33D : 9C 22               		jnz 	__Assembler
     301/     33F :                     
     302/     33F : C1 FF               		ld 		-1(p1) 											; re-read it
     303/     341 : 02                  		ccl
     304/     342 : F1 FF               		add 	-1(p1) 											; double it
     305/     344 : D4 1F               		ani 	0x1F 											; lower 5 bits only.
     306/     346 : F4 EE               		adi 	__CommandTable & 255 							; make P1 point to the command table entry
     307/     348 : 31                  		xpal 	p1
     308/     349 : C4 07               		ldi 	__CommandTable / 256 					
     309/     34B : 35                  		xpah 	p1
     310/     34C : C1 00               		ld 		0(p1) 											; read low address
     311/     34E : 01                  		xae
     312/     34F : C1 01               		ld 		1(p1) 											; read high address
     313/     351 : 35                  		xpah 	p1 												; put in P1.H
     314/     352 : 40                  		lde 													; get low address
     315/     353 : 31                  		xpal 	p1 												; put in P1.L
     316/     354 : C5 FF               		ld 		@-1(p1) 										; fix up for the pre-increment
     317/     356 : 3D                  		xppc 	p1 												; and go there.
     318/     357 :                     
     319/     357 :                     __CommandError: 												; unknown command.
     320/     357 : C4 03               		ldi 	3 												; set the beeper on
     321/     359 : 07                  		cas
     322/     35A : 8F FF               		dly 	0xFF 											; short delay
     323/     35C : C4 00               		ldi 	0 												; set the beeper off
     324/     35E : 07                  		cas
     325/     35F : 90 84               		jmp 	__CmdMainLoop1
     326/     361 :                     
     327/     361 :                     ; ****************************************************************************************************************
     328/     361 :                     ;												In line Assembler
     329/     361 :                     ; ****************************************************************************************************************
     330/     361 :                     
     331/     361 :                     __Assembler:
     332/     361 : C1 FF               		ld 		-1(p1) 											; this is the operation code to use.
     333/     363 : CE FF               		st 		@-1(p2) 										; push on the stack.
     334/     365 :                     
     335/     365 : 3F                  		xppc 	p3 												; evaluate (any) parameter if present
     336/     366 : 06                  		csa 													; check carry flag set
     337/     367 : 94 27               		jp 		__ASMNoParameter  								; if clear, no parameter was provided.
     338/     369 :                     
     339/     369 : C4 1C               		ldi 	parPosn & 255
     340/     36B : 31                  		xpal 	p1 												; get the parameter LSB
 AS V1.42 Beta [Bld 102] - source file monitor.asm - page 15 - 12/5/2015 9:10:16


     341/     36C : CE FF               		st 		@-1(p2) 										; push that on the stack, set P1 to parPosn
     342/     36E : C4 0C               		ldi 	parPosn / 256
     343/     370 : 35                  		xpah 	p1
     344/     371 : C1 00               		ld 		(p1) 											; read current position
     345/     373 : 31                  		xpal 	p1 												; P1 now points to character.
     346/     374 : C1 00               		ld 		(p1) 											; read character
     347/     376 : E4 21               		xri 	'!'												; is it the label pling ?
     348/     378 : 9C 1E               		jnz 	__ASMContinue 									; we don't need to change this pointer , we should technically.
     349/     37A : C2 00               		ld 		(p2) 											; read the value, which is the label number
     350/     37C : 03                  		scl
     351/     37D : FC 18               		cai 	labelCount 										; is it a valid label number
     352/     37F : 94 D6               		jp 		__CommandError 									; no, beep.
     353/     381 : C2 00               		ld 		(p2) 											; re-read the label number
     354/     383 : 01                  		xae 													; put in E
     355/     384 : C4 0C               		ldi 	Labels/256 										; point p1 to labels
     356/     386 : 35                  		xpah 	p1
     357/     387 : C4 00               		ldi 	Labels&255 
     358/     389 : 31                  		xpal 	p1
     359/     38A : C1 80               		ld 		-0x80(p1) 										; read label indexed using E.
     360/     38C : CA 00               		st 		(p2) 											; save as the operand
     361/     38E : 90 08               		jmp 	__ASMContinue 									; and continue
     362/     390 :                     
     363/     390 :                     __ASMNoParameter:
     364/     390 : C2 00               		ld 		(p2) 											; read the pushed operation code
     365/     392 : D4 80               		ani 	0x80 											; is bit 7 set ?
     366/     394 : 9C C1               		jnz 	__CommandError 									; if it is, we need a parameter
     367/     396 : CE FF               		st 		@-1(p2) 										; push zero on the stack as a dummy parameter.
     368/     398 :                     
     369/     398 :                     __ASMContinue:
     370/     398 : C4 0C               		ldi 	Current/256 									; p3 = &Current Address
     371/     39A : 37                  		xpah 	p3
     372/     39B : C4 19               		ldi 	Current&255
     373/     39D : 33                  		xpal 	p3
     374/     39E :                     
     375/     39E : C3 04               		ld 		modifier-Current(p3) 							; get the modifier (e.g. @,Pn etc.)
     376/     3A0 : 02                  		ccl
     377/     3A1 : F2 01               		add 	1(p2) 											; add to the opcode and write it back
     378/     3A3 : CA 01               		st 		1(p2)
     379/     3A5 :                     
     380/     3A5 : C3 00               		ld 		(p3) 											; read current address into P1
     381/     3A7 : 31                  		xpal 	p1
     382/     3A8 : C3 01               		ld 		1(p3)
     383/     3AA : 35                  		xpah 	p1
     384/     3AB :                     
     385/     3AB : C2 01               		ld 		1(p2) 											; read opcode.
     386/     3AD : CD 01               		st 		@1(p1) 											; write out to current address and bump it.
     387/     3AF : 94 1F               		jp 		__ASMExit 										; if +ve then no operand byte, exit.
     388/     3B1 :                     
     389/     3B1 : C2 00               		ld 		(p2) 											; read the operand byte
     390/     3B3 : CD 01               		st 		@1(p1) 											; write that out as well.
     391/     3B5 :                     
     392/     3B5 : C3 04               		ld 		modifier-Current(p3) 							; look at the modifier 
     393/     3B7 : 9C 17               		jnz 	__ASMExit 										; if non zero we don't need to do anything P0 = 00
     394/     3B9 : C2 01               		ld 		1(p2) 											; DLY is a special case
     395/     3BB : E4 8F               		xri 	0x8F 											; where the modifier is zero but not PC relative.
     396/     3BD : 98 11               		jz 		__ASMExit 												
     397/     3BF :                     
     398/     3BF : C1 FF               		ld 		-1(p1) 											; read operand
     399/     3C1 : 02                  		ccl 													; one fewer because we want the current addr+1 low
     400/     3C2 : FB 00               		cad 	(p3) 											; subtract the current address low.
 AS V1.42 Beta [Bld 102] - source file monitor.asm - page 16 - 12/5/2015 9:10:16


     401/     3C4 : C9 FF               		st 		-1(p1) 											; write it back
     402/     3C6 :                     
     403/     3C6 : C2 01               		ld 		1(p2) 											; read opcode again
     404/     3C8 : D4 F0               		ani 	0xF0 											; is it 9x (a JMP command)
     405/     3CA : E4 90               		xri 	0x90
     406/     3CC : 9C 02               		jnz 	__ASMExit 										; if not, we are done
     407/     3CE : B9 FF               		dld 	-1(p1) 											; one fewer because of the pre-increment
     408/     3D0 :                     __ASMExit:
     409/     3D0 : 31                  		xpal 	p1 												; write current address back out
     410/     3D1 : CB 00               		st 		(p3)
     411/     3D3 : 35                  		xpah 	p1
     412/     3D4 : CB 01               		st 		1(p3)
     413/     3D6 : C6 02               		ld 		@2(p2) 											; drop stack values.
     414/     3D8 :                     
     415/     3D8 : 90 0C               		jmp 	__CmdMainLoop2 									; back to command loop
     416/     3DA :                     
     417/     3DA :                     ; ****************************************************************************************************************
     418/     3DA :                     ; ****************************************************************************************************************
     419/     3DA :                     ;
     420/     3DA :                     ;												Commands Section
     421/     3DA :                     ;
     422/     3DA :                     ; ****************************************************************************************************************
     423/     3DA :                     ; ****************************************************************************************************************
     424/     3DA :                     
     425/     3DA :                     ; ****************************************************************************************************************
     426/     3DA :                     ;											A : Set Current address
     427/     3DA :                     ; ****************************************************************************************************************
     428/     3DA :                     
     429/     3DA :                     Address_Command:
     430/     3DA : 3F                  		xppc 	p3 												; get parameter if exists
     431/     3DB : 3F                  		xppc 	p3 												; update current if exists.
     432/     3DC : 90 08               		jmp 	__CmdMainLoop2
     433/     3DE :                     
     434/     3DE :                     __CmdParameterFail:
     435/     3DE : C4 02               		ldi 	2 												; set the beeper on
     436/     3E0 : 07                  		cas
     437/     3E1 : 8F FF               		dly 	0xFF 											; short delay
     438/     3E3 : C4 00               		ldi 	0 												; set the beeper off
     439/     3E5 : 07                  		cas
     440/     3E6 :                     __CmdMainLoop2:													; and go back to the start.
     441/     3E6 : C4 88               		ldi 	(CommandMainLoop-1) & 255
     442/     3E8 : 33                  		xpal 	p3
     443/     3E9 : C4 02               		ldi 	(CommandMainLoop-1) / 256
     444/     3EB : 37                  		xpah 	p3
     445/     3EC : 3F                  		xppc 	p3
     446/     3ED :                     
     447/     3ED :                     ; ****************************************************************************************************************
     448/     3ED :                     ;										G : Go (Address must be specified.)
     449/     3ED :                     ; ****************************************************************************************************************
     450/     3ED :                     
     451/     3ED :                     Go_Command:
     452/     3ED : 3F                  		xppc 	p3 												; get parameter, which should exist.
     453/     3EE : 06                  		csa 													; look at CY/L which is set if it was.
     454/     3EF : 94 ED               		jp 		__CmdParameterFail 								; if it is clear, beep an error.
     455/     3F1 : 31                  		xpal 	p1 												; copy P1 to P3
     456/     3F2 : 33                  		xpal 	p3
     457/     3F3 : 35                  		xpah 	p1
     458/     3F4 : 37                  		xpah 	p3
     459/     3F5 : C7 FF               		ld 		@-1(p3) 										; fix up for pre increment
     460/     3F7 : 3F                  		xppc 	p3 												; call the routine.		
 AS V1.42 Beta [Bld 102] - source file monitor.asm - page 17 - 12/5/2015 9:10:16


     461/     3F8 :                     __CmdMainLoop3:
     462/     3F8 : 90 EC               		jmp 	__CmdMainLoop2 									; re-enter monitor.
     463/     3FA :                     
     464/     3FA :                     ; ****************************************************************************************************************
     465/     3FA :                     ;			PUT Write to tape : data mandatory, it is the byte count from the current address.
     466/     3FA :                     ; ****************************************************************************************************************
     467/     3FA :                     
     468/     3FA :                     PutTape_Command:
     469/     3FA : 3F                  		xppc 	p3 												; get the bytes to write.
     470/     3FB : 06                  		csa 													; if CC, no value was provided
     471/     3FC : 94 E0               		jp 		__CmdParameterFail 								; which is an error.
     472/     3FE : 31                  		xpal 	p1 												; store low byte count in -1(P2)
     473/     3FF : CA FF               		st 		-1(p2)
     474/     401 : 35                  		xpah 	p1 												; store high byte count in -2(P2)
     475/     402 : CA FE               		st 		-2(p2)
     476/     404 : 02                  		ccl 													; skip over the update current address
     477/     405 : 3F                  		xppc 	p3 												; this won't update current address as CY/L = 0
     478/     406 : 3F                  		xppc 	p3 												; and load the current address into P1.
     479/     407 : C4 00               		ldi 	0 												; set the output tape bit low
     480/     409 : 01                  		xae
     481/     40A : 19                  		sio
     482/     40B : C4 20               		ldi 	32 												; tape leader
     483/     40D : CA FD               		st 		-3(p2)
     484/     40F :                     _PutTapeLeader:
     485/     40F : 8F FF               		dly 	0xFF
     486/     411 : BA FD               		dld 	-3(p2)
     487/     413 : 9C FA               		jnz 	_PutTapeLeader
     488/     415 :                     _PutTapeByte:													; output byte at P1
     489/     415 : C4 00               		ldi 	0 												; set output bit to 0
     490/     417 : 01                  		xae 	
     491/     418 : 19                  		sio
     492/     419 : 8F 10               		dly 	tapeDelay * 4 									; 0 continuation bit + gap between tapes with no signal 
     493/     41B : C4 01               		ldi 	0x1 											; set bit high
     494/     41D : 01                  		xae
     495/     41E : 19                  		sio 
     496/     41F : C4 00               		ldi 	0
     497/     421 : 8F 04               		dly 	tapeDelay 										; output the start bit.
     498/     423 : C5 01               		ld 		@1(p1) 											; read the byte and put it in E.
     499/     425 : 01                  		xae
     500/     426 : C4 08               		ldi 	8 												; output 8 bits
     501/     428 : CA FD               		st 		-3(p2)
     502/     42A :                     _PutTapeBit:
     503/     42A : 19                  		sio 													; output MSB and shift
     504/     42B : C4 00               		ldi 	0
     505/     42D : 8F 04               		dly 	tapeDelay 								
     506/     42F : BA FD               		dld 	-3(p2) 											; do all 8 bits.
     507/     431 : 9C F7               		jnz 	_PutTapeBit
     508/     433 : BA FF               		dld 	-1(p2) 											; decrement counter
     509/     435 : 9C DE               		jnz 	_PutTapeByte
     510/     437 : BA FE               		dld 	-2(p2) 											; note MSB goes 0 to -1 when finished.
     511/     439 : 94 DA               		jp 		_PutTapeByte
     512/     43B : C4 01               		ldi 	0x01 											; add the termination bit.
     513/     43D : 01                  		xae
     514/     43E : 19                  		sio
     515/     43F : C4 00               		ldi 	0 												; put that out.
     516/     441 : 8F 04               		dly 	TapeDelay
     517/     443 : C4 00               		ldi 	0 												; and set the leve back to 0
     518/     445 : 01                  		xae 
     519/     446 : 19                  		sio
     520/     447 :                     __CmdMainLoop4:
 AS V1.42 Beta [Bld 102] - source file monitor.asm - page 18 - 12/5/2015 9:10:16


     521/     447 : 90 AF               		jmp 	__CmdMainLoop3
     522/     449 :                     
     523/     449 :                     __CmdParameterFail1:
     524/     449 : 90 93               		jmp 	__CmdParameterFail
     525/     44B :                     
     526/     44B :                     ; ****************************************************************************************************************
     527/     44B :                     ;						GET [addr] load tape to current position or given address.
     528/     44B :                     ; ****************************************************************************************************************
     529/     44B :                     
     530/     44B :                     LoadTape_Command:
     531/     44B : 3F                  		xppc	p3 												; get parameter
     532/     44C : 3F                  		xppc 	p3												; update current address
     533/     44D : 3F                  		xppc 	p3 												; current address to P1.
     534/     44E : C4 08               		ldi 	0x8 											; point P3 to the keyboard.
     535/     450 : 37                  		xpah 	p3
     536/     451 :                     __GetTapeWait:
     537/     451 : C3 00               		ld 		0(p3) 											; check keyboard break
     538/     453 : D4 80               		ani 	0x80
     539/     455 : 9C F2               		jnz 	__CmdParameterFail1
     540/     457 : 19                  		sio 													; wait for the start bit, examine tape in.
     541/     458 : 40                  		lde 
     542/     459 : 94 F6               		jp 		__GetTapeWait
     543/     45B : 8F 06               		dly 	tapeDelay * 3 / 2 								; half way into the first bit.
     544/     45D : C4 08               		ldi 	8 												; read in 8 bits.
     545/     45F : CA FF               		st 		-1(p2)
     546/     461 :                     __GetTapeBits:
     547/     461 : 19                  		sio 													; read in one bit
     548/     462 : C4 00               		ldi 	0
     549/     464 : 8F 04               		dly 	tapeDelay 										; delay to next bit
     550/     466 : BA FF               		dld 	-1(p2) 											; read 8 bits.
     551/     468 : 9C F7               		jnz 	__GetTapeBits 
     552/     46A : 40                  		lde 													; store byte at current address
     553/     46B : CD 01               		st 		@1(p1)
     554/     46D : 19                  		sio 													; read in the byte, which is zero if continuing.
     555/     46E : 40                  		lde  													; examine bit 7 shifted in.
     556/     46F : 94 E0               		jp 		__GetTapeWait 									; if zero, wait for the next start bit.
     557/     471 :                     __CmdMainLoop5:
     558/     471 : 90 D4               		jmp 	__CmdMainLoop4
     559/     473 :                     
     560/     473 :                     ; ****************************************************************************************************************
     561/     473 :                     ;										L : nn Set Label to current address
     562/     473 :                     ; ****************************************************************************************************************
     563/     473 :                     
     564/     473 :                     Label_Command:
     565/     473 : 3F                  		xppc 	p3 												; get parameter
     566/     474 : 06                  		csa 													; check it exists, CY/L must be set
     567/     475 : 94 D2               		jp 		__CmdParameterFail1
     568/     477 : 31                  		xpal 	p1 												; get into A
     569/     478 : 01                  		xae 													; put into E
     570/     479 : 40                  		lde 													; get back
     571/     47A : 03                  		scl
     572/     47B : FC 18               		cai 	labelCount 										; check is < number of labels
     573/     47D : 94 CA               		jp 		__CmdParameterFail1
     574/     47F :                     
     575/     47F : C4 0C               		ldi 	Current/256 									; point P1 to current address
     576/     481 : 35                  		xpah 	p1
     577/     482 : C4 19               		ldi 	Current&255
     578/     484 : 31                  		xpal 	p1
     579/     485 : C1 00               		ld 		(p1) 											; read current address
     580/     487 : 31                  		xpal 	p1 												; save in P1.Low
 AS V1.42 Beta [Bld 102] - source file monitor.asm - page 19 - 12/5/2015 9:10:16


     581/     488 : C4 00               		ldi 	Labels&255 										; get labels low byte in same page as current address
     582/     48A : 02                  		ccl
     583/     48B : 70                  		ade 													; add label # to it
     584/     48C : 31                  		xpal 	p1 												; put in P1.L and restore current address low
     585/     48D : C9 00               		st 		(p1) 											; store current address low in label space.
     586/     48F : 90 E0               		jmp 	__CmdMainLoop5 									; and exit.
     587/     491 :                     
     588/     491 :                     ; ****************************************************************************************************************
     589/     491 :                     ;											M :	Dump Memory
     590/     491 :                     ; ****************************************************************************************************************
     591/     491 :                     
     592/     491 :                     MemoryDump_Command:
     593/     491 : 3F                  		xppc 	p3 												; get parameter if exists
     594/     492 : 3F                  		xppc 	p3 												; update current if exists.
     595/     493 : C4 07               		ldi 	7 												; print seven rows
     596/     495 : CE FF               		st 		@-1(p2)
     597/     497 :                     __DCLoop:
     598/     497 : C4 06               		ldi 	(PrintAddressData-1)/256						; print one row of address and data.
     599/     499 : 37                  		xpah 	p3
     600/     49A : C4 49               		ldi 	(PrintAddressData-1)&255
     601/     49C : 33                  		xpal 	p3
     602/     49D : C4 04               		ldi 	4
     603/     49F : 3F                  		xppc 	p3
     604/     4A0 : C4 0C               		ldi 	Current/256 									; point P1 to current
     605/     4A2 : 35                  		xpah 	p1
     606/     4A3 : C4 19               		ldi 	Current&255 
     607/     4A5 : 31                  		xpal 	p1
     608/     4A6 : C1 00               		ld 		0(p1) 											; add 4 to current address
     609/     4A8 : 02                  		ccl
     610/     4A9 : F4 04               		adi 	4
     611/     4AB : C9 00               		st 		0(p1)
     612/     4AD : C1 01               		ld 		1(p1)
     613/     4AF : F4 00               		adi 	0
     614/     4B1 : C9 01               		st 		1(p1)
     615/     4B3 : BA 00               		dld 	(p2) 											; do it 7 times
     616/     4B5 : 9C E0               		jnz 	__DCLoop
     617/     4B7 : C6 01               		ld 		@1(p2) 											; fix up stack.
     618/     4B9 :                     __CmdMainLoop6:
     619/     4B9 : 90 B6               		jmp 	__CmdMainLoop5
     620/     4BB :                     
     621/     4BB :                     
     622/     4BB :                     ; ****************************************************************************************************************
     623/     4BB :                     ;								B: Enter Bytes (no address, sequence of byte data)
     624/     4BB :                     ; ****************************************************************************************************************
     625/     4BB :                     
     626/     4BB :                     EnterBytes_Command:
     627/     4BB : C4 7C               		ldi 	(GetParameter-1) & 255 							; P3 = Get Parameter routine
     628/     4BD : 33                  		xpal 	p3
     629/     4BE : C4 06               		ldi 	(GetParameter-1) / 256 	
     630/     4C0 : 37                  		xpah 	p3
     631/     4C1 : 3F                  		xppc 	p3 												; get the parameter.
     632/     4C2 : 06                  		csa 													; look at carry
     633/     4C3 : 94 AC               		jp 		__CmdMainLoop5 									; carry clear, no value.
     634/     4C5 : C4 0C               		ldi 	Current/256 									; make P1 point to current
     635/     4C7 : 35                  		xpah 	p1
     636/     4C8 : C4 19               		ldi 	Current&255 										
     637/     4CA : 31                  		xpal 	p1 												; this pulls the byte value into A
     638/     4CB : 01                  		xae 													; save it in E
     639/     4CC : C1 00               		ld 		0(p1) 											; copy address to save to into P3
     640/     4CE : 33                  		xpal 	p3
 AS V1.42 Beta [Bld 102] - source file monitor.asm - page 20 - 12/5/2015 9:10:16


     641/     4CF : C1 01               		ld 		1(p1) 
     642/     4D1 : 37                  		xpah 	p3 
     643/     4D2 : 40                  		lde 													; get byte back
     644/     4D3 : CB 00               		st 		(p3) 											; save it in that location
     645/     4D5 : A9 00               		ild 	0(p1) 											; bump current address and go back and try again.
     646/     4D7 : 9C E2               		jnz 	EnterBytes_Command
     647/     4D9 : A9 01               		ild 	1(p1)
     648/     4DB : 90 DE               		jmp 	EnterBytes_Command
     649/     4DD :                     
     650/     4DD :                     ; ****************************************************************************************************************
     651/     4DD :                     ;											D [aaaa] Disassembler
     652/     4DD :                     ; ****************************************************************************************************************
     653/     4DD :                     
     654/     4DD :                     Disassemble_Command:	
     655/     4DD : 3F                  		xppc 	p3 												; evaluate
     656/     4DE : 3F                  		xppc 	p3 												; update current if new value
     657/     4DF : C4 07               		ldi 	7												; instructions to disassemble counter
     658/     4E1 : CE FC               		st 		@-4(p2)											; p2 + 0 = counter p2 + 1 = opcode p2 + 2 = operand
     659/     4E3 :                     __DAssLoop:														; p2 + 3 = opcode - base opcode.
     660/     4E3 : C4 06               		ldi 	(PrintAddressData-1)/256						; print Address only
     661/     4E5 : 37                  		xpah 	p3
     662/     4E6 : C4 49               		ldi 	(PrintAddressData-1)&255
     663/     4E8 : 33                  		xpal 	p3
     664/     4E9 : C4 00               		ldi 	0
     665/     4EB : 3F                  		xppc 	p3
     666/     4EC : C4 0C               		ldi 	Current / 256 									; point P1 to current address
     667/     4EE : 35                  		xpah 	p1
     668/     4EF : C4 19               		ldi 	Current & 255
     669/     4F1 : 31                  		xpal 	p1
     670/     4F2 : C1 00               		ld 		0(p1) 											; load current address into P3
     671/     4F4 : 33                  		xpal 	p3
     672/     4F5 : C1 01               		ld 		1(p1)
     673/     4F7 : 37                  		xpah 	p3
     674/     4F8 : C7 01               		ld 		@1(p3) 											; read opcode
     675/     4FA : CA 01               		st 		1(p2) 											; save it
     676/     4FC : 94 04               		jp 		__DAssNoOperand 								; if +ve no operand
     677/     4FE : C7 01               		ld 		@1(p3) 											; read operand
     678/     500 : CA 02               		st 		2(p2) 											; save it
     679/     502 :                     __DAssNoOperand:
     680/     502 : C4 E9               		ldi 	(__CommandListEnd-3) & 255
     681/     504 : 33                  		xpal 	p3 												; update current position, setting P3 to last entry
     682/     505 : C9 00               		st 		0(p1)											; in command table.
     683/     507 : C4 07               		ldi 	(__CommandListEnd-3) / 256
     684/     509 : 37                  		xpah 	p3
     685/     50A : C9 01               		st 		1(p1)
     686/     50C :                     
     687/     50C :                     __DAssFindOpcode: 												; the table is : text (word) opcode (byte)
     688/     50C : C2 01               		ld 		1(p2) 											; get opcode
     689/     50E : E3 02               		xor 	2(p3) 											; check in the same 8 byte page.
     690/     510 : D4 F0               		ani 	0xF0
     691/     512 : 9C 0B               		jnz 	__DAssNextOpcode
     692/     514 : C2 01               		ld 		1(p2) 											; get opcode
     693/     516 : 03                  		scl
     694/     517 : FB 02               		cad 	2(p3) 											; subtract the base opcode.
     695/     519 : CA 03               		st 		3(p2) 											; save a the offset (possible)
     696/     51B : D4 E0               		ani 	0xE0 											; it needs to be 0x20 or less
     697/     51D : 98 08               		jz 		__DAssFoundOpcode 								; if >= 0 then found the correct opcode.
     698/     51F :                     __DAssNextOpcode:
     699/     51F : C7 FD               		ld 		@-3(p3) 										; go to previous entry in table
     700/     521 : 90 E9               		jmp 	__DAssFindOpcode
 AS V1.42 Beta [Bld 102] - source file monitor.asm - page 21 - 12/5/2015 9:10:16


     701/     523 :                     
     702/     523 :                     __DAssLoop2:
     703/     523 : 90 BE               		jmp 	__DAssLoop
     704/     525 :                     __CmdMainLoop7:
     705/     525 : 90 92               		jmp 	__CmdMainLoop6
     706/     527 :                     
     707/     527 :                     __DAssFoundOpcode:
     708/     527 : C3 02               		ld 		2(p3) 											; look at opcode that matched.
     709/     529 : D4 87               		ani 	0x87 											; match with 1xxx x100
     710/     52B : E4 84               		xri 	0x84 											; which is all the immediate instructions.		
     711/     52D : 9C 04               		jnz 	__DAssNotImmediate
     712/     52F : C2 03               		ld 		3(p2) 											; only do immediate if base offset is zero
     713/     531 : 9C EC               		jnz 	__DAssNextOpcode 								; fixes C0-C7 being LD, but C4 being LDI.
     714/     533 :                     __DAssNotImmediate:
     715/     533 : C3 00               		ld 		0(p3) 											; save LSB of text on stack
     716/     535 : CE FF               		st 		@-1(p2)
     717/     537 : C3 01               		ld 		1(p3) 											; and the MSB of text on stack
     718/     539 : CE FF               		st 		@-1(p2)
     719/     53B :                     
     720/     53B : C4 05               		ldi 	(PrintCharacter-1) / 256 						; set P3 up to print characters
     721/     53D : 37                  		xpah 	p3
     722/     53E : C4 DC               		ldi 	(PrintCharacter-1) & 255 
     723/     540 : 33                  		xpal 	p3
     724/     541 : C4 20               		ldi 	' '												; print a space.
     725/     543 : 3F                  		xppc 	p3
     726/     544 :                     
     727/     544 : C4 03               		ldi 	3 												; print 3 characters
     728/     546 : CE FF               		st 		@-1(p2) 										; so +0 is count, +1 = text MSB, +2 = text LSB
     729/     548 :                     __DAssPrintMnemonic:
     730/     548 : C2 01               		ld 		1(p2) 											; get text MSB which is in bits .xxxxx..
     731/     54A : 1C                  		sr 														; shift right twice.
     732/     54B : 1C                  		sr
     733/     54C : D4 1F               		ani 	0x1F 											; lower 5 bits only
     734/     54E : 98 04               		jz 		__DAssSkipSpace 								; don't print spaces (00000)
     735/     550 : 02                  		ccl 													; make it 7 bit ASCII code.
     736/     551 : F4 40               		adi 	64 							
     737/     553 : 3F                  		xppc 	p3 												; display the character
     738/     554 :                     __DAssSkipSpace:
     739/     554 : C4 05               		ldi 	5 												; now shift the encoded data left 5 times
     740/     556 : CA FF               		st 		-1(p2)
     741/     558 :                     __DAssShiftEncode:
     742/     558 : 02                  		ccl
     743/     559 : C2 02               		ld 		2(p2)
     744/     55B : F2 02               		add 	2(p2)
     745/     55D : CA 02               		st 		2(p2)
     746/     55F : C2 01               		ld 		1(p2)
     747/     561 : F2 01               		add 	1(p2)
     748/     563 : CA 01               		st 		1(p2)
     749/     565 : BA FF               		dld 	-1(p2)
     750/     567 : 9C EF               		jnz 	__DAssShiftEncode
     751/     569 : BA 00               		dld 	0(p2) 											; done all three characters
     752/     56B : 9C DB               		jnz 	__DAssPrintMnemonic 							; if not keep going.
     753/     56D :                     
     754/     56D : C6 03               		ld 		@3(p2) 											; remove mnemonic stuff off the stack.
     755/     56F :                     
     756/     56F : C2 03               		ld 		3(p2) 											; print instruction modifier if required.
     757/     571 : 9C 1F               		jnz 	__DAssPrintModifier
     758/     573 :                     
     759/     573 :                     __DAssPrintOperand:
     760/     573 : C2 01               		ld 		1(p2) 											; get original opcode
 AS V1.42 Beta [Bld 102] - source file monitor.asm - page 22 - 12/5/2015 9:10:16


     761/     575 : 94 0A               		jp 		__DAssNext 										; if no operand go to next line of disassembly.
     762/     577 : C4 05               		ldi 	(PrintHexByte-1) / 256 							; set P3 to point to the hex printer
     763/     579 : 37                  		xpah 	p3
     764/     57A : C4 A9               		ldi 	(PrintHexByte-1) & 255
     765/     57C : 33                  		xpal 	p3
     766/     57D : C2 02               		ld 		2(p2) 											; get operand
     767/     57F : 03                  		scl 
     768/     580 : 3F                  		xppc 	p3 												; print it out with a leading space.
     769/     581 :                     
     770/     581 :                     __DAssNext:
     771/     581 : C4 05               		ldi 	(PrintCharacter-1) / 256 						; set P3 up to print characters
     772/     583 : 37                  		xpah 	p3
     773/     584 : C4 DC               		ldi 	(PrintCharacter-1) & 255 
     774/     586 : 33                  		xpal 	p3
     775/     587 : C4 0D               		ldi 	13												; print a newline.
     776/     589 : 3F                  		xppc 	p3
     777/     58A :                     
     778/     58A : BA 00               		dld 	0(p2) 											; done all 6 lines
     779/     58C : 9C 95               		jnz 	__DAssLoop2 									; no, go round again.
     780/     58E : C6 04               		ld 		@4(p2) 											; fix up the stack.
     781/     590 : 90 93               		jmp 	__CmdMainLoop7 									; and time to exit.
     782/     592 :                     
     783/     592 :                     
     784/     592 :                     __DAssPrintModifier:
     785/     592 : C4 20               		ldi 	' '												; print leading space
     786/     594 : 3F                  		xppc 	p3
     787/     595 : C2 03               		ld 		3(p2) 											; read modifier
     788/     597 : D4 04               		ani 	0x04 											; is @ bit set
     789/     599 : 98 03               		jz 		__DAssNotAutoIndexed
     790/     59B : C4 40               		ldi 	'@'												; print '@'
     791/     59D : 3F                  		xppc 	p3
     792/     59E :                     __DAssNotAutoIndexed:
     793/     59E : C4 50               		ldi 	'P'												; print 'P'
     794/     5A0 : 3F                  		xppc 	p3
     795/     5A1 : C2 03               		ld 		3(p2) 											; print pointer register
     796/     5A3 : D4 03               		ani 	3
     797/     5A5 : DC 30               		ori 	'0'
     798/     5A7 : 3F                  		xppc 	p3
     799/     5A8 : 90 C9               		jmp 	__DAssPrintOperand 								; and print operand.
     800/     5AA :                     
     801/     5AA :                     
     802/     5AA :                     ; ****************************************************************************************************************
     803/     5AA :                     ; ****************************************************************************************************************
     804/     5AA :                     ;
     805/     5AA :                     ;						Print A as a hexadecimal 2 digit value. If CY/L set precede with space
     806/     5AA :                     ;
     807/     5AA :                     ; ****************************************************************************************************************
     808/     5AA :                     ; ****************************************************************************************************************
     809/     5AA :                     
     810/     5AA :                     PrintHexByte:
     811/     5AA : CE FF               		st 		@-1(p2) 										; push A and P3, set P3 up to print character
     812/     5AC : C4 05               		ldi 	(PrintCharacter-1)/256
     813/     5AE : 37                  		xpah 	p3
     814/     5AF : CE FF               		st 		@-1(p2)
     815/     5B1 : C4 DC               		ldi 	(PrintCharacter-1)&255
     816/     5B3 : 33                  		xpal 	p3
     817/     5B4 : CE FF               		st 		@-1(p2)
     818/     5B6 : 06                  		csa 													; check carry
     819/     5B7 : 94 03               		jp 		__PHBNoSpace									; if clear, no space.
     820/     5B9 : C4 20               		ldi 	' '												; print leading space
 AS V1.42 Beta [Bld 102] - source file monitor.asm - page 23 - 12/5/2015 9:10:16


     821/     5BB : 3F                  		xppc 	p3 
     822/     5BC :                     __PHBNoSpace:
     823/     5BC : C2 02               		ld 		2(p2) 											; read digit
     824/     5BE : 1C                  		sr 														; convert MSB
     825/     5BF : 1C                  		sr
     826/     5C0 : 1C                  		sr
     827/     5C1 : 1C                  		sr
     828/     5C2 : 02                  		ccl
     829/     5C3 : EC 90               		dai 	0x90
     830/     5C5 : EC 40               		dai 	0x40
     831/     5C7 : 3F                  		xppc 	p3 												; print
     832/     5C8 : C2 02               		ld 		2(p2) 											; read digit
     833/     5CA : D4 0F               		ani 	0x0F 											; convert LSB
     834/     5CC : 02                  		ccl
     835/     5CD : EC 90               		dai 	0x90
     836/     5CF : EC 40               		dai 	0x40
     837/     5D1 : 3F                  		xppc 	p3 												; print
     838/     5D2 :                     
     839/     5D2 : C6 01               		ld 		@1(p2) 											; restore P3 & A and Return
     840/     5D4 : 33                  		xpal 	p3
     841/     5D5 : C6 01               		ld 		@1(p2)
     842/     5D7 : 37                  		xpah 	p3
     843/     5D8 : C6 01               		ld 		@1(p2)
     844/     5DA : 3F                  		xppc 	p3
     845/     5DB : 90 CD               		jmp 	PrintHexByte
     846/     5DD :                     
     847/     5DD :                     ; ****************************************************************************************************************
     848/     5DD :                     ; ****************************************************************************************************************
     849/     5DD :                     ;
     850/     5DD :                     ;		Print Character in A, preserves all registers, re-entrant. Handles 13 (New Line), 8 (Backspace)
     851/     5DD :                     ;		Characters 32 - 95 only.
     852/     5DD :                     ;	
     853/     5DD :                     ;		Rolls to screen top rather than scrolling.
     854/     5DD :                     ;
     855/     5DD :                     ; ****************************************************************************************************************
     856/     5DD :                     ; ****************************************************************************************************************
     857/     5DD :                     
     858/     5DD :                     PrintCharacter:
     859/     5DD : CE FF               		st 		@-1(p2) 										; save A
     860/     5DF : C4 0C               		ldi 	Cursor/256 										; save P1, setting up P1 -> Cursor at same time.
     861/     5E1 : 35                  		xpah 	p1
     862/     5E2 : CE FF               		st 		@-1(p2)
     863/     5E4 : C4 18               		ldi 	Cursor&255
     864/     5E6 : 31                  		xpal 	p1
     865/     5E7 : CE FF               		st 		@-1(p2)
     866/     5E9 : C4 00               		ldi 	0 												; save P3, setting up P3 -> Page 0 (Video RAM Write)
     867/     5EB : 37                  		xpah 	p3
     868/     5EC : CE FF               		st 		@-1(p2)
     869/     5EE : 33                  		xpal 	p3
     870/     5EF : CE FF               		st 		@-1(p2)
     871/     5F1 :                     
     872/     5F1 : C1 00               		ld 		(p1) 											; read cursor position
     873/     5F3 : 33                  		xpal 	p3 												; put in P3.Low
     874/     5F4 :                     
     875/     5F4 : C4 20               		ldi 	' ' 											; erase the cursor.
     876/     5F6 : CB 00               		st 		0(p3)
     877/     5F8 :                     
     878/     5F8 : C2 04               		ld 		4(p2) 											; read character to print.
     879/     5FA : E4 0D               		xri 	13 												; is it CR ?
     880/     5FC : 98 40               		jz 		__PCNewLine 									; if so, go to new line.
 AS V1.42 Beta [Bld 102] - source file monitor.asm - page 24 - 12/5/2015 9:10:16


     881/     5FE : E4 05               		xri 	13!8 											; is it Backspace ?
     882/     600 : 98 30               		jz 		__PCBackSpace
     883/     602 :                     
     884/     602 : C2 04               		ld 		4(p2) 											; get character to print
     885/     604 : D4 3F               		ani 	0x3F 											; make 6 bit ASCII
     886/     606 : CF 01               		st 		@1(p3) 											; write into P3, e.g. the screen and bump it.
     887/     608 : A9 00               		ild 	(p1) 											; increment cursor position and load
     888/     60A : D4 0F               		ani 	15 												; are we at line start ?
     889/     60C : 9C 0C               		jnz 	__PCExit 										; if so, erase the current line.
     890/     60E :                     
     891/     60E :                     __PCBlankNewLine:
     892/     60E : C4 10               		ldi 	16 												; count to 16, the number of spaces to write out.
     893/     610 : CA FF               		st 		-1(p2) 
     894/     612 :                     __PCBlankNewLineLoop:
     895/     612 : C4 20               		ldi 	' '
     896/     614 : CF 01               		st 		@1(p3)
     897/     616 : BA FF               		dld 	-1(p2)
     898/     618 : 9C F8               		jnz 	__PCBlankNewLineLoop
     899/     61A :                     
     900/     61A :                     __PCExit:
     901/     61A : C1 00               		ld 		(p1) 											; read cursor
     902/     61C : 33                  		xpal 	p3 												; put in P3.L
     903/     61D : C4 9B               		ldi 	0x9B 											; shaded block cursor on screen
     904/     61F : CB 00               		st 		(p3)
     905/     621 : C6 01               		ld 		@1(p2)											; restore P3
     906/     623 : 33                  		xpal 	p3
     907/     624 : C6 01               		ld 		@1(p2)
     908/     626 : 37                  		xpah 	p3
     909/     627 : C6 01               		ld 		@1(p2)											; restore P1
     910/     629 : 31                  		xpal 	p1
     911/     62A : C6 01               		ld 		@1(p2)
     912/     62C : 35                  		xpah 	p1
     913/     62D : C6 01               		ld 		@1(p2) 											; restore A and Return.	
     914/     62F : 3F                  		xppc 	p3
     915/     630 : 90 AB               		jmp 	PrintCharacter 									; and it is re-entrant.
     916/     632 :                     
     917/     632 :                     __PCBackSpace:
     918/     632 : 33                  		xpal 	p3 												; get current cursor position
     919/     633 : 98 E5               		jz 		__PCExit 										; if top of screen then exit.
     920/     635 : B9 00               		dld 	(p1) 											; backspace and load cursor
     921/     637 : 33                  		xpal 	p3 												; put in P3
     922/     638 : C4 20               		ldi 	' '												; erase character there
     923/     63A : CB 00               		st 		(p3)
     924/     63C : 90 DC               		jmp 	__PCExit 										; and exit.
     925/     63E :                     
     926/     63E :                     __PCNewLine:
     927/     63E : C1 00               		ld 		(p1) 											; read cursor position
     928/     640 : D4 70               		ani 	0x70 											; line
     929/     642 : 02                  		ccl 													; next line
     930/     643 : F4 10               		adi 	0x10
     931/     645 : C9 00               		st 		(p1) 											; write back
     932/     647 : 33                  		xpal 	p3 												; put in P3.L
     933/     648 : 90 C4               		jmp 	__PCBlankNewLine
     934/     64A :                     
     935/     64A :                     ; ****************************************************************************************************************
     936/     64A :                     ; ****************************************************************************************************************
     937/     64A :                     ;
     938/     64A :                     ;					Print current address followed by A data bytes. Doesn't update current address
     939/     64A :                     ;
     940/     64A :                     ; ****************************************************************************************************************
 AS V1.42 Beta [Bld 102] - source file monitor.asm - page 25 - 12/5/2015 9:10:16


     941/     64A :                     ; ****************************************************************************************************************
     942/     64A :                     
     943/     64A :                     PrintAddressData:
     944/     64A : CE FF               		st 		@-1(p2) 										; save count, we don't restore this.
     945/     64C : C4 05               		ldi 	(PrintHexByte-1)/256 							; save and set up P3
     946/     64E : 37                  		xpah 	p3
     947/     64F : CE FF               		st 		@-1(p2)
     948/     651 : C4 A9               		ldi 	(PrintHexByte-1)&255
     949/     653 : 33                  		xpal 	p3
     950/     654 : CE FF               		st 		@-1(p2)
     951/     656 : C4 0C               		ldi 	current / 256 									; point P1 to current address
     952/     658 : 35                  		xpah 	p1
     953/     659 : C4 19               		ldi 	current & 255
     954/     65B : 31                  		xpal 	p1
     955/     65C : C1 01               		ld 		1(p1) 											; read high byte of address
     956/     65E : 02                  		ccl
     957/     65F : 3F                  		xppc 	p3												; print w/o leading space
     958/     660 : C1 00               		ld 		0(p1)											; read low byte of address
     959/     662 : 02                  		ccl 	
     960/     663 : 3F                  		xppc 	p3 												; print w/o leading space.
     961/     664 : 01                  		xae 													; put in E
     962/     665 : C1 01               		ld 		1(p1) 											; high byte to P1.H
     963/     667 : 35                  		xpah 	p1
     964/     668 : 40                  		lde 													; low byte to P1.H
     965/     669 : 31                  		xpal 	p1
     966/     66A :                     _PADLoop:
     967/     66A : BA 02               		dld 	2(p2) 											; decrement counter
     968/     66C : 94 09               		jp 		_PADPrint 										; if +ve print another byte
     969/     66E :                     
     970/     66E : C6 01               		ld 		@1(p2) 											; restore P3, skipping A hence @2
     971/     670 : 33                  		xpal 	p3
     972/     671 : C6 02               		ld 		@2(p2)
     973/     673 : 37                  		xpah 	p3
     974/     674 : 3F                  		xppc 	p3
     975/     675 : 90 D3               		jmp 	PrintAddressData
     976/     677 :                     
     977/     677 :                     _PADPrint:
     978/     677 : C5 01               		ld 		@1(p1) 											; read byte advance pointer
     979/     679 : 03                  		scl
     980/     67A : 3F                  		xppc 	p3 												; print with space.
     981/     67B : 90 ED               		jmp 	_PADLoop
     982/     67D :                     
     983/     67D :                     ; ****************************************************************************************************************
     984/     67D :                     ;
     985/     67D :                     ;		Look at the parameter string for a parameter, processing @ and Pn as you go, CS if parameter found
     986/     67D :                     ; 		CC otherwise. Return parameter value in P1. Falls through
     987/     67D :                     ;
     988/     67D :                     ; ****************************************************************************************************************
     989/     67D :                     
     990/     67D :                     GetParameter:
     991/     67D : C4 0C               		ldi 	parPosn/256 									; current position into P1
     992/     67F : 35                  		xpah 	p1
     993/     680 : C4 1C               		ldi 	parPosn&255 					
     994/     682 : 31                  		xpal 	p1
     995/     683 : C4 00               		ldi 	0 												; -1(p2) is the low byte result
     996/     685 : CA FF               		st 		-1(p2) 											; -2(p2) is the high byte result
     997/     687 : CA FE               		st 		-2(p2)
     998/     689 :                     
     999/     689 : C1 00               		ld 		(p1) 											; read the current position,P1 points to character
    1000/     68B : 31                  		xpal 	p1 												; when we put it in P1.L
 AS V1.42 Beta [Bld 102] - source file monitor.asm - page 26 - 12/5/2015 9:10:16


    1001/     68C :                     
    1002/     68C :                     __GPASkip:														; skip over spaces to first alphanumeric.
    1003/     68C : C1 00               		ld 		(p1) 											; read character
    1004/     68E : 98 7B               		jz 		__GPAExitFail 									; if zero, then end of the input string.
    1005/     690 : C5 01               		ld 		@1(p1) 											; read it, advancing.
    1006/     692 : E4 20               		xri 	32 												; is it space ?
    1007/     694 : 98 F6               		jz 		__GPASkip 
    1008/     696 : E4 60               		xri 	32!'@'											; is it @ ?
    1009/     698 : 98 5E               		jz 		__GPAAtModifier 
    1010/     69A : E4 10               		xri 	'@'!'P' 										; is it P ?
    1011/     69C : 98 4C               		jz 		__GPAPointerModifier
    1012/     69E :                     
    1013/     69E :                     __GPANextCharacter:
    1014/     69E : C1 FF               		ld 		-1(p1) 											; get value back after post increment.
    1015/     6A0 : 02                  		ccl
    1016/     6A1 : F4 50               		adi 	128-48 											; this will be +ve if A < '0'
    1017/     6A3 : 94 66               		jp 		__GPAExitFail
    1018/     6A5 : FC 09               		cai 	9 												; will be +ve if A < '9', CY/L was clear.	
    1019/     6A7 : 94 0A               		jp 		__GPAFoundHex
    1020/     6A9 : FC 07               		cai 	7 												; will be +ve if A < 'A', CY/L was set
    1021/     6AB : 94 5E               		jp 		__GPAExitFail
    1022/     6AD : F4 79               		adi 	0xFF-0x85-1 									; will be +ve if A > 'F', CY/L was set.
    1023/     6AF : 94 5A               		jp 		__GPAExitFail 					
    1024/     6B1 : F4 76               		adi 	(0x70-0xFA) & 0xFF 								; make the range as below, CY/L was clear
    1025/     6B3 :                     __GPAFoundHex: 													; enter here 0-9 = $76..$7F, A-F = $70..$75
    1026/     6B3 : 02                  		ccl  													; convert that to a hex nibble.
    1027/     6B4 : F4 0A               		adi 	10
    1028/     6B6 : D4 0F               		ani 	0xF
    1029/     6B8 : 01                  		xae 													; save in E, temporarily
    1030/     6B9 : C4 04               		ldi 	4 												; now shift the result 4 bits to the left.
    1031/     6BB : CA FD               		st 		-3(p2) 											; -3(p2) is the counter
    1032/     6BD :                     __GPAShift:
    1033/     6BD : 02                  		ccl
    1034/     6BE : C2 FF               		ld 		-1(p2) 											; shift 16 bit result 1 bit to the left.
    1035/     6C0 : F2 FF               		add 	-1(p2)
    1036/     6C2 : CA FF               		st 		-1(p2)
    1037/     6C4 : C2 FE               		ld 		-2(p2)
    1038/     6C6 : F2 FE               		add 	-2(p2)
    1039/     6C8 : CA FE               		st 		-2(p2)
    1040/     6CA : BA FD               		dld 	-3(p2) 											; do it four times
    1041/     6CC : 9C EF               		jnz 	__GPAShift 	
    1042/     6CE : C2 FF               		ld 		-1(p2) 											; Or E into the LSB
    1043/     6D0 : 58                  		ore
    1044/     6D1 : CA FF               		st 		-1(p2)
    1045/     6D3 :                     
    1046/     6D3 : C5 01               		ld 		@1(p1) 											; look at next character, post incrementing.
    1047/     6D5 : 03                  		scl
    1048/     6D6 : FC 22               		cai 	34 												; if it is after space and ! (label marker)
    1049/     6D8 : 94 C4               		jp 		__GPANextCharacter 								; go back and put it in place.
    1050/     6DA :                     
    1051/     6DA : C5 FF               		ld 		@-1(p1) 										; undo the increment, incase we've just read zero.
    1052/     6DC :                     
    1053/     6DC : C4 1C               		ldi 	parPosn & 255 									; put the parPosn address in P1.L, new posn into A
    1054/     6DE : 31                  		xpal 	p1
    1055/     6DF : C9 00               		st 		(p1) 											; and write it back
    1056/     6E1 : C2 FF               		ld 		-1(p2) 											; put the result into P1
    1057/     6E3 : 31                  		xpal 	p1
    1058/     6E4 : C2 FE               		ld 		-2(p2)
    1059/     6E6 : 35                  		xpah 	p1
    1060/     6E7 : 03                  		scl 													; set CY/L to indicate okay
 AS V1.42 Beta [Bld 102] - source file monitor.asm - page 27 - 12/5/2015 9:10:16


    1061/     6E8 : 90 22               		jmp 	__GPAExit
    1062/     6EA :                     
    1063/     6EA :                     __GPAPointerModifier:
    1064/     6EA : C1 00               		ld 		(p1) 											; read P<something> ?
    1065/     6EC : D4 FC               		ani 	0xFC 											; is it '0' .. '3'?
    1066/     6EE : E4 30               		xri 	'0'
    1067/     6F0 : 9C 19               		jnz 	__GPAExitFail 									; it didn't work, not 0..3
    1068/     6F2 : C5 01               		ld 		@1(p1) 											; re-read it and advance
    1069/     6F4 : D4 03               		ani 	3												; lower 2 bits only
    1070/     6F6 : 90 02               		jmp 	__GPAAdjustModifier
    1071/     6F8 :                     __GPAAtModifier:
    1072/     6F8 : C4 04               		ldi 	4 												; set modifier adjustment to +4
    1073/     6FA :                     __GPAAdjustModifier:
    1074/     6FA : CA FD               		st 		-3(p2) 
    1075/     6FC : C4 1D               		ldi 	modifier & 255 									; point P1 to modifier, save current address in E
    1076/     6FE : 31                  		xpal 	p1
    1077/     6FF : 01                  		xae 
    1078/     700 : C1 00               		ld 		(p1) 											; read modifier
    1079/     702 : 02                  		ccl
    1080/     703 : F2 FD               		add 	-3(p2) 											; add the modifying value to it.
    1081/     705 : C9 00               		st 		(p1) 											; write modifier.
    1082/     707 : 40                  		lde 													; restore current address to P1.L
    1083/     708 : 31                  		xpal 	p1
    1084/     709 : 90 81               		jmp 	__GPASkip 										; go back to skip over.
    1085/     70B :                     
    1086/     70B :                     __GPAExitFail:
    1087/     70B : 02                  		ccl 													; carry clear, e.g. nothing read in / error.
    1088/     70C :                     __GPAExit:
    1089/     70C : 3F                  		xppc 	p3
    1090/     70D :                     
    1091/     70D :                     ; ****************************************************************************************************************
    1092/     70D :                     ;
    1093/     70D :                     ;		Store parameter value in P1 in the current address, if CS. Falls through.
    1094/     70D :                     ;
    1095/     70D :                     ; ****************************************************************************************************************
    1096/     70D :                     
    1097/     70D :                     UpdateCurrentAddress:
    1098/     70D : 06                  		csa 													; get status reg
    1099/     70E : 94 0C               		jp 		__UCAExit 										; if carry flag clear then exit.
    1100/     710 :                     
    1101/     710 : C4 19               		ldi 	current & 255 									; current address to P1.L, acquired address to E
    1102/     712 : 31                  		xpal 	p1
    1103/     713 : 01                  		xae
    1104/     714 : C4 0C               		ldi 	current / 256 									; current address to P1.H, acquired to A
    1105/     716 : 35                  		xpah 	p1
    1106/     717 : C9 01               		st 		1(p1) 											; store address back
    1107/     719 : 40                  		lde
    1108/     71A : C9 00               		st 		0(p1)
    1109/     71C :                     __UCAExit:
    1110/     71C : 3F                  		xppc 	p3
    1111/     71D :                     
    1112/     71D :                     ; ****************************************************************************************************************
    1113/     71D :                     ;
    1114/     71D :                     ;		Get current address into P1.
    1115/     71D :                     ;
    1116/     71D :                     ; ****************************************************************************************************************
    1117/     71D :                     
    1118/     71D :                     GetCurrentAddress:
    1119/     71D : C4 0C               		ldi 	current/256 									; current address ptr in P1
    1120/     71F : 35                  		xpah 	p1
 AS V1.42 Beta [Bld 102] - source file monitor.asm - page 28 - 12/5/2015 9:10:16


    1121/     720 : C4 19               		ldi 	current&255
    1122/     722 : 31                  		xpal 	p1
    1123/     723 : C1 00               		ld 		0(p1) 											; low byte to E
    1124/     725 : 01                  		xae
    1125/     726 : C1 01               		ld 		1(p1) 											; high byte to A
    1126/     728 : 35                  		xpah 	p1 												; then to P1.H
    1127/     729 : 40                  		lde 													; low byte to P1.L
    1128/     72A : 31                  		xpal 	p1 
    1129/     72B : 3F                  		xppc 	p3
    1130/     72C :                     
    1131/     72C :                     ; ****************************************************************************************************************
    1132/     72C :                     ;
    1133/     72C :                     ;											List of commands and Jump Table
    1134/     72C :                     ;
    1135/     72C :                     ; ****************************************************************************************************************
    1136/     72C :                     
    1137/     72C :                     		include commands.inc 									; must be at the end, so the command table is in
(1)    1/     747 :                             org 0x0747
(1)    2/     747 :                     ;
(1)    3/     747 :                     ; 	This file is generated automatically by gencommands.py
(1)    4/     747 :                     ;
(1)    5/     747 :                     __CommandList:
(1)    6/     747 : 94 21                       dw    0x2194 ; HLT
(1)    7/     749 : 00                          db    0x00
(1)    8/     74A : 25 60                       dw    0x6025 ; XAE
(1)    9/     74C : 01                          db    0x01
(1)   10/     74D : 6C 0C                       dw    0x0c6c ; CCL
(1)   11/     74F : 02                          db    0x02
(1)   12/     750 : 6C 4C                       dw    0x4c6c ; SCL
(1)   13/     752 : 03                          db    0x03
(1)   14/     753 : 2E 11                       dw    0x112e ; DIN
(1)   15/     755 : 04                          db    0x04
(1)   16/     756 : AE 24                       dw    0x24ae ; IEN
(1)   17/     758 : 05                          db    0x05
(1)   18/     759 : 61 0E                       dw    0x0e61 ; CSA
(1)   19/     75B : 06                          db    0x06
(1)   20/     75C : 33 0C                       dw    0x0c33 ; CAS
(1)   21/     75E : 07                          db    0x07
(1)   22/     75F : F0 39                       dw    0x39f0 ; NOP
(1)   23/     761 : 08                          db    0x08
(1)   24/     762 : 2F 4D                       dw    0x4d2f ; SIO
(1)   25/     764 : 19                          db    0x19
(1)   26/     765 : 72 02                       dw    0x0272 ; SR
(1)   27/     767 : 1C                          db    0x1c
(1)   28/     768 : 4C 4E                       dw    0x4e4c ; SRL
(1)   29/     76A : 1D                          db    0x1d
(1)   30/     76B : 52 02                       dw    0x0252 ; RR
(1)   31/     76D : 1E                          db    0x1e
(1)   32/     76E : 4C 4A                       dw    0x4a4c ; RRL
(1)   33/     770 : 1F                          db    0x1f
(1)   34/     771 : 0D 00                       dw    0x000d ; M
(1)   35/     773 : 20                          db    0x20
(1)   36/     774 : 01 00                       dw    0x0001 ; A
(1)   37/     776 : 21                          db    0x21
(1)   38/     777 : 07 00                       dw    0x0007 ; G
(1)   39/     779 : 22                          db    0x22
(1)   40/     77A : B4 42                       dw    0x42b4 ; PUT
(1)   41/     77C : 23                          db    0x23
(1)   42/     77D : B4 1C                       dw    0x1cb4 ; GET
(1)   43/     77F : 24                          db    0x24
 AS V1.42 Beta [Bld 102] - source file monitor.asm(commands.inc) - page 29 - 12/5/2015 9:10:16


(1)   44/     780 : 03 00                       dw    0x0003 ; C
(1)   45/     782 : 25                          db    0x25
(1)   46/     783 : 02 00                       dw    0x0002 ; B
(1)   47/     785 : 26                          db    0x26
(1)   48/     786 : 0C 00                       dw    0x000c ; L
(1)   49/     788 : 27                          db    0x27
(1)   50/     789 : 04 00                       dw    0x0004 ; D
(1)   51/     78B : 28                          db    0x28
(1)   52/     78C : 0C 62                       dw    0x620c ; XPL
(1)   53/     78E : 30                          db    0x30
(1)   54/     78F : 08 62                       dw    0x6208 ; XPH
(1)   55/     791 : 34                          db    0x34
(1)   56/     792 : 03 62                       dw    0x6203 ; XPC
(1)   57/     794 : 3C                          db    0x3c
(1)   58/     795 : 85 30                       dw    0x3085 ; LDE
(1)   59/     797 : 40                          db    0x40
(1)   60/     798 : C5 05                       dw    0x05c5 ; ANE
(1)   61/     79A : 50                          db    0x50
(1)   62/     79B : 45 3E                       dw    0x3e45 ; ORE
(1)   63/     79D : 58                          db    0x58
(1)   64/     79E : 45 62                       dw    0x6245 ; XRE
(1)   65/     7A0 : 60                          db    0x60
(1)   66/     7A1 : 25 10                       dw    0x1025 ; DAE
(1)   67/     7A3 : 68                          db    0x68
(1)   68/     7A4 : 85 04                       dw    0x0485 ; ADE
(1)   69/     7A6 : 70                          db    0x70
(1)   70/     7A7 : 25 0C                       dw    0x0c25 ; CAE
(1)   71/     7A9 : 78                          db    0x78
(1)   72/     7AA : 99 11                       dw    0x1199 ; DLY
(1)   73/     7AC : 8F                          db    0x8f
(1)   74/     7AD : B0 29                       dw    0x29b0 ; JMP
(1)   75/     7AF : 90                          db    0x90
(1)   76/     7B0 : 50 01                       dw    0x0150 ; JP
(1)   77/     7B2 : 94                          db    0x94
(1)   78/     7B3 : 5A 01                       dw    0x015a ; JZ
(1)   79/     7B5 : 98                          db    0x98
(1)   80/     7B6 : DA 29                       dw    0x29da ; JNZ
(1)   81/     7B8 : 9C                          db    0x9c
(1)   82/     7B9 : 84 25                       dw    0x2584 ; ILD
(1)   83/     7BB : A8                          db    0xa8
(1)   84/     7BC : 84 11                       dw    0x1184 ; DLD
(1)   85/     7BE : B8                          db    0xb8
(1)   86/     7BF : 84 01                       dw    0x0184 ; LD
(1)   87/     7C1 : C0                          db    0xc0
(1)   88/     7C2 : 89 30                       dw    0x3089 ; LDI
(1)   89/     7C4 : C4                          db    0xc4
(1)   90/     7C5 : 74 02                       dw    0x0274 ; ST
(1)   91/     7C7 : C8                          db    0xc8
(1)   92/     7C8 : C4 05                       dw    0x05c4 ; AND
(1)   93/     7CA : D0                          db    0xd0
(1)   94/     7CB : C9 05                       dw    0x05c9 ; ANI
(1)   95/     7CD : D4                          db    0xd4
(1)   96/     7CE : F2 01                       dw    0x01f2 ; OR
(1)   97/     7D0 : D8                          db    0xd8
(1)   98/     7D1 : 49 3E                       dw    0x3e49 ; ORI
(1)   99/     7D3 : DC                          db    0xdc
(1)  100/     7D4 : F2 61                       dw    0x61f2 ; XOR
(1)  101/     7D6 : E0                          db    0xe0
(1)  102/     7D7 : 49 62                       dw    0x6249 ; XRI
(1)  103/     7D9 : E4                          db    0xe4
 AS V1.42 Beta [Bld 102] - source file monitor.asm(commands.inc) - page 30 - 12/5/2015 9:10:16


(1)  104/     7DA : 24 10                       dw    0x1024 ; DAD
(1)  105/     7DC : E8                          db    0xe8
(1)  106/     7DD : 29 10                       dw    0x1029 ; DAI
(1)  107/     7DF : EC                          db    0xec
(1)  108/     7E0 : 84 04                       dw    0x0484 ; ADD
(1)  109/     7E2 : F0                          db    0xf0
(1)  110/     7E3 : 89 04                       dw    0x0489 ; ADI
(1)  111/     7E5 : F4                          db    0xf4
(1)  112/     7E6 : 24 0C                       dw    0x0c24 ; CAD
(1)  113/     7E8 : F8                          db    0xf8
(1)  114/     7E9 : 29 0C                       dw    0x0c29 ; CAI
(1)  115/     7EB : FC                          db    0xfc
(1)  116/     7EC :                     __CommandListEnd:
(1)  117/     7EC : 00 00                       dw    0x0000 ; End Marker	
(1)  118/     7EE :                     
(1)  119/     7EE :                     __CommandTable:
(1)  120/     7EE : 91 04                       dw    MemoryDump_Command
(1)  121/     7F0 : DA 03                       dw    Address_Command
(1)  122/     7F2 : ED 03                       dw    Go_Command
(1)  123/     7F4 : FA 03                       dw    PutTape_Command
(1)  124/     7F6 : 4B 04                       dw    LoadTape_Command
(1)  125/     7F8 : 20 02                       dw    ClearScreen_Command
(1)  126/     7FA : BB 04                       dw    EnterBytes_Command
(1)  127/     7FC : 73 04                       dw    Label_Command
(1)  128/     7FE : DD 04                       dw    Disassemble_Command
(1)  129/     800 :                     
    1138/     800 :                     																; the same page.
    1139/     800 :                     
    1140/     800 :                     ; ****************************************************************************************************************
    1141/     800 :                     ;
    1142/     800 :                     ;													Tape Format. 
    1143/     800 :                     ;
    1144/     800 :                     ; ****************************************************************************************************************
    1145/     800 :                     ;
    1146/     800 :                     ;		1 x start bit 		'1' value is held for period of time.
    1147/     800 :                     ;		8 x data bits  		'0 or 1' value is held for a period of time.
    1148/     800 :                     ;		1 x continuation	'0' if another bit follows, '1' if end.
    1149/     800 :                     ;		at least 2 bit times between bytes.
    1150/     800 :                     ;
    1151/     800 :                     ;		Use DLY 4 with A = 0 (DLY 6 to skip half-start)
    1152/     800 :                     ; 		= 13 + 2 * 0 + 514 * 4 microcycles
    1153/     800 :                     ;		= 2,069 microcycles
    1154/     800 :                     ;	
    1155/     800 :                     ;		which is about 240 bits per second.
    1156/     800 :                     ;
    1157/     800 :                     ; ****************************************************************************************************************
    1158/     800 :                     ;
    1159/     800 :                     ;												Monitor Commands
    1160/     800 :                     ;
    1161/     800 :                     ; ****************************************************************************************************************
    1162/     800 :                     ;
    1163/     800 :                     ;		A [aaaa] 			Set current address to aaaa
    1164/     800 :                     ;		B [cc] [dd] [ee]..	Put Bytes cc dd ee etc. in memory from current address onwards.
    1165/     800 :                     ; 		C 					Clear screen
    1166/     800 :                     ;		D [aaaa] 			Disassemble from aaaa (7 lines of disassembly)
    1167/     800 :                     ;		G aaaa 				Run from address - address must be given - return with XPPC P3
    1168/     800 :                     ; 		L n 				Set label n to the current address (up to 24 labels 00-17)
    1169/     800 :                     ; 		M [aaaa] 			Memory dump from current address/aaaa (7 lines, 4 bytes per line)
    1170/     800 :                     ; 		GET [aaaa] 			Load tape to current address/aaa
    1171/     800 :                     ;		PUT [nnnn]			Write nnnn bytes from current address onwards to tape.
 AS V1.42 Beta [Bld 102] - source file monitor.asm - page 31 - 12/5/2015 9:10:16


    1172/     800 :                     ;
    1173/     800 :                     ;		Command Line Assembler:
    1174/     800 :                     ;
    1175/     800 :                     ;		Standard SC/MP mnemonics, except for XPAH, XPAL, XPPC, HALT and DINT which are XPH XPL XPC HLT DIN
    1176/     800 :                     ;		respectively (4 character mnemonics not supported)
    1177/     800 :                     ;
    1178/     800 :                     ;		Address modes are written as such:
    1179/     800 :                     ;
    1180/     800 :                     ;		Direct:			LD 	address 					(offset auto calculated, also for jump)
    1181/     800 :                     ;		Indexed:		LD  P1 7 						(normally ld 7(p1))
    1182/     800 :                     ;		Immediate:		DLY 42 					
    1183/     800 :                     ;		AutoIndexed:	LD @P1 4 						(normally ld @4(p1))
    1184/     800 :                     ;
    1185/     800 :                     ;		Labels are accessed via the pling, so to jump to label 4 rather than address 4 you write
    1186/     800 :                     ;
    1187/     800 :                     ;		JMP 4!
    1188/     800 :                     ;
    1189/     800 :                     ;		Documentation of the Mathematics functions are in the included file maths.asm. Sort of.
    1190/     800 :                     ;
    1191/     800 :                     ; ****************************************************************************************************************
    1192/     800 :                     
 AS V1.42 Beta [Bld 102] - source file monitor.asm - page 32 - 12/5/2015 9:10:16


  symbol table (* = unused):
  ------------------------

 ADDRESS_COMMAND :              3DA C |  AHI [SCMPMULTIPLY] :             3 - |
 ALO [SCMPMULTIPLY] :             2 - | *ARCHITECTURE :  i386-unknown-win32 - |
 BHI [SCMPMULTIPLY] :             1 - | *BIGENDIAN :                      0 - |
 BITHI [SCMPDIVIDE] :                                      FFFFFFFFFFFFFFFF - |
 BITLO [SCMPDIVIDE] :                                      FFFFFFFFFFFFFFFE - |
 BLO [SCMPMULTIPLY] :             0 - |  BOOTMONITOR :                  206 C |
*BRANCHEXT :                      0 - | *CASESENSITIVE :                  0 - |
 CLEARSCREENLOOP :              225 C |  CLEARSCREEN_COMMAND :          220 C |
 CODESTART :                    C2E - |  COMMANDMAINLOOP :              289 C |
*CONSTPI :        3.141592653589793 - |  CURRENT :                      C19 - |
 CURSOR :                       C18 - | *DATE :                   12/5/2015 - |
 DENOMINATORHI [SCMPDIVIDE] :     1 - |  DENOMINATORLO [SCMPDIVIDE] :     0 - |
 DIGITCOUNT [SCMPTOINTEGER] :                              FFFFFFFFFFFFFFFF - |
 DISASSEMBLE_COMMAND :          4DD C |  ENTERBYTES_COMMAND :           4BB C |
 ETEMP [SCMPDIVIDE] :                                      FFFFFFFFFFFFFFF8 - |
 EXTRACT5BIT :                  2F4 C | *FALSE :                          0 - |
 FINDTOPMEMORY :                218 C | *FULLPMMU :                       1 - |
*GETCURRENTADDRESS :            71D C |  GETPARAMETER :                 67D C |
 GOBOOT :                         5 C |  GO_COMMAND :                   3ED C |
*HAS64 :                          1 - | *HASDSP :                         0 - |
*HASFPU :                         0 - | *HASPMMU :                        0 - |
*INEXTMODE :                      0 - |  INITIALBEEP :                  27C C |
*INLWORDMODE :                    0 - | *INMAXMODE :                      0 - |
*INSRCMODE :                      0 - | *INSUPMODE :                      0 - |
 ISINIT :                       C1B - |  KBDBUFFER :                    C1E - |
 KBDBUFFERLN :                   10 - |  KEYBOARDLOOP :                 29E C |
 LABELCOUNT :                    18 - |  LABELS :                       C00 - |
 LABEL_COMMAND :                473 C | *LISTON :                         1 - |
 LOADTAPE_COMMAND :             44B C | *MACEXP :                         1 - |
 MATHS :                         48 C |  MATH_ADD :                      6A C |
 MATH_DIVIDE :                  13A C |  MATH_DIVIDE2 :                  D2 C |
 MATH_DIVIDEBYZERO :            137 C | *MATH_ERROR :                    66 C |
 MATH_EXIT :                     67 C |  MATH_EXIT1 :                    D0 C |
 MATH_EXIT3 :                   135 C |  MATH_MULTIPLY :                 8C C |
 MATH_SUBTRACT :                 7A C |  MATH_TOASCII :                   C C |
 MATH_TOINTEGER :                D4 C |  MEMORYDUMP_COMMAND :           491 C |
 MESSAGE :                      25C C |  MESSAGELOOP :                  255 C |
 MODIFIER :                     C1D - | *MOMCPU :                         C - |
*MOMCPUNAME :                 SC/MP - | *NESTMAX :                      100 - |
 NUMERATORHI [SCMPDIVIDE] :       3 - |  NUMERATORLO [SCMPDIVIDE] :       2 - |
*PACKING :                        0 - | *PADDING :                        1 - |
 PARPOSN :                      C1C - |  PRINTADDRESSDATA :             64A C |
 PRINTCHARACTER :               5DD C |  PRINTHEXBYTE :                 5AA C |
 PUTTAPE_COMMAND :              3FA C |
 QUOTIENTHI [SCMPDIVIDE] :                                 FFFFFFFFFFFFFFFD - |
 QUOTIENTLO [SCMPDIVIDE] :                                 FFFFFFFFFFFFFFFC - |
*RELAXED :                        0 - |
 REMAINDERHI [SCMPDIVIDE] :                                FFFFFFFFFFFFFFFB - |
 REMAINDERLO [SCMPDIVIDE] :                                FFFFFFFFFFFFFFFA - |
 RESULTHI [SCMPMULTIPLY] :                                 FFFFFFFFFFFFFFFF - |
 RESULTHI [SCMPTOINTEGER] :                                FFFFFFFFFFFFFFFE - |
 RESULTLO [SCMPMULTIPLY] :                                 FFFFFFFFFFFFFFFE - |
 RESULTLO [SCMPTOINTEGER] :                                FFFFFFFFFFFFFFFD - |
 SHIFTCOUNT [SCMPTOINTEGER] :                              FFFFFFFFFFFFFFFC - |
 SIGNCOUNT [SCMPDIVIDE] :                                  FFFFFFFFFFFFFFF9 - |
 TAPEDELAY :                      4 - |
 TEMPHI [SCMPTOINTEGER] :                                  FFFFFFFFFFFFFFFB - |
 AS V1.42 Beta [Bld 102] - source file monitor.asm - page 33 - 12/5/2015 9:10:16


 TEMPHI [SCMPDIVIDE] :                                     FFFFFFFFFFFFFFF7 - |
 TEMPLO [SCMPTOINTEGER] :                                  FFFFFFFFFFFFFFFA - |
*TIME :                     9:10:16 - |  TOINT_END [SCMPTOINTEGER] :    127 C |
 TOINT_LOOP [SCMPTOINTEGER] :    DC C |  TOINT_NOADD [SCMPTOINTEGER] :  113 C |
 TOINT_SHIFT [SCMPTOINTEGER] :   F5 C | *TRUE :                           1 - |
*UPDATECURRENTADDRESS :         70D C |  VARBASE :                      C18 - |
*VERSION :                     142F - |  _KBDWAITKEY :                  2A7 C |
 _KBDWAITRELEASE :              2A1 C |  _PADLOOP :                     66A C |
 _PADPRINT :                    677 C |  _PUTTAPEBIT :                  42A C |
 _PUTTAPEBYTE :                 415 C |  _PUTTAPELEADER :               40F C |
 __ASMCONTINUE :                398 C |  __ASMEXIT :                    3D0 C |
 __ASMNOPARAMETER :             390 C |  __ASSEMBLER :                  361 C |
 __BOOTMONITOR :                210 C |  __CMDMAINLOOP1 :               2E5 C |
 __CMDMAINLOOP2 :               3E6 C |  __CMDMAINLOOP3 :               3F8 C |
 __CMDMAINLOOP4 :               447 C |  __CMDMAINLOOP5 :               471 C |
 __CMDMAINLOOP6 :               4B9 C |  __CMDMAINLOOP7 :               525 C |
 __CMDPARAMETERFAIL :           3DE C |  __CMDPARAMETERFAIL1 :          449 C |
 __COMMANDERROR :               357 C |  __COMMANDLIST :                747 C |
 __COMMANDLISTEND :             7EC C |  __COMMANDTABLE :               7EE C |
 __DASSFINDOPCODE :             50C C |  __DASSFOUNDOPCODE :            527 C |
 __DASSLOOP :                   4E3 C |  __DASSLOOP2 :                  523 C |
 __DASSNEXT :                   581 C |  __DASSNEXTOPCODE :             51F C |
 __DASSNOOPERAND :              502 C |  __DASSNOTAUTOINDEXED :         59E C |
 __DASSNOTIMMEDIATE :           533 C |  __DASSPRINTMNEMONIC :          548 C |
 __DASSPRINTMODIFIER :          592 C |  __DASSPRINTOPERAND :           573 C |
 __DASSSHIFTENCODE :            558 C |  __DASSSKIPSPACE :              554 C |
 __DCLOOP :                     497 C |
 __DIVIDECOMPLETE [SCMPDIVIDE] : 1D9 C |
 __DIVIDECONTINUE [SCMPDIVIDE] : 1AC C |
 __DIVIDEEXIT [SCMPDIVIDE] :    1C6 C |  __DIVIDELOOP [SCMPDIVIDE] :    17E C |
 __DIVIDENOINCREMAINDER [SCMPDIVIDE] :                                  19B C |
 __DIVIDENOTSIGNED [SCMPDIVIDE] :                                       174 C |
 __DIVIDEREMAINDERGREATER [SCMPDIVIDE] :                                1F1 C |
 __DIVIDEUNSIGNLOOP [SCMPDIVIDE] :                                      15C C |
 __EX5SHIFT :                   2FF C |  __EXTRACTEND :                 315 C |
 __FINDCOMMANDLOOP :            320 C |  __GETTAPEBITS :                461 C |
 __GETTAPEWAIT :                451 C |  __GPAADJUSTMODIFIER :          6FA C |
 __GPAATMODIFIER :              6F8 C |  __GPAEXIT :                    70C C |
 __GPAEXITFAIL :                70B C |  __GPAFOUNDHEX :                6B3 C |
 __GPANEXTCHARACTER :           69E C |  __GPAPOINTERMODIFIER :         6EA C |
 __GPASHIFT :                   6BD C |  __GPASKIP :                    68C C |
 __KBDBACKSPACE :               2D9 C |  __KBDEXIT :                    2E7 C |
 __KBDNOTLOWER :                2CD C |  __MATH_EXIT2 [SCMPDIVIDE] :    17C C |
 __MULTIPLYEXIT [SCMPMULTIPLY] : C5 C |  __MULTIPLYLOOP [SCMPMULTIPLY] : 92 C |
 __MULTIPLYNOADD [SCMPMULTIPLY] : AB C |
 __PCBACKSPACE :                632 C |  __PCBLANKNEWLINE :             60E C |
 __PCBLANKNEWLINELOOP :         612 C |  __PCEXIT :                     61A C |
 __PCNEWLINE :                  63E C |  __PHBNOSPACE :                 5BC C |
 __TOASCII_LOOP :                20 C |  __UCAEXIT :                    71C C |

    184 symbols
     31 unused symbols

 AS V1.42 Beta [Bld 102] - source file monitor.asm - page 34 - 12/5/2015 9:10:16


  defined macros:
  ---------------

SHIFTLEFT                             | SHIFTRIGHT                           

      2 macros

 AS V1.42 Beta [Bld 102] - source file monitor.asm - page 35 - 12/5/2015 9:10:16


  codepages:
  ----------

STANDARD (0 changed characters)


0.02 seconds assembly time

   1775 lines source file
   1817 lines incl. macro expansions
      2 passes
      0 errors
      0 warnings
