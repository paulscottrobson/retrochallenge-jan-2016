 AS V1.42 Beta [Bld 102] - source file monitor.asm - page 1 - 12/1/2015 9:13:55


       1/       0 :                     ; ******************************************************************************************************************
       2/       0 :                     ; ******************************************************************************************************************
       3/       0 :                     ; ******************************************************************************************************************
       4/       0 :                     ;
       5/       0 :                     ;												Machine Language Monitor
       6/       0 :                     ;
       7/       0 :                     ; ******************************************************************************************************************
       8/       0 :                     ; ******************************************************************************************************************
       9/       0 :                     ; ******************************************************************************************************************
      10/       0 :                     
      11/       0 :                     ; TODO: 
      12/       0 :                     ;		Random#, ASCII to Integer
      13/       0 :                     ; 		Testing of Arithmetic routines.
      14/       0 :                     
      15/       0 :                     		cpu	sc/mp
      16/       0 :                     
      17/       0 : =0xC00              labels 		= 0xC00												; labels, 1 byte each
      18/       0 : =0x18               labelCount 	= 24 												; number of labels.
      19/       0 :                     
      20/       0 : =0xC18              varBase 	= labels+labelCount 								; variables after labels start here.
      21/       0 :                     
      22/       0 : =0xC18              cursor 		= varBase 											; cursor position ($00-$7F)
      23/       0 : =0xC19              current 	= varBase+1 										; current address (lo,hi)
      24/       0 : =0xC1B              isInit      = varBase+3 										; if already initialised, this is $A7.
      25/       0 : =0xC1C              parPosn		= varBase+4 										; current param offset in buffer (low addr)
      26/       0 : =0xC1D              modifier  	= varBase+5 										; instruction modifier (@,Pn) when assembling.
      27/       0 : =0xC1E              kbdBuffer 	= varBase+6 										; 16 character keyboard buffer
      28/       0 : =0x10               kbdBufferLn = 16 										
      29/       0 :                     
      30/       0 : =0xC2E              codeStart 	= kbdBuffer+kbdBufferLn								; code starts here after the keyboard buffer.
      31/       0 :                     
      32/       0 : =0x4                tapeDelay 	= 4 												; DLY parameter for 1 tape bit width.
      33/       0 :                     																; (smaller = faster tape I/O - see file end.)
      34/       0 :                     
      35/       0 :                     		org 	0x0000
      36/       0 : 08                  		nop 													; mandatory pre-increment NOP
      37/       1 :                     
      38/       1 :                     		include maths.asm 										; import the maths routines.
(1)    1/       1 :                     ; ******************************************************************************************************************
(1)    2/       1 :                     ; ******************************************************************************************************************
(1)    3/       1 :                     ;
(1)    4/       1 :                     ;										16 bit Arithmetic routines
(1)    5/       1 :                     ;
(1)    6/       1 :                     ; ******************************************************************************************************************
(1)    7/       1 :                     ; ******************************************************************************************************************
(1)    8/       1 :                     
(1)    9/       1 : 90 02               	jmp	 	GoBoot 												; this will be at location 1.
(1)   10/       3 : 90 07               	jmp 	Maths 												; maths routine, at location 3.
(1)   11/       5 :                     	; any other routines you care to call.
(1)   12/       5 :                     
(1)   13/       5 :                     GoBoot:
(1)   14/       5 : C4 47               	ldi 	(BootMonitor-1) & 255 								; jump to Boot Monitor
(1)   15/       7 : 33                  	xpal 	p3
(1)   16/       8 : C4 01               	ldi 	(BootMonitor-1) / 256
(1)   17/       A : 37                  	xpah 	p3
(1)   18/       B : 3F                  	xppc 	p3
(1)   19/       C :                     
(1)   20/       C :                     ; ******************************************************************************************************************
(1)   21/       C :                     ;
(1)   22/       C :                     ;		Maths routines : the (P2) stack functions as a number stack.  So to push $1234 on the stack you do
 AS V1.42 Beta [Bld 102] - source file monitor.asm(maths.asm) - page 2 - 12/1/2015 9:13:55


(1)   23/       C :                     ;
(1)   24/       C :                     ;		ld 	#$12
(1)   25/       C :                     ;		st 	@-1(p2) 					1(p2) is the MSB of TOS
(1)   26/       C :                     ;		ld 	#$34
(1)   27/       C :                     ;		st 	@-1(p2) 					0(p2) is the LSB of TOS
(1)   28/       C :                     ;
(1)   29/       C :                     ;		on entry, A is the function (+,-,*,/ etc.). P2 should be left in the 'correct' state afterwards,
(1)   30/       C :                     ;		so if you add two numbers then p2 will be 2 higher than when the routine was entered.
(1)   31/       C :                     ;
(1)   32/       C :                     ;		Returns CS on error (division by zero) - in this case the parameters are not touched.
(1)   33/       C :                     ;
(1)   34/       C :                     ;		Note that division uses a fair chunk of the stack :)
(1)   35/       C :                     ;
(1)   36/       C :                     ; ******************************************************************************************************************
(1)   37/       C :                     
(1)   38/       C :                     Maths:															; maths support routine.
(1)   39/       C :                     
(1)   40/       C : E4 2B               	xri 	'+' 												; dispatch function in A to the executing code.
(1)   41/       E : 98 0F               	jz 		MATH_Add
(1)   42/      10 : E4 06               	xri 	'+'!'-'
(1)   43/      12 : 98 1B               	jz 		MATH_Subtract
(1)   44/      14 : E4 07               	xri 	'-'!'*'
(1)   45/      16 : 98 29               	jz 		MATH_Multiply
(1)   46/      18 : E4 05               	xri 	'*'!'/'
(1)   47/      1A : 98 6B               	jz 		MATH_Divide
(1)   48/      1C : 03                  	scl 														; error, unknown command.
(1)   49/      1D :                     MATH_Exit:
(1)   50/      1D : 90 FE               	jmp  	MATH_Exit
(1)   51/      1F :                     
(1)   52/      1F :                     ; ******************************************************************************************************************
(1)   53/      1F :                     ;													+ :	16 Bit Add
(1)   54/      1F :                     ; ******************************************************************************************************************
(1)   55/      1F :                     
(1)   56/      1F :                     MATH_Add:
(1)   57/      1F : 02                  	ccl 										
(1)   58/      20 : C6 01               	ld 		@1(p2) 												; read LSB of TOS and unstack
(1)   59/      22 : F2 01               	add 	1(p2)
(1)   60/      24 : CA 01               	st 		1(p2)
(1)   61/      26 : C6 01               	ld 		@1(p2) 												; read MSB of TOS and unstack
(1)   62/      28 : F2 01               	add 	1(p2)
(1)   63/      2A : CA 01               	st 		1(p2)
(1)   64/      2C : 02                  	ccl
(1)   65/      2D : 90 EE               	jmp 	MATH_Exit
(1)   66/      2F :                     
(1)   67/      2F :                     ; ******************************************************************************************************************
(1)   68/      2F :                     ;												 - : 16 Bit Subtract
(1)   69/      2F :                     ; ******************************************************************************************************************
(1)   70/      2F :                     
(1)   71/      2F :                     MATH_Subtract:
(1)   72/      2F : 03                  	scl 										
(1)   73/      30 : C2 02               	ld 		2(p2) 												; read LSB of TOS 
(1)   74/      32 : FA 00               	cad 	0(p2)
(1)   75/      34 : CA 02               	st 		2(p2)
(1)   76/      36 : C2 03               	ld 		3(p2) 												; read MSB of TOS
(1)   77/      38 : FA 01               	cad 	1(p2)
(1)   78/      3A : CA 03               	st 		3(p2)
(1)   79/      3C : C6 02               	ld 		@2(p2)
(1)   80/      3E : 02                  	ccl
(1)   81/      3F : 90 DC               	jmp 	MATH_Exit
(1)   82/      41 :                     
 AS V1.42 Beta [Bld 102] - source file monitor.asm(maths.asm) - page 3 - 12/1/2015 9:13:55


(1)   83/      41 :                     ; ******************************************************************************************************************
(1)   84/      41 :                     ;											16 Bit shift left/right macros
(1)   85/      41 :                     ; ******************************************************************************************************************
(1)   86/      41 :                     
(1)   87/      41 :                     shiftLeft macro val
(1)   88/      41 :                     	ccl 													
(1)   89/      41 :                     	ld 		val(p2)
(1)   90/      41 :                     	add 	val(p2)
(1)   91/      41 :                     	st 		val(p2)
(1)   92/      41 :                     	ld 		val+1(p2)
(1)   93/      41 :                     	add 	val+1(p2)
(1)   94/      41 :                     	st 		val+1(p2)		
(1)   95/      41 :                     	endm
(1)   96/      41 :                     
(1)   97/      41 :                     shiftRight macro val
(1)   98/      41 :                     	ccl
(1)   99/      41 :                     	ld 		val+1(p2)
(1)  100/      41 :                     	rrl 
(1)  101/      41 :                     	st 		val+1(p2)
(1)  102/      41 :                     	ld 		val(p2)
(1)  103/      41 :                     	rrl 
(1)  104/      41 :                     	st 		val(p2)
(1)  105/      41 :                     	endm
(1)  106/      41 :                     
(1)  107/      41 :                     ; ******************************************************************************************************************
(1)  108/      41 :                     ;												'*' : 16 bit signed multiply
(1)  109/      41 :                     ; ******************************************************************************************************************
(1)  110/      41 :                     
(1)  111/      41 :                     MATH_Multiply:
(1)  112/      41 :                     
(1)  113/      41 :                     	section SCMPMultiply
(1)  114/      41 :                     
(1)  115/      41 : =0x3                aHi = 3 														; allocated values for A,B and Result.
(1)  116/      41 : =0x2                aLo = 2 														; (see arithmetic.py)
(1)  117/      41 : =0x1                bHi = 1
(1)  118/      41 : =0x0                bLo = 0
(1)  119/      41 : =0xFFFFFFFFF..      resultHi = -1
(1)  120/      41 : =0xFFFFFFFFF..      resultLo = -2
(1)  121/      41 :                     
(1)  122/      41 : C4 00               	ldi 	0 													; clear result
(1)  123/      43 : CA FF               	st 		resultHi(p2)
(1)  124/      45 : CA FE               	st 		resultLo(p2)
(1)  125/      47 :                     __MultiplyLoop:
(1)  126/      47 : C2 01               	ld 		bHi(p2) 											; if b is zero then exit
(1)  127/      49 : DA 00               	or 		bLo(p2)
(1)  128/      4B : 98 2D               	jz 		__MultiplyExit
(1)  129/      4D : C2 00               	ld 		bLo(p2) 											; if b bit 0 is set.
(1)  130/      4F : D4 01               	ani 	1
(1)  131/      51 : 98 0D               	jz 		__MultiplyNoAdd
(1)  132/      53 : 02                  	ccl 														; add a to the result
(1)  133/      54 : C2 FE               	ld 		resultLo(p2)
(1)  134/      56 : F2 02               	add 	aLo(p2)
(1)  135/      58 : CA FE               	st 		resultLo(p2)
(1)  136/      5A : C2 FF               	ld 		resultHi(p2)
(1)  137/      5C : F2 03               	add 	aHi(p2)
(1)  138/      5E : CA FF               	st 		resultHi(p2)
(1)  139/      60 :                     __MultiplyNoAdd:
(1)  140/      60 : (MACRO)             	shiftleft aLo 												; shift A left once.
(1)  140/      60 : 02                          ccl                                                                                                     
(1)  140/      61 : C2 02                       ld              ALO(p2)
 AS V1.42 Beta [Bld 102] - source file monitor.asm(maths.asm) - page 4 - 12/1/2015 9:13:55


(1)  140/      63 : F2 02                       add     ALO(p2)
(1)  140/      65 : CA 02                       st              ALO(p2)
(1)  140/      67 : C2 03                       ld              ALO+1(p2)
(1)  140/      69 : F2 03                       add     ALO+1(p2)
(1)  140/      6B : CA 03                       st              ALO+1(p2)               
(1)  141/      6D : (MACRO)             	shiftright bLo 												; shift b right one.
(1)  141/      6D : 02                          ccl
(1)  141/      6E : C2 01                       ld              BLO+1(p2)
(1)  141/      70 : 1F                          rrl 
(1)  141/      71 : CA 01                       st              BLO+1(p2)
(1)  141/      73 : C2 00                       ld              BLO(p2)
(1)  141/      75 : 1F                          rrl 
(1)  141/      76 : CA 00                       st              BLO(p2)
(1)  142/      78 : 90 CD               	jmp 	__MultiplyLoop
(1)  143/      7A :                     
(1)  144/      7A :                     __MultiplyExit:
(1)  145/      7A : C2 FE               	ld 		resultLo(p2) 										; copy result lo to what will be new TOS
(1)  146/      7C : CA 02               	st 		2(p2)
(1)  147/      7E : C2 FF               	ld 		resultHi(p2)
(1)  148/      80 : CA 03               	st 		3(p2)
(1)  149/      82 : C6 02               	ld 		@2(p2) 												; fix up the number stack.
(1)  150/      84 :                     	endsection SCMPMultiply
(1)  151/      84 :                     
(1)  152/      84 : 02                  	ccl
(1)  153/      85 :                     MATH_Exit1:
(1)  154/      85 : 90 96               	jmp 	MATH_Exit
(1)  155/      87 :                     
(1)  156/      87 :                     
(1)  157/      87 :                     ; ******************************************************************************************************************
(1)  158/      87 :                     ;											'/' : 16 bit signed divide
(1)  159/      87 :                     ; ******************************************************************************************************************
(1)  160/      87 :                     
(1)  161/      87 :                     MATH_Divide:
(1)  162/      87 :                     
(1)  163/      87 :                     	section 	SCMPDivide
(1)  164/      87 :                     
(1)  165/      87 : =0x1                denominatorHi = 1 												; input values to division
(1)  166/      87 : =0x0                denominatorLo = 0 												; (see arithmetic.py)
(1)  167/      87 : =0x3                numeratorHi = 3
(1)  168/      87 : =0x2                numeratorLo = 2
(1)  169/      87 : =0xFFFFFFFFF..      bitHi = -1 														; bit shifted for division test.
(1)  170/      87 : =0xFFFFFFFFF..      bitLo = -2
(1)  171/      87 : =0xFFFFFFFFF..      quotientHi = -3 												; quotient
(1)  172/      87 : =0xFFFFFFFFF..      quotientLo = -4
(1)  173/      87 : =0xFFFFFFFFF..      remainderHi = -5 												; remainder
(1)  174/      87 : =0xFFFFFFFFF..      remainderLo = -6
(1)  175/      87 : =0xFFFFFFFFF..      signCount = -7 													; sign of result (bit 0)
(1)  176/      87 : =0xFFFFFFFFF..      eTemp = -8 														; temporary value of sign.
(1)  177/      87 :                     
(1)  178/      87 : C2 00               	ld 		denominatorLo(p2) 									; check denominator 
(1)  179/      89 : DA 01               	or 		denominatorHi(p2) 
(1)  180/      8B : 03                  	scl 														; if zero return CY/L Set
(1)  181/      8C : 98 F7               	jz 		MATH_Exit1
(1)  182/      8E :                     
(1)  183/      8E : C4 00               	ldi 	0 													; clear quotient and remainder
(1)  184/      90 : CA FD               	st 		quotientHi(p2)
(1)  185/      92 : CA FC               	st 		quotientLo(p2)
(1)  186/      94 : CA FB               	st 		remainderHi(p2)
(1)  187/      96 : CA FA               	st 		remainderLo(p2)
(1)  188/      98 : CA F9               	st 		signCount(p2)
 AS V1.42 Beta [Bld 102] - source file monitor.asm(maths.asm) - page 5 - 12/1/2015 9:13:55


(1)  189/      9A : CA FE               	st 		bitLo(p2) 											; set bit to 0x8000
(1)  190/      9C : C4 80               	ldi 	0x80 
(1)  191/      9E : CA FF               	st 		bitHi(p2)
(1)  192/      A0 :                     
(1)  193/      A0 : 40                  	lde 														; save E
(1)  194/      A1 : CA F8               	st 		eTemp(p2)
(1)  195/      A3 :                     
(1)  196/      A3 : C4 03               	ldi 	3
(1)  197/      A5 :                     __DivideUnsignLoop:
(1)  198/      A5 : 01                  	xae 														; store in E
(1)  199/      A6 : C2 80               	ld 		-0x80(p2) 											; read high byte
(1)  200/      A8 : 94 13               	jp 		__DivideNotSigned 									; if +ve then skip
(1)  201/      AA : AA F9               	ild 	signCount(p2) 										; bump sign count
(1)  202/      AC : C6 FF               	ld 		@-1(p2) 											; dec P2 to access the LSB
(1)  203/      AE : C4 00               	ldi 	0
(1)  204/      B0 : 03                  	scl 
(1)  205/      B1 : FA 80               	cad 	-0x80(p2)
(1)  206/      B3 : CA 80               	st 		-0x80(p2)
(1)  207/      B5 : C6 01               	ld 		@1(p2) 												; inc P2 to access the MSB
(1)  208/      B7 : C4 00               	ldi 	0
(1)  209/      B9 : FA 80               	cad 	-0x80(p2)
(1)  210/      BB : CA 80               	st 		-0x80(p2)
(1)  211/      BD :                     __DivideNotSigned:
(1)  212/      BD : 01                  	xae 														; retrieve E
(1)  213/      BE : 03                  	scl 														; subtract 2
(1)  214/      BF : FC 02               	cai 	2
(1)  215/      C1 : 94 E2               	jp 		__DivideUnsignLoop 									; not finished yet.
(1)  216/      C3 : 90 02               	jmp 	__DivideLoop
(1)  217/      C5 :                     
(1)  218/      C5 :                     __MATH_Exit2
(1)  219/      C5 : 90 BE               	jmp 	MATH_Exit1
(1)  220/      C7 :                     
(1)  221/      C7 :                     __DivideLoop:
(1)  222/      C7 : C2 FE               	ld 		bitLo(p2) 											; keep going until all bits done.
(1)  223/      C9 : DA FF               	or 		bitHi(p2)
(1)  224/      CB : 98 3D               	jz 		__DivideExit
(1)  225/      CD :                     
(1)  226/      CD : (MACRO)             	shiftleft remainderLo 										; shift remainder left.
(1)  226/      CD : 02                          ccl                                                                                                     
(1)  226/      CE : C2 FA                       ld              REMAINDERLO(p2)
(1)  226/      D0 : F2 FA                       add     REMAINDERLO(p2)
(1)  226/      D2 : CA FA                       st              REMAINDERLO(p2)
(1)  226/      D4 : C2 FB                       ld              REMAINDERLO+1(p2)
(1)  226/      D6 : F2 FB                       add     REMAINDERLO+1(p2)
(1)  226/      D8 : CA FB                       st              REMAINDERLO+1(p2)               
(1)  227/      DA :                     
(1)  228/      DA : C2 03               	ld 		numeratorHi(p2)										; if numerator MSB is set
(1)  229/      DC : 94 06               	jp 		__DivideNoIncRemainder
(1)  230/      DE :                     
(1)  231/      DE : AA FA               	ild 	remainderLo(p2) 									; then increment remainder
(1)  232/      E0 : 9C 02               	jnz 	__DivideNoIncRemainder
(1)  233/      E2 : AA FB               	ild 	remainderHi(p2)
(1)  234/      E4 :                     __DivideNoIncRemainder:
(1)  235/      E4 :                     
(1)  236/      E4 : 03                  	scl 														; calculate remainder-denominator (temp)
(1)  237/      E5 : C2 FA               	ld 		remainderLo(p2)
(1)  238/      E7 : FA 00               	cad 	denominatorLo(p2)
(1)  239/      E9 : 01                  	xae 														; save in E.
(1)  240/      EA : C2 FB               	ld 		remainderHi(p2)
(1)  241/      EC : FA 01               	cad 	denominatorHi(p2) 									; temp.high is now in A
 AS V1.42 Beta [Bld 102] - source file monitor.asm(maths.asm) - page 6 - 12/1/2015 9:13:55


(1)  242/      EE : 94 45               	jp 		__DivideRemainderGreater 							; if >= 0 then remainder >= denominator
(1)  243/      F0 :                     
(1)  244/      F0 :                     __DivideContinue:
(1)  245/      F0 : (MACRO)             	shiftright 	bitLo 											; shift bit right
(1)  245/      F0 : 02                          ccl
(1)  245/      F1 : C2 FF                       ld              BITLO+1(p2)
(1)  245/      F3 : 1F                          rrl 
(1)  245/      F4 : CA FF                       st              BITLO+1(p2)
(1)  245/      F6 : C2 FE                       ld              BITLO(p2)
(1)  245/      F8 : 1F                          rrl 
(1)  245/      F9 : CA FE                       st              BITLO(p2)
(1)  246/      FB : (MACRO)             	shiftleft   numeratorLo 									; shift numerator left
(1)  246/      FB : 02                          ccl                                                                                                     
(1)  246/      FC : C2 02                       ld              NUMERATORLO(p2)
(1)  246/      FE : F2 02                       add     NUMERATORLO(p2)
(1)  246/     100 : CA 02                       st              NUMERATORLO(p2)
(1)  246/     102 : C2 03                       ld              NUMERATORLO+1(p2)
(1)  246/     104 : F2 03                       add     NUMERATORLO+1(p2)
(1)  246/     106 : CA 03                       st              NUMERATORLO+1(p2)               
(1)  247/     108 : 90 BD               	jmp 		__DivideLoop
(1)  248/     10A :                     
(1)  249/     10A :                     __DivideExit:
(1)  250/     10A : C2 F9               	ld 		signCount(p2) 										; is the result signed
(1)  251/     10C : D4 01               	ani 	0x01
(1)  252/     10E : 98 0D               	jz 		__DivideComplete
(1)  253/     110 : 03                  	scl 														; if so, reapply the sign.
(1)  254/     111 : C4 00               	ldi 	0
(1)  255/     113 : FA FC               	cad 	quotientLo(p2)
(1)  256/     115 : CA FC               	st 		quotientLo(p2)
(1)  257/     117 : C4 00               	ldi 	0
(1)  258/     119 : FA FD               	cad 	quotientHi(p2)
(1)  259/     11B : CA FD               	st 		quotientHi(p2)
(1)  260/     11D :                     
(1)  261/     11D :                     __DivideComplete:
(1)  262/     11D : C2 FD               	ld 		quotientHi(p2) 										; copy quotient to what will be TOS
(1)  263/     11F : CA 03               	st 		3(p2)
(1)  264/     121 : C2 FC               	ld 		quotientLo(p2)
(1)  265/     123 : CA 02               	st 		2(p2)
(1)  266/     125 : C2 FB               	ld 		remainderHi(p2) 									; put remainder immediately after it if we want it
(1)  267/     127 : CA 01               	st 		1(p2)
(1)  268/     129 : C2 FA               	ld 		remainderLo(p2) 
(1)  269/     12B : CA 00               	st 		0(p2)
(1)  270/     12D :                     
(1)  271/     12D : C2 F8               	ld 		eTemp(p2) 											; restore E
(1)  272/     12F : 01                  	xae 
(1)  273/     130 : C6 02               	ld 		@2(p2) 												; fix stack back up leaving quotient and hidden remainder
(1)  274/     132 : 02                  	ccl 														; return no error.
(1)  275/     133 : 90 90               	jmp 	__MATH_Exit2
(1)  276/     135 :                     
(1)  277/     135 :                     __DivideRemainderGreater: 										; this is the "if temp >= 0 bit"
(1)  278/     135 : CA FB               	st 		remainderHi(p2) 									; save temp.high value into remainder.high
(1)  279/     137 : 40                  	lde 														; copy temp.low to remainder.low
(1)  280/     138 : CA FA               	st 		remainderLo(p2) 
(1)  281/     13A :                     
(1)  282/     13A : C2 FC               	ld 		quotientLo(p2) 										; or bit into quotient
(1)  283/     13C : DA FE               	or 		bitLo(p2)
(1)  284/     13E : CA FC               	st 		quotientLo(p2)
(1)  285/     140 : C2 FD               	ld 		quotientHi(p2)
(1)  286/     142 : DA FF               	or 		bitHi(p2)
(1)  287/     144 : CA FD               	st 		quotientHi(p2)
 AS V1.42 Beta [Bld 102] - source file monitor.asm(maths.asm) - page 7 - 12/1/2015 9:13:55


(1)  288/     146 : 90 A8               	jmp 	__DivideContinue
(1)  289/     148 :                     
(1)  290/     148 :                     
(1)  291/     148 :                     	endsection	SCMPDivide
(1)  292/     148 :                     
      39/     148 :                     
      40/     148 :                     ; ******************************************************************************************************************
      41/     148 :                     ;
      42/     148 :                     ;									Find Top of Memory to initialise the stack.
      43/     148 :                     ;
      44/     148 :                     ; ******************************************************************************************************************
      45/     148 :                     
      46/     148 :                     BootMonitor:
      47/     148 : C4 90               		ldi 	0x90 											; point P1 to $9000 which is the first ROM.
      48/     14A : 35                  		xpah 	p1
      49/     14B : C1 00               		ld 		0(p1) 											; if that byte is $68, go straight there.
      50/     14D : E4 68               		xri 	0x68
      51/     14F : 9C 01               		jnz 	__BootMonitor
      52/     151 : 3D                  		xppc 	p1 												; e.g. JMP $9001
      53/     152 :                     __BootMonitor:
      54/     152 :                     
      55/     152 : C4 0F               		ldi 	0x0F 											; point P2 to theoretical top of RAM on basic m/c
      56/     154 : 36                  		xpah 	p2 												; e.g. 0xFFF
      57/     155 : C4 FF               		ldi 	0xFF 											; ideally you'd make this 0x003F and remove the ld
      58/     157 : 32                  		xpal 	p2 												; but the emulators don't do 4+12 math. Only matters here.
      59/     158 : C6 40               		ld 		@64(p2) 										; fix the predecrement (wrap around not emulated)
      60/     15A :                     FindTopMemory:
      61/     15A : C4 A5               		ldi 	0xA5 											; try to write this to memory
      62/     15C : CE C0               		st 		@-64(p2) 										; predecrementing by 64.
      63/     15E : E2 00               		xor 	(p2) 											; did it write correctly.
      64/     160 : 9C F8               		jnz 	FindTopMemory 									; now P2 points to top of memory.
      65/     162 :                     
      66/     162 :                     ; ******************************************************************************************************************
      67/     162 :                     ;
      68/     162 :                     ;												Clear the screen
      69/     162 :                     ;
      70/     162 :                     ; ******************************************************************************************************************
      71/     162 :                     
      72/     162 :                     ClearScreen_Command:
      73/     162 : C4 00               		ldi 	0 												; set P1 to zero to access VRAM via write.
      74/     164 : 35                  		xpah 	p1
      75/     165 : C4 00               		ldi 	0
      76/     167 :                     ClearScreenLoop:
      77/     167 : 31                  		xpal 	p1												; clear screen
      78/     168 : C4 20               		ldi 	' '
      79/     16A : CD 01               		st 		@1(p1)
      80/     16C : 31                  		xpal 	p1
      81/     16D : 94 F8               		jp 		ClearScreenLoop
      82/     16F : C4 0C               		ldi 	Cursor/256 										; reset the cursor position to TOS
      83/     171 : 35                  		xpah 	p1
      84/     172 : C4 18               		ldi 	Cursor&255
      85/     174 : 31                  		xpal 	p1 
      86/     175 : C4 00               		ldi 	0 												; Note: could save 2 bytes here, P1.H is 0.
      87/     177 : C9 00               		st 		0(p1)											
      88/     179 :                     
      89/     179 :                     ; ****************************************************************************************************************
      90/     179 :                     ;
      91/     179 :                     ;												Check if initialised.
      92/     179 :                     ;
      93/     179 :                     ; ****************************************************************************************************************
 AS V1.42 Beta [Bld 102] - source file monitor.asm - page 8 - 12/1/2015 9:13:55


      94/     179 :                     
      95/     179 : C1 03               		ld 		isInit-Cursor(p1) 								; have we initialised ?
      96/     17B : E4 A7               		xri 	0xA7 											; if so this byte should be $A7
      97/     17D : 98 2F               		jz 		CommandMainLoop
      98/     17F : C4 A7               		ldi 	0xA7 											; set the initialised byte
      99/     181 : C9 03               		st 		isInit-Cursor(p1)
     100/     183 :                     
     101/     183 : C4 0C               		ldi 	codeStart/256 									; set the initial work address
     102/     185 : C9 02               		st 		Current-Cursor+1(p1)
     103/     187 : C4 2E               		ldi 	codeStart&255
     104/     189 : C9 01               		st 		Current-Cursor(p1)
     105/     18B :                     
     106/     18B :                     																; print boot message - can lose this if required.
     107/     18B : C4 05               		ldi 	(PrintCharacter-1)/256 							; set P3 = print character.
     108/     18D : 37                  		xpah 	p3 
     109/     18E : C4 01               		ldi 	(PrintCharacter-1)&255
     110/     190 : 33                  		xpal 	p3
     111/     191 : C4 01               		ldi 	Message / 256 									; set P1 = boot message
     112/     193 : 35                  		xpah 	p1
     113/     194 : C4 9E               		ldi 	Message & 255
     114/     196 : 31                  		xpal 	p1
     115/     197 :                     MessageLoop:
     116/     197 : C5 01               		ld 		@1(p1) 											; read character
     117/     199 : 98 13               		jz 		CommandMainLoop 								; end of message
     118/     19B : 3F                  		xppc 	p3 												; print it
     119/     19C : 90 F9               		jmp 	MessageLoop
     120/     19E :                     
     121/     19E :                     Message:
     122/     19E : 2A 2A 20 53 43 2F   		db 		"** SC/MP OS **",13,0
                    4D 50 20 4F 53 20 
                    2A 2A 0D 00 
     123/     1AE :                     
     124/     1AE :                     ; ****************************************************************************************************************
     125/     1AE :                     ;
     126/     1AE :                     ;													Main Loop
     127/     1AE :                     ;
     128/     1AE :                     ; ****************************************************************************************************************
     129/     1AE :                     
     130/     1AE :                     CommandMainLoop:
     131/     1AE : C4 05               		ldi 	(PrintAddressData-1)/256						; print Address only
     132/     1B0 : 37                  		xpah 	p3
     133/     1B1 : C4 6E               		ldi 	(PrintAddressData-1)&255
     134/     1B3 : 33                  		xpal 	p3
     135/     1B4 : C4 00               		ldi 	0 												; no data elements
     136/     1B6 : 3F                  		xppc 	p3
     137/     1B7 :                     
     138/     1B7 : C4 05               		ldi 	(PrintCharacter-1)/256 							; set P3 = print character.
     139/     1B9 : 37                  		xpah 	p3
     140/     1BA : C4 01               		ldi 	(PrintCharacter-1)&255
     141/     1BC : 33                  		xpal 	p3
     142/     1BD : C4 5D               		ldi 	']'												; print the prompt.
     143/     1BF : 3F                  		xppc 	p3
     144/     1C0 :                     
     145/     1C0 :                     ; ****************************************************************************************************************
     146/     1C0 :                     ;
     147/     1C0 :                     ;											Keyboard Line Input
     148/     1C0 :                     ;
     149/     1C0 :                     ; ****************************************************************************************************************
     150/     1C0 :                     
     151/     1C0 : C4 00               		ldi 	0 												; set E = character position.
 AS V1.42 Beta [Bld 102] - source file monitor.asm - page 9 - 12/1/2015 9:13:55


     152/     1C2 : 01                  		xae 
     153/     1C3 :                     KeyboardLoop:
     154/     1C3 : C4 08               		ldi 	0x8 											; set P1 to point to keyboard latch
     155/     1C5 : 35                  		xpah 	p1
     156/     1C6 :                     _KBDWaitRelease:
     157/     1C6 : C1 00               		ld 		0(p1) 											; wait for strobe to clear
     158/     1C8 : 94 02               		jp 		_KBDWaitKey
     159/     1CA : 90 FA               		jmp 	_KBDWaitRelease
     160/     1CC :                     _KBDWaitKey:
     161/     1CC : C1 00               		ld 		0(p1) 											; wait for strobe, i.e. new key
     162/     1CE : 94 FC               		jp 		_KBDWaitKey
     163/     1D0 : D4 7F               		ani 	0x7F 											; throw away bit 7
     164/     1D2 : CA FF               		st 		-1(p2) 											; save key.
     165/     1D4 :                     
     166/     1D4 : C4 0C               		ldi 	kbdBuffer/256 									; set P1 = keyboard buffer
     167/     1D6 : 35                  		xpah 	p1
     168/     1D7 : C4 1E               		ldi 	kbdBuffer&255
     169/     1D9 : 31                  		xpal 	p1		
     170/     1DA :                     
     171/     1DA : C2 FF               		ld 		-1(p2) 											; read key
     172/     1DC : E4 08               		xri 	8 												; is it backspace
     173/     1DE : 98 1E               		jz 		__KBDBackSpace
     174/     1E0 : E4 05               		xri 	8!13 											; is it CR, then exit
     175/     1E2 : 98 28               		jz 		__KBDExit
     176/     1E4 :                     
     177/     1E4 : 40                  		lde 													; have we a full buffer.
     178/     1E5 : E4 10               		xri 	kbdBufferLn 									; if so, ignore the key.
     179/     1E7 : 98 DA               		jz 		KeyboardLoop
     180/     1E9 :                     
     181/     1E9 : C2 FF               		ld 		-1(p2) 											; restore the key.
     182/     1EB : 02                  		ccl
     183/     1EC : F4 20               		adi 	0x20											; will make lower case -ve
     184/     1EE : 94 02               		jp 		__KBDNotLower
     185/     1F0 : FC 20               		cai 	0x20 											; capitalise
     186/     1F2 :                     __KBDNotLower:
     187/     1F2 : F4 E0               		adi 	0xE0 											; fix up.
     188/     1F4 : C9 80               		st 		-0x80(p1) 										; save in the buffer using E as index.
     189/     1F6 : 3F                  		xppc 	p3 												; print the character
     190/     1F7 : 01                  		xae 													; increment E
     191/     1F8 : 02                  		ccl
     192/     1F9 : F4 01               		adi 	1
     193/     1FB : 01                  		xae
     194/     1FC : 90 C5               		jmp 	KeyboardLoop 									; and get the next key.
     195/     1FE :                     
     196/     1FE :                     __KBDBackSpace:
     197/     1FE : 40                  		lde 													; get position
     198/     1FF : 98 C2               		jz 		KeyboardLoop 									; can't go back if at beginning
     199/     201 : 03                  		scl 													; go back 1 from E
     200/     202 : FC 01               		cai 	1
     201/     204 : 01                  		xae 
     202/     205 : C4 08               		ldi 	8 												; print a backspace
     203/     207 : 3F                  		xppc 	p3
     204/     208 : 90 B9               		jmp 	KeyboardLoop 									; and go round again.
     205/     20A :                     
     206/     20A :                     __CmdMainLoop1:
     207/     20A : 90 A2               		jmp 	CommandMainLoop
     208/     20C :                     
     209/     20C :                     __KBDExit:
     210/     20C : C9 80               		st 		-0x80(p1) 										; add the ASCIIZ terminator.
     211/     20E : C4 0D               		ldi 	13												; print a new line.
 AS V1.42 Beta [Bld 102] - source file monitor.asm - page 10 - 12/1/2015 9:13:55


     212/     210 : 3F                  		xppc 	p3
     213/     211 :                     
     214/     211 :                     ; ****************************************************************************************************************
     215/     211 :                     ;
     216/     211 :                     ;						Extract the 5 bit 3 letter (max command value). P1 points to buffer
     217/     211 :                     ;
     218/     211 :                     ; ****************************************************************************************************************
     219/     211 :                     
     220/     211 : C4 00               		ldi 	0
     221/     213 : 01                  		xae 													; E contains the LSB of the 5 bit shift
     222/     214 : 40                  		lde 	
     223/     215 : CA FF               		st 		-1(p2) 											; -1(P2) contains the MSB
     224/     217 : C9 FF               		st 		modifier-kbdBuffer(p1)							; clear the modifier.
     225/     219 :                     Extract5Bit:
     226/     219 : C1 00               		ld 		(p1) 											; look at character
     227/     21B : 02                  		ccl 													; add 128-65, will be +ve if < 64
     228/     21C : F4 3F               		adi 	128-65
     229/     21E : 94 1A               		jp 		__ExtractEnd
     230/     220 : C4 05               		ldi 	5 												; shift current value left 5 times using -2(p2)
     231/     222 : CA FE               		st 		-2(p2)
     232/     224 :                     __Ex5Shift:
     233/     224 : 40                  		lde 													; shift E left into CY/L
     234/     225 : 02                  		ccl
     235/     226 : 70                  		ade 
     236/     227 : 01                  		xae
     237/     228 : C2 FF               		ld 		-1(p2) 											; shift CY/L into -1(p2) and carry/link
     238/     22A : F2 FF               		add 	-1(p2)
     239/     22C : CA FF               		st 		-1(p2)
     240/     22E : BA FE               		dld 	-2(p2) 											; done it 5 times ?
     241/     230 : 9C F2               		jnz 	__Ex5Shift
     242/     232 : C5 01               		ld 		@1(p1) 											; re-read character.
     243/     234 : D4 1F               		ani 	0x1F 											; lower 5 bits only.
     244/     236 : 58                  		ore 													; OR into E
     245/     237 : 01                  		xae
     246/     238 : 90 DF               		jmp 	Extract5Bit 									; go and get the next one.
     247/     23A :                     
     248/     23A :                     __ExtractEnd:
     249/     23A : C4 1C               		ldi 	parPosn & 255 									; P1.L = Parameter Position, A = first non cmd char
     250/     23C : 31                  		xpal	p1
     251/     23D : C9 00               		st 		(p1) 											; write to parameter position.
     252/     23F :                     
     253/     23F :                     ; ****************************************************************************************************************
     254/     23F :                     ;
     255/     23F :                     ;						Find command in -1 (P2) (High) E (Low) in Command table
     256/     23F :                     ;	
     257/     23F :                     ; ****************************************************************************************************************
     258/     23F :                     
     259/     23F : C4 47               		ldi 	__commandList & 255 							; point P1 to the command list
     260/     241 : 31                  		xpal 	p1
     261/     242 : C4 07               		ldi 	__commandList / 256 		
     262/     244 : 35                  		xpah 	p1	
     263/     245 :                     __FindCommandLoop:
     264/     245 : C1 00               		ld 		0(p1) 											; reached the end of the table ?
     265/     247 : D9 01               		or 		1(p1)											; which is marked by word 0000
     266/     249 : 98 31               		jz 		__CommandError
     267/     24B : C5 03               		ld 		@3(p1) 											; read low byte, and point to next
     268/     24D : 60                  		xre
     269/     24E : 9C F5               		jnz 	__FindCommandLoop 								; if different to LSB loop back.
     270/     250 : C1 FE               		ld 		-2(p1) 											; read the high byte
     271/     252 : E2 FF               		xor 	-1(p2) 											; if different to the MSB loop back.
 AS V1.42 Beta [Bld 102] - source file monitor.asm - page 11 - 12/1/2015 9:13:55


     272/     254 : 9C EF               		jnz 	__FindCommandLoop
     273/     256 :                     
     274/     256 :                     ; ****************************************************************************************************************
     275/     256 :                     ;
     276/     256 :                     ;				Found command, figure out if ASM or Command, if Command go to that routine
     277/     256 :                     ;
     278/     256 :                     ; ****************************************************************************************************************
     279/     256 :                     
     280/     256 : C4 A1               		ldi 	(GetParameter-1) & 255 							; point P3 to the get parameter code.
     281/     258 : 33                  		xpal 	p3
     282/     259 : C4 05               		ldi 	(GetParameter-1) / 256
     283/     25B : 37                  		xpah 	p3
     284/     25C :                     
     285/     25C : C1 FF               		ld 		-1(p1) 											; read the operation code.
     286/     25E : D4 F0               		ani 	0xF0 											; look at the m-s-nibble - commands are 0x20.
     287/     260 : E4 20               		xri 	0x20
     288/     262 : 9C 22               		jnz 	__Assembler
     289/     264 :                     
     290/     264 : C1 FF               		ld 		-1(p1) 											; re-read it
     291/     266 : 02                  		ccl
     292/     267 : F1 FF               		add 	-1(p1) 											; double it
     293/     269 : D4 1F               		ani 	0x1F 											; lower 5 bits only.
     294/     26B : F4 EE               		adi 	__CommandTable & 255 							; make P1 point to the command table entry
     295/     26D : 31                  		xpal 	p1
     296/     26E : C4 07               		ldi 	__CommandTable / 256 					
     297/     270 : 35                  		xpah 	p1
     298/     271 : C1 00               		ld 		0(p1) 											; read low address
     299/     273 : 01                  		xae
     300/     274 : C1 01               		ld 		1(p1) 											; read high address
     301/     276 : 35                  		xpah 	p1 												; put in P1.H
     302/     277 : 40                  		lde 													; get low address
     303/     278 : 31                  		xpal 	p1 												; put in P1.L
     304/     279 : C5 FF               		ld 		@-1(p1) 										; fix up for the pre-increment
     305/     27B : 3D                  		xppc 	p1 												; and go there.
     306/     27C :                     
     307/     27C :                     __CommandError: 												; unknown command.
     308/     27C : C4 03               		ldi 	3 												; set the beeper on
     309/     27E : 07                  		cas
     310/     27F : 8F FF               		dly 	0xFF 											; short delay
     311/     281 : C4 00               		ldi 	0 												; set the beeper off
     312/     283 : 07                  		cas
     313/     284 : 90 84               		jmp 	__CmdMainLoop1
     314/     286 :                     
     315/     286 :                     ; ****************************************************************************************************************
     316/     286 :                     ;												In line Assembler
     317/     286 :                     ; ****************************************************************************************************************
     318/     286 :                     
     319/     286 :                     __Assembler:
     320/     286 : C1 FF               		ld 		-1(p1) 											; this is the operation code to use.
     321/     288 : CE FF               		st 		@-1(p2) 										; push on the stack.
     322/     28A :                     
     323/     28A : 3F                  		xppc 	p3 												; evaluate (any) parameter if present
     324/     28B : 06                  		csa 													; check carry flag set
     325/     28C : 94 27               		jp 		__ASMNoParameter  								; if clear, no parameter was provided.
     326/     28E :                     
     327/     28E : C4 1C               		ldi 	parPosn & 255
     328/     290 : 31                  		xpal 	p1 												; get the parameter LSB
     329/     291 : CE FF               		st 		@-1(p2) 										; push that on the stack, set P1 to parPosn
     330/     293 : C4 0C               		ldi 	parPosn / 256
     331/     295 : 35                  		xpah 	p1
 AS V1.42 Beta [Bld 102] - source file monitor.asm - page 12 - 12/1/2015 9:13:55


     332/     296 : C1 00               		ld 		(p1) 											; read current position
     333/     298 : 31                  		xpal 	p1 												; P1 now points to character.
     334/     299 : C1 00               		ld 		(p1) 											; read character
     335/     29B : E4 21               		xri 	'!'												; is it the label pling ?
     336/     29D : 9C 1E               		jnz 	__ASMContinue 									; we don't need to change this pointer , we should technically.
     337/     29F : C2 00               		ld 		(p2) 											; read the value, which is the label number
     338/     2A1 : 03                  		scl
     339/     2A2 : FC 18               		cai 	labelCount 										; is it a valid label number
     340/     2A4 : 94 D6               		jp 		__CommandError 									; no, beep.
     341/     2A6 : C2 00               		ld 		(p2) 											; re-read the label number
     342/     2A8 : 01                  		xae 													; put in E
     343/     2A9 : C4 0C               		ldi 	Labels/256 										; point p1 to labels
     344/     2AB : 35                  		xpah 	p1
     345/     2AC : C4 00               		ldi 	Labels&255 
     346/     2AE : 31                  		xpal 	p1
     347/     2AF : C1 80               		ld 		-0x80(p1) 										; read label indexed using E.
     348/     2B1 : CA 00               		st 		(p2) 											; save as the operand
     349/     2B3 : 90 08               		jmp 	__ASMContinue 									; and continue
     350/     2B5 :                     
     351/     2B5 :                     __ASMNoParameter:
     352/     2B5 : C2 00               		ld 		(p2) 											; read the pushed operation code
     353/     2B7 : D4 80               		ani 	0x80 											; is bit 7 set ?
     354/     2B9 : 9C C1               		jnz 	__CommandError 									; if it is, we need a parameter
     355/     2BB : CE FF               		st 		@-1(p2) 										; push zero on the stack as a dummy parameter.
     356/     2BD :                     
     357/     2BD :                     __ASMContinue:
     358/     2BD : C4 0C               		ldi 	Current/256 									; p3 = &Current Address
     359/     2BF : 37                  		xpah 	p3
     360/     2C0 : C4 19               		ldi 	Current&255
     361/     2C2 : 33                  		xpal 	p3
     362/     2C3 :                     
     363/     2C3 : C3 04               		ld 		modifier-Current(p3) 							; get the modifier (e.g. @,Pn etc.)
     364/     2C5 : 02                  		ccl
     365/     2C6 : F2 01               		add 	1(p2) 											; add to the opcode and write it back
     366/     2C8 : CA 01               		st 		1(p2)
     367/     2CA :                     
     368/     2CA : C3 00               		ld 		(p3) 											; read current address into P1
     369/     2CC : 31                  		xpal 	p1
     370/     2CD : C3 01               		ld 		1(p3)
     371/     2CF : 35                  		xpah 	p1
     372/     2D0 :                     
     373/     2D0 : C2 01               		ld 		1(p2) 											; read opcode.
     374/     2D2 : CD 01               		st 		@1(p1) 											; write out to current address and bump it.
     375/     2D4 : 94 1F               		jp 		__ASMExit 										; if +ve then no operand byte, exit.
     376/     2D6 :                     
     377/     2D6 : C2 00               		ld 		(p2) 											; read the operand byte
     378/     2D8 : CD 01               		st 		@1(p1) 											; write that out as well.
     379/     2DA :                     
     380/     2DA : C3 04               		ld 		modifier-Current(p3) 							; look at the modifier 
     381/     2DC : 9C 17               		jnz 	__ASMExit 										; if non zero we don't need to do anything P0 = 00
     382/     2DE : C2 01               		ld 		1(p2) 											; DLY is a special case
     383/     2E0 : E4 8F               		xri 	0x8F 											; where the modifier is zero but not PC relative.
     384/     2E2 : 98 11               		jz 		__ASMExit 												
     385/     2E4 :                     
     386/     2E4 : C1 FF               		ld 		-1(p1) 											; read operand
     387/     2E6 : 02                  		ccl 													; one fewer because we want the current addr+1 low
     388/     2E7 : FB 00               		cad 	(p3) 											; subtract the current address low.
     389/     2E9 : C9 FF               		st 		-1(p1) 											; write it back
     390/     2EB :                     
     391/     2EB : C2 01               		ld 		1(p2) 											; read opcode again
 AS V1.42 Beta [Bld 102] - source file monitor.asm - page 13 - 12/1/2015 9:13:55


     392/     2ED : D4 F0               		ani 	0xF0 											; is it 9x (a JMP command)
     393/     2EF : E4 90               		xri 	0x90
     394/     2F1 : 9C 02               		jnz 	__ASMExit 										; if not, we are done
     395/     2F3 : B9 FF               		dld 	-1(p1) 											; one fewer because of the pre-increment
     396/     2F5 :                     __ASMExit:
     397/     2F5 : 31                  		xpal 	p1 												; write current address back out
     398/     2F6 : CB 00               		st 		(p3)
     399/     2F8 : 35                  		xpah 	p1
     400/     2F9 : CB 01               		st 		1(p3)
     401/     2FB : C6 02               		ld 		@2(p2) 											; drop stack values.
     402/     2FD :                     
     403/     2FD : 90 0C               		jmp 	__CmdMainLoop2 									; back to command loop
     404/     2FF :                     
     405/     2FF :                     ; ****************************************************************************************************************
     406/     2FF :                     ; ****************************************************************************************************************
     407/     2FF :                     ;
     408/     2FF :                     ;												Commands Section
     409/     2FF :                     ;
     410/     2FF :                     ; ****************************************************************************************************************
     411/     2FF :                     ; ****************************************************************************************************************
     412/     2FF :                     
     413/     2FF :                     ; ****************************************************************************************************************
     414/     2FF :                     ;											A : Set Current address
     415/     2FF :                     ; ****************************************************************************************************************
     416/     2FF :                     
     417/     2FF :                     Address_Command:
     418/     2FF : 3F                  		xppc 	p3 												; get parameter if exists
     419/     300 : 3F                  		xppc 	p3 												; update current if exists.
     420/     301 : 90 08               		jmp 	__CmdMainLoop2
     421/     303 :                     
     422/     303 :                     __CmdParameterFail:
     423/     303 : C4 02               		ldi 	2 												; set the beeper on
     424/     305 : 07                  		cas
     425/     306 : 8F FF               		dly 	0xFF 											; short delay
     426/     308 : C4 00               		ldi 	0 												; set the beeper off
     427/     30A : 07                  		cas
     428/     30B :                     __CmdMainLoop2:													; and go back to the start.
     429/     30B : C4 AD               		ldi 	(CommandMainLoop-1) & 255
     430/     30D : 33                  		xpal 	p3
     431/     30E : C4 01               		ldi 	(CommandMainLoop-1) / 256
     432/     310 : 37                  		xpah 	p3
     433/     311 : 3F                  		xppc 	p3
     434/     312 :                     
     435/     312 :                     ; ****************************************************************************************************************
     436/     312 :                     ;										G : Go (Address must be specified.)
     437/     312 :                     ; ****************************************************************************************************************
     438/     312 :                     
     439/     312 :                     Go_Command:
     440/     312 : 3F                  		xppc 	p3 												; get parameter, which should exist.
     441/     313 : 06                  		csa 													; look at CY/L which is set if it was.
     442/     314 : 94 ED               		jp 		__CmdParameterFail 								; if it is clear, beep an error.
     443/     316 : 31                  		xpal 	p1 												; copy P1 to P3
     444/     317 : 33                  		xpal 	p3
     445/     318 : 35                  		xpah 	p1
     446/     319 : 37                  		xpah 	p3
     447/     31A : C7 FF               		ld 		@-1(p3) 										; fix up for pre increment
     448/     31C : 3F                  		xppc 	p3 												; call the routine.		
     449/     31D :                     __CmdMainLoop3:
     450/     31D : 90 EC               		jmp 	__CmdMainLoop2 									; re-enter monitor.
     451/     31F :                     
 AS V1.42 Beta [Bld 102] - source file monitor.asm - page 14 - 12/1/2015 9:13:55


     452/     31F :                     ; ****************************************************************************************************************
     453/     31F :                     ;			PUT Write to tape : data mandatory, it is the byte count from the current address.
     454/     31F :                     ; ****************************************************************************************************************
     455/     31F :                     
     456/     31F :                     PutTape_Command:
     457/     31F : 3F                  		xppc 	p3 												; get the bytes to write.
     458/     320 : 06                  		csa 													; if CC, no value was provided
     459/     321 : 94 E0               		jp 		__CmdParameterFail 								; which is an error.
     460/     323 : 31                  		xpal 	p1 												; store low byte count in -1(P2)
     461/     324 : CA FF               		st 		-1(p2)
     462/     326 : 35                  		xpah 	p1 												; store high byte count in -2(P2)
     463/     327 : CA FE               		st 		-2(p2)
     464/     329 : 02                  		ccl 													; skip over the update current address
     465/     32A : 3F                  		xppc 	p3 												; this won't update current address as CY/L = 0
     466/     32B : 3F                  		xppc 	p3 												; and load the current address into P1.
     467/     32C : C4 00               		ldi 	0 												; set the output tape bit low
     468/     32E : 01                  		xae
     469/     32F : 19                  		sio
     470/     330 : C4 20               		ldi 	32 												; tape leader
     471/     332 : CA FD               		st 		-3(p2)
     472/     334 :                     _PutTapeLeader:
     473/     334 : 8F FF               		dly 	0xFF
     474/     336 : BA FD               		dld 	-3(p2)
     475/     338 : 9C FA               		jnz 	_PutTapeLeader
     476/     33A :                     _PutTapeByte:													; output byte at P1
     477/     33A : C4 00               		ldi 	0 												; set output bit to 0
     478/     33C : 01                  		xae 	
     479/     33D : 19                  		sio
     480/     33E : 8F 10               		dly 	tapeDelay * 4 									; 0 continuation bit + gap between tapes with no signal 
     481/     340 : C4 01               		ldi 	0x1 											; set bit high
     482/     342 : 01                  		xae
     483/     343 : 19                  		sio 
     484/     344 : C4 00               		ldi 	0
     485/     346 : 8F 04               		dly 	tapeDelay 										; output the start bit.
     486/     348 : C5 01               		ld 		@1(p1) 											; read the byte and put it in E.
     487/     34A : 01                  		xae
     488/     34B : C4 08               		ldi 	8 												; output 8 bits
     489/     34D : CA FD               		st 		-3(p2)
     490/     34F :                     _PutTapeBit:
     491/     34F : 19                  		sio 													; output MSB and shift
     492/     350 : C4 00               		ldi 	0
     493/     352 : 8F 04               		dly 	tapeDelay 								
     494/     354 : BA FD               		dld 	-3(p2) 											; do all 8 bits.
     495/     356 : 9C F7               		jnz 	_PutTapeBit
     496/     358 : BA FF               		dld 	-1(p2) 											; decrement counter
     497/     35A : 9C DE               		jnz 	_PutTapeByte
     498/     35C : BA FE               		dld 	-2(p2) 											; note MSB goes 0 to -1 when finished.
     499/     35E : 94 DA               		jp 		_PutTapeByte
     500/     360 : C4 01               		ldi 	0x01 											; add the termination bit.
     501/     362 : 01                  		xae
     502/     363 : 19                  		sio
     503/     364 : C4 00               		ldi 	0 												; put that out.
     504/     366 : 8F 04               		dly 	TapeDelay
     505/     368 : C4 00               		ldi 	0 												; and set the leve back to 0
     506/     36A : 01                  		xae 
     507/     36B : 19                  		sio
     508/     36C :                     __CmdMainLoop4:
     509/     36C : 90 AF               		jmp 	__CmdMainLoop3
     510/     36E :                     
     511/     36E :                     __CmdParameterFail1:
 AS V1.42 Beta [Bld 102] - source file monitor.asm - page 15 - 12/1/2015 9:13:55


     512/     36E : 90 93               		jmp 	__CmdParameterFail
     513/     370 :                     
     514/     370 :                     ; ****************************************************************************************************************
     515/     370 :                     ;						GET [addr] load tape to current position or given address.
     516/     370 :                     ; ****************************************************************************************************************
     517/     370 :                     
     518/     370 :                     LoadTape_Command:
     519/     370 : 3F                  		xppc	p3 												; get parameter
     520/     371 : 3F                  		xppc 	p3												; update current address
     521/     372 : 3F                  		xppc 	p3 												; current address to P1.
     522/     373 : C4 08               		ldi 	0x8 											; point P3 to the keyboard.
     523/     375 : 37                  		xpah 	p3
     524/     376 :                     __GetTapeWait:
     525/     376 : C3 00               		ld 		0(p3) 											; check keyboard break
     526/     378 : D4 80               		ani 	0x80
     527/     37A : 9C F2               		jnz 	__CmdParameterFail1
     528/     37C : 19                  		sio 													; wait for the start bit, examine tape in.
     529/     37D : 40                  		lde 
     530/     37E : 94 F6               		jp 		__GetTapeWait
     531/     380 : 8F 06               		dly 	tapeDelay * 3 / 2 								; half way into the first bit.
     532/     382 : C4 08               		ldi 	8 												; read in 8 bits.
     533/     384 : CA FF               		st 		-1(p2)
     534/     386 :                     __GetTapeBits:
     535/     386 : 19                  		sio 													; read in one bit
     536/     387 : C4 00               		ldi 	0
     537/     389 : 8F 04               		dly 	tapeDelay 										; delay to next bit
     538/     38B : BA FF               		dld 	-1(p2) 											; read 8 bits.
     539/     38D : 9C F7               		jnz 	__GetTapeBits 
     540/     38F : 40                  		lde 													; store byte at current address
     541/     390 : CD 01               		st 		@1(p1)
     542/     392 : 19                  		sio 													; read in the byte, which is zero if continuing.
     543/     393 : 40                  		lde  													; examine bit 7 shifted in.
     544/     394 : 94 E0               		jp 		__GetTapeWait 									; if zero, wait for the next start bit.
     545/     396 :                     __CmdMainLoop5:
     546/     396 : 90 D4               		jmp 	__CmdMainLoop4
     547/     398 :                     
     548/     398 :                     ; ****************************************************************************************************************
     549/     398 :                     ;										L : nn Set Label to current address
     550/     398 :                     ; ****************************************************************************************************************
     551/     398 :                     
     552/     398 :                     Label_Command:
     553/     398 : 3F                  		xppc 	p3 												; get parameter
     554/     399 : 06                  		csa 													; check it exists, CY/L must be set
     555/     39A : 94 D2               		jp 		__CmdParameterFail1
     556/     39C : 31                  		xpal 	p1 												; get into A
     557/     39D : 01                  		xae 													; put into E
     558/     39E : 40                  		lde 													; get back
     559/     39F : 03                  		scl
     560/     3A0 : FC 18               		cai 	labelCount 										; check is < number of labels
     561/     3A2 : 94 CA               		jp 		__CmdParameterFail1
     562/     3A4 :                     
     563/     3A4 : C4 0C               		ldi 	Current/256 									; point P1 to current address
     564/     3A6 : 35                  		xpah 	p1
     565/     3A7 : C4 19               		ldi 	Current&255
     566/     3A9 : 31                  		xpal 	p1
     567/     3AA : C1 00               		ld 		(p1) 											; read current address
     568/     3AC : 31                  		xpal 	p1 												; save in P1.Low
     569/     3AD : C4 00               		ldi 	Labels&255 										; get labels low byte in same page as current address
     570/     3AF : 02                  		ccl
     571/     3B0 : 70                  		ade 													; add label # to it
 AS V1.42 Beta [Bld 102] - source file monitor.asm - page 16 - 12/1/2015 9:13:55


     572/     3B1 : 31                  		xpal 	p1 												; put in P1.L and restore current address low
     573/     3B2 : C9 00               		st 		(p1) 											; store current address low in label space.
     574/     3B4 : 90 E0               		jmp 	__CmdMainLoop5 									; and exit.
     575/     3B6 :                     
     576/     3B6 :                     ; ****************************************************************************************************************
     577/     3B6 :                     ;											M :	Dump Memory
     578/     3B6 :                     ; ****************************************************************************************************************
     579/     3B6 :                     
     580/     3B6 :                     MemoryDump_Command:
     581/     3B6 : 3F                  		xppc 	p3 												; get parameter if exists
     582/     3B7 : 3F                  		xppc 	p3 												; update current if exists.
     583/     3B8 : C4 07               		ldi 	7 												; print seven rows
     584/     3BA : CE FF               		st 		@-1(p2)
     585/     3BC :                     __DCLoop:
     586/     3BC : C4 05               		ldi 	(PrintAddressData-1)/256						; print one row of address and data.
     587/     3BE : 37                  		xpah 	p3
     588/     3BF : C4 6E               		ldi 	(PrintAddressData-1)&255
     589/     3C1 : 33                  		xpal 	p3
     590/     3C2 : C4 04               		ldi 	4
     591/     3C4 : 3F                  		xppc 	p3
     592/     3C5 : C4 0C               		ldi 	Current/256 									; point P1 to current
     593/     3C7 : 35                  		xpah 	p1
     594/     3C8 : C4 19               		ldi 	Current&255 
     595/     3CA : 31                  		xpal 	p1
     596/     3CB : C1 00               		ld 		0(p1) 											; add 4 to current address
     597/     3CD : 02                  		ccl
     598/     3CE : F4 04               		adi 	4
     599/     3D0 : C9 00               		st 		0(p1)
     600/     3D2 : C1 01               		ld 		1(p1)
     601/     3D4 : F4 00               		adi 	0
     602/     3D6 : C9 01               		st 		1(p1)
     603/     3D8 : BA 00               		dld 	(p2) 											; do it 7 times
     604/     3DA : 9C E0               		jnz 	__DCLoop
     605/     3DC : C6 01               		ld 		@1(p2) 											; fix up stack.
     606/     3DE :                     __CmdMainLoop6:
     607/     3DE : 90 B6               		jmp 	__CmdMainLoop5
     608/     3E0 :                     
     609/     3E0 :                     
     610/     3E0 :                     ; ****************************************************************************************************************
     611/     3E0 :                     ;								B: Enter Bytes (no address, sequence of byte data)
     612/     3E0 :                     ; ****************************************************************************************************************
     613/     3E0 :                     
     614/     3E0 :                     EnterBytes_Command:
     615/     3E0 : C4 A1               		ldi 	(GetParameter-1) & 255 							; P3 = Get Parameter routine
     616/     3E2 : 33                  		xpal 	p3
     617/     3E3 : C4 05               		ldi 	(GetParameter-1) / 256 	
     618/     3E5 : 37                  		xpah 	p3
     619/     3E6 : 3F                  		xppc 	p3 												; get the parameter.
     620/     3E7 : 06                  		csa 													; look at carry
     621/     3E8 : 94 AC               		jp 		__CmdMainLoop5 									; carry clear, no value.
     622/     3EA : C4 0C               		ldi 	Current/256 									; make P1 point to current
     623/     3EC : 35                  		xpah 	p1
     624/     3ED : C4 19               		ldi 	Current&255 										
     625/     3EF : 31                  		xpal 	p1 												; this pulls the byte value into A
     626/     3F0 : 01                  		xae 													; save it in E
     627/     3F1 : C1 00               		ld 		0(p1) 											; copy address to save to into P3
     628/     3F3 : 33                  		xpal 	p3
     629/     3F4 : C1 01               		ld 		1(p1) 
     630/     3F6 : 37                  		xpah 	p3 
     631/     3F7 : 40                  		lde 													; get byte back
 AS V1.42 Beta [Bld 102] - source file monitor.asm - page 17 - 12/1/2015 9:13:55


     632/     3F8 : CB 00               		st 		(p3) 											; save it in that location
     633/     3FA : A9 00               		ild 	0(p1) 											; bump current address and go back and try again.
     634/     3FC : 9C E2               		jnz 	EnterBytes_Command
     635/     3FE : A9 01               		ild 	1(p1)
     636/     400 : 90 DE               		jmp 	EnterBytes_Command
     637/     402 :                     
     638/     402 :                     ; ****************************************************************************************************************
     639/     402 :                     ;											D [aaaa] Disassembler
     640/     402 :                     ; ****************************************************************************************************************
     641/     402 :                     
     642/     402 :                     Disassemble_Command:	
     643/     402 : 3F                  		xppc 	p3 												; evaluate
     644/     403 : 3F                  		xppc 	p3 												; update current if new value
     645/     404 : C4 07               		ldi 	7												; instructions to disassemble counter
     646/     406 : CE FC               		st 		@-4(p2)											; p2 + 0 = counter p2 + 1 = opcode p2 + 2 = operand
     647/     408 :                     __DAssLoop:														; p2 + 3 = opcode - base opcode.
     648/     408 : C4 05               		ldi 	(PrintAddressData-1)/256						; print Address only
     649/     40A : 37                  		xpah 	p3
     650/     40B : C4 6E               		ldi 	(PrintAddressData-1)&255
     651/     40D : 33                  		xpal 	p3
     652/     40E : C4 00               		ldi 	0
     653/     410 : 3F                  		xppc 	p3
     654/     411 : C4 0C               		ldi 	Current / 256 									; point P1 to current address
     655/     413 : 35                  		xpah 	p1
     656/     414 : C4 19               		ldi 	Current & 255
     657/     416 : 31                  		xpal 	p1
     658/     417 : C1 00               		ld 		0(p1) 											; load current address into P3
     659/     419 : 33                  		xpal 	p3
     660/     41A : C1 01               		ld 		1(p1)
     661/     41C : 37                  		xpah 	p3
     662/     41D : C7 01               		ld 		@1(p3) 											; read opcode
     663/     41F : CA 01               		st 		1(p2) 											; save it
     664/     421 : 94 04               		jp 		__DAssNoOperand 								; if +ve no operand
     665/     423 : C7 01               		ld 		@1(p3) 											; read operand
     666/     425 : CA 02               		st 		2(p2) 											; save it
     667/     427 :                     __DAssNoOperand:
     668/     427 : C4 E9               		ldi 	(__CommandListEnd-3) & 255
     669/     429 : 33                  		xpal 	p3 												; update current position, setting P3 to last entry
     670/     42A : C9 00               		st 		0(p1)											; in command table.
     671/     42C : C4 07               		ldi 	(__CommandListEnd-3) / 256
     672/     42E : 37                  		xpah 	p3
     673/     42F : C9 01               		st 		1(p1)
     674/     431 :                     
     675/     431 :                     __DAssFindOpcode: 												; the table is : text (word) opcode (byte)
     676/     431 : C2 01               		ld 		1(p2) 											; get opcode
     677/     433 : E3 02               		xor 	2(p3) 											; check in the same 8 byte page.
     678/     435 : D4 F0               		ani 	0xF0
     679/     437 : 9C 0B               		jnz 	__DAssNextOpcode
     680/     439 : C2 01               		ld 		1(p2) 											; get opcode
     681/     43B : 03                  		scl
     682/     43C : FB 02               		cad 	2(p3) 											; subtract the base opcode.
     683/     43E : CA 03               		st 		3(p2) 											; save a the offset (possible)
     684/     440 : D4 E0               		ani 	0xE0 											; it needs to be 0x20 or less
     685/     442 : 98 08               		jz 		__DAssFoundOpcode 								; if >= 0 then found the correct opcode.
     686/     444 :                     __DAssNextOpcode:
     687/     444 : C7 FD               		ld 		@-3(p3) 										; go to previous entry in table
     688/     446 : 90 E9               		jmp 	__DAssFindOpcode
     689/     448 :                     
     690/     448 :                     __DAssLoop2:
     691/     448 : 90 BE               		jmp 	__DAssLoop
 AS V1.42 Beta [Bld 102] - source file monitor.asm - page 18 - 12/1/2015 9:13:55


     692/     44A :                     __CmdMainLoop7:
     693/     44A : 90 92               		jmp 	__CmdMainLoop6
     694/     44C :                     
     695/     44C :                     __DAssFoundOpcode:
     696/     44C : C3 02               		ld 		2(p3) 											; look at opcode that matched.
     697/     44E : D4 87               		ani 	0x87 											; match with 1xxx x100
     698/     450 : E4 84               		xri 	0x84 											; which is all the immediate instructions.		
     699/     452 : 9C 04               		jnz 	__DAssNotImmediate
     700/     454 : C2 03               		ld 		3(p2) 											; only do immediate if base offset is zero
     701/     456 : 9C EC               		jnz 	__DAssNextOpcode 								; fixes C0-C7 being LD, but C4 being LDI.
     702/     458 :                     __DAssNotImmediate:
     703/     458 : C3 00               		ld 		0(p3) 											; save LSB of text on stack
     704/     45A : CE FF               		st 		@-1(p2)
     705/     45C : C3 01               		ld 		1(p3) 											; and the MSB of text on stack
     706/     45E : CE FF               		st 		@-1(p2)
     707/     460 :                     
     708/     460 : C4 05               		ldi 	(PrintCharacter-1) / 256 						; set P3 up to print characters
     709/     462 : 37                  		xpah 	p3
     710/     463 : C4 01               		ldi 	(PrintCharacter-1) & 255 
     711/     465 : 33                  		xpal 	p3
     712/     466 : C4 20               		ldi 	' '												; print a space.
     713/     468 : 3F                  		xppc 	p3
     714/     469 :                     
     715/     469 : C4 03               		ldi 	3 												; print 3 characters
     716/     46B : CE FF               		st 		@-1(p2) 										; so +0 is count, +1 = text MSB, +2 = text LSB
     717/     46D :                     __DAssPrintMnemonic:
     718/     46D : C2 01               		ld 		1(p2) 											; get text MSB which is in bits .xxxxx..
     719/     46F : 1C                  		sr 														; shift right twice.
     720/     470 : 1C                  		sr
     721/     471 : D4 1F               		ani 	0x1F 											; lower 5 bits only
     722/     473 : 98 04               		jz 		__DAssSkipSpace 								; don't print spaces (00000)
     723/     475 : 02                  		ccl 													; make it 7 bit ASCII code.
     724/     476 : F4 40               		adi 	64 							
     725/     478 : 3F                  		xppc 	p3 												; display the character
     726/     479 :                     __DAssSkipSpace:
     727/     479 : C4 05               		ldi 	5 												; now shift the encoded data left 5 times
     728/     47B : CA FF               		st 		-1(p2)
     729/     47D :                     __DAssShiftEncode:
     730/     47D : 02                  		ccl
     731/     47E : C2 02               		ld 		2(p2)
     732/     480 : F2 02               		add 	2(p2)
     733/     482 : CA 02               		st 		2(p2)
     734/     484 : C2 01               		ld 		1(p2)
     735/     486 : F2 01               		add 	1(p2)
     736/     488 : CA 01               		st 		1(p2)
     737/     48A : BA FF               		dld 	-1(p2)
     738/     48C : 9C EF               		jnz 	__DAssShiftEncode
     739/     48E : BA 00               		dld 	0(p2) 											; done all three characters
     740/     490 : 9C DB               		jnz 	__DAssPrintMnemonic 							; if not keep going.
     741/     492 :                     
     742/     492 : C6 03               		ld 		@3(p2) 											; remove mnemonic stuff off the stack.
     743/     494 :                     
     744/     494 : C2 03               		ld 		3(p2) 											; print instruction modifier if required.
     745/     496 : 9C 1F               		jnz 	__DAssPrintModifier
     746/     498 :                     
     747/     498 :                     __DAssPrintOperand:
     748/     498 : C2 01               		ld 		1(p2) 											; get original opcode
     749/     49A : 94 0A               		jp 		__DAssNext 										; if no operand go to next line of disassembly.
     750/     49C : C4 04               		ldi 	(PrintHexByte-1) / 256 							; set P3 to point to the hex printer
     751/     49E : 37                  		xpah 	p3
 AS V1.42 Beta [Bld 102] - source file monitor.asm - page 19 - 12/1/2015 9:13:55


     752/     49F : C4 CE               		ldi 	(PrintHexByte-1) & 255
     753/     4A1 : 33                  		xpal 	p3
     754/     4A2 : C2 02               		ld 		2(p2) 											; get operand
     755/     4A4 : 03                  		scl 
     756/     4A5 : 3F                  		xppc 	p3 												; print it out with a leading space.
     757/     4A6 :                     
     758/     4A6 :                     __DAssNext:
     759/     4A6 : C4 05               		ldi 	(PrintCharacter-1) / 256 						; set P3 up to print characters
     760/     4A8 : 37                  		xpah 	p3
     761/     4A9 : C4 01               		ldi 	(PrintCharacter-1) & 255 
     762/     4AB : 33                  		xpal 	p3
     763/     4AC : C4 0D               		ldi 	13												; print a newline.
     764/     4AE : 3F                  		xppc 	p3
     765/     4AF :                     
     766/     4AF : BA 00               		dld 	0(p2) 											; done all 6 lines
     767/     4B1 : 9C 95               		jnz 	__DAssLoop2 									; no, go round again.
     768/     4B3 : C6 04               		ld 		@4(p2) 											; fix up the stack.
     769/     4B5 : 90 93               		jmp 	__CmdMainLoop7 									; and time to exit.
     770/     4B7 :                     
     771/     4B7 :                     
     772/     4B7 :                     __DAssPrintModifier:
     773/     4B7 : C4 20               		ldi 	' '												; print leading space
     774/     4B9 : 3F                  		xppc 	p3
     775/     4BA : C2 03               		ld 		3(p2) 											; read modifier
     776/     4BC : D4 04               		ani 	0x04 											; is @ bit set
     777/     4BE : 98 03               		jz 		__DAssNotAutoIndexed
     778/     4C0 : C4 40               		ldi 	'@'												; print '@'
     779/     4C2 : 3F                  		xppc 	p3
     780/     4C3 :                     __DAssNotAutoIndexed:
     781/     4C3 : C4 50               		ldi 	'P'												; print 'P'
     782/     4C5 : 3F                  		xppc 	p3
     783/     4C6 : C2 03               		ld 		3(p2) 											; print pointer register
     784/     4C8 : D4 03               		ani 	3
     785/     4CA : DC 30               		ori 	'0'
     786/     4CC : 3F                  		xppc 	p3
     787/     4CD : 90 C9               		jmp 	__DAssPrintOperand 								; and print operand.
     788/     4CF :                     
     789/     4CF :                     
     790/     4CF :                     ; ****************************************************************************************************************
     791/     4CF :                     ; ****************************************************************************************************************
     792/     4CF :                     ;
     793/     4CF :                     ;						Print A as a hexadecimal 2 digit value. If CY/L set precede with space
     794/     4CF :                     ;
     795/     4CF :                     ; ****************************************************************************************************************
     796/     4CF :                     ; ****************************************************************************************************************
     797/     4CF :                     
     798/     4CF :                     PrintHexByte:
     799/     4CF : CE FF               		st 		@-1(p2) 										; push A and P3, set P3 up to print character
     800/     4D1 : C4 05               		ldi 	(PrintCharacter-1)/256
     801/     4D3 : 37                  		xpah 	p3
     802/     4D4 : CE FF               		st 		@-1(p2)
     803/     4D6 : C4 01               		ldi 	(PrintCharacter-1)&255
     804/     4D8 : 33                  		xpal 	p3
     805/     4D9 : CE FF               		st 		@-1(p2)
     806/     4DB : 06                  		csa 													; check carry
     807/     4DC : 94 03               		jp 		__PHBNoSpace									; if clear, no space.
     808/     4DE : C4 20               		ldi 	' '												; print leading space
     809/     4E0 : 3F                  		xppc 	p3 
     810/     4E1 :                     __PHBNoSpace:
     811/     4E1 : C2 02               		ld 		2(p2) 											; read digit
 AS V1.42 Beta [Bld 102] - source file monitor.asm - page 20 - 12/1/2015 9:13:55


     812/     4E3 : 1C                  		sr 														; convert MSB
     813/     4E4 : 1C                  		sr
     814/     4E5 : 1C                  		sr
     815/     4E6 : 1C                  		sr
     816/     4E7 : 02                  		ccl
     817/     4E8 : EC 90               		dai 	0x90
     818/     4EA : EC 40               		dai 	0x40
     819/     4EC : 3F                  		xppc 	p3 												; print
     820/     4ED : C2 02               		ld 		2(p2) 											; read digit
     821/     4EF : D4 0F               		ani 	0x0F 											; convert LSB
     822/     4F1 : 02                  		ccl
     823/     4F2 : EC 90               		dai 	0x90
     824/     4F4 : EC 40               		dai 	0x40
     825/     4F6 : 3F                  		xppc 	p3 												; print
     826/     4F7 :                     
     827/     4F7 : C6 01               		ld 		@1(p2) 											; restore P3 & A and Return
     828/     4F9 : 33                  		xpal 	p3
     829/     4FA : C6 01               		ld 		@1(p2)
     830/     4FC : 37                  		xpah 	p3
     831/     4FD : C6 01               		ld 		@1(p2)
     832/     4FF : 3F                  		xppc 	p3
     833/     500 : 90 CD               		jmp 	PrintHexByte
     834/     502 :                     
     835/     502 :                     ; ****************************************************************************************************************
     836/     502 :                     ; ****************************************************************************************************************
     837/     502 :                     ;
     838/     502 :                     ;		Print Character in A, preserves all registers, re-entrant. Handles 13 (New Line), 8 (Backspace)
     839/     502 :                     ;		Characters 32 - 95 only.
     840/     502 :                     ;	
     841/     502 :                     ;		Rolls to screen top rather than scrolling.
     842/     502 :                     ;
     843/     502 :                     ; ****************************************************************************************************************
     844/     502 :                     ; ****************************************************************************************************************
     845/     502 :                     
     846/     502 :                     PrintCharacter:
     847/     502 : CE FF               		st 		@-1(p2) 										; save A
     848/     504 : C4 0C               		ldi 	Cursor/256 										; save P1, setting up P1 -> Cursor at same time.
     849/     506 : 35                  		xpah 	p1
     850/     507 : CE FF               		st 		@-1(p2)
     851/     509 : C4 18               		ldi 	Cursor&255
     852/     50B : 31                  		xpal 	p1
     853/     50C : CE FF               		st 		@-1(p2)
     854/     50E : C4 00               		ldi 	0 												; save P3, setting up P3 -> Page 0 (Video RAM Write)
     855/     510 : 37                  		xpah 	p3
     856/     511 : CE FF               		st 		@-1(p2)
     857/     513 : 33                  		xpal 	p3
     858/     514 : CE FF               		st 		@-1(p2)
     859/     516 :                     
     860/     516 : C1 00               		ld 		(p1) 											; read cursor position
     861/     518 : 33                  		xpal 	p3 												; put in P3.Low
     862/     519 :                     
     863/     519 : C4 20               		ldi 	' ' 											; erase the cursor.
     864/     51B : CB 00               		st 		0(p3)
     865/     51D :                     
     866/     51D : C2 04               		ld 		4(p2) 											; read character to print.
     867/     51F : E4 0D               		xri 	13 												; is it CR ?
     868/     521 : 98 40               		jz 		__PCNewLine 									; if so, go to new line.
     869/     523 : E4 05               		xri 	13!8 											; is it Backspace ?
     870/     525 : 98 30               		jz 		__PCBackSpace
     871/     527 :                     
 AS V1.42 Beta [Bld 102] - source file monitor.asm - page 21 - 12/1/2015 9:13:55


     872/     527 : C2 04               		ld 		4(p2) 											; get character to print
     873/     529 : D4 3F               		ani 	0x3F 											; make 6 bit ASCII
     874/     52B : CF 01               		st 		@1(p3) 											; write into P3, e.g. the screen and bump it.
     875/     52D : A9 00               		ild 	(p1) 											; increment cursor position and load
     876/     52F : D4 0F               		ani 	15 												; are we at line start ?
     877/     531 : 9C 0C               		jnz 	__PCExit 										; if so, erase the current line.
     878/     533 :                     
     879/     533 :                     __PCBlankNewLine:
     880/     533 : C4 10               		ldi 	16 												; count to 16, the number of spaces to write out.
     881/     535 : CA FF               		st 		-1(p2) 
     882/     537 :                     __PCBlankNewLineLoop:
     883/     537 : C4 20               		ldi 	' '
     884/     539 : CF 01               		st 		@1(p3)
     885/     53B : BA FF               		dld 	-1(p2)
     886/     53D : 9C F8               		jnz 	__PCBlankNewLineLoop
     887/     53F :                     
     888/     53F :                     __PCExit:
     889/     53F : C1 00               		ld 		(p1) 											; read cursor
     890/     541 : 33                  		xpal 	p3 												; put in P3.L
     891/     542 : C4 9B               		ldi 	0x9B 											; shaded block cursor on screen
     892/     544 : CB 00               		st 		(p3)
     893/     546 : C6 01               		ld 		@1(p2)											; restore P3
     894/     548 : 33                  		xpal 	p3
     895/     549 : C6 01               		ld 		@1(p2)
     896/     54B : 37                  		xpah 	p3
     897/     54C : C6 01               		ld 		@1(p2)											; restore P1
     898/     54E : 31                  		xpal 	p1
     899/     54F : C6 01               		ld 		@1(p2)
     900/     551 : 35                  		xpah 	p1
     901/     552 : C6 01               		ld 		@1(p2) 											; restore A and Return.	
     902/     554 : 3F                  		xppc 	p3
     903/     555 : 90 AB               		jmp 	PrintCharacter 									; and it is re-entrant.
     904/     557 :                     
     905/     557 :                     __PCBackSpace:
     906/     557 : 33                  		xpal 	p3 												; get current cursor position
     907/     558 : 98 E5               		jz 		__PCExit 										; if top of screen then exit.
     908/     55A : B9 00               		dld 	(p1) 											; backspace and load cursor
     909/     55C : 33                  		xpal 	p3 												; put in P3
     910/     55D : C4 20               		ldi 	' '												; erase character there
     911/     55F : CB 00               		st 		(p3)
     912/     561 : 90 DC               		jmp 	__PCExit 										; and exit.
     913/     563 :                     
     914/     563 :                     __PCNewLine:
     915/     563 : C1 00               		ld 		(p1) 											; read cursor position
     916/     565 : D4 70               		ani 	0x70 											; line
     917/     567 : 02                  		ccl 													; next line
     918/     568 : F4 10               		adi 	0x10
     919/     56A : C9 00               		st 		(p1) 											; write back
     920/     56C : 33                  		xpal 	p3 												; put in P3.L
     921/     56D : 90 C4               		jmp 	__PCBlankNewLine
     922/     56F :                     
     923/     56F :                     ; ****************************************************************************************************************
     924/     56F :                     ; ****************************************************************************************************************
     925/     56F :                     ;
     926/     56F :                     ;					Print current address followed by A data bytes. Doesn't update current address
     927/     56F :                     ;
     928/     56F :                     ; ****************************************************************************************************************
     929/     56F :                     ; ****************************************************************************************************************
     930/     56F :                     
     931/     56F :                     PrintAddressData:
 AS V1.42 Beta [Bld 102] - source file monitor.asm - page 22 - 12/1/2015 9:13:55


     932/     56F : CE FF               		st 		@-1(p2) 										; save count, we don't restore this.
     933/     571 : C4 04               		ldi 	(PrintHexByte-1)/256 							; save and set up P3
     934/     573 : 37                  		xpah 	p3
     935/     574 : CE FF               		st 		@-1(p2)
     936/     576 : C4 CE               		ldi 	(PrintHexByte-1)&255
     937/     578 : 33                  		xpal 	p3
     938/     579 : CE FF               		st 		@-1(p2)
     939/     57B : C4 0C               		ldi 	current / 256 									; point P1 to current address
     940/     57D : 35                  		xpah 	p1
     941/     57E : C4 19               		ldi 	current & 255
     942/     580 : 31                  		xpal 	p1
     943/     581 : C1 01               		ld 		1(p1) 											; read high byte of address
     944/     583 : 02                  		ccl
     945/     584 : 3F                  		xppc 	p3												; print w/o leading space
     946/     585 : C1 00               		ld 		0(p1)											; read low byte of address
     947/     587 : 02                  		ccl 	
     948/     588 : 3F                  		xppc 	p3 												; print w/o leading space.
     949/     589 : 01                  		xae 													; put in E
     950/     58A : C1 01               		ld 		1(p1) 											; high byte to P1.H
     951/     58C : 35                  		xpah 	p1
     952/     58D : 40                  		lde 													; low byte to P1.H
     953/     58E : 31                  		xpal 	p1
     954/     58F :                     _PADLoop:
     955/     58F : BA 02               		dld 	2(p2) 											; decrement counter
     956/     591 : 94 09               		jp 		_PADPrint 										; if +ve print another byte
     957/     593 :                     
     958/     593 : C6 01               		ld 		@1(p2) 											; restore P3, skipping A hence @2
     959/     595 : 33                  		xpal 	p3
     960/     596 : C6 02               		ld 		@2(p2)
     961/     598 : 37                  		xpah 	p3
     962/     599 : 3F                  		xppc 	p3
     963/     59A : 90 D3               		jmp 	PrintAddressData
     964/     59C :                     
     965/     59C :                     _PADPrint:
     966/     59C : C5 01               		ld 		@1(p1) 											; read byte advance pointer
     967/     59E : 03                  		scl
     968/     59F : 3F                  		xppc 	p3 												; print with space.
     969/     5A0 : 90 ED               		jmp 	_PADLoop
     970/     5A2 :                     
     971/     5A2 :                     ; ****************************************************************************************************************
     972/     5A2 :                     ;
     973/     5A2 :                     ;		Look at the parameter string for a parameter, processing @ and Pn as you go, CS if parameter found
     974/     5A2 :                     ; 		CC otherwise. Return parameter value in P1. Falls through
     975/     5A2 :                     ;
     976/     5A2 :                     ; ****************************************************************************************************************
     977/     5A2 :                     
     978/     5A2 :                     GetParameter:
     979/     5A2 : C4 0C               		ldi 	parPosn/256 									; current position into P1
     980/     5A4 : 35                  		xpah 	p1
     981/     5A5 : C4 1C               		ldi 	parPosn&255 					
     982/     5A7 : 31                  		xpal 	p1
     983/     5A8 : C4 00               		ldi 	0 												; -1(p2) is the low byte result
     984/     5AA : CA FF               		st 		-1(p2) 											; -2(p2) is the high byte result
     985/     5AC : CA FE               		st 		-2(p2)
     986/     5AE :                     
     987/     5AE : C1 00               		ld 		(p1) 											; read the current position,P1 points to character
     988/     5B0 : 31                  		xpal 	p1 												; when we put it in P1.L
     989/     5B1 :                     
     990/     5B1 :                     __GPASkip:														; skip over spaces to first alphanumeric.
     991/     5B1 : C1 00               		ld 		(p1) 											; read character
 AS V1.42 Beta [Bld 102] - source file monitor.asm - page 23 - 12/1/2015 9:13:55


     992/     5B3 : 98 7B               		jz 		__GPAExitFail 									; if zero, then end of the input string.
     993/     5B5 : C5 01               		ld 		@1(p1) 											; read it, advancing.
     994/     5B7 : E4 20               		xri 	32 												; is it space ?
     995/     5B9 : 98 F6               		jz 		__GPASkip 
     996/     5BB : E4 60               		xri 	32!'@'											; is it @ ?
     997/     5BD : 98 5E               		jz 		__GPAAtModifier 
     998/     5BF : E4 10               		xri 	'@'!'P' 										; is it P ?
     999/     5C1 : 98 4C               		jz 		__GPAPointerModifier
    1000/     5C3 :                     
    1001/     5C3 :                     __GPANextCharacter:
    1002/     5C3 : C1 FF               		ld 		-1(p1) 											; get value back after post increment.
    1003/     5C5 : 02                  		ccl
    1004/     5C6 : F4 50               		adi 	128-48 											; this will be +ve if A < '0'
    1005/     5C8 : 94 66               		jp 		__GPAExitFail
    1006/     5CA : FC 09               		cai 	9 												; will be +ve if A < '9', CY/L was clear.	
    1007/     5CC : 94 0A               		jp 		__GPAFoundHex
    1008/     5CE : FC 07               		cai 	7 												; will be +ve if A < 'A', CY/L was set
    1009/     5D0 : 94 5E               		jp 		__GPAExitFail
    1010/     5D2 : F4 79               		adi 	0xFF-0x85-1 									; will be +ve if A > 'F', CY/L was set.
    1011/     5D4 : 94 5A               		jp 		__GPAExitFail 					
    1012/     5D6 : F4 76               		adi 	(0x70-0xFA) & 0xFF 								; make the range as below, CY/L was clear
    1013/     5D8 :                     __GPAFoundHex: 													; enter here 0-9 = $76..$7F, A-F = $70..$75
    1014/     5D8 : 02                  		ccl  													; convert that to a hex nibble.
    1015/     5D9 : F4 0A               		adi 	10
    1016/     5DB : D4 0F               		ani 	0xF
    1017/     5DD : 01                  		xae 													; save in E, temporarily
    1018/     5DE : C4 04               		ldi 	4 												; now shift the result 4 bits to the left.
    1019/     5E0 : CA FD               		st 		-3(p2) 											; -3(p2) is the counter
    1020/     5E2 :                     __GPAShift:
    1021/     5E2 : 02                  		ccl
    1022/     5E3 : C2 FF               		ld 		-1(p2) 											; shift 16 bit result 1 bit to the left.
    1023/     5E5 : F2 FF               		add 	-1(p2)
    1024/     5E7 : CA FF               		st 		-1(p2)
    1025/     5E9 : C2 FE               		ld 		-2(p2)
    1026/     5EB : F2 FE               		add 	-2(p2)
    1027/     5ED : CA FE               		st 		-2(p2)
    1028/     5EF : BA FD               		dld 	-3(p2) 											; do it four times
    1029/     5F1 : 9C EF               		jnz 	__GPAShift 	
    1030/     5F3 : C2 FF               		ld 		-1(p2) 											; Or E into the LSB
    1031/     5F5 : 58                  		ore
    1032/     5F6 : CA FF               		st 		-1(p2)
    1033/     5F8 :                     
    1034/     5F8 : C5 01               		ld 		@1(p1) 											; look at next character, post incrementing.
    1035/     5FA : 03                  		scl
    1036/     5FB : FC 22               		cai 	34 												; if it is after space and ! (label marker)
    1037/     5FD : 94 C4               		jp 		__GPANextCharacter 								; go back and put it in place.
    1038/     5FF :                     
    1039/     5FF : C5 FF               		ld 		@-1(p1) 										; undo the increment, incase we've just read zero.
    1040/     601 :                     
    1041/     601 : C4 1C               		ldi 	parPosn & 255 									; put the parPosn address in P1.L, new posn into A
    1042/     603 : 31                  		xpal 	p1
    1043/     604 : C9 00               		st 		(p1) 											; and write it back
    1044/     606 : C2 FF               		ld 		-1(p2) 											; put the result into P1
    1045/     608 : 31                  		xpal 	p1
    1046/     609 : C2 FE               		ld 		-2(p2)
    1047/     60B : 35                  		xpah 	p1
    1048/     60C : 03                  		scl 													; set CY/L to indicate okay
    1049/     60D : 90 22               		jmp 	__GPAExit
    1050/     60F :                     
    1051/     60F :                     __GPAPointerModifier:
 AS V1.42 Beta [Bld 102] - source file monitor.asm - page 24 - 12/1/2015 9:13:55


    1052/     60F : C1 00               		ld 		(p1) 											; read P<something> ?
    1053/     611 : D4 FC               		ani 	0xFC 											; is it '0' .. '3'?
    1054/     613 : E4 30               		xri 	'0'
    1055/     615 : 9C 19               		jnz 	__GPAExitFail 									; it didn't work, not 0..3
    1056/     617 : C5 01               		ld 		@1(p1) 											; re-read it and advance
    1057/     619 : D4 03               		ani 	3												; lower 2 bits only
    1058/     61B : 90 02               		jmp 	__GPAAdjustModifier
    1059/     61D :                     __GPAAtModifier:
    1060/     61D : C4 04               		ldi 	4 												; set modifier adjustment to +4
    1061/     61F :                     __GPAAdjustModifier:
    1062/     61F : CA FD               		st 		-3(p2) 
    1063/     621 : C4 1D               		ldi 	modifier & 255 									; point P1 to modifier, save current address in E
    1064/     623 : 31                  		xpal 	p1
    1065/     624 : 01                  		xae 
    1066/     625 : C1 00               		ld 		(p1) 											; read modifier
    1067/     627 : 02                  		ccl
    1068/     628 : F2 FD               		add 	-3(p2) 											; add the modifying value to it.
    1069/     62A : C9 00               		st 		(p1) 											; write modifier.
    1070/     62C : 40                  		lde 													; restore current address to P1.L
    1071/     62D : 31                  		xpal 	p1
    1072/     62E : 90 81               		jmp 	__GPASkip 										; go back to skip over.
    1073/     630 :                     
    1074/     630 :                     __GPAExitFail:
    1075/     630 : 02                  		ccl 													; carry clear, e.g. nothing read in / error.
    1076/     631 :                     __GPAExit:
    1077/     631 : 3F                  		xppc 	p3
    1078/     632 :                     
    1079/     632 :                     ; ****************************************************************************************************************
    1080/     632 :                     ;
    1081/     632 :                     ;		Store parameter value in P1 in the current address, if CS. Falls through.
    1082/     632 :                     ;
    1083/     632 :                     ; ****************************************************************************************************************
    1084/     632 :                     
    1085/     632 :                     UpdateCurrentAddress:
    1086/     632 : 06                  		csa 													; get status reg
    1087/     633 : 94 0C               		jp 		__UCAExit 										; if carry flag clear then exit.
    1088/     635 :                     
    1089/     635 : C4 19               		ldi 	current & 255 									; current address to P1.L, acquired address to E
    1090/     637 : 31                  		xpal 	p1
    1091/     638 : 01                  		xae
    1092/     639 : C4 0C               		ldi 	current / 256 									; current address to P1.H, acquired to A
    1093/     63B : 35                  		xpah 	p1
    1094/     63C : C9 01               		st 		1(p1) 											; store address back
    1095/     63E : 40                  		lde
    1096/     63F : C9 00               		st 		0(p1)
    1097/     641 :                     __UCAExit:
    1098/     641 : 3F                  		xppc 	p3
    1099/     642 :                     
    1100/     642 :                     ; ****************************************************************************************************************
    1101/     642 :                     ;
    1102/     642 :                     ;		Get current address into P1.
    1103/     642 :                     ;
    1104/     642 :                     ; ****************************************************************************************************************
    1105/     642 :                     
    1106/     642 :                     GetCurrentAddress:
    1107/     642 : C4 0C               		ldi 	current/256 									; current address ptr in P1
    1108/     644 : 35                  		xpah 	p1
    1109/     645 : C4 19               		ldi 	current&255
    1110/     647 : 31                  		xpal 	p1
    1111/     648 : C1 00               		ld 		0(p1) 											; low byte to E
 AS V1.42 Beta [Bld 102] - source file monitor.asm - page 25 - 12/1/2015 9:13:55


    1112/     64A : 01                  		xae
    1113/     64B : C1 01               		ld 		1(p1) 											; high byte to A
    1114/     64D : 35                  		xpah 	p1 												; then to P1.H
    1115/     64E : 40                  		lde 													; low byte to P1.L
    1116/     64F : 31                  		xpal 	p1 
    1117/     650 : 3F                  		xppc 	p3
    1118/     651 :                     
    1119/     651 :                     ; ****************************************************************************************************************
    1120/     651 :                     ;
    1121/     651 :                     ;											List of commands and Jump Table
    1122/     651 :                     ;
    1123/     651 :                     ; ****************************************************************************************************************
    1124/     651 :                     
    1125/     651 :                     		include commands.inc 									; must be at the end, so the command table is in
(1)    1/     747 :                             org 0x0747
(1)    2/     747 :                     ;
(1)    3/     747 :                     ; 	This file is generated automatically by gencommands.py
(1)    4/     747 :                     ;
(1)    5/     747 :                     __CommandList:
(1)    6/     747 : 94 21                       dw    0x2194 ; HLT
(1)    7/     749 : 00                          db    0x00
(1)    8/     74A : 25 60                       dw    0x6025 ; XAE
(1)    9/     74C : 01                          db    0x01
(1)   10/     74D : 6C 0C                       dw    0x0c6c ; CCL
(1)   11/     74F : 02                          db    0x02
(1)   12/     750 : 6C 4C                       dw    0x4c6c ; SCL
(1)   13/     752 : 03                          db    0x03
(1)   14/     753 : 2E 11                       dw    0x112e ; DIN
(1)   15/     755 : 04                          db    0x04
(1)   16/     756 : AE 24                       dw    0x24ae ; IEN
(1)   17/     758 : 05                          db    0x05
(1)   18/     759 : 61 0E                       dw    0x0e61 ; CSA
(1)   19/     75B : 06                          db    0x06
(1)   20/     75C : 33 0C                       dw    0x0c33 ; CAS
(1)   21/     75E : 07                          db    0x07
(1)   22/     75F : F0 39                       dw    0x39f0 ; NOP
(1)   23/     761 : 08                          db    0x08
(1)   24/     762 : 2F 4D                       dw    0x4d2f ; SIO
(1)   25/     764 : 19                          db    0x19
(1)   26/     765 : 72 02                       dw    0x0272 ; SR
(1)   27/     767 : 1C                          db    0x1c
(1)   28/     768 : 4C 4E                       dw    0x4e4c ; SRL
(1)   29/     76A : 1D                          db    0x1d
(1)   30/     76B : 52 02                       dw    0x0252 ; RR
(1)   31/     76D : 1E                          db    0x1e
(1)   32/     76E : 4C 4A                       dw    0x4a4c ; RRL
(1)   33/     770 : 1F                          db    0x1f
(1)   34/     771 : 0D 00                       dw    0x000d ; M
(1)   35/     773 : 20                          db    0x20
(1)   36/     774 : 01 00                       dw    0x0001 ; A
(1)   37/     776 : 21                          db    0x21
(1)   38/     777 : 07 00                       dw    0x0007 ; G
(1)   39/     779 : 22                          db    0x22
(1)   40/     77A : B4 42                       dw    0x42b4 ; PUT
(1)   41/     77C : 23                          db    0x23
(1)   42/     77D : B4 1C                       dw    0x1cb4 ; GET
(1)   43/     77F : 24                          db    0x24
(1)   44/     780 : 03 00                       dw    0x0003 ; C
(1)   45/     782 : 25                          db    0x25
(1)   46/     783 : 02 00                       dw    0x0002 ; B
 AS V1.42 Beta [Bld 102] - source file monitor.asm(commands.inc) - page 26 - 12/1/2015 9:13:55


(1)   47/     785 : 26                          db    0x26
(1)   48/     786 : 0C 00                       dw    0x000c ; L
(1)   49/     788 : 27                          db    0x27
(1)   50/     789 : 04 00                       dw    0x0004 ; D
(1)   51/     78B : 28                          db    0x28
(1)   52/     78C : 0C 62                       dw    0x620c ; XPL
(1)   53/     78E : 30                          db    0x30
(1)   54/     78F : 08 62                       dw    0x6208 ; XPH
(1)   55/     791 : 34                          db    0x34
(1)   56/     792 : 03 62                       dw    0x6203 ; XPC
(1)   57/     794 : 3C                          db    0x3c
(1)   58/     795 : 85 30                       dw    0x3085 ; LDE
(1)   59/     797 : 40                          db    0x40
(1)   60/     798 : C5 05                       dw    0x05c5 ; ANE
(1)   61/     79A : 50                          db    0x50
(1)   62/     79B : 45 3E                       dw    0x3e45 ; ORE
(1)   63/     79D : 58                          db    0x58
(1)   64/     79E : 45 62                       dw    0x6245 ; XRE
(1)   65/     7A0 : 60                          db    0x60
(1)   66/     7A1 : 25 10                       dw    0x1025 ; DAE
(1)   67/     7A3 : 68                          db    0x68
(1)   68/     7A4 : 85 04                       dw    0x0485 ; ADE
(1)   69/     7A6 : 70                          db    0x70
(1)   70/     7A7 : 25 0C                       dw    0x0c25 ; CAE
(1)   71/     7A9 : 78                          db    0x78
(1)   72/     7AA : 99 11                       dw    0x1199 ; DLY
(1)   73/     7AC : 8F                          db    0x8f
(1)   74/     7AD : B0 29                       dw    0x29b0 ; JMP
(1)   75/     7AF : 90                          db    0x90
(1)   76/     7B0 : 50 01                       dw    0x0150 ; JP
(1)   77/     7B2 : 94                          db    0x94
(1)   78/     7B3 : 5A 01                       dw    0x015a ; JZ
(1)   79/     7B5 : 98                          db    0x98
(1)   80/     7B6 : DA 29                       dw    0x29da ; JNZ
(1)   81/     7B8 : 9C                          db    0x9c
(1)   82/     7B9 : 84 25                       dw    0x2584 ; ILD
(1)   83/     7BB : A8                          db    0xa8
(1)   84/     7BC : 84 11                       dw    0x1184 ; DLD
(1)   85/     7BE : B8                          db    0xb8
(1)   86/     7BF : 84 01                       dw    0x0184 ; LD
(1)   87/     7C1 : C0                          db    0xc0
(1)   88/     7C2 : 89 30                       dw    0x3089 ; LDI
(1)   89/     7C4 : C4                          db    0xc4
(1)   90/     7C5 : 74 02                       dw    0x0274 ; ST
(1)   91/     7C7 : C8                          db    0xc8
(1)   92/     7C8 : C4 05                       dw    0x05c4 ; AND
(1)   93/     7CA : D0                          db    0xd0
(1)   94/     7CB : C9 05                       dw    0x05c9 ; ANI
(1)   95/     7CD : D4                          db    0xd4
(1)   96/     7CE : F2 01                       dw    0x01f2 ; OR
(1)   97/     7D0 : D8                          db    0xd8
(1)   98/     7D1 : 49 3E                       dw    0x3e49 ; ORI
(1)   99/     7D3 : DC                          db    0xdc
(1)  100/     7D4 : F2 61                       dw    0x61f2 ; XOR
(1)  101/     7D6 : E0                          db    0xe0
(1)  102/     7D7 : 49 62                       dw    0x6249 ; XRI
(1)  103/     7D9 : E4                          db    0xe4
(1)  104/     7DA : 24 10                       dw    0x1024 ; DAD
(1)  105/     7DC : E8                          db    0xe8
(1)  106/     7DD : 29 10                       dw    0x1029 ; DAI
 AS V1.42 Beta [Bld 102] - source file monitor.asm(commands.inc) - page 27 - 12/1/2015 9:13:55


(1)  107/     7DF : EC                          db    0xec
(1)  108/     7E0 : 84 04                       dw    0x0484 ; ADD
(1)  109/     7E2 : F0                          db    0xf0
(1)  110/     7E3 : 89 04                       dw    0x0489 ; ADI
(1)  111/     7E5 : F4                          db    0xf4
(1)  112/     7E6 : 24 0C                       dw    0x0c24 ; CAD
(1)  113/     7E8 : F8                          db    0xf8
(1)  114/     7E9 : 29 0C                       dw    0x0c29 ; CAI
(1)  115/     7EB : FC                          db    0xfc
(1)  116/     7EC :                     __CommandListEnd:
(1)  117/     7EC : 00 00                       dw    0x0000 ; End Marker	
(1)  118/     7EE :                     
(1)  119/     7EE :                     __CommandTable:
(1)  120/     7EE : B6 03                       dw    MemoryDump_Command
(1)  121/     7F0 : FF 02                       dw    Address_Command
(1)  122/     7F2 : 12 03                       dw    Go_Command
(1)  123/     7F4 : 1F 03                       dw    PutTape_Command
(1)  124/     7F6 : 70 03                       dw    LoadTape_Command
(1)  125/     7F8 : 62 01                       dw    ClearScreen_Command
(1)  126/     7FA : E0 03                       dw    EnterBytes_Command
(1)  127/     7FC : 98 03                       dw    Label_Command
(1)  128/     7FE : 02 04                       dw    Disassemble_Command
(1)  129/     800 :                     
    1126/     800 :                     																; the same page.
    1127/     800 :                     
    1128/     800 :                     ; ****************************************************************************************************************
    1129/     800 :                     ;
    1130/     800 :                     ;													Tape Format. 
    1131/     800 :                     ;
    1132/     800 :                     ; ****************************************************************************************************************
    1133/     800 :                     ;
    1134/     800 :                     ;		1 x start bit 		'1' value is held for period of time.
    1135/     800 :                     ;		8 x data bits  		'0 or 1' value is held for a period of time.
    1136/     800 :                     ;		1 x continuation	'0' if another bit follows, '1' if end.
    1137/     800 :                     ;		at least 2 bit times between bytes.
    1138/     800 :                     ;
    1139/     800 :                     ;		Use DLY 4 with A = 0 (DLY 6 to skip half-start)
    1140/     800 :                     ; 		= 13 + 2 * 0 + 514 * 4 microcycles
    1141/     800 :                     ;		= 2,069 microcycles
    1142/     800 :                     ;	
    1143/     800 :                     ;		which is about 240 bits per second.
    1144/     800 :                     ;
    1145/     800 :                     ; ****************************************************************************************************************
    1146/     800 :                     ;
    1147/     800 :                     ;												Monitor Commands
    1148/     800 :                     ;
    1149/     800 :                     ; ****************************************************************************************************************
    1150/     800 :                     ;
    1151/     800 :                     ;		A [aaaa] 			Set current address to aaaa
    1152/     800 :                     ;		B [cc] [dd] [ee]..	Fill memory from current address
    1153/     800 :                     ; 		C 					Clear screen
    1154/     800 :                     ;		D [aaaa] 			Disassemble from aaaa
    1155/     800 :                     ;		G aaaa 				Run from address - address must be given - return with XPPC P3
    1156/     800 :                     ; 		L n 				Set label n to the current address (up to 32 labels 00-1F)
    1157/     800 :                     ; 		M [aaaa] 			Memory dump from current address/aaaa (6 lines, 4 bytes per line)
    1158/     800 :                     ; 		GET [aaaa] 			Load tape to current address/aaa
    1159/     800 :                     ;		PUT [nnnn]			Write nnnn bytes from current address onwards to tape.
    1160/     800 :                     ;
    1161/     800 :                     ;		Command Line Assembler
    1162/     800 :                     ;
 AS V1.42 Beta [Bld 102] - source file monitor.asm - page 28 - 12/1/2015 9:13:55


    1163/     800 :                     ;		Standard SC/MP mnemonics, except for XPAH, XPAL, XPPC, HALT and DINT which are XPH XPL XPC HLT DIN
    1164/     800 :                     ;		respectively (4 character mnemonics not supported)
    1165/     800 :                     ;
    1166/     800 :                     ;		Address modes are written as such:
    1167/     800 :                     ;
    1168/     800 :                     ;		Direct:			LD 	address 					(offset auto calculated, also for jump)
    1169/     800 :                     ;		Indexed:		LD  P1 7 						(normally ld 7(p1))
    1170/     800 :                     ;		Immediate:		DLY 42 					
    1171/     800 :                     ;		AutoIndexed:	LD @P1 4 						(normally ld @4(p1))
    1172/     800 :                     ;
    1173/     800 :                     ;		Labels are accessed via the pling, so to jump to label 4 rather than address 4 you write
    1174/     800 :                     ;
    1175/     800 :                     ;		JMP 4!
    1176/     800 :                     ;
    1177/     800 :                     ;		Documentation of the Mathematics functions are in the included file maths.asm
    1178/     800 :                     ;
    1179/     800 :                     ; ****************************************************************************************************************
    1180/     800 :                     
 AS V1.42 Beta [Bld 102] - source file monitor.asm - page 29 - 12/1/2015 9:13:55


  symbol table (* = unused):
  ------------------------

 ADDRESS_COMMAND :              2FF C |  AHI [SCMPMULTIPLY] :             3 - |
 ALO [SCMPMULTIPLY] :             2 - | *ARCHITECTURE :  i386-unknown-win32 - |
 BHI [SCMPMULTIPLY] :             1 - | *BIGENDIAN :                      0 - |
 BITHI [SCMPDIVIDE] :                                      FFFFFFFFFFFFFFFF - |
 BITLO [SCMPDIVIDE] :                                      FFFFFFFFFFFFFFFE - |
 BLO [SCMPMULTIPLY] :             0 - |  BOOTMONITOR :                  148 C |
*BRANCHEXT :                      0 - | *CASESENSITIVE :                  0 - |
 CLEARSCREENLOOP :              167 C |  CLEARSCREEN_COMMAND :          162 C |
 CODESTART :                    C2E - |  COMMANDMAINLOOP :              1AE C |
*CONSTPI :        3.141592653589793 - |  CURRENT :                      C19 - |
 CURSOR :                       C18 - | *DATE :                   12/1/2015 - |
 DENOMINATORHI [SCMPDIVIDE] :     1 - |  DENOMINATORLO [SCMPDIVIDE] :     0 - |
 DISASSEMBLE_COMMAND :          402 C |  ENTERBYTES_COMMAND :           3E0 C |
 ETEMP [SCMPDIVIDE] :                                      FFFFFFFFFFFFFFF8 - |
 EXTRACT5BIT :                  219 C | *FALSE :                          0 - |
 FINDTOPMEMORY :                15A C | *FULLPMMU :                       1 - |
*GETCURRENTADDRESS :            642 C |  GETPARAMETER :                 5A2 C |
 GOBOOT :                         5 C |  GO_COMMAND :                   312 C |
*HAS64 :                          1 - | *HASDSP :                         0 - |
*HASFPU :                         0 - | *HASPMMU :                        0 - |
*INEXTMODE :                      0 - | *INLWORDMODE :                    0 - |
*INMAXMODE :                      0 - | *INSRCMODE :                      0 - |
*INSUPMODE :                      0 - |  ISINIT :                       C1B - |
 KBDBUFFER :                    C1E - |  KBDBUFFERLN :                   10 - |
 KEYBOARDLOOP :                 1C3 C |  LABELCOUNT :                    18 - |
 LABELS :                       C00 - |  LABEL_COMMAND :                398 C |
*LISTON :                         1 - |  LOADTAPE_COMMAND :             370 C |
*MACEXP :                         1 - |  MATHS :                          C C |
 MATH_ADD :                      1F C |  MATH_DIVIDE :                   87 C |
 MATH_EXIT :                     1D C |  MATH_EXIT1 :                    85 C |
 MATH_MULTIPLY :                 41 C |  MATH_SUBTRACT :                 2F C |
 MEMORYDUMP_COMMAND :           3B6 C |  MESSAGE :                      19E C |
 MESSAGELOOP :                  197 C |  MODIFIER :                     C1D - |
*MOMCPU :                         C - | *MOMCPUNAME :                 SC/MP - |
*NESTMAX :                      100 - |  NUMERATORHI [SCMPDIVIDE] :       3 - |
 NUMERATORLO [SCMPDIVIDE] :       2 - | *PACKING :                        0 - |
*PADDING :                        1 - |  PARPOSN :                      C1C - |
 PRINTADDRESSDATA :             56F C |  PRINTCHARACTER :               502 C |
 PRINTHEXBYTE :                 4CF C |  PUTTAPE_COMMAND :              31F C |
 QUOTIENTHI [SCMPDIVIDE] :                                 FFFFFFFFFFFFFFFD - |
 QUOTIENTLO [SCMPDIVIDE] :                                 FFFFFFFFFFFFFFFC - |
*RELAXED :                        0 - |
 REMAINDERHI [SCMPDIVIDE] :                                FFFFFFFFFFFFFFFB - |
 REMAINDERLO [SCMPDIVIDE] :                                FFFFFFFFFFFFFFFA - |
 RESULTHI [SCMPMULTIPLY] :                                 FFFFFFFFFFFFFFFF - |
 RESULTLO [SCMPMULTIPLY] :                                 FFFFFFFFFFFFFFFE - |
 SIGNCOUNT [SCMPDIVIDE] :                                  FFFFFFFFFFFFFFF9 - |
 TAPEDELAY :                      4 - | *TIME :                     9:13:55 - |
*TRUE :                           1 - | *UPDATECURRENTADDRESS :         632 C |
 VARBASE :                      C18 - | *VERSION :                     142F - |
 _KBDWAITKEY :                  1CC C |  _KBDWAITRELEASE :              1C6 C |
 _PADLOOP :                     58F C |  _PADPRINT :                    59C C |
 _PUTTAPEBIT :                  34F C |  _PUTTAPEBYTE :                 33A C |
 _PUTTAPELEADER :               334 C |  __ASMCONTINUE :                2BD C |
 __ASMEXIT :                    2F5 C |  __ASMNOPARAMETER :             2B5 C |
 __ASSEMBLER :                  286 C |  __BOOTMONITOR :                152 C |
 __CMDMAINLOOP1 :               20A C |  __CMDMAINLOOP2 :               30B C |
 AS V1.42 Beta [Bld 102] - source file monitor.asm - page 30 - 12/1/2015 9:13:55


 __CMDMAINLOOP3 :               31D C |  __CMDMAINLOOP4 :               36C C |
 __CMDMAINLOOP5 :               396 C |  __CMDMAINLOOP6 :               3DE C |
 __CMDMAINLOOP7 :               44A C |  __CMDPARAMETERFAIL :           303 C |
 __CMDPARAMETERFAIL1 :          36E C |  __COMMANDERROR :               27C C |
 __COMMANDLIST :                747 C |  __COMMANDLISTEND :             7EC C |
 __COMMANDTABLE :               7EE C |  __DASSFINDOPCODE :             431 C |
 __DASSFOUNDOPCODE :            44C C |  __DASSLOOP :                   408 C |
 __DASSLOOP2 :                  448 C |  __DASSNEXT :                   4A6 C |
 __DASSNEXTOPCODE :             444 C |  __DASSNOOPERAND :              427 C |
 __DASSNOTAUTOINDEXED :         4C3 C |  __DASSNOTIMMEDIATE :           458 C |
 __DASSPRINTMNEMONIC :          46D C |  __DASSPRINTMODIFIER :          4B7 C |
 __DASSPRINTOPERAND :           498 C |  __DASSSHIFTENCODE :            47D C |
 __DASSSKIPSPACE :              479 C |  __DCLOOP :                     3BC C |
 __DIVIDECOMPLETE [SCMPDIVIDE] : 11D C |
 __DIVIDECONTINUE [SCMPDIVIDE] : F0 C |  __DIVIDEEXIT [SCMPDIVIDE] :    10A C |
 __DIVIDELOOP [SCMPDIVIDE] :     C7 C |
 __DIVIDENOINCREMAINDER [SCMPDIVIDE] :                                   E4 C |
 __DIVIDENOTSIGNED [SCMPDIVIDE] : BD C |
 __DIVIDEREMAINDERGREATER [SCMPDIVIDE] :                                135 C |
 __DIVIDEUNSIGNLOOP [SCMPDIVIDE] :                                       A5 C |
 __EX5SHIFT :                   224 C |  __EXTRACTEND :                 23A C |
 __FINDCOMMANDLOOP :            245 C |  __GETTAPEBITS :                386 C |
 __GETTAPEWAIT :                376 C |  __GPAADJUSTMODIFIER :          61F C |
 __GPAATMODIFIER :              61D C |  __GPAEXIT :                    631 C |
 __GPAEXITFAIL :                630 C |  __GPAFOUNDHEX :                5D8 C |
 __GPANEXTCHARACTER :           5C3 C |  __GPAPOINTERMODIFIER :         60F C |
 __GPASHIFT :                   5E2 C |  __GPASKIP :                    5B1 C |
 __KBDBACKSPACE :               1FE C |  __KBDEXIT :                    20C C |
 __KBDNOTLOWER :                1F2 C |  __MATH_EXIT2 [SCMPDIVIDE] :     C5 C |
 __MULTIPLYEXIT [SCMPMULTIPLY] : 7A C |  __MULTIPLYLOOP [SCMPMULTIPLY] : 47 C |
 __MULTIPLYNOADD [SCMPMULTIPLY] : 60 C |
 __PCBACKSPACE :                557 C |  __PCBLANKNEWLINE :             533 C |
 __PCBLANKNEWLINELOOP :         537 C |  __PCEXIT :                     53F C |
 __PCNEWLINE :                  563 C |  __PHBNOSPACE :                 4E1 C |
 __UCAEXIT :                    641 C |

    165 symbols
     30 unused symbols

 AS V1.42 Beta [Bld 102] - source file monitor.asm - page 31 - 12/1/2015 9:13:55


  defined macros:
  ---------------

SHIFTLEFT                             | SHIFTRIGHT                           

      2 macros

 AS V1.42 Beta [Bld 102] - source file monitor.asm - page 32 - 12/1/2015 9:13:55


  codepages:
  ----------

STANDARD (0 changed characters)


0.01 seconds assembly time

   1601 lines source file
   1636 lines incl. macro expansions
      2 passes
      0 errors
      0 warnings
