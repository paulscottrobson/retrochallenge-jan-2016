 AS V1.42 Beta [Bld 102] - source file monitor.asm - page 1 - 11/29/2015 14:39:47


       1/       0 :                     ; ******************************************************************************************************************
       2/       0 :                     ; ******************************************************************************************************************
       3/       0 :                     ; ******************************************************************************************************************
       4/       0 :                     ;
       5/       0 :                     ;												Machine Language Monitor
       6/       0 :                     ;
       7/       0 :                     ; ******************************************************************************************************************
       8/       0 :                     ; ******************************************************************************************************************
       9/       0 :                     ; ******************************************************************************************************************
      10/       0 :                     
      11/       0 :                     ; TODO: 
      12/       0 :                     ;		Make parameter evaluator use labels.
      13/       0 :                     ; 		Disassembler (if space available)
      14/       0 :                     ; 		16 bit maths (if space available)
      15/       0 :                     
      16/       0 :                     		cpu	sc/mp
      17/       0 :                     
      18/       0 : =0xC00              labels 		= 0xC00												; labels, 1 byte each
      19/       0 : =0x10               labelCount 	= 16 												; number of labels.
      20/       0 :                     
      21/       0 : =0xC10              varBase 	= labels+labelCount 								; variables after labels start here.
      22/       0 :                     
      23/       0 : =0xC10              cursor 		= varBase 											; cursor position
      24/       0 : =0xC11              current 	= varBase+1 										; current address (lo,hi)
      25/       0 : =0xC13              parPosn		= varBase+3 										; current param offset in buffer (low addr)
      26/       0 : =0xC14              modifier  	= varBase+4 										; instruction modifier (@,Pn)
      27/       0 : =0xC15              kbdBuffer 	= varBase+5 										; 16 character keyboard buffer
      28/       0 : =0x10               kbdBufferLn = 16 										
      29/       0 :                     
      30/       0 : =0xC25              codeStart 	= kbdBuffer+kbdBufferLn								; code starts here.
      31/       0 :                     
      32/       0 : =0x4                tapeDelay 	= 4 												; DLY parameter for 1 tape bit width.
      33/       0 :                     																; (smaller = faster tape I/O)
      34/       0 :                     
      35/       0 :                     		org 	0x0000
      36/       0 : 08                  		nop
      37/       1 :                     
      38/       1 :                     ; ******************************************************************************************************************
      39/       1 :                     ;
      40/       1 :                     ;									Find Top of Memory to initialise the stack.
      41/       1 :                     ;
      42/       1 :                     ; ******************************************************************************************************************
      43/       1 :                     
      44/       1 : C4 0F               		ldi 	0x0F 											; point P2 to theoretical top of RAM on basic m/c
      45/       3 : 36                  		xpah 	p2 												; e.g. 0xFFF
      46/       4 : C4 FF               		ldi 	0xFF 											; ideally you'd make this 0x003F and remove the ld
      47/       6 : 32                  		xpal 	p2 												; but the emulators don't do 4+12 math. Only matters here.
      48/       7 : C6 40               		ld 		@64(p2) 										; fix the predecrement (wrap around not emulated)
      49/       9 :                     FindTopMemory:
      50/       9 : C4 A5               		ldi 	0xA5 											; try to write this to memory
      51/       B : CE C0               		st 		@-64(p2) 										; predecrementing by 64.
      52/       D : E2 00               		xor 	(p2) 											; did it write correctly.
      53/       F : 9C F8               		jnz 	FindTopMemory 									; now P2 points to top of memory.
      54/      11 :                     
      55/      11 :                     ; ******************************************************************************************************************
      56/      11 :                     ;
      57/      11 :                     ;									Reset cursor position and current address.
      58/      11 :                     ;
      59/      11 :                     ; ******************************************************************************************************************
      60/      11 :                     
 AS V1.42 Beta [Bld 102] - source file monitor.asm - page 2 - 11/29/2015 14:39:47


      61/      11 : C4 0C               		ldi 	Current/256 									; set P1 to current address
      62/      13 : 35                  		xpah 	p1
      63/      14 : C4 11               		ldi 	Current&255
      64/      16 : 31                  		xpal 	p1
      65/      17 : C4 25               		ldi 	codeStart & 255 								; reset current address to code start
      66/      19 : CD 01               		st 		@1(p1)
      67/      1B : C4 0C               		ldi 	codeStart / 256
      68/      1D : CD 00               		st 		@(p1)
      69/      1F :                     
      70/      1F :                     ; ******************************************************************************************************************
      71/      1F :                     ;
      72/      1F :                     ;												Clear the screen
      73/      1F :                     ;
      74/      1F :                     ; ******************************************************************************************************************
      75/      1F :                     
      76/      1F :                     ClearScreen_Command:
      77/      1F : C4 00               		ldi 	0
      78/      21 : 35                  		xpah 	p1
      79/      22 : C4 00               		ldi 	0
      80/      24 :                     ClearScreenLoop:
      81/      24 : 31                  		xpal 	p1												; clear screen
      82/      25 : C4 20               		ldi 	' '
      83/      27 : CD 01               		st 		@1(p1)
      84/      29 : 31                  		xpal 	p1
      85/      2A : 94 F8               		jp 		ClearScreenLoop
      86/      2C : C4 0C               		ldi 	Cursor/256 										; reset the cursor position to TOS
      87/      2E : 35                  		xpah 	p1
      88/      2F : C4 10               		ldi 	Cursor&255
      89/      31 : 31                  		xpal 	p1 
      90/      32 : C4 00               		ldi 	0
      91/      34 : C9 00               		st 		0(p1)											
      92/      36 :                     
      93/      36 :                     ; ****************************************************************************************************************
      94/      36 :                     ;
      95/      36 :                     ;													Main Loop
      96/      36 :                     ;
      97/      36 :                     ; ****************************************************************************************************************
      98/      36 :                     
      99/      36 :                     CommandMainLoop:
     100/      36 : C4 03               		ldi 	(PrintAddressData-1)/256						; print Address and Data there
     101/      38 : 37                  		xpah 	p3
     102/      39 : C4 09               		ldi 	(PrintAddressData-1)&255
     103/      3B : 33                  		xpal 	p3
     104/      3C : C4 00               		ldi 	0
     105/      3E : 3F                  		xppc 	p3
     106/      3F :                     
     107/      3F : C4 02               		ldi 	(PrintCharacter-1)/256 							; set P3 = print character.
     108/      41 : 37                  		xpah 	p3
     109/      42 : C4 9C               		ldi 	(PrintCharacter-1)&255
     110/      44 : 33                  		xpal 	p3
     111/      45 : C4 5D               		ldi 	']'												; print the prompt.
     112/      47 : 3F                  		xppc 	p3
     113/      48 :                     
     114/      48 :                     ; ****************************************************************************************************************
     115/      48 :                     ;
     116/      48 :                     ;											Keyboard Line Input
     117/      48 :                     ;
     118/      48 :                     ; ****************************************************************************************************************
     119/      48 :                     
     120/      48 : C4 00               		ldi 	0 												; set E = character position.
 AS V1.42 Beta [Bld 102] - source file monitor.asm - page 3 - 11/29/2015 14:39:47


     121/      4A : 01                  		xae 
     122/      4B :                     KeyboardLoop:
     123/      4B : C4 08               		ldi 	0x8 											; set P1 to point to keyboard latch
     124/      4D : 35                  		xpah 	p1
     125/      4E :                     _KBDWaitRelease:
     126/      4E : C1 00               		ld 		0(p1) 											; wait for strobe to clear
     127/      50 : 94 02               		jp 		_KBDWaitKey
     128/      52 : 90 FA               		jmp 	_KBDWaitRelease
     129/      54 :                     _KBDWaitKey:
     130/      54 : C1 00               		ld 		0(p1) 											; wait for strobe, i.e. new key
     131/      56 : 94 FC               		jp 		_KBDWaitKey
     132/      58 : D4 7F               		ani 	0x7F 											; throw away bit 7
     133/      5A : CA FF               		st 		-1(p2) 											; save key.
     134/      5C :                     
     135/      5C : C4 0C               		ldi 	kbdBuffer/256 									; set P1 = keyboard buffer
     136/      5E : 35                  		xpah 	p1
     137/      5F : C4 15               		ldi 	kbdBuffer&255
     138/      61 : 31                  		xpal 	p1		
     139/      62 :                     
     140/      62 : C2 FF               		ld 		-1(p2) 											; read key
     141/      64 : E4 08               		xri 	8 												; is it backspace
     142/      66 : 98 1E               		jz 		__KBDBackSpace
     143/      68 : E4 05               		xri 	8!13 											; is it CR, then exit
     144/      6A : 98 28               		jz 		__KBDExit
     145/      6C :                     
     146/      6C : 40                  		lde 													; have we a full buffer.
     147/      6D : E4 10               		xri 	kbdBufferLn 									; if so, ignore the key.
     148/      6F : 98 DA               		jz 		KeyboardLoop
     149/      71 :                     
     150/      71 : C2 FF               		ld 		-1(p2) 											; restore the key.
     151/      73 : 02                  		ccl
     152/      74 : F4 20               		adi 	0x20											; will make lower case -ve
     153/      76 : 94 02               		jp 		__KBDNotLower
     154/      78 : FC 20               		cai 	0x20 											; capitalise
     155/      7A :                     __KBDNotLower:
     156/      7A : F4 E0               		adi 	0xE0 											; fix up.
     157/      7C : C9 80               		st 		-0x80(p1) 										; save in the buffer using E as index.
     158/      7E : 3F                  		xppc 	p3 												; print the character
     159/      7F : 01                  		xae 													; increment E
     160/      80 : 02                  		ccl
     161/      81 : F4 01               		adi 	1
     162/      83 : 01                  		xae
     163/      84 : 90 C5               		jmp 	KeyboardLoop 									; and get the next key.
     164/      86 :                     
     165/      86 :                     __KBDBackSpace:
     166/      86 : 40                  		lde 													; get position
     167/      87 : 98 C2               		jz 		KeyboardLoop 									; can't go back if at beginning
     168/      89 : 03                  		scl 													; go back 1 from E
     169/      8A : FC 01               		cai 	1
     170/      8C : 01                  		xae 
     171/      8D : C4 08               		ldi 	8 												; print a backspace
     172/      8F : 3F                  		xppc 	p3
     173/      90 : 90 B9               		jmp 	KeyboardLoop 									; and go round again.
     174/      92 :                     
     175/      92 :                     __CmdMainLoop1:
     176/      92 : 90 A2               		jmp 	CommandMainLoop
     177/      94 :                     
     178/      94 :                     __KBDExit:
     179/      94 : C9 80               		st 		-0x80(p1) 										; add the ASCIIZ terminator.
     180/      96 : C4 0D               		ldi 	13												; print a new line.
 AS V1.42 Beta [Bld 102] - source file monitor.asm - page 4 - 11/29/2015 14:39:47


     181/      98 : 3F                  		xppc 	p3
     182/      99 :                     
     183/      99 :                     ; ****************************************************************************************************************
     184/      99 :                     ;
     185/      99 :                     ;						Extract the 5 bit 3 letter (max command value). P1 points to buffer
     186/      99 :                     ;
     187/      99 :                     ; ****************************************************************************************************************
     188/      99 :                     
     189/      99 : C4 00               		ldi 	0
     190/      9B : 01                  		xae 													; E contains the LSB of the 5 bit shift
     191/      9C : 40                  		lde 	
     192/      9D : CA FF               		st 		-1(p2) 											; -1(P2) contains the MSB
     193/      9F : C9 FF               		st 		modifier-kbdBuffer(p1)							; clear the modifier.
     194/      A1 :                     Extract5Bit:
     195/      A1 : C1 00               		ld 		(p1) 											; look at character
     196/      A3 : 02                  		ccl 													; add 128-65, will be +ve if < 64
     197/      A4 : F4 3F               		adi 	128-65
     198/      A6 : 94 1A               		jp 		__ExtractEnd
     199/      A8 : C4 05               		ldi 	5 												; shift current value left 5 times using -2(p2)
     200/      AA : CA FE               		st 		-2(p2)
     201/      AC :                     __Ex5Shift:
     202/      AC : 40                  		lde 													; shift E left into CY/L
     203/      AD : 02                  		ccl
     204/      AE : 70                  		ade 
     205/      AF : 01                  		xae
     206/      B0 : C2 FF               		ld 		-1(p2) 											; shift CY/L into -1(p2) and carry/link
     207/      B2 : F2 FF               		add 	-1(p2)
     208/      B4 : CA FF               		st 		-1(p2)
     209/      B6 : BA FE               		dld 	-2(p2) 											; done it 5 times ?
     210/      B8 : 9C F2               		jnz 	__Ex5Shift
     211/      BA : C5 01               		ld 		@1(p1) 											; re-read character.
     212/      BC : D4 1F               		ani 	0x1F 											; lower 5 bits only.
     213/      BE : 58                  		ore 													; OR into E
     214/      BF : 01                  		xae
     215/      C0 : 90 DF               		jmp 	Extract5Bit 									; go and get the next one.
     216/      C2 :                     
     217/      C2 :                     __ExtractEnd:
     218/      C2 : C4 13               		ldi 	parPosn & 255 									; P1.L = Parameter Position, A = first non cmd char
     219/      C4 : 31                  		xpal	p1
     220/      C5 : C9 00               		st 		(p1) 											; write to parameter position.
     221/      C7 :                     
     222/      C7 :                     ; ****************************************************************************************************************
     223/      C7 :                     ;
     224/      C7 :                     ;						Find command in -1 (P2) (High) E (Low) in Command table
     225/      C7 :                     ;	
     226/      C7 :                     ; ****************************************************************************************************************
     227/      C7 :                     
     228/      C7 : C4 4C               		ldi 	__commandList & 255 							; point P1 to the command list
     229/      C9 : 31                  		xpal 	p1
     230/      CA : C4 07               		ldi 	__commandList / 256 		
     231/      CC : 35                  		xpah 	p1	
     232/      CD :                     __FindCommandLoop:
     233/      CD : C1 00               		ld 		0(p1) 											; reached the end of the table ?
     234/      CF : D9 01               		or 		1(p1)											; which is marked by word 0000
     235/      D1 : 98 31               		jz 		__CommandError
     236/      D3 : C5 03               		ld 		@3(p1) 											; read low byte, and point to next
     237/      D5 : 60                  		xre
     238/      D6 : 9C F5               		jnz 	__FindCommandLoop 								; if different to LSB loop back.
     239/      D8 : C1 FE               		ld 		-2(p1) 											; read the high byte
     240/      DA : E2 FF               		xor 	-1(p2) 											; if different to the MSB loop back.
 AS V1.42 Beta [Bld 102] - source file monitor.asm - page 5 - 11/29/2015 14:39:47


     241/      DC : 9C EF               		jnz 	__FindCommandLoop
     242/      DE :                     
     243/      DE :                     ; ****************************************************************************************************************
     244/      DE :                     ;
     245/      DE :                     ;				Found command, figure out if ASM or Command, if Command go to that routine
     246/      DE :                     ;
     247/      DE :                     ; ****************************************************************************************************************
     248/      DE :                     
     249/      DE : C4 3C               		ldi 	(GetParameter-1) & 255 							; point P3 to the get parameter code.
     250/      E0 : 33                  		xpal 	p3
     251/      E1 : C4 03               		ldi 	(GetParameter-1) / 256
     252/      E3 : 37                  		xpah 	p3
     253/      E4 :                     
     254/      E4 : C1 FF               		ld 		-1(p1) 											; read the operation code.
     255/      E6 : D4 F0               		ani 	0xF0 											; look at the m-s-nibble - commands are 0x20.
     256/      E8 : E4 20               		xri 	0x20
     257/      EA : 9C 22               		jnz 	__Assembler
     258/      EC :                     
     259/      EC : C1 FF               		ld 		-1(p1) 											; re-read it
     260/      EE : 02                  		ccl
     261/      EF : F1 FF               		add 	-1(p1) 											; double it
     262/      F1 : D4 1F               		ani 	0x1F 											; lower 5 bits only.
     263/      F3 : F4 F0               		adi 	__CommandTable & 255 							; make P1 point to the command table entry
     264/      F5 : 31                  		xpal 	p1
     265/      F6 : C4 07               		ldi 	__CommandTable / 256 					
     266/      F8 : 35                  		xpah 	p1
     267/      F9 : C1 00               		ld 		0(p1) 											; read low address
     268/      FB : 01                  		xae
     269/      FC : C1 01               		ld 		1(p1) 											; read high address
     270/      FE : 35                  		xpah 	p1 												; put in P1.H
     271/      FF : 40                  		lde 													; get low address
     272/     100 : 31                  		xpal 	p1 												; put in P1.L
     273/     101 : C5 FF               		ld 		@-1(p1) 										; fix up for the pre-increment
     274/     103 : 3D                  		xppc 	p1 												; and go there.
     275/     104 :                     
     276/     104 :                     __CommandError: 												; unknown command.
     277/     104 : C4 03               		ldi 	3 												; set the beeper on
     278/     106 : 07                  		cas
     279/     107 : 8F FF               		dly 	0xFF 											; short delay
     280/     109 : C4 00               		ldi 	0 												; set the beeper off
     281/     10B : 07                  		cas
     282/     10C : 90 84               		jmp 	__CmdMainLoop1
     283/     10E :                     
     284/     10E :                     ; ****************************************************************************************************************
     285/     10E :                     ;												In line Assembler
     286/     10E :                     ; ****************************************************************************************************************
     287/     10E :                     
     288/     10E :                     __Assembler:
     289/     10E : C1 FF               		ld 		-1(p1) 											; this is the operation code to use.
     290/     110 : CE FF               		st 		@-1(p2) 										; push on the stack.
     291/     112 :                     
     292/     112 : 3F                  		xppc 	p3 												; evaluate (any) parameter if present
     293/     113 : 06                  		csa 													; check carry flag set
     294/     114 : 94 05               		jp 		__ASMNoParameter  								; if clear, no parameter was provided.
     295/     116 :                     
     296/     116 : 31                  		xpal 	p1 												; get the parameter LSB
     297/     117 : CE FF               		st 		@-1(p2) 										; push that on the stack.
     298/     119 : 90 08               		jmp 	__ASMContinue
     299/     11B :                     
     300/     11B :                     __ASMNoParameter:
 AS V1.42 Beta [Bld 102] - source file monitor.asm - page 6 - 11/29/2015 14:39:47


     301/     11B : C2 00               		ld 		(p2) 											; read the pushed operation code
     302/     11D : D4 80               		ani 	0x80 											; is bit 7 set ?
     303/     11F : 9C E3               		jnz 	__CommandError 									; if it is, we need a parameter
     304/     121 : CE FF               		st 		@-1(p2) 										; push zero on the stack as a dummy parameter.
     305/     123 :                     
     306/     123 :                     __ASMContinue:
     307/     123 : C4 0C               		ldi 	Current/256 									; p3 = &Current Address
     308/     125 : 37                  		xpah 	p3
     309/     126 : C4 11               		ldi 	Current&255
     310/     128 : 33                  		xpal 	p3
     311/     129 :                     
     312/     129 : C3 03               		ld 		modifier-Current(p3) 							; get the modifier (e.g. @,Pn etc.)
     313/     12B : 02                  		ccl
     314/     12C : F2 01               		add 	1(p2) 											; add to the opcode and write it back
     315/     12E : CA 01               		st 		1(p2)
     316/     130 :                     
     317/     130 : C3 00               		ld 		(p3) 											; read current address into P1
     318/     132 : 31                  		xpal 	p1
     319/     133 : C3 01               		ld 		1(p3)
     320/     135 : 35                  		xpah 	p1
     321/     136 :                     
     322/     136 : C2 01               		ld 		1(p2) 											; read opcode.
     323/     138 : CD 01               		st 		@1(p1) 											; write out to current address and bump it.
     324/     13A : 94 1F               		jp 		__ASMExit 										; if +ve then no operand byte, exit.
     325/     13C :                     
     326/     13C : C2 00               		ld 		(p2) 											; read the operand byte
     327/     13E : CD 01               		st 		@1(p1) 											; write that out as well.
     328/     140 :                     
     329/     140 : C3 03               		ld 		modifier-Current(p3) 							; look at the modifier 
     330/     142 : 9C 17               		jnz 	__ASMExit 										; if non zero we don't need to do anything P0 = 00
     331/     144 : C2 01               		ld 		1(p2) 											; DLY is a special case
     332/     146 : E4 8F               		xri 	0x8F 											; where the modifier is zero but not PC relative.
     333/     148 : 98 11               		jz 		__ASMExit 												
     334/     14A :                     
     335/     14A : C1 FF               		ld 		-1(p1) 											; read operand
     336/     14C : 02                  		ccl 													; one fewer because we want the current addr+1 low
     337/     14D : FB 00               		cad 	(p3) 											; subtract the current address low.
     338/     14F : C9 FF               		st 		-1(p1) 											; write it back
     339/     151 :                     
     340/     151 : C2 01               		ld 		1(p2) 											; read opcode again
     341/     153 : D4 F0               		ani 	0xF0 											; is it 9x (a JMP command)
     342/     155 : E4 90               		xri 	0x90
     343/     157 : 9C 02               		jnz 	__ASMExit 										; if not, we are done
     344/     159 : B9 FF               		dld 	-1(p1) 											; one fewer because of the pre-increment
     345/     15B :                     __ASMExit:
     346/     15B : 31                  		xpal 	p1 												; write current address back out
     347/     15C : CB 00               		st 		(p3)
     348/     15E : 35                  		xpah 	p1
     349/     15F : CB 01               		st 		1(p3)
     350/     161 : C6 02               		ld 		@2(p2) 											; drop stack values.
     351/     163 :                     
     352/     163 : 90 0C               		jmp 	__CmdMainLoop2 									; back to command loop
     353/     165 :                     
     354/     165 :                     ; ****************************************************************************************************************
     355/     165 :                     ; ****************************************************************************************************************
     356/     165 :                     ;
     357/     165 :                     ;												Commands Section
     358/     165 :                     ;
     359/     165 :                     ; ****************************************************************************************************************
     360/     165 :                     ; ****************************************************************************************************************
 AS V1.42 Beta [Bld 102] - source file monitor.asm - page 7 - 11/29/2015 14:39:47


     361/     165 :                     
     362/     165 :                     ; ****************************************************************************************************************
     363/     165 :                     ;											A : Set Current address
     364/     165 :                     ; ****************************************************************************************************************
     365/     165 :                     
     366/     165 :                     Address_Command:
     367/     165 : 3F                  		xppc 	p3 												; get parameter if exists
     368/     166 : 3F                  		xppc 	p3 												; update current if exists.
     369/     167 : 90 08               		jmp 	__CmdMainLoop2
     370/     169 :                     
     371/     169 :                     __CmdParameterFail:
     372/     169 : C4 02               		ldi 	2 												; set the beeper on
     373/     16B : 07                  		cas
     374/     16C : 8F FF               		dly 	0xFF 											; short delay
     375/     16E : C4 00               		ldi 	0 												; set the beeper off
     376/     170 : 07                  		cas
     377/     171 :                     __CmdMainLoop2:													; and go back to the start.
     378/     171 : C4 35               		ldi 	(CommandMainLoop-1) & 255
     379/     173 : 33                  		xpal 	p3
     380/     174 : C4 00               		ldi 	(CommandMainLoop-1) / 256
     381/     176 : 37                  		xpah 	p3
     382/     177 : 3F                  		xppc 	p3
     383/     178 :                     
     384/     178 :                     ; ****************************************************************************************************************
     385/     178 :                     ;										G : Go (Address must be specified.)
     386/     178 :                     ; ****************************************************************************************************************
     387/     178 :                     
     388/     178 :                     Go_Command:
     389/     178 : 3F                  		xppc 	p3 												; get parameter, which should exist.
     390/     179 : 06                  		csa 													; look at CY/L which is set if it was.
     391/     17A : 94 ED               		jp 		__CmdParameterFail 								; if it is clear, beep an error.
     392/     17C : 31                  		xpal 	p1 												; copy P1 to P3
     393/     17D : 33                  		xpal 	p3
     394/     17E : 35                  		xpah 	p1
     395/     17F : 37                  		xpah 	p3
     396/     180 : C7 FF               		ld 		@-1(p3) 										; fix up for pre increment
     397/     182 : 3F                  		xppc 	p3 												; call the routine.		
     398/     183 :                     __CmdMainLoop3:
     399/     183 : 90 EC               		jmp 	__CmdMainLoop2 									; re-enter monitor.
     400/     185 :                     
     401/     185 :                     ; ****************************************************************************************************************
     402/     185 :                     ;			PUT Write to tape : data mandatory, it is the byte count from the current address.
     403/     185 :                     ; ****************************************************************************************************************
     404/     185 :                     
     405/     185 :                     PutTape_Command:
     406/     185 : 3F                  		xppc 	p3 												; get the bytes to write.
     407/     186 : 06                  		csa 													; if CC, no value was provided
     408/     187 : 94 E0               		jp 		__CmdParameterFail 								; which is an error.
     409/     189 : 31                  		xpal 	p1 												; store low byte count in -1(P2)
     410/     18A : CA FF               		st 		-1(p2)
     411/     18C : 35                  		xpah 	p1 												; store high byte count in -2(P2)
     412/     18D : CA FE               		st 		-2(p2)
     413/     18F : 02                  		ccl 													; skip over the update current address
     414/     190 : 3F                  		xppc 	p3 												; this won't update current address as CY/L = 0
     415/     191 : 3F                  		xppc 	p3 												; and load the current address into P1.
     416/     192 : C4 00               		ldi 	0 												; set the output tape bit low
     417/     194 : 01                  		xae
     418/     195 : 19                  		sio
     419/     196 : C4 20               		ldi 	32 												; tape leader
     420/     198 : CA FD               		st 		-3(p2)
 AS V1.42 Beta [Bld 102] - source file monitor.asm - page 8 - 11/29/2015 14:39:47


     421/     19A :                     _PutTapeLeader:
     422/     19A : 8F FF               		dly 	0xFF
     423/     19C : BA FD               		dld 	-3(p2)
     424/     19E : 9C FA               		jnz 	_PutTapeLeader
     425/     1A0 :                     _PutTapeByte:													; output byte at P1
     426/     1A0 : C4 00               		ldi 	0 												; set output bit to 0
     427/     1A2 : 01                  		xae 	
     428/     1A3 : 19                  		sio
     429/     1A4 : 8F 10               		dly 	tapeDelay * 4 									; 0 continuation bit + gap between tapes with no signal 
     430/     1A6 : C4 80               		ldi 	0x80 											; set bit high
     431/     1A8 : 01                  		xae
     432/     1A9 : 19                  		sio 
     433/     1AA : C4 00               		ldi 	0
     434/     1AC : 8F 04               		dly 	tapeDelay 										; output the start bit.
     435/     1AE : C5 01               		ld 		@1(p1) 											; read the byte and put it in E.
     436/     1B0 : 01                  		xae
     437/     1B1 : C4 08               		ldi 	8 												; output 8 bits
     438/     1B3 : CA FD               		st 		-3(p2)
     439/     1B5 :                     _PutTapeBit:
     440/     1B5 : 19                  		sio 													; output MSB and shift
     441/     1B6 : C4 00               		ldi 	0
     442/     1B8 : 8F 04               		dly 	tapeDelay 								
     443/     1BA : BA FD               		dld 	-3(p2) 											; do all 8 bits.
     444/     1BC : BA FF               		dld 	-1(p2) 											; decrement counter
     445/     1BE : 9C E0               		jnz 	_PutTapeByte
     446/     1C0 : BA FE               		dld 	-2(p2) 											; note MSB goes 0 to -1 when finished.
     447/     1C2 : 94 DC               		jp 		_PutTapeByte
     448/     1C4 : C4 80               		ldi 	0x80 											; add the termination bit.
     449/     1C6 : 01                  		xae
     450/     1C7 : 19                  		sio
     451/     1C8 : C4 00               		ldi 	0 												; put that out.
     452/     1CA : 8F 04               		dly 	TapeDelay
     453/     1CC : C4 00               		ldi 	0 												; and set the leve back to 0
     454/     1CE : 01                  		xae 
     455/     1CF : 19                  		sio
     456/     1D0 :                     __CmdMainLoop4:
     457/     1D0 : 90 B1               		jmp 	__CmdMainLoop3
     458/     1D2 :                     
     459/     1D2 :                     __CmdParameterFail1:
     460/     1D2 : 90 95               		jmp 	__CmdParameterFail
     461/     1D4 :                     
     462/     1D4 :                     ; ****************************************************************************************************************
     463/     1D4 :                     ;						GET [addr] load tape to current position or given address.
     464/     1D4 :                     ; ****************************************************************************************************************
     465/     1D4 :                     
     466/     1D4 :                     LoadTape_Command:
     467/     1D4 : 3F                  		xppc	p3 												; get parameter
     468/     1D5 : 3F                  		xppc 	p3												; update current address
     469/     1D6 : 3F                  		xppc 	p3 												; current address to P1.
     470/     1D7 : C4 08               		ldi 	0x8 											; point P3 to the keyboard.
     471/     1D9 : 37                  		xpah 	p3
     472/     1DA :                     __GetTapeWait:
     473/     1DA : C3 00               		ld 		0(p3) 											; check keyboard break
     474/     1DC : D4 80               		ani 	0x80
     475/     1DE : 9C F2               		jnz 	__CmdParameterFail1
     476/     1E0 : 19                  		sio 													; wait for the start bit, examine tape in.
     477/     1E1 : 40                  		lde 
     478/     1E2 : D4 01               		ani 	1
     479/     1E4 : 98 F4               		jz 		__GetTapeWait
     480/     1E6 : 8F 06               		dly 	tapeDelay * 3 / 2 								; half way into the first bit.
 AS V1.42 Beta [Bld 102] - source file monitor.asm - page 9 - 11/29/2015 14:39:47


     481/     1E8 : C4 08               		ldi 	8 												; read in 8 bits.
     482/     1EA : CA FF               		st 		-1(p2)
     483/     1EC :                     __GetTapeBits:
     484/     1EC : 19                  		sio 													; read in one bit
     485/     1ED : C4 00               		ldi 	0
     486/     1EF : 8F 04               		dly 	tapeDelay 										; delay to next bit
     487/     1F1 : BA FF               		dld 	-1(p2) 											; read 8 bits.
     488/     1F3 : 9C F7               		jnz 	__GetTapeBits 
     489/     1F5 : 40                  		lde 													; store byte at current address
     490/     1F6 : CD 01               		st 		@1(p1)
     491/     1F8 : 19                  		sio 													; read in the byte, which is zero if continuing.
     492/     1F9 : 40                  		lde  													; examine bit 0
     493/     1FA : D4 01               		ani 	1
     494/     1FC : 98 DC               		jz 		__GetTapeWait 									; go and wait for the next start bit.
     495/     1FE :                     __CmdMainLoop5:
     496/     1FE : 90 D0               		jmp 	__CmdMainLoop4
     497/     200 :                     
     498/     200 :                     ; ****************************************************************************************************************
     499/     200 :                     ;										L : nn Set Label to current address
     500/     200 :                     ; ****************************************************************************************************************
     501/     200 :                     
     502/     200 :                     Label_Command:
     503/     200 : 3F                  		xppc 	p3 												; get parameter
     504/     201 : 06                  		csa 													; check it exists, CY/L must be set
     505/     202 : 94 CE               		jp 		__CmdParameterFail1
     506/     204 : 31                  		xpal 	p1 												; get into A
     507/     205 : 01                  		xae 													; put into E
     508/     206 : 40                  		lde 													; get back
     509/     207 : 03                  		scl
     510/     208 : FC 10               		cai 	labelCount 										; check is < number of labels
     511/     20A : 94 C6               		jp 		__CmdParameterFail1
     512/     20C :                     
     513/     20C : C4 0C               		ldi 	Current/256 									; point P1 to current address
     514/     20E : 35                  		xpah 	p1
     515/     20F : C4 11               		ldi 	Current&255
     516/     211 : 31                  		xpal 	p1
     517/     212 : C1 00               		ld 		(p1) 											; read current address
     518/     214 : 31                  		xpal 	p1 												; save in P1.Low
     519/     215 : C4 00               		ldi 	Labels&255 										; get labels low byte in same page as current address
     520/     217 : 02                  		ccl
     521/     218 : 70                  		ade 													; add label # to it
     522/     219 : 31                  		xpal 	p1 												; put in P1.L and restore current address low
     523/     21A : C9 00               		st 		(p1) 											; store current address low in label space.
     524/     21C : 90 E0               		jmp 	__CmdMainLoop5 									; and exit.
     525/     21E :                     
     526/     21E :                     ; ****************************************************************************************************************
     527/     21E :                     ;											M :	Dump Memory
     528/     21E :                     ; ****************************************************************************************************************
     529/     21E :                     
     530/     21E :                     MemoryDump_Command:
     531/     21E : 3F                  		xppc 	p3 												; get parameter if exists
     532/     21F : 3F                  		xppc 	p3 												; update current if exists.
     533/     220 : C4 06               		ldi 	6 												; print six rows
     534/     222 : CE FF               		st 		@-1(p2)
     535/     224 :                     __DCLoop:
     536/     224 : C4 03               		ldi 	(PrintAddressData-1)/256						; print one row of address and data.
     537/     226 : 37                  		xpah 	p3
     538/     227 : C4 09               		ldi 	(PrintAddressData-1)&255
     539/     229 : 33                  		xpal 	p3
     540/     22A : C4 04               		ldi 	4
 AS V1.42 Beta [Bld 102] - source file monitor.asm - page 10 - 11/29/2015 14:39:47


     541/     22C : 3F                  		xppc 	p3
     542/     22D : C4 0C               		ldi 	Current/256 									; point P1 to current
     543/     22F : 35                  		xpah 	p1
     544/     230 : C4 11               		ldi 	Current&255 
     545/     232 : 31                  		xpal 	p1
     546/     233 : C1 00               		ld 		0(p1) 											; add 4 to current address
     547/     235 : 02                  		ccl
     548/     236 : F4 04               		adi 	4
     549/     238 : C9 00               		st 		0(p1)
     550/     23A : C1 01               		ld 		1(p1)
     551/     23C : F4 00               		adi 	0
     552/     23E : C9 01               		st 		1(p1)
     553/     240 : BA 00               		dld 	(p2) 											; do it 7 times
     554/     242 : 9C E0               		jnz 	__DCLoop
     555/     244 : C6 01               		ld 		@1(p2) 											; fix up stack.
     556/     246 : 90 B6               		jmp 	__CmdMainLoop5
     557/     248 :                     
     558/     248 :                     
     559/     248 :                     ; ****************************************************************************************************************
     560/     248 :                     ;								B: Enter Bytes (no address, sequence of byte data)
     561/     248 :                     ; ****************************************************************************************************************
     562/     248 :                     
     563/     248 :                     EnterBytes_Command:
     564/     248 : C4 3C               		ldi 	(GetParameter-1) & 255 							; P3 = Get Parameter routine
     565/     24A : 33                  		xpal 	p3
     566/     24B : C4 03               		ldi 	(GetParameter-1) / 256 	
     567/     24D : 37                  		xpah 	p3
     568/     24E : 3F                  		xppc 	p3 												; get the parameter.
     569/     24F : 06                  		csa 													; look at carry
     570/     250 : 94 AC               		jp 		__CmdMainLoop5 									; carry clear, no value.
     571/     252 : C4 0C               		ldi 	Current/256 									; make P1 point to current
     572/     254 : 35                  		xpah 	p1
     573/     255 : C4 11               		ldi 	Current&255 										
     574/     257 : 31                  		xpal 	p1 												; this pulls the byte value into A
     575/     258 : 01                  		xae 													; save it in E
     576/     259 : C1 00               		ld 		0(p1) 											; copy address to save to into P3
     577/     25B : 33                  		xpal 	p3
     578/     25C : C1 01               		ld 		1(p1) 
     579/     25E : 37                  		xpah 	p3 
     580/     25F : 40                  		lde 													; get byte back
     581/     260 : CB 00               		st 		(p3) 											; save it in that location
     582/     262 : A9 00               		ild 	0(p1) 											; bump current address and go back and try again.
     583/     264 : 9C E2               		jnz 	EnterBytes_Command
     584/     266 : A9 01               		ild 	1(p1)
     585/     268 : 90 DE               		jmp 	EnterBytes_Command
     586/     26A :                     
     587/     26A :                     
     588/     26A :                     ; ****************************************************************************************************************
     589/     26A :                     ; ****************************************************************************************************************
     590/     26A :                     ;
     591/     26A :                     ;						Print A as a hexadecimal 2 digit value. If CY/L set precede with space
     592/     26A :                     ;
     593/     26A :                     ; ****************************************************************************************************************
     594/     26A :                     ; ****************************************************************************************************************
     595/     26A :                     
     596/     26A :                     PrintHexByte:
     597/     26A : CE FF               		st 		@-1(p2) 										; push A and P3, set P3 up to print character
     598/     26C : C4 02               		ldi 	(PrintCharacter-1)/256
     599/     26E : 37                  		xpah 	p3
     600/     26F : CE FF               		st 		@-1(p2)
 AS V1.42 Beta [Bld 102] - source file monitor.asm - page 11 - 11/29/2015 14:39:47


     601/     271 : C4 9C               		ldi 	(PrintCharacter-1)&255
     602/     273 : 33                  		xpal 	p3
     603/     274 : CE FF               		st 		@-1(p2)
     604/     276 : 06                  		csa 													; check carry
     605/     277 : 94 03               		jp 		__PHBNoSpace									; if clear, no space.
     606/     279 : C4 20               		ldi 	' '												; print leading space
     607/     27B : 3F                  		xppc 	p3 
     608/     27C :                     __PHBNoSpace:
     609/     27C : C2 02               		ld 		2(p2) 											; read digit
     610/     27E : 1C                  		sr 														; convert MSB
     611/     27F : 1C                  		sr
     612/     280 : 1C                  		sr
     613/     281 : 1C                  		sr
     614/     282 : 02                  		ccl
     615/     283 : EC 90               		dai 	0x90
     616/     285 : EC 40               		dai 	0x40
     617/     287 : 3F                  		xppc 	p3 												; print
     618/     288 : C2 02               		ld 		2(p2) 											; read digit
     619/     28A : D4 0F               		ani 	0x0F 											; convert LSB
     620/     28C : 02                  		ccl
     621/     28D : EC 90               		dai 	0x90
     622/     28F : EC 40               		dai 	0x40
     623/     291 : 3F                  		xppc 	p3 												; print
     624/     292 :                     
     625/     292 : C6 01               		ld 		@1(p2) 											; restore P3 & A and Return
     626/     294 : 33                  		xpal 	p3
     627/     295 : C6 01               		ld 		@1(p2)
     628/     297 : 37                  		xpah 	p3
     629/     298 : C6 01               		ld 		@1(p2)
     630/     29A : 3F                  		xppc 	p3
     631/     29B : 90 CD               		jmp 	PrintHexByte
     632/     29D :                     
     633/     29D :                     ; ****************************************************************************************************************
     634/     29D :                     ; ****************************************************************************************************************
     635/     29D :                     ;
     636/     29D :                     ;		Print Character in A, preserves all registers, re-entrant. Handles 13 (New Line), 8 (Backspace)
     637/     29D :                     ;		Characters 32 - 95 only.
     638/     29D :                     ;	
     639/     29D :                     ;		Rolls to screen top rather than scrolling.
     640/     29D :                     ;
     641/     29D :                     ; ****************************************************************************************************************
     642/     29D :                     ; ****************************************************************************************************************
     643/     29D :                     
     644/     29D :                     PrintCharacter:
     645/     29D : CE FF               		st 		@-1(p2) 										; save A
     646/     29F : C4 0C               		ldi 	Cursor/256 										; save P1, setting up P1 -> Cursor at same time.
     647/     2A1 : 35                  		xpah 	p1
     648/     2A2 : CE FF               		st 		@-1(p2)
     649/     2A4 : C4 10               		ldi 	Cursor&255
     650/     2A6 : 31                  		xpal 	p1
     651/     2A7 : CE FF               		st 		@-1(p2)
     652/     2A9 : C4 00               		ldi 	0 												; save P3, setting up P3 -> Page 0 (Video RAM Write)
     653/     2AB : 37                  		xpah 	p3
     654/     2AC : CE FF               		st 		@-1(p2)
     655/     2AE : 33                  		xpal 	p3
     656/     2AF : CE FF               		st 		@-1(p2)
     657/     2B1 :                     
     658/     2B1 : C1 00               		ld 		(p1) 											; read cursor position
     659/     2B3 : 33                  		xpal 	p3 												; put in P3.Low
     660/     2B4 :                     
 AS V1.42 Beta [Bld 102] - source file monitor.asm - page 12 - 11/29/2015 14:39:47


     661/     2B4 : C4 20               		ldi 	' ' 											; erase the cursor.
     662/     2B6 : CB 00               		st 		0(p3)
     663/     2B8 :                     
     664/     2B8 : C2 04               		ld 		4(p2) 											; read character to print.
     665/     2BA : E4 0D               		xri 	13 												; is it CR ?
     666/     2BC : 98 40               		jz 		__PCNewLine 									; if so, go to new line.
     667/     2BE : E4 05               		xri 	13!8 											; is it Backspace ?
     668/     2C0 : 98 30               		jz 		__PCBackSpace
     669/     2C2 :                     
     670/     2C2 : C2 04               		ld 		4(p2) 											; get character to print
     671/     2C4 : D4 3F               		ani 	0x3F 											; make 6 bit ASCII
     672/     2C6 : CF 01               		st 		@1(p3) 											; write into P3, e.g. the screen and bump it.
     673/     2C8 : A9 00               		ild 	(p1) 											; increment cursor position and load
     674/     2CA : D4 0F               		ani 	15 												; are we at line start ?
     675/     2CC : 9C 0C               		jnz 	__PCExit 										; if so, erase the current line.
     676/     2CE :                     
     677/     2CE :                     __PCBlankNewLine:
     678/     2CE : C4 10               		ldi 	16 												; count to 16, the number of spaces to write out.
     679/     2D0 : CA FF               		st 		-1(p2) 
     680/     2D2 :                     __PCBlankNewLineLoop:
     681/     2D2 : C4 20               		ldi 	' '
     682/     2D4 : CF 01               		st 		@1(p3)
     683/     2D6 : BA FF               		dld 	-1(p2)
     684/     2D8 : 9C F8               		jnz 	__PCBlankNewLineLoop
     685/     2DA :                     
     686/     2DA :                     __PCExit:
     687/     2DA : C1 00               		ld 		(p1) 											; read cursor
     688/     2DC : 33                  		xpal 	p3 												; put in P3.L
     689/     2DD : C4 9B               		ldi 	0x9B 											; shaded block cursor on screen
     690/     2DF : CB 00               		st 		(p3)
     691/     2E1 : C6 01               		ld 		@1(p2)											; restore P3
     692/     2E3 : 33                  		xpal 	p3
     693/     2E4 : C6 01               		ld 		@1(p2)
     694/     2E6 : 37                  		xpah 	p3
     695/     2E7 : C6 01               		ld 		@1(p2)											; restore P1
     696/     2E9 : 31                  		xpal 	p1
     697/     2EA : C6 01               		ld 		@1(p2)
     698/     2EC : 35                  		xpah 	p1
     699/     2ED : C6 01               		ld 		@1(p2) 											; restore A and Return.	
     700/     2EF : 3F                  		xppc 	p3
     701/     2F0 : 90 AB               		jmp 	PrintCharacter 									; and it is re-entrant.
     702/     2F2 :                     
     703/     2F2 :                     __PCBackSpace:
     704/     2F2 : 33                  		xpal 	p3 												; get current cursor position
     705/     2F3 : 98 E5               		jz 		__PCExit 										; if top of screen then exit.
     706/     2F5 : B9 00               		dld 	(p1) 											; backspace and load cursor
     707/     2F7 : 33                  		xpal 	p3 												; put in P3
     708/     2F8 : C4 20               		ldi 	' '												; erase character there
     709/     2FA : CB 00               		st 		(p3)
     710/     2FC : 90 DC               		jmp 	__PCExit 										; and exit.
     711/     2FE :                     
     712/     2FE :                     __PCNewLine:
     713/     2FE : C1 00               		ld 		(p1) 											; read cursor position
     714/     300 : D4 70               		ani 	0x70 											; line
     715/     302 : 02                  		ccl 													; next line
     716/     303 : F4 10               		adi 	0x10
     717/     305 : C9 00               		st 		(p1) 											; write back
     718/     307 : 33                  		xpal 	p3 												; put in P3.L
     719/     308 : 90 C4               		jmp 	__PCBlankNewLine
     720/     30A :                     
 AS V1.42 Beta [Bld 102] - source file monitor.asm - page 13 - 11/29/2015 14:39:47


     721/     30A :                     ; ****************************************************************************************************************
     722/     30A :                     ; ****************************************************************************************************************
     723/     30A :                     ;
     724/     30A :                     ;					Print current address followed by A data bytes. Doesn't update current address
     725/     30A :                     ;
     726/     30A :                     ; ****************************************************************************************************************
     727/     30A :                     ; ****************************************************************************************************************
     728/     30A :                     
     729/     30A :                     PrintAddressData:
     730/     30A : CE FF               		st 		@-1(p2) 										; save count, we don't restore this.
     731/     30C : C4 02               		ldi 	(PrintHexByte-1)/256 							; save and set up P3
     732/     30E : 37                  		xpah 	p3
     733/     30F : CE FF               		st 		@-1(p2)
     734/     311 : C4 69               		ldi 	(PrintHexByte-1)&255
     735/     313 : 33                  		xpal 	p3
     736/     314 : CE FF               		st 		@-1(p2)
     737/     316 : C4 0C               		ldi 	current / 256 									; point P1 to current address
     738/     318 : 35                  		xpah 	p1
     739/     319 : C4 11               		ldi 	current & 255
     740/     31B : 31                  		xpal 	p1
     741/     31C : C1 01               		ld 		1(p1) 											; read high byte of address
     742/     31E : 02                  		ccl
     743/     31F : 3F                  		xppc 	p3												; print w/o leading space
     744/     320 : C1 00               		ld 		0(p1)											; read low byte of address
     745/     322 : 02                  		ccl 	
     746/     323 : 3F                  		xppc 	p3 												; print w/o leading space.
     747/     324 : 01                  		xae 													; put in E
     748/     325 : C1 01               		ld 		1(p1) 											; high byte to P1.H
     749/     327 : 35                  		xpah 	p1
     750/     328 : 40                  		lde 													; low byte to P1.H
     751/     329 : 31                  		xpal 	p1
     752/     32A :                     _PADLoop:
     753/     32A : BA 02               		dld 	2(p2) 											; decrement counter
     754/     32C : 94 09               		jp 		_PADPrint 										; if +ve print another byte
     755/     32E :                     
     756/     32E : C6 01               		ld 		@1(p2) 											; restore P3, skipping A hence @2
     757/     330 : 33                  		xpal 	p3
     758/     331 : C6 02               		ld 		@2(p2)
     759/     333 : 37                  		xpah 	p3
     760/     334 : 3F                  		xppc 	p3
     761/     335 : 90 D3               		jmp 	PrintAddressData
     762/     337 :                     
     763/     337 :                     _PADPrint:
     764/     337 : C5 01               		ld 		@1(p1) 											; read byte advance pointer
     765/     339 : 03                  		scl
     766/     33A : 3F                  		xppc 	p3 												; print with space.
     767/     33B : 90 ED               		jmp 	_PADLoop
     768/     33D :                     
     769/     33D :                     ; ****************************************************************************************************************
     770/     33D :                     ;
     771/     33D :                     ;		Look at the parameter string for a parameter, processing @ and Pn as you go, CS if parameter found
     772/     33D :                     ; 		CC otherwise. Return parameter value in P1. Falls through
     773/     33D :                     ;
     774/     33D :                     ; ****************************************************************************************************************
     775/     33D :                     
     776/     33D :                     GetParameter:
     777/     33D : C4 0C               		ldi 	parPosn/256 									; current position into P1
     778/     33F : 35                  		xpah 	p1
     779/     340 : C4 13               		ldi 	parPosn&255 					
     780/     342 : 31                  		xpal 	p1
 AS V1.42 Beta [Bld 102] - source file monitor.asm - page 14 - 11/29/2015 14:39:47


     781/     343 : C4 00               		ldi 	0 												; -1(p2) is the low byte result
     782/     345 : CA FF               		st 		-1(p2) 											; -2(p2) is the high byte result
     783/     347 : CA FE               		st 		-2(p2)
     784/     349 :                     
     785/     349 : C1 00               		ld 		(p1) 											; read the current position,P1 points to character
     786/     34B : 31                  		xpal 	p1 												; when we put it in P1.L
     787/     34C :                     
     788/     34C :                     __GPASkip:														; skip over spaces to first alphanumeric.
     789/     34C : C1 00               		ld 		(p1) 											; read character
     790/     34E : 98 7B               		jz 		__GPAExitFail 									; if zero, then end of the input string.
     791/     350 : C5 01               		ld 		@1(p1) 											; read it, advancing.
     792/     352 : E4 20               		xri 	32 												; is it space ?
     793/     354 : 98 F6               		jz 		__GPASkip 
     794/     356 : E4 60               		xri 	32!'@'											; is it @ ?
     795/     358 : 98 5E               		jz 		__GPAAtModifier 
     796/     35A : E4 10               		xri 	'@'!'P' 										; is it P ?
     797/     35C : 98 4C               		jz 		__GPAPointerModifier
     798/     35E :                     
     799/     35E :                     __GPANextCharacter:
     800/     35E : C1 FF               		ld 		-1(p1) 											; get value back after post increment.
     801/     360 : 02                  		ccl
     802/     361 : F4 50               		adi 	128-48 											; this will be +ve if A < '0'
     803/     363 : 94 66               		jp 		__GPAExitFail
     804/     365 : FC 09               		cai 	9 												; will be +ve if A < '9', CY/L was clear.	
     805/     367 : 94 0A               		jp 		__GPAFoundHex
     806/     369 : FC 07               		cai 	7 												; will be +ve if A < 'A', CY/L was set
     807/     36B : 94 5E               		jp 		__GPAExitFail
     808/     36D : F4 79               		adi 	0xFF-0x85-1 									; will be +ve if A > 'F', CY/L was set.
     809/     36F : 94 5A               		jp 		__GPAExitFail 					
     810/     371 : F4 76               		adi 	(0x70-0xFA) & 0xFF 								; make the range as below, CY/L was clear
     811/     373 :                     __GPAFoundHex: 													; enter here 0-9 = $76..$7F, A-F = $70..$75
     812/     373 : 02                  		ccl  													; convert that to a hex nibble.
     813/     374 : F4 0A               		adi 	10
     814/     376 : D4 0F               		ani 	0xF
     815/     378 : 01                  		xae 													; save in E, temporarily
     816/     379 : C4 04               		ldi 	4 												; now shift the result 4 bits to the left.
     817/     37B : CA FD               		st 		-3(p2) 											; -3(p2) is the counter
     818/     37D :                     __GPAShift:
     819/     37D : 02                  		ccl
     820/     37E : C2 FF               		ld 		-1(p2) 											; shift 16 bit result 1 bit to the left.
     821/     380 : F2 FF               		add 	-1(p2)
     822/     382 : CA FF               		st 		-1(p2)
     823/     384 : C2 FE               		ld 		-2(p2)
     824/     386 : F2 FE               		add 	-2(p2)
     825/     388 : CA FE               		st 		-2(p2)
     826/     38A : BA FD               		dld 	-3(p2) 											; do it four times
     827/     38C : 9C EF               		jnz 	__GPAShift 	
     828/     38E : C2 FF               		ld 		-1(p2) 											; Or E into the LSB
     829/     390 : 58                  		ore
     830/     391 : CA FF               		st 		-1(p2)
     831/     393 :                     
     832/     393 : C5 01               		ld 		@1(p1) 											; look at next character, post incrementing.
     833/     395 : 03                  		scl
     834/     396 : FC 22               		cai 	34 												; if it is after space and ! (label marker)
     835/     398 : 94 C4               		jp 		__GPANextCharacter 								; go back and put it in place.
     836/     39A :                     
     837/     39A : C5 FF               		ld 		@-1(p1) 										; undo the increment, incase we've just read zero.
     838/     39C :                     
     839/     39C : C4 13               		ldi 	parPosn & 255 									; put the parPosn address in P1.L, new posn into A
     840/     39E : 31                  		xpal 	p1
 AS V1.42 Beta [Bld 102] - source file monitor.asm - page 15 - 11/29/2015 14:39:47


     841/     39F : C9 00               		st 		(p1) 											; and write it back
     842/     3A1 : C2 FF               		ld 		-1(p2) 											; put the result into P1
     843/     3A3 : 31                  		xpal 	p1
     844/     3A4 : C2 FE               		ld 		-2(p2)
     845/     3A6 : 35                  		xpah 	p1
     846/     3A7 : 03                  		scl 													; set CY/L to indicate okay
     847/     3A8 : 90 22               		jmp 	__GPAExit
     848/     3AA :                     
     849/     3AA :                     __GPAPointerModifier:
     850/     3AA : C1 00               		ld 		(p1) 											; read P<something> ?
     851/     3AC : D4 FC               		ani 	0xFC 											; is it '0' .. '3'?
     852/     3AE : E4 30               		xri 	'0'
     853/     3B0 : 9C 19               		jnz 	__GPAExitFail 									; it didn't work, not 0..3
     854/     3B2 : C5 01               		ld 		@1(p1) 											; re-read it and advance
     855/     3B4 : D4 03               		ani 	3												; lower 2 bits only
     856/     3B6 : 90 02               		jmp 	__GPAAdjustModifier
     857/     3B8 :                     __GPAAtModifier:
     858/     3B8 : C4 04               		ldi 	4 												; set modifier adjustment to +4
     859/     3BA :                     __GPAAdjustModifier:
     860/     3BA : CA FD               		st 		-3(p2) 
     861/     3BC : C4 14               		ldi 	modifier & 255 									; point P1 to modifier, save current address in E
     862/     3BE : 31                  		xpal 	p1
     863/     3BF : 01                  		xae 
     864/     3C0 : C1 00               		ld 		(p1) 											; read modifier
     865/     3C2 : 02                  		ccl
     866/     3C3 : F2 FD               		add 	-3(p2) 											; add the modifying value to it.
     867/     3C5 : C9 00               		st 		(p1) 											; write modifier.
     868/     3C7 : 40                  		lde 													; restore current address to P1.L
     869/     3C8 : 31                  		xpal 	p1
     870/     3C9 : 90 81               		jmp 	__GPASkip 										; go back to skip over.
     871/     3CB :                     
     872/     3CB :                     __GPAExitFail:
     873/     3CB : 02                  		ccl 													; carry clear, e.g. nothing read in / error.
     874/     3CC :                     __GPAExit:
     875/     3CC : 3F                  		xppc 	p3
     876/     3CD :                     
     877/     3CD :                     ; ****************************************************************************************************************
     878/     3CD :                     ;
     879/     3CD :                     ;		Store parameter value in P1 in the current address, if CS. Falls through.
     880/     3CD :                     ;
     881/     3CD :                     ; ****************************************************************************************************************
     882/     3CD :                     
     883/     3CD :                     UpdateCurrentAddress:
     884/     3CD : 06                  		csa 													; get status reg
     885/     3CE : 94 0C               		jp 		__UCAExit 										; if carry flag clear then exit.
     886/     3D0 :                     
     887/     3D0 : C4 11               		ldi 	current & 255 									; current address to P1.L, acquired address to E
     888/     3D2 : 31                  		xpal 	p1
     889/     3D3 : 01                  		xae
     890/     3D4 : C4 0C               		ldi 	current / 256 									; current address to P1.H, acquired to A
     891/     3D6 : 35                  		xpah 	p1
     892/     3D7 : C9 01               		st 		1(p1) 											; store address back
     893/     3D9 : 40                  		lde
     894/     3DA : C9 00               		st 		0(p1)
     895/     3DC :                     __UCAExit:
     896/     3DC : 3F                  		xppc 	p3
     897/     3DD :                     
     898/     3DD :                     ; ****************************************************************************************************************
     899/     3DD :                     ;
     900/     3DD :                     ;		Get current address into P1.
 AS V1.42 Beta [Bld 102] - source file monitor.asm - page 16 - 11/29/2015 14:39:47


     901/     3DD :                     ;
     902/     3DD :                     ; ****************************************************************************************************************
     903/     3DD :                     
     904/     3DD :                     GetCurrentAddress:
     905/     3DD : C4 0C               		ldi 	current/256 									; current address ptr in P1
     906/     3DF : 35                  		xpah 	p1
     907/     3E0 : C4 11               		ldi 	current&255
     908/     3E2 : 31                  		xpal 	p1
     909/     3E3 : C1 00               		ld 		0(p1) 											; low byte to E
     910/     3E5 : 01                  		xae
     911/     3E6 : C1 01               		ld 		1(p1) 											; high byte to A
     912/     3E8 : 35                  		xpah 	p1 												; then to P1.H
     913/     3E9 : 40                  		lde 													; low byte to P1.L
     914/     3EA : 31                  		xpal 	p1 
     915/     3EB : 3F                  		xppc 	p3
     916/     3EC :                     
     917/     3EC :                     ; ****************************************************************************************************************
     918/     3EC :                     ;
     919/     3EC :                     ;											List of commands and Jump Table
     920/     3EC :                     ;
     921/     3EC :                     ; ****************************************************************************************************************
     922/     3EC :                     
     923/     3EC :                     		include commands.inc 									; must be at the end, so the command table is in
(1)    1/     74C :                             org 0x074c
(1)    2/     74C :                     ;
(1)    3/     74C :                     ; 	This file is generated automatically by gencommands.py
(1)    4/     74C :                     ;
(1)    5/     74C :                     __CommandList:
(1)    6/     74C : 94 21                       dw    0x2194 ; HLT
(1)    7/     74E : 00                          db    0x00
(1)    8/     74F : 25 60                       dw    0x6025 ; XAE
(1)    9/     751 : 01                          db    0x01
(1)   10/     752 : 6C 0C                       dw    0x0c6c ; CCL
(1)   11/     754 : 02                          db    0x02
(1)   12/     755 : 6C 4C                       dw    0x4c6c ; SCL
(1)   13/     757 : 03                          db    0x03
(1)   14/     758 : 2E 11                       dw    0x112e ; DIN
(1)   15/     75A : 04                          db    0x04
(1)   16/     75B : AE 24                       dw    0x24ae ; IEN
(1)   17/     75D : 05                          db    0x05
(1)   18/     75E : 61 0E                       dw    0x0e61 ; CSA
(1)   19/     760 : 06                          db    0x06
(1)   20/     761 : 33 0C                       dw    0x0c33 ; CAS
(1)   21/     763 : 07                          db    0x07
(1)   22/     764 : F0 39                       dw    0x39f0 ; NOP
(1)   23/     766 : 08                          db    0x08
(1)   24/     767 : 2F 4D                       dw    0x4d2f ; SIO
(1)   25/     769 : 19                          db    0x19
(1)   26/     76A : 72 02                       dw    0x0272 ; SR
(1)   27/     76C : 1C                          db    0x1c
(1)   28/     76D : 4C 4E                       dw    0x4e4c ; SRL
(1)   29/     76F : 1D                          db    0x1d
(1)   30/     770 : 52 02                       dw    0x0252 ; RR
(1)   31/     772 : 1E                          db    0x1e
(1)   32/     773 : 4C 4A                       dw    0x4a4c ; RRL
(1)   33/     775 : 1F                          db    0x1f
(1)   34/     776 : 0D 00                       dw    0x000d ; M
(1)   35/     778 : 20                          db    0x20
(1)   36/     779 : 01 00                       dw    0x0001 ; A
(1)   37/     77B : 21                          db    0x21
 AS V1.42 Beta [Bld 102] - source file monitor.asm(commands.inc) - page 17 - 11/29/2015 14:39:47


(1)   38/     77C : 07 00                       dw    0x0007 ; G
(1)   39/     77E : 22                          db    0x22
(1)   40/     77F : B4 42                       dw    0x42b4 ; PUT
(1)   41/     781 : 23                          db    0x23
(1)   42/     782 : B4 1C                       dw    0x1cb4 ; GET
(1)   43/     784 : 24                          db    0x24
(1)   44/     785 : 03 00                       dw    0x0003 ; C
(1)   45/     787 : 25                          db    0x25
(1)   46/     788 : 02 00                       dw    0x0002 ; B
(1)   47/     78A : 26                          db    0x26
(1)   48/     78B : 0C 00                       dw    0x000c ; L
(1)   49/     78D : 27                          db    0x27
(1)   50/     78E : 0C 62                       dw    0x620c ; XPL
(1)   51/     790 : 30                          db    0x30
(1)   52/     791 : 08 62                       dw    0x6208 ; XPH
(1)   53/     793 : 34                          db    0x34
(1)   54/     794 : 03 62                       dw    0x6203 ; XPC
(1)   55/     796 : 3C                          db    0x3c
(1)   56/     797 : 85 30                       dw    0x3085 ; LDE
(1)   57/     799 : 40                          db    0x40
(1)   58/     79A : C5 05                       dw    0x05c5 ; ANE
(1)   59/     79C : 50                          db    0x50
(1)   60/     79D : 45 3E                       dw    0x3e45 ; ORE
(1)   61/     79F : 58                          db    0x58
(1)   62/     7A0 : 45 62                       dw    0x6245 ; XRE
(1)   63/     7A2 : 60                          db    0x60
(1)   64/     7A3 : 25 10                       dw    0x1025 ; DAE
(1)   65/     7A5 : 68                          db    0x68
(1)   66/     7A6 : 85 04                       dw    0x0485 ; ADE
(1)   67/     7A8 : 70                          db    0x70
(1)   68/     7A9 : 25 0C                       dw    0x0c25 ; CAE
(1)   69/     7AB : 78                          db    0x78
(1)   70/     7AC : 99 11                       dw    0x1199 ; DLY
(1)   71/     7AE : 8F                          db    0x8f
(1)   72/     7AF : B0 29                       dw    0x29b0 ; JMP
(1)   73/     7B1 : 90                          db    0x90
(1)   74/     7B2 : 50 01                       dw    0x0150 ; JP
(1)   75/     7B4 : 94                          db    0x94
(1)   76/     7B5 : 5A 01                       dw    0x015a ; JZ
(1)   77/     7B7 : 98                          db    0x98
(1)   78/     7B8 : DA 29                       dw    0x29da ; JNZ
(1)   79/     7BA : 9C                          db    0x9c
(1)   80/     7BB : 84 25                       dw    0x2584 ; ILD
(1)   81/     7BD : A8                          db    0xa8
(1)   82/     7BE : 84 11                       dw    0x1184 ; DLD
(1)   83/     7C0 : B8                          db    0xb8
(1)   84/     7C1 : 84 01                       dw    0x0184 ; LD
(1)   85/     7C3 : C0                          db    0xc0
(1)   86/     7C4 : 89 30                       dw    0x3089 ; LDI
(1)   87/     7C6 : C4                          db    0xc4
(1)   88/     7C7 : 74 02                       dw    0x0274 ; ST
(1)   89/     7C9 : C8                          db    0xc8
(1)   90/     7CA : C4 05                       dw    0x05c4 ; AND
(1)   91/     7CC : D0                          db    0xd0
(1)   92/     7CD : C9 05                       dw    0x05c9 ; ANI
(1)   93/     7CF : D4                          db    0xd4
(1)   94/     7D0 : F2 01                       dw    0x01f2 ; OR
(1)   95/     7D2 : D8                          db    0xd8
(1)   96/     7D3 : 49 3E                       dw    0x3e49 ; ORI
(1)   97/     7D5 : DC                          db    0xdc
 AS V1.42 Beta [Bld 102] - source file monitor.asm(commands.inc) - page 18 - 11/29/2015 14:39:47


(1)   98/     7D6 : F2 61                       dw    0x61f2 ; XOR
(1)   99/     7D8 : E0                          db    0xe0
(1)  100/     7D9 : 49 62                       dw    0x6249 ; XRI
(1)  101/     7DB : E4                          db    0xe4
(1)  102/     7DC : 24 10                       dw    0x1024 ; DAD
(1)  103/     7DE : E8                          db    0xe8
(1)  104/     7DF : 29 10                       dw    0x1029 ; DAI
(1)  105/     7E1 : EC                          db    0xec
(1)  106/     7E2 : 84 04                       dw    0x0484 ; ADD
(1)  107/     7E4 : F0                          db    0xf0
(1)  108/     7E5 : 89 04                       dw    0x0489 ; ADI
(1)  109/     7E7 : F4                          db    0xf4
(1)  110/     7E8 : 24 0C                       dw    0x0c24 ; CAD
(1)  111/     7EA : F8                          db    0xf8
(1)  112/     7EB : 29 0C                       dw    0x0c29 ; CAI
(1)  113/     7ED : FC                          db    0xfc
(1)  114/     7EE : 00 00                       dw    0x0000 ; End Marker	
(1)  115/     7F0 :                     
(1)  116/     7F0 :                     __CommandTable:
(1)  117/     7F0 : 1E 02                       dw    MemoryDump_Command
(1)  118/     7F2 : 65 01                       dw    Address_Command
(1)  119/     7F4 : 78 01                       dw    Go_Command
(1)  120/     7F6 : 85 01                       dw    PutTape_Command
(1)  121/     7F8 : D4 01                       dw    LoadTape_Command
(1)  122/     7FA : 1F 00                       dw    ClearScreen_Command
(1)  123/     7FC : 48 02                       dw    EnterBytes_Command
(1)  124/     7FE : 00 02                       dw    Label_Command
(1)  125/     800 :                     
     924/     800 :                     																; the same page.
     925/     800 :                     
     926/     800 :                     ; ****************************************************************************************************************
     927/     800 :                     ;
     928/     800 :                     ;													Tape Format. 
     929/     800 :                     ;
     930/     800 :                     ; ****************************************************************************************************************
     931/     800 :                     ;
     932/     800 :                     ;		1 x start bit 		'1' value is held for period of time.
     933/     800 :                     ;		8 x data bits  		'0 or 1' value is held for a period of time.
     934/     800 :                     ;		1 x continuation	'0' if another bit follows, '1' if end.
     935/     800 :                     ;		at least 2 bit times between bytes.
     936/     800 :                     ;
     937/     800 :                     ;		Use DLY 4 with A = 0 (DLY 6 to skip half-start)
     938/     800 :                     ; 		= 13 + 2 * 0 + 514 * 4 microcycles
     939/     800 :                     ;		= 2,069 microcycles
     940/     800 :                     ;	
     941/     800 :                     ;		which is about 240 bits per second.
     942/     800 :                     ;
     943/     800 :                     ; ****************************************************************************************************************
     944/     800 :                     
 AS V1.42 Beta [Bld 102] - source file monitor.asm - page 19 - 11/29/2015 14:39:47


  symbol table (* = unused):
  ------------------------

 ADDRESS_COMMAND :              165 C | *ARCHITECTURE :  i386-unknown-win32 - |
*BIGENDIAN :                      0 - | *BRANCHEXT :                      0 - |
*CASESENSITIVE :                  0 - |  CLEARSCREENLOOP :               24 C |
 CLEARSCREEN_COMMAND :           1F C |  CODESTART :                    C25 - |
 COMMANDMAINLOOP :               36 C | *CONSTPI :        3.141592653589793 - |
 CURRENT :                      C11 - |  CURSOR :                       C10 - |
*DATE :                  11/29/2015 - |  ENTERBYTES_COMMAND :           248 C |
 EXTRACT5BIT :                   A1 C | *FALSE :                          0 - |
 FINDTOPMEMORY :                  9 C | *FULLPMMU :                       1 - |
*GETCURRENTADDRESS :            3DD C |  GETPARAMETER :                 33D C |
 GO_COMMAND :                   178 C | *HAS64 :                          1 - |
*HASDSP :                         0 - | *HASFPU :                         0 - |
*HASPMMU :                        0 - | *INEXTMODE :                      0 - |
*INLWORDMODE :                    0 - | *INMAXMODE :                      0 - |
*INSRCMODE :                      0 - | *INSUPMODE :                      0 - |
 KBDBUFFER :                    C15 - |  KBDBUFFERLN :                   10 - |
 KEYBOARDLOOP :                  4B C |  LABELCOUNT :                    10 - |
 LABELS :                       C00 - |  LABEL_COMMAND :                200 C |
*LISTON :                         1 - |  LOADTAPE_COMMAND :             1D4 C |
*MACEXP :                         1 - |  MEMORYDUMP_COMMAND :           21E C |
 MODIFIER :                     C14 - | *MOMCPU :                         C - |
*MOMCPUNAME :                 SC/MP - | *NESTMAX :                      100 - |
*PACKING :                        0 - | *PADDING :                        1 - |
 PARPOSN :                      C13 - |  PRINTADDRESSDATA :             30A C |
 PRINTCHARACTER :               29D C |  PRINTHEXBYTE :                 26A C |
 PUTTAPE_COMMAND :              185 C | *RELAXED :                        0 - |
 TAPEDELAY :                      4 - | *TIME :                    14:39:47 - |
*TRUE :                           1 - | *UPDATECURRENTADDRESS :         3CD C |
 VARBASE :                      C10 - | *VERSION :                     142F - |
 _KBDWAITKEY :                   54 C |  _KBDWAITRELEASE :               4E C |
 _PADLOOP :                     32A C |  _PADPRINT :                    337 C |
*_PUTTAPEBIT :                  1B5 C |  _PUTTAPEBYTE :                 1A0 C |
 _PUTTAPELEADER :               19A C |  __ASMCONTINUE :                123 C |
 __ASMEXIT :                    15B C |  __ASMNOPARAMETER :             11B C |
 __ASSEMBLER :                  10E C |  __CMDMAINLOOP1 :                92 C |
 __CMDMAINLOOP2 :               171 C |  __CMDMAINLOOP3 :               183 C |
 __CMDMAINLOOP4 :               1D0 C |  __CMDMAINLOOP5 :               1FE C |
 __CMDPARAMETERFAIL :           169 C |  __CMDPARAMETERFAIL1 :          1D2 C |
 __COMMANDERROR :               104 C |  __COMMANDLIST :                74C C |
 __COMMANDTABLE :               7F0 C |  __DCLOOP :                     224 C |
 __EX5SHIFT :                    AC C |  __EXTRACTEND :                  C2 C |
 __FINDCOMMANDLOOP :             CD C |  __GETTAPEBITS :                1EC C |
 __GETTAPEWAIT :                1DA C |  __GPAADJUSTMODIFIER :          3BA C |
 __GPAATMODIFIER :              3B8 C |  __GPAEXIT :                    3CC C |
 __GPAEXITFAIL :                3CB C |  __GPAFOUNDHEX :                373 C |
 __GPANEXTCHARACTER :           35E C |  __GPAPOINTERMODIFIER :         3AA C |
 __GPASHIFT :                   37D C |  __GPASKIP :                    34C C |
 __KBDBACKSPACE :                86 C |  __KBDEXIT :                     94 C |
 __KBDNOTLOWER :                 7A C |  __PCBACKSPACE :                2F2 C |
 __PCBLANKNEWLINE :             2CE C |  __PCBLANKNEWLINELOOP :         2D2 C |
 __PCEXIT :                     2DA C |  __PCNEWLINE :                  2FE C |
 __PHBNOSPACE :                 27C C |  __UCAEXIT :                    3DC C |

    104 symbols
     31 unused symbols

 AS V1.42 Beta [Bld 102] - source file monitor.asm - page 20 - 11/29/2015 14:39:47


  codepages:
  ----------

STANDARD (0 changed characters)


0.01 seconds assembly time

   1069 lines source file
      2 passes
      0 errors
      0 warnings
