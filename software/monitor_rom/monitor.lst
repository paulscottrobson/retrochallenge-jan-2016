 AS V1.42 Beta [Bld 102] - source file monitor.asm - page 1 - 11/29/2015 16:29:46


       1/       0 :                     ; ******************************************************************************************************************
       2/       0 :                     ; ******************************************************************************************************************
       3/       0 :                     ; ******************************************************************************************************************
       4/       0 :                     ;
       5/       0 :                     ;												Machine Language Monitor
       6/       0 :                     ;
       7/       0 :                     ; ******************************************************************************************************************
       8/       0 :                     ; ******************************************************************************************************************
       9/       0 :                     ; ******************************************************************************************************************
      10/       0 :                     
      11/       0 :                     ; TODO: 
      12/       0 :                     ; 		Disassembler (if space available)
      13/       0 :                     ; 		16 bit maths (if space available)
      14/       0 :                     
      15/       0 :                     		cpu	sc/mp
      16/       0 :                     
      17/       0 : =0xC00              labels 		= 0xC00												; labels, 1 byte each
      18/       0 : =0x20               labelCount 	= 32 												; number of labels (perhaps a bit generous ?)
      19/       0 :                     
      20/       0 : =0xC20              varBase 	= labels+labelCount 								; variables after labels start here.
      21/       0 :                     
      22/       0 : =0xC20              cursor 		= varBase 											; cursor position
      23/       0 : =0xC21              current 	= varBase+1 										; current address (lo,hi)
      24/       0 : =0xC23              parPosn		= varBase+3 										; current param offset in buffer (low addr)
      25/       0 : =0xC24              modifier  	= varBase+4 										; instruction modifier (@,Pn)
      26/       0 : =0xC25              kbdBuffer 	= varBase+5 										; 16 character keyboard buffer
      27/       0 : =0x10               kbdBufferLn = 16 										
      28/       0 :                     
      29/       0 : =0xC35              codeStart 	= kbdBuffer+kbdBufferLn								; code starts here.
      30/       0 :                     
      31/       0 : =0x4                tapeDelay 	= 4 												; DLY parameter for 1 tape bit width.
      32/       0 :                     																; (smaller = faster tape I/O)
      33/       0 :                     
      34/       0 :                     		org 	0x0000
      35/       0 : 08                  		nop
      36/       1 :                     
      37/       1 :                     ; ******************************************************************************************************************
      38/       1 :                     ;
      39/       1 :                     ;									Find Top of Memory to initialise the stack.
      40/       1 :                     ;
      41/       1 :                     ; ******************************************************************************************************************
      42/       1 :                     
      43/       1 : C4 0F               		ldi 	0x0F 											; point P2 to theoretical top of RAM on basic m/c
      44/       3 : 36                  		xpah 	p2 												; e.g. 0xFFF
      45/       4 : C4 FF               		ldi 	0xFF 											; ideally you'd make this 0x003F and remove the ld
      46/       6 : 32                  		xpal 	p2 												; but the emulators don't do 4+12 math. Only matters here.
      47/       7 : C6 40               		ld 		@64(p2) 										; fix the predecrement (wrap around not emulated)
      48/       9 :                     FindTopMemory:
      49/       9 : C4 A5               		ldi 	0xA5 											; try to write this to memory
      50/       B : CE C0               		st 		@-64(p2) 										; predecrementing by 64.
      51/       D : E2 00               		xor 	(p2) 											; did it write correctly.
      52/       F : 9C F8               		jnz 	FindTopMemory 									; now P2 points to top of memory.
      53/      11 :                     
      54/      11 :                     ; ******************************************************************************************************************
      55/      11 :                     ;
      56/      11 :                     ;									Reset cursor position and current address.
      57/      11 :                     ;
      58/      11 :                     ; ******************************************************************************************************************
      59/      11 :                     
      60/      11 : C4 0C               		ldi 	Current/256 									; set P1 to current address
 AS V1.42 Beta [Bld 102] - source file monitor.asm - page 2 - 11/29/2015 16:29:46


      61/      13 : 35                  		xpah 	p1
      62/      14 : C4 21               		ldi 	Current&255
      63/      16 : 31                  		xpal 	p1
      64/      17 : C4 35               		ldi 	codeStart & 255 								; reset current address to code start
      65/      19 : CD 01               		st 		@1(p1)
      66/      1B : C4 0C               		ldi 	codeStart / 256
      67/      1D : CD 00               		st 		@(p1)
      68/      1F :                     
      69/      1F :                     ; ******************************************************************************************************************
      70/      1F :                     ;
      71/      1F :                     ;												Clear the screen
      72/      1F :                     ;
      73/      1F :                     ; ******************************************************************************************************************
      74/      1F :                     
      75/      1F :                     ClearScreen_Command:
      76/      1F : C4 00               		ldi 	0
      77/      21 : 35                  		xpah 	p1
      78/      22 : C4 00               		ldi 	0
      79/      24 :                     ClearScreenLoop:
      80/      24 : 31                  		xpal 	p1												; clear screen
      81/      25 : C4 20               		ldi 	' '
      82/      27 : CD 01               		st 		@1(p1)
      83/      29 : 31                  		xpal 	p1
      84/      2A : 94 F8               		jp 		ClearScreenLoop
      85/      2C : C4 0C               		ldi 	Cursor/256 										; reset the cursor position to TOS
      86/      2E : 35                  		xpah 	p1
      87/      2F : C4 20               		ldi 	Cursor&255
      88/      31 : 31                  		xpal 	p1 
      89/      32 : C4 00               		ldi 	0
      90/      34 : C9 00               		st 		0(p1)											
      91/      36 :                     
      92/      36 :                     ; ****************************************************************************************************************
      93/      36 :                     ;
      94/      36 :                     ;													Main Loop
      95/      36 :                     ;
      96/      36 :                     ; ****************************************************************************************************************
      97/      36 :                     
      98/      36 :                     CommandMainLoop:
      99/      36 : C4 03               		ldi 	(PrintAddressData-1)/256						; print Address and Data there
     100/      38 : 37                  		xpah 	p3
     101/      39 : C4 30               		ldi 	(PrintAddressData-1)&255
     102/      3B : 33                  		xpal 	p3
     103/      3C : C4 00               		ldi 	0
     104/      3E : 3F                  		xppc 	p3
     105/      3F :                     
     106/      3F : C4 02               		ldi 	(PrintCharacter-1)/256 							; set P3 = print character.
     107/      41 : 37                  		xpah 	p3
     108/      42 : C4 C3               		ldi 	(PrintCharacter-1)&255
     109/      44 : 33                  		xpal 	p3
     110/      45 : C4 5D               		ldi 	']'												; print the prompt.
     111/      47 : 3F                  		xppc 	p3
     112/      48 :                     
     113/      48 :                     ; ****************************************************************************************************************
     114/      48 :                     ;
     115/      48 :                     ;											Keyboard Line Input
     116/      48 :                     ;
     117/      48 :                     ; ****************************************************************************************************************
     118/      48 :                     
     119/      48 : C4 00               		ldi 	0 												; set E = character position.
     120/      4A : 01                  		xae 
 AS V1.42 Beta [Bld 102] - source file monitor.asm - page 3 - 11/29/2015 16:29:46


     121/      4B :                     KeyboardLoop:
     122/      4B : C4 08               		ldi 	0x8 											; set P1 to point to keyboard latch
     123/      4D : 35                  		xpah 	p1
     124/      4E :                     _KBDWaitRelease:
     125/      4E : C1 00               		ld 		0(p1) 											; wait for strobe to clear
     126/      50 : 94 02               		jp 		_KBDWaitKey
     127/      52 : 90 FA               		jmp 	_KBDWaitRelease
     128/      54 :                     _KBDWaitKey:
     129/      54 : C1 00               		ld 		0(p1) 											; wait for strobe, i.e. new key
     130/      56 : 94 FC               		jp 		_KBDWaitKey
     131/      58 : D4 7F               		ani 	0x7F 											; throw away bit 7
     132/      5A : CA FF               		st 		-1(p2) 											; save key.
     133/      5C :                     
     134/      5C : C4 0C               		ldi 	kbdBuffer/256 									; set P1 = keyboard buffer
     135/      5E : 35                  		xpah 	p1
     136/      5F : C4 25               		ldi 	kbdBuffer&255
     137/      61 : 31                  		xpal 	p1		
     138/      62 :                     
     139/      62 : C2 FF               		ld 		-1(p2) 											; read key
     140/      64 : E4 08               		xri 	8 												; is it backspace
     141/      66 : 98 1E               		jz 		__KBDBackSpace
     142/      68 : E4 05               		xri 	8!13 											; is it CR, then exit
     143/      6A : 98 28               		jz 		__KBDExit
     144/      6C :                     
     145/      6C : 40                  		lde 													; have we a full buffer.
     146/      6D : E4 10               		xri 	kbdBufferLn 									; if so, ignore the key.
     147/      6F : 98 DA               		jz 		KeyboardLoop
     148/      71 :                     
     149/      71 : C2 FF               		ld 		-1(p2) 											; restore the key.
     150/      73 : 02                  		ccl
     151/      74 : F4 20               		adi 	0x20											; will make lower case -ve
     152/      76 : 94 02               		jp 		__KBDNotLower
     153/      78 : FC 20               		cai 	0x20 											; capitalise
     154/      7A :                     __KBDNotLower:
     155/      7A : F4 E0               		adi 	0xE0 											; fix up.
     156/      7C : C9 80               		st 		-0x80(p1) 										; save in the buffer using E as index.
     157/      7E : 3F                  		xppc 	p3 												; print the character
     158/      7F : 01                  		xae 													; increment E
     159/      80 : 02                  		ccl
     160/      81 : F4 01               		adi 	1
     161/      83 : 01                  		xae
     162/      84 : 90 C5               		jmp 	KeyboardLoop 									; and get the next key.
     163/      86 :                     
     164/      86 :                     __KBDBackSpace:
     165/      86 : 40                  		lde 													; get position
     166/      87 : 98 C2               		jz 		KeyboardLoop 									; can't go back if at beginning
     167/      89 : 03                  		scl 													; go back 1 from E
     168/      8A : FC 01               		cai 	1
     169/      8C : 01                  		xae 
     170/      8D : C4 08               		ldi 	8 												; print a backspace
     171/      8F : 3F                  		xppc 	p3
     172/      90 : 90 B9               		jmp 	KeyboardLoop 									; and go round again.
     173/      92 :                     
     174/      92 :                     __CmdMainLoop1:
     175/      92 : 90 A2               		jmp 	CommandMainLoop
     176/      94 :                     
     177/      94 :                     __KBDExit:
     178/      94 : C9 80               		st 		-0x80(p1) 										; add the ASCIIZ terminator.
     179/      96 : C4 0D               		ldi 	13												; print a new line.
     180/      98 : 3F                  		xppc 	p3
 AS V1.42 Beta [Bld 102] - source file monitor.asm - page 4 - 11/29/2015 16:29:46


     181/      99 :                     
     182/      99 :                     ; ****************************************************************************************************************
     183/      99 :                     ;
     184/      99 :                     ;						Extract the 5 bit 3 letter (max command value). P1 points to buffer
     185/      99 :                     ;
     186/      99 :                     ; ****************************************************************************************************************
     187/      99 :                     
     188/      99 : C4 00               		ldi 	0
     189/      9B : 01                  		xae 													; E contains the LSB of the 5 bit shift
     190/      9C : 40                  		lde 	
     191/      9D : CA FF               		st 		-1(p2) 											; -1(P2) contains the MSB
     192/      9F : C9 FF               		st 		modifier-kbdBuffer(p1)							; clear the modifier.
     193/      A1 :                     Extract5Bit:
     194/      A1 : C1 00               		ld 		(p1) 											; look at character
     195/      A3 : 02                  		ccl 													; add 128-65, will be +ve if < 64
     196/      A4 : F4 3F               		adi 	128-65
     197/      A6 : 94 1A               		jp 		__ExtractEnd
     198/      A8 : C4 05               		ldi 	5 												; shift current value left 5 times using -2(p2)
     199/      AA : CA FE               		st 		-2(p2)
     200/      AC :                     __Ex5Shift:
     201/      AC : 40                  		lde 													; shift E left into CY/L
     202/      AD : 02                  		ccl
     203/      AE : 70                  		ade 
     204/      AF : 01                  		xae
     205/      B0 : C2 FF               		ld 		-1(p2) 											; shift CY/L into -1(p2) and carry/link
     206/      B2 : F2 FF               		add 	-1(p2)
     207/      B4 : CA FF               		st 		-1(p2)
     208/      B6 : BA FE               		dld 	-2(p2) 											; done it 5 times ?
     209/      B8 : 9C F2               		jnz 	__Ex5Shift
     210/      BA : C5 01               		ld 		@1(p1) 											; re-read character.
     211/      BC : D4 1F               		ani 	0x1F 											; lower 5 bits only.
     212/      BE : 58                  		ore 													; OR into E
     213/      BF : 01                  		xae
     214/      C0 : 90 DF               		jmp 	Extract5Bit 									; go and get the next one.
     215/      C2 :                     
     216/      C2 :                     __ExtractEnd:
     217/      C2 : C4 23               		ldi 	parPosn & 255 									; P1.L = Parameter Position, A = first non cmd char
     218/      C4 : 31                  		xpal	p1
     219/      C5 : C9 00               		st 		(p1) 											; write to parameter position.
     220/      C7 :                     
     221/      C7 :                     ; ****************************************************************************************************************
     222/      C7 :                     ;
     223/      C7 :                     ;						Find command in -1 (P2) (High) E (Low) in Command table
     224/      C7 :                     ;	
     225/      C7 :                     ; ****************************************************************************************************************
     226/      C7 :                     
     227/      C7 : C4 47               		ldi 	__commandList & 255 							; point P1 to the command list
     228/      C9 : 31                  		xpal 	p1
     229/      CA : C4 07               		ldi 	__commandList / 256 		
     230/      CC : 35                  		xpah 	p1	
     231/      CD :                     __FindCommandLoop:
     232/      CD : C1 00               		ld 		0(p1) 											; reached the end of the table ?
     233/      CF : D9 01               		or 		1(p1)											; which is marked by word 0000
     234/      D1 : 98 31               		jz 		__CommandError
     235/      D3 : C5 03               		ld 		@3(p1) 											; read low byte, and point to next
     236/      D5 : 60                  		xre
     237/      D6 : 9C F5               		jnz 	__FindCommandLoop 								; if different to LSB loop back.
     238/      D8 : C1 FE               		ld 		-2(p1) 											; read the high byte
     239/      DA : E2 FF               		xor 	-1(p2) 											; if different to the MSB loop back.
     240/      DC : 9C EF               		jnz 	__FindCommandLoop
 AS V1.42 Beta [Bld 102] - source file monitor.asm - page 5 - 11/29/2015 16:29:46


     241/      DE :                     
     242/      DE :                     ; ****************************************************************************************************************
     243/      DE :                     ;
     244/      DE :                     ;				Found command, figure out if ASM or Command, if Command go to that routine
     245/      DE :                     ;
     246/      DE :                     ; ****************************************************************************************************************
     247/      DE :                     
     248/      DE : C4 63               		ldi 	(GetParameter-1) & 255 							; point P3 to the get parameter code.
     249/      E0 : 33                  		xpal 	p3
     250/      E1 : C4 03               		ldi 	(GetParameter-1) / 256
     251/      E3 : 37                  		xpah 	p3
     252/      E4 :                     
     253/      E4 : C1 FF               		ld 		-1(p1) 											; read the operation code.
     254/      E6 : D4 F0               		ani 	0xF0 											; look at the m-s-nibble - commands are 0x20.
     255/      E8 : E4 20               		xri 	0x20
     256/      EA : 9C 22               		jnz 	__Assembler
     257/      EC :                     
     258/      EC : C1 FF               		ld 		-1(p1) 											; re-read it
     259/      EE : 02                  		ccl
     260/      EF : F1 FF               		add 	-1(p1) 											; double it
     261/      F1 : D4 1F               		ani 	0x1F 											; lower 5 bits only.
     262/      F3 : F4 EE               		adi 	__CommandTable & 255 							; make P1 point to the command table entry
     263/      F5 : 31                  		xpal 	p1
     264/      F6 : C4 07               		ldi 	__CommandTable / 256 					
     265/      F8 : 35                  		xpah 	p1
     266/      F9 : C1 00               		ld 		0(p1) 											; read low address
     267/      FB : 01                  		xae
     268/      FC : C1 01               		ld 		1(p1) 											; read high address
     269/      FE : 35                  		xpah 	p1 												; put in P1.H
     270/      FF : 40                  		lde 													; get low address
     271/     100 : 31                  		xpal 	p1 												; put in P1.L
     272/     101 : C5 FF               		ld 		@-1(p1) 										; fix up for the pre-increment
     273/     103 : 3D                  		xppc 	p1 												; and go there.
     274/     104 :                     
     275/     104 :                     __CommandError: 												; unknown command.
     276/     104 : C4 03               		ldi 	3 												; set the beeper on
     277/     106 : 07                  		cas
     278/     107 : 8F FF               		dly 	0xFF 											; short delay
     279/     109 : C4 00               		ldi 	0 												; set the beeper off
     280/     10B : 07                  		cas
     281/     10C : 90 84               		jmp 	__CmdMainLoop1
     282/     10E :                     
     283/     10E :                     ; ****************************************************************************************************************
     284/     10E :                     ;												In line Assembler
     285/     10E :                     ; ****************************************************************************************************************
     286/     10E :                     
     287/     10E :                     __Assembler:
     288/     10E : C1 FF               		ld 		-1(p1) 											; this is the operation code to use.
     289/     110 : CE FF               		st 		@-1(p2) 										; push on the stack.
     290/     112 :                     
     291/     112 : 3F                  		xppc 	p3 												; evaluate (any) parameter if present
     292/     113 : 06                  		csa 													; check carry flag set
     293/     114 : 94 27               		jp 		__ASMNoParameter  								; if clear, no parameter was provided.
     294/     116 :                     
     295/     116 : C4 23               		ldi 	parPosn & 255
     296/     118 : 31                  		xpal 	p1 												; get the parameter LSB
     297/     119 : CE FF               		st 		@-1(p2) 										; push that on the stack, set P1 to parPosn
     298/     11B : C4 0C               		ldi 	parPosn / 256
     299/     11D : 35                  		xpah 	p1
     300/     11E : C1 00               		ld 		(p1) 											; read current position
 AS V1.42 Beta [Bld 102] - source file monitor.asm - page 6 - 11/29/2015 16:29:46


     301/     120 : 31                  		xpal 	p1 												; P1 now points to character.
     302/     121 : C1 00               		ld 		(p1) 											; read character
     303/     123 : E4 21               		xri 	'!'												; is it the label pling ?
     304/     125 : 9C 1E               		jnz 	__ASMContinue 									; we don't need to change this pointer , we should technically.
     305/     127 : C2 00               		ld 		(p2) 											; read the value, which is the label number
     306/     129 : 03                  		scl
     307/     12A : FC 20               		cai 	labelCount 										; is it a valid label number
     308/     12C : 94 D6               		jp 		__CommandError 									; no, beep.
     309/     12E : C2 00               		ld 		(p2) 											; re-read the label number
     310/     130 : 01                  		xae 													; put in E
     311/     131 : C4 0C               		ldi 	Labels/256 										; point p1 to labels
     312/     133 : 35                  		xpah 	p1
     313/     134 : C4 00               		ldi 	Labels&255 
     314/     136 : 31                  		xpal 	p1
     315/     137 : C1 80               		ld 		-0x80(p1) 										; read label indexed using E.
     316/     139 : CA 00               		st 		(p2) 											; save as the operand
     317/     13B : 90 08               		jmp 	__ASMContinue 									; and continue
     318/     13D :                     
     319/     13D :                     __ASMNoParameter:
     320/     13D : C2 00               		ld 		(p2) 											; read the pushed operation code
     321/     13F : D4 80               		ani 	0x80 											; is bit 7 set ?
     322/     141 : 9C C1               		jnz 	__CommandError 									; if it is, we need a parameter
     323/     143 : CE FF               		st 		@-1(p2) 										; push zero on the stack as a dummy parameter.
     324/     145 :                     
     325/     145 :                     __ASMContinue:
     326/     145 : C4 0C               		ldi 	Current/256 									; p3 = &Current Address
     327/     147 : 37                  		xpah 	p3
     328/     148 : C4 21               		ldi 	Current&255
     329/     14A : 33                  		xpal 	p3
     330/     14B :                     
     331/     14B : C3 03               		ld 		modifier-Current(p3) 							; get the modifier (e.g. @,Pn etc.)
     332/     14D : 02                  		ccl
     333/     14E : F2 01               		add 	1(p2) 											; add to the opcode and write it back
     334/     150 : CA 01               		st 		1(p2)
     335/     152 :                     
     336/     152 : C3 00               		ld 		(p3) 											; read current address into P1
     337/     154 : 31                  		xpal 	p1
     338/     155 : C3 01               		ld 		1(p3)
     339/     157 : 35                  		xpah 	p1
     340/     158 :                     
     341/     158 : C2 01               		ld 		1(p2) 											; read opcode.
     342/     15A : CD 01               		st 		@1(p1) 											; write out to current address and bump it.
     343/     15C : 94 1F               		jp 		__ASMExit 										; if +ve then no operand byte, exit.
     344/     15E :                     
     345/     15E : C2 00               		ld 		(p2) 											; read the operand byte
     346/     160 : CD 01               		st 		@1(p1) 											; write that out as well.
     347/     162 :                     
     348/     162 : C3 03               		ld 		modifier-Current(p3) 							; look at the modifier 
     349/     164 : 9C 17               		jnz 	__ASMExit 										; if non zero we don't need to do anything P0 = 00
     350/     166 : C2 01               		ld 		1(p2) 											; DLY is a special case
     351/     168 : E4 8F               		xri 	0x8F 											; where the modifier is zero but not PC relative.
     352/     16A : 98 11               		jz 		__ASMExit 												
     353/     16C :                     
     354/     16C : C1 FF               		ld 		-1(p1) 											; read operand
     355/     16E : 02                  		ccl 													; one fewer because we want the current addr+1 low
     356/     16F : FB 00               		cad 	(p3) 											; subtract the current address low.
     357/     171 : C9 FF               		st 		-1(p1) 											; write it back
     358/     173 :                     
     359/     173 : C2 01               		ld 		1(p2) 											; read opcode again
     360/     175 : D4 F0               		ani 	0xF0 											; is it 9x (a JMP command)
 AS V1.42 Beta [Bld 102] - source file monitor.asm - page 7 - 11/29/2015 16:29:46


     361/     177 : E4 90               		xri 	0x90
     362/     179 : 9C 02               		jnz 	__ASMExit 										; if not, we are done
     363/     17B : B9 FF               		dld 	-1(p1) 											; one fewer because of the pre-increment
     364/     17D :                     __ASMExit:
     365/     17D : 31                  		xpal 	p1 												; write current address back out
     366/     17E : CB 00               		st 		(p3)
     367/     180 : 35                  		xpah 	p1
     368/     181 : CB 01               		st 		1(p3)
     369/     183 : C6 02               		ld 		@2(p2) 											; drop stack values.
     370/     185 :                     
     371/     185 : 90 0C               		jmp 	__CmdMainLoop2 									; back to command loop
     372/     187 :                     
     373/     187 :                     ; ****************************************************************************************************************
     374/     187 :                     ; ****************************************************************************************************************
     375/     187 :                     ;
     376/     187 :                     ;												Commands Section
     377/     187 :                     ;
     378/     187 :                     ; ****************************************************************************************************************
     379/     187 :                     ; ****************************************************************************************************************
     380/     187 :                     
     381/     187 :                     ; ****************************************************************************************************************
     382/     187 :                     ;											A : Set Current address
     383/     187 :                     ; ****************************************************************************************************************
     384/     187 :                     
     385/     187 :                     Address_Command:
     386/     187 : 3F                  		xppc 	p3 												; get parameter if exists
     387/     188 : 3F                  		xppc 	p3 												; update current if exists.
     388/     189 : 90 08               		jmp 	__CmdMainLoop2
     389/     18B :                     
     390/     18B :                     __CmdParameterFail:
     391/     18B : C4 02               		ldi 	2 												; set the beeper on
     392/     18D : 07                  		cas
     393/     18E : 8F FF               		dly 	0xFF 											; short delay
     394/     190 : C4 00               		ldi 	0 												; set the beeper off
     395/     192 : 07                  		cas
     396/     193 :                     __CmdMainLoop2:													; and go back to the start.
     397/     193 : C4 35               		ldi 	(CommandMainLoop-1) & 255
     398/     195 : 33                  		xpal 	p3
     399/     196 : C4 00               		ldi 	(CommandMainLoop-1) / 256
     400/     198 : 37                  		xpah 	p3
     401/     199 : 3F                  		xppc 	p3
     402/     19A :                     
     403/     19A :                     ; ****************************************************************************************************************
     404/     19A :                     ;										G : Go (Address must be specified.)
     405/     19A :                     ; ****************************************************************************************************************
     406/     19A :                     
     407/     19A :                     Go_Command:
     408/     19A : 3F                  		xppc 	p3 												; get parameter, which should exist.
     409/     19B : 06                  		csa 													; look at CY/L which is set if it was.
     410/     19C : 94 ED               		jp 		__CmdParameterFail 								; if it is clear, beep an error.
     411/     19E : 31                  		xpal 	p1 												; copy P1 to P3
     412/     19F : 33                  		xpal 	p3
     413/     1A0 : 35                  		xpah 	p1
     414/     1A1 : 37                  		xpah 	p3
     415/     1A2 : C7 FF               		ld 		@-1(p3) 										; fix up for pre increment
     416/     1A4 : 3F                  		xppc 	p3 												; call the routine.		
     417/     1A5 :                     __CmdMainLoop3:
     418/     1A5 : 90 EC               		jmp 	__CmdMainLoop2 									; re-enter monitor.
     419/     1A7 :                     
     420/     1A7 :                     ; ****************************************************************************************************************
 AS V1.42 Beta [Bld 102] - source file monitor.asm - page 8 - 11/29/2015 16:29:46


     421/     1A7 :                     ;			PUT Write to tape : data mandatory, it is the byte count from the current address.
     422/     1A7 :                     ; ****************************************************************************************************************
     423/     1A7 :                     
     424/     1A7 :                     PutTape_Command:
     425/     1A7 : 3F                  		xppc 	p3 												; get the bytes to write.
     426/     1A8 : 06                  		csa 													; if CC, no value was provided
     427/     1A9 : 94 E0               		jp 		__CmdParameterFail 								; which is an error.
     428/     1AB : 31                  		xpal 	p1 												; store low byte count in -1(P2)
     429/     1AC : CA FF               		st 		-1(p2)
     430/     1AE : 35                  		xpah 	p1 												; store high byte count in -2(P2)
     431/     1AF : CA FE               		st 		-2(p2)
     432/     1B1 : 02                  		ccl 													; skip over the update current address
     433/     1B2 : 3F                  		xppc 	p3 												; this won't update current address as CY/L = 0
     434/     1B3 : 3F                  		xppc 	p3 												; and load the current address into P1.
     435/     1B4 : C4 00               		ldi 	0 												; set the output tape bit low
     436/     1B6 : 01                  		xae
     437/     1B7 : 19                  		sio
     438/     1B8 : C4 20               		ldi 	32 												; tape leader
     439/     1BA : CA FD               		st 		-3(p2)
     440/     1BC :                     _PutTapeLeader:
     441/     1BC : 8F FF               		dly 	0xFF
     442/     1BE : BA FD               		dld 	-3(p2)
     443/     1C0 : 9C FA               		jnz 	_PutTapeLeader
     444/     1C2 :                     _PutTapeByte:													; output byte at P1
     445/     1C2 : C4 00               		ldi 	0 												; set output bit to 0
     446/     1C4 : 01                  		xae 	
     447/     1C5 : 19                  		sio
     448/     1C6 : 8F 10               		dly 	tapeDelay * 4 									; 0 continuation bit + gap between tapes with no signal 
     449/     1C8 : C4 80               		ldi 	0x80 											; set bit high
     450/     1CA : 01                  		xae
     451/     1CB : 19                  		sio 
     452/     1CC : C4 00               		ldi 	0
     453/     1CE : 8F 04               		dly 	tapeDelay 										; output the start bit.
     454/     1D0 : C5 01               		ld 		@1(p1) 											; read the byte and put it in E.
     455/     1D2 : 01                  		xae
     456/     1D3 : C4 08               		ldi 	8 												; output 8 bits
     457/     1D5 : CA FD               		st 		-3(p2)
     458/     1D7 :                     _PutTapeBit:
     459/     1D7 : 19                  		sio 													; output MSB and shift
     460/     1D8 : C4 00               		ldi 	0
     461/     1DA : 8F 04               		dly 	tapeDelay 								
     462/     1DC : BA FD               		dld 	-3(p2) 											; do all 8 bits.
     463/     1DE : BA FF               		dld 	-1(p2) 											; decrement counter
     464/     1E0 : 9C E0               		jnz 	_PutTapeByte
     465/     1E2 : BA FE               		dld 	-2(p2) 											; note MSB goes 0 to -1 when finished.
     466/     1E4 : 94 DC               		jp 		_PutTapeByte
     467/     1E6 : C4 80               		ldi 	0x80 											; add the termination bit.
     468/     1E8 : 01                  		xae
     469/     1E9 : 19                  		sio
     470/     1EA : C4 00               		ldi 	0 												; put that out.
     471/     1EC : 8F 04               		dly 	TapeDelay
     472/     1EE : C4 00               		ldi 	0 												; and set the leve back to 0
     473/     1F0 : 01                  		xae 
     474/     1F1 : 19                  		sio
     475/     1F2 :                     __CmdMainLoop4:
     476/     1F2 : 90 B1               		jmp 	__CmdMainLoop3
     477/     1F4 :                     
     478/     1F4 :                     __CmdParameterFail1:
     479/     1F4 : 90 95               		jmp 	__CmdParameterFail
     480/     1F6 :                     
 AS V1.42 Beta [Bld 102] - source file monitor.asm - page 9 - 11/29/2015 16:29:46


     481/     1F6 :                     ; ****************************************************************************************************************
     482/     1F6 :                     ;						GET [addr] load tape to current position or given address.
     483/     1F6 :                     ; ****************************************************************************************************************
     484/     1F6 :                     
     485/     1F6 :                     LoadTape_Command:
     486/     1F6 : 3F                  		xppc	p3 												; get parameter
     487/     1F7 : 3F                  		xppc 	p3												; update current address
     488/     1F8 : 3F                  		xppc 	p3 												; current address to P1.
     489/     1F9 : C4 08               		ldi 	0x8 											; point P3 to the keyboard.
     490/     1FB : 37                  		xpah 	p3
     491/     1FC :                     __GetTapeWait:
     492/     1FC : C3 00               		ld 		0(p3) 											; check keyboard break
     493/     1FE : D4 80               		ani 	0x80
     494/     200 : 9C F2               		jnz 	__CmdParameterFail1
     495/     202 : 19                  		sio 													; wait for the start bit, examine tape in.
     496/     203 : 40                  		lde 
     497/     204 : D4 01               		ani 	1
     498/     206 : 98 F4               		jz 		__GetTapeWait
     499/     208 : 8F 06               		dly 	tapeDelay * 3 / 2 								; half way into the first bit.
     500/     20A : C4 08               		ldi 	8 												; read in 8 bits.
     501/     20C : CA FF               		st 		-1(p2)
     502/     20E :                     __GetTapeBits:
     503/     20E : 19                  		sio 													; read in one bit
     504/     20F : C4 00               		ldi 	0
     505/     211 : 8F 04               		dly 	tapeDelay 										; delay to next bit
     506/     213 : BA FF               		dld 	-1(p2) 											; read 8 bits.
     507/     215 : 9C F7               		jnz 	__GetTapeBits 
     508/     217 : 40                  		lde 													; store byte at current address
     509/     218 : CD 01               		st 		@1(p1)
     510/     21A : 19                  		sio 													; read in the byte, which is zero if continuing.
     511/     21B : 40                  		lde  													; examine bit 0
     512/     21C : D4 01               		ani 	1
     513/     21E : 98 DC               		jz 		__GetTapeWait 									; go and wait for the next start bit.
     514/     220 :                     __CmdMainLoop5:
     515/     220 : 90 D0               		jmp 	__CmdMainLoop4
     516/     222 :                     
     517/     222 :                     ; ****************************************************************************************************************
     518/     222 :                     ;										L : nn Set Label to current address
     519/     222 :                     ; ****************************************************************************************************************
     520/     222 :                     
     521/     222 :                     Label_Command:
     522/     222 : 3F                  		xppc 	p3 												; get parameter
     523/     223 : 06                  		csa 													; check it exists, CY/L must be set
     524/     224 : 94 CE               		jp 		__CmdParameterFail1
     525/     226 : 31                  		xpal 	p1 												; get into A
     526/     227 : 01                  		xae 													; put into E
     527/     228 : 40                  		lde 													; get back
     528/     229 : 03                  		scl
     529/     22A : FC 20               		cai 	labelCount 										; check is < number of labels
     530/     22C : 94 C6               		jp 		__CmdParameterFail1
     531/     22E :                     
     532/     22E : C4 0C               		ldi 	Current/256 									; point P1 to current address
     533/     230 : 35                  		xpah 	p1
     534/     231 : C4 21               		ldi 	Current&255
     535/     233 : 31                  		xpal 	p1
     536/     234 : C1 00               		ld 		(p1) 											; read current address
     537/     236 : 31                  		xpal 	p1 												; save in P1.Low
     538/     237 : C4 00               		ldi 	Labels&255 										; get labels low byte in same page as current address
     539/     239 : 02                  		ccl
     540/     23A : 70                  		ade 													; add label # to it
 AS V1.42 Beta [Bld 102] - source file monitor.asm - page 10 - 11/29/2015 16:29:46


     541/     23B : 31                  		xpal 	p1 												; put in P1.L and restore current address low
     542/     23C : C9 00               		st 		(p1) 											; store current address low in label space.
     543/     23E : 90 E0               		jmp 	__CmdMainLoop5 									; and exit.
     544/     240 :                     
     545/     240 :                     ; ****************************************************************************************************************
     546/     240 :                     ;											M :	Dump Memory
     547/     240 :                     ; ****************************************************************************************************************
     548/     240 :                     
     549/     240 :                     MemoryDump_Command:
     550/     240 : 3F                  		xppc 	p3 												; get parameter if exists
     551/     241 : 3F                  		xppc 	p3 												; update current if exists.
     552/     242 : C4 06               		ldi 	6 												; print six rows
     553/     244 : CE FF               		st 		@-1(p2)
     554/     246 :                     __DCLoop:
     555/     246 : C4 03               		ldi 	(PrintAddressData-1)/256						; print one row of address and data.
     556/     248 : 37                  		xpah 	p3
     557/     249 : C4 30               		ldi 	(PrintAddressData-1)&255
     558/     24B : 33                  		xpal 	p3
     559/     24C : C4 04               		ldi 	4
     560/     24E : 3F                  		xppc 	p3
     561/     24F : C4 0C               		ldi 	Current/256 									; point P1 to current
     562/     251 : 35                  		xpah 	p1
     563/     252 : C4 21               		ldi 	Current&255 
     564/     254 : 31                  		xpal 	p1
     565/     255 : C1 00               		ld 		0(p1) 											; add 4 to current address
     566/     257 : 02                  		ccl
     567/     258 : F4 04               		adi 	4
     568/     25A : C9 00               		st 		0(p1)
     569/     25C : C1 01               		ld 		1(p1)
     570/     25E : F4 00               		adi 	0
     571/     260 : C9 01               		st 		1(p1)
     572/     262 : BA 00               		dld 	(p2) 											; do it 7 times
     573/     264 : 9C E0               		jnz 	__DCLoop
     574/     266 : C6 01               		ld 		@1(p2) 											; fix up stack.
     575/     268 : 90 B6               		jmp 	__CmdMainLoop5
     576/     26A :                     
     577/     26A :                     
     578/     26A :                     ; ****************************************************************************************************************
     579/     26A :                     ;								B: Enter Bytes (no address, sequence of byte data)
     580/     26A :                     ; ****************************************************************************************************************
     581/     26A :                     
     582/     26A :                     EnterBytes_Command:
     583/     26A : C4 63               		ldi 	(GetParameter-1) & 255 							; P3 = Get Parameter routine
     584/     26C : 33                  		xpal 	p3
     585/     26D : C4 03               		ldi 	(GetParameter-1) / 256 	
     586/     26F : 37                  		xpah 	p3
     587/     270 : 3F                  		xppc 	p3 												; get the parameter.
     588/     271 : 06                  		csa 													; look at carry
     589/     272 : 94 AC               		jp 		__CmdMainLoop5 									; carry clear, no value.
     590/     274 : C4 0C               		ldi 	Current/256 									; make P1 point to current
     591/     276 : 35                  		xpah 	p1
     592/     277 : C4 21               		ldi 	Current&255 										
     593/     279 : 31                  		xpal 	p1 												; this pulls the byte value into A
     594/     27A : 01                  		xae 													; save it in E
     595/     27B : C1 00               		ld 		0(p1) 											; copy address to save to into P3
     596/     27D : 33                  		xpal 	p3
     597/     27E : C1 01               		ld 		1(p1) 
     598/     280 : 37                  		xpah 	p3 
     599/     281 : 40                  		lde 													; get byte back
     600/     282 : CB 00               		st 		(p3) 											; save it in that location
 AS V1.42 Beta [Bld 102] - source file monitor.asm - page 11 - 11/29/2015 16:29:46


     601/     284 : A9 00               		ild 	0(p1) 											; bump current address and go back and try again.
     602/     286 : 9C E2               		jnz 	EnterBytes_Command
     603/     288 : A9 01               		ild 	1(p1)
     604/     28A : 90 DE               		jmp 	EnterBytes_Command
     605/     28C :                     
     606/     28C :                     ; ****************************************************************************************************************
     607/     28C :                     ;											D [aaaa] Disassembler
     608/     28C :                     ; ****************************************************************************************************************
     609/     28C :                     
     610/     28C :                     Disassemble_Command:	
     611/     28C : 3F                  		xppc 	p3 												; evaluate
     612/     28D : 3F                  		xppc 	p3 												; update current if new value
     613/     28E : 3F                  		xppc 	p3												; p1 contains disassembly address now.
     614/     28F :                     
     615/     28F : 90 FE               wait:	jmp 	wait
     616/     291 :                     
     617/     291 :                     ; ****************************************************************************************************************
     618/     291 :                     ; ****************************************************************************************************************
     619/     291 :                     ;
     620/     291 :                     ;						Print A as a hexadecimal 2 digit value. If CY/L set precede with space
     621/     291 :                     ;
     622/     291 :                     ; ****************************************************************************************************************
     623/     291 :                     ; ****************************************************************************************************************
     624/     291 :                     
     625/     291 :                     PrintHexByte:
     626/     291 : CE FF               		st 		@-1(p2) 										; push A and P3, set P3 up to print character
     627/     293 : C4 02               		ldi 	(PrintCharacter-1)/256
     628/     295 : 37                  		xpah 	p3
     629/     296 : CE FF               		st 		@-1(p2)
     630/     298 : C4 C3               		ldi 	(PrintCharacter-1)&255
     631/     29A : 33                  		xpal 	p3
     632/     29B : CE FF               		st 		@-1(p2)
     633/     29D : 06                  		csa 													; check carry
     634/     29E : 94 03               		jp 		__PHBNoSpace									; if clear, no space.
     635/     2A0 : C4 20               		ldi 	' '												; print leading space
     636/     2A2 : 3F                  		xppc 	p3 
     637/     2A3 :                     __PHBNoSpace:
     638/     2A3 : C2 02               		ld 		2(p2) 											; read digit
     639/     2A5 : 1C                  		sr 														; convert MSB
     640/     2A6 : 1C                  		sr
     641/     2A7 : 1C                  		sr
     642/     2A8 : 1C                  		sr
     643/     2A9 : 02                  		ccl
     644/     2AA : EC 90               		dai 	0x90
     645/     2AC : EC 40               		dai 	0x40
     646/     2AE : 3F                  		xppc 	p3 												; print
     647/     2AF : C2 02               		ld 		2(p2) 											; read digit
     648/     2B1 : D4 0F               		ani 	0x0F 											; convert LSB
     649/     2B3 : 02                  		ccl
     650/     2B4 : EC 90               		dai 	0x90
     651/     2B6 : EC 40               		dai 	0x40
     652/     2B8 : 3F                  		xppc 	p3 												; print
     653/     2B9 :                     
     654/     2B9 : C6 01               		ld 		@1(p2) 											; restore P3 & A and Return
     655/     2BB : 33                  		xpal 	p3
     656/     2BC : C6 01               		ld 		@1(p2)
     657/     2BE : 37                  		xpah 	p3
     658/     2BF : C6 01               		ld 		@1(p2)
     659/     2C1 : 3F                  		xppc 	p3
     660/     2C2 : 90 CD               		jmp 	PrintHexByte
 AS V1.42 Beta [Bld 102] - source file monitor.asm - page 12 - 11/29/2015 16:29:46


     661/     2C4 :                     
     662/     2C4 :                     ; ****************************************************************************************************************
     663/     2C4 :                     ; ****************************************************************************************************************
     664/     2C4 :                     ;
     665/     2C4 :                     ;		Print Character in A, preserves all registers, re-entrant. Handles 13 (New Line), 8 (Backspace)
     666/     2C4 :                     ;		Characters 32 - 95 only.
     667/     2C4 :                     ;	
     668/     2C4 :                     ;		Rolls to screen top rather than scrolling.
     669/     2C4 :                     ;
     670/     2C4 :                     ; ****************************************************************************************************************
     671/     2C4 :                     ; ****************************************************************************************************************
     672/     2C4 :                     
     673/     2C4 :                     PrintCharacter:
     674/     2C4 : CE FF               		st 		@-1(p2) 										; save A
     675/     2C6 : C4 0C               		ldi 	Cursor/256 										; save P1, setting up P1 -> Cursor at same time.
     676/     2C8 : 35                  		xpah 	p1
     677/     2C9 : CE FF               		st 		@-1(p2)
     678/     2CB : C4 20               		ldi 	Cursor&255
     679/     2CD : 31                  		xpal 	p1
     680/     2CE : CE FF               		st 		@-1(p2)
     681/     2D0 : C4 00               		ldi 	0 												; save P3, setting up P3 -> Page 0 (Video RAM Write)
     682/     2D2 : 37                  		xpah 	p3
     683/     2D3 : CE FF               		st 		@-1(p2)
     684/     2D5 : 33                  		xpal 	p3
     685/     2D6 : CE FF               		st 		@-1(p2)
     686/     2D8 :                     
     687/     2D8 : C1 00               		ld 		(p1) 											; read cursor position
     688/     2DA : 33                  		xpal 	p3 												; put in P3.Low
     689/     2DB :                     
     690/     2DB : C4 20               		ldi 	' ' 											; erase the cursor.
     691/     2DD : CB 00               		st 		0(p3)
     692/     2DF :                     
     693/     2DF : C2 04               		ld 		4(p2) 											; read character to print.
     694/     2E1 : E4 0D               		xri 	13 												; is it CR ?
     695/     2E3 : 98 40               		jz 		__PCNewLine 									; if so, go to new line.
     696/     2E5 : E4 05               		xri 	13!8 											; is it Backspace ?
     697/     2E7 : 98 30               		jz 		__PCBackSpace
     698/     2E9 :                     
     699/     2E9 : C2 04               		ld 		4(p2) 											; get character to print
     700/     2EB : D4 3F               		ani 	0x3F 											; make 6 bit ASCII
     701/     2ED : CF 01               		st 		@1(p3) 											; write into P3, e.g. the screen and bump it.
     702/     2EF : A9 00               		ild 	(p1) 											; increment cursor position and load
     703/     2F1 : D4 0F               		ani 	15 												; are we at line start ?
     704/     2F3 : 9C 0C               		jnz 	__PCExit 										; if so, erase the current line.
     705/     2F5 :                     
     706/     2F5 :                     __PCBlankNewLine:
     707/     2F5 : C4 10               		ldi 	16 												; count to 16, the number of spaces to write out.
     708/     2F7 : CA FF               		st 		-1(p2) 
     709/     2F9 :                     __PCBlankNewLineLoop:
     710/     2F9 : C4 20               		ldi 	' '
     711/     2FB : CF 01               		st 		@1(p3)
     712/     2FD : BA FF               		dld 	-1(p2)
     713/     2FF : 9C F8               		jnz 	__PCBlankNewLineLoop
     714/     301 :                     
     715/     301 :                     __PCExit:
     716/     301 : C1 00               		ld 		(p1) 											; read cursor
     717/     303 : 33                  		xpal 	p3 												; put in P3.L
     718/     304 : C4 9B               		ldi 	0x9B 											; shaded block cursor on screen
     719/     306 : CB 00               		st 		(p3)
     720/     308 : C6 01               		ld 		@1(p2)											; restore P3
 AS V1.42 Beta [Bld 102] - source file monitor.asm - page 13 - 11/29/2015 16:29:46


     721/     30A : 33                  		xpal 	p3
     722/     30B : C6 01               		ld 		@1(p2)
     723/     30D : 37                  		xpah 	p3
     724/     30E : C6 01               		ld 		@1(p2)											; restore P1
     725/     310 : 31                  		xpal 	p1
     726/     311 : C6 01               		ld 		@1(p2)
     727/     313 : 35                  		xpah 	p1
     728/     314 : C6 01               		ld 		@1(p2) 											; restore A and Return.	
     729/     316 : 3F                  		xppc 	p3
     730/     317 : 90 AB               		jmp 	PrintCharacter 									; and it is re-entrant.
     731/     319 :                     
     732/     319 :                     __PCBackSpace:
     733/     319 : 33                  		xpal 	p3 												; get current cursor position
     734/     31A : 98 E5               		jz 		__PCExit 										; if top of screen then exit.
     735/     31C : B9 00               		dld 	(p1) 											; backspace and load cursor
     736/     31E : 33                  		xpal 	p3 												; put in P3
     737/     31F : C4 20               		ldi 	' '												; erase character there
     738/     321 : CB 00               		st 		(p3)
     739/     323 : 90 DC               		jmp 	__PCExit 										; and exit.
     740/     325 :                     
     741/     325 :                     __PCNewLine:
     742/     325 : C1 00               		ld 		(p1) 											; read cursor position
     743/     327 : D4 70               		ani 	0x70 											; line
     744/     329 : 02                  		ccl 													; next line
     745/     32A : F4 10               		adi 	0x10
     746/     32C : C9 00               		st 		(p1) 											; write back
     747/     32E : 33                  		xpal 	p3 												; put in P3.L
     748/     32F : 90 C4               		jmp 	__PCBlankNewLine
     749/     331 :                     
     750/     331 :                     ; ****************************************************************************************************************
     751/     331 :                     ; ****************************************************************************************************************
     752/     331 :                     ;
     753/     331 :                     ;					Print current address followed by A data bytes. Doesn't update current address
     754/     331 :                     ;
     755/     331 :                     ; ****************************************************************************************************************
     756/     331 :                     ; ****************************************************************************************************************
     757/     331 :                     
     758/     331 :                     PrintAddressData:
     759/     331 : CE FF               		st 		@-1(p2) 										; save count, we don't restore this.
     760/     333 : C4 02               		ldi 	(PrintHexByte-1)/256 							; save and set up P3
     761/     335 : 37                  		xpah 	p3
     762/     336 : CE FF               		st 		@-1(p2)
     763/     338 : C4 90               		ldi 	(PrintHexByte-1)&255
     764/     33A : 33                  		xpal 	p3
     765/     33B : CE FF               		st 		@-1(p2)
     766/     33D : C4 0C               		ldi 	current / 256 									; point P1 to current address
     767/     33F : 35                  		xpah 	p1
     768/     340 : C4 21               		ldi 	current & 255
     769/     342 : 31                  		xpal 	p1
     770/     343 : C1 01               		ld 		1(p1) 											; read high byte of address
     771/     345 : 02                  		ccl
     772/     346 : 3F                  		xppc 	p3												; print w/o leading space
     773/     347 : C1 00               		ld 		0(p1)											; read low byte of address
     774/     349 : 02                  		ccl 	
     775/     34A : 3F                  		xppc 	p3 												; print w/o leading space.
     776/     34B : 01                  		xae 													; put in E
     777/     34C : C1 01               		ld 		1(p1) 											; high byte to P1.H
     778/     34E : 35                  		xpah 	p1
     779/     34F : 40                  		lde 													; low byte to P1.H
     780/     350 : 31                  		xpal 	p1
 AS V1.42 Beta [Bld 102] - source file monitor.asm - page 14 - 11/29/2015 16:29:46


     781/     351 :                     _PADLoop:
     782/     351 : BA 02               		dld 	2(p2) 											; decrement counter
     783/     353 : 94 09               		jp 		_PADPrint 										; if +ve print another byte
     784/     355 :                     
     785/     355 : C6 01               		ld 		@1(p2) 											; restore P3, skipping A hence @2
     786/     357 : 33                  		xpal 	p3
     787/     358 : C6 02               		ld 		@2(p2)
     788/     35A : 37                  		xpah 	p3
     789/     35B : 3F                  		xppc 	p3
     790/     35C : 90 D3               		jmp 	PrintAddressData
     791/     35E :                     
     792/     35E :                     _PADPrint:
     793/     35E : C5 01               		ld 		@1(p1) 											; read byte advance pointer
     794/     360 : 03                  		scl
     795/     361 : 3F                  		xppc 	p3 												; print with space.
     796/     362 : 90 ED               		jmp 	_PADLoop
     797/     364 :                     
     798/     364 :                     ; ****************************************************************************************************************
     799/     364 :                     ;
     800/     364 :                     ;		Look at the parameter string for a parameter, processing @ and Pn as you go, CS if parameter found
     801/     364 :                     ; 		CC otherwise. Return parameter value in P1. Falls through
     802/     364 :                     ;
     803/     364 :                     ; ****************************************************************************************************************
     804/     364 :                     
     805/     364 :                     GetParameter:
     806/     364 : C4 0C               		ldi 	parPosn/256 									; current position into P1
     807/     366 : 35                  		xpah 	p1
     808/     367 : C4 23               		ldi 	parPosn&255 					
     809/     369 : 31                  		xpal 	p1
     810/     36A : C4 00               		ldi 	0 												; -1(p2) is the low byte result
     811/     36C : CA FF               		st 		-1(p2) 											; -2(p2) is the high byte result
     812/     36E : CA FE               		st 		-2(p2)
     813/     370 :                     
     814/     370 : C1 00               		ld 		(p1) 											; read the current position,P1 points to character
     815/     372 : 31                  		xpal 	p1 												; when we put it in P1.L
     816/     373 :                     
     817/     373 :                     __GPASkip:														; skip over spaces to first alphanumeric.
     818/     373 : C1 00               		ld 		(p1) 											; read character
     819/     375 : 98 7B               		jz 		__GPAExitFail 									; if zero, then end of the input string.
     820/     377 : C5 01               		ld 		@1(p1) 											; read it, advancing.
     821/     379 : E4 20               		xri 	32 												; is it space ?
     822/     37B : 98 F6               		jz 		__GPASkip 
     823/     37D : E4 60               		xri 	32!'@'											; is it @ ?
     824/     37F : 98 5E               		jz 		__GPAAtModifier 
     825/     381 : E4 10               		xri 	'@'!'P' 										; is it P ?
     826/     383 : 98 4C               		jz 		__GPAPointerModifier
     827/     385 :                     
     828/     385 :                     __GPANextCharacter:
     829/     385 : C1 FF               		ld 		-1(p1) 											; get value back after post increment.
     830/     387 : 02                  		ccl
     831/     388 : F4 50               		adi 	128-48 											; this will be +ve if A < '0'
     832/     38A : 94 66               		jp 		__GPAExitFail
     833/     38C : FC 09               		cai 	9 												; will be +ve if A < '9', CY/L was clear.	
     834/     38E : 94 0A               		jp 		__GPAFoundHex
     835/     390 : FC 07               		cai 	7 												; will be +ve if A < 'A', CY/L was set
     836/     392 : 94 5E               		jp 		__GPAExitFail
     837/     394 : F4 79               		adi 	0xFF-0x85-1 									; will be +ve if A > 'F', CY/L was set.
     838/     396 : 94 5A               		jp 		__GPAExitFail 					
     839/     398 : F4 76               		adi 	(0x70-0xFA) & 0xFF 								; make the range as below, CY/L was clear
     840/     39A :                     __GPAFoundHex: 													; enter here 0-9 = $76..$7F, A-F = $70..$75
 AS V1.42 Beta [Bld 102] - source file monitor.asm - page 15 - 11/29/2015 16:29:46


     841/     39A : 02                  		ccl  													; convert that to a hex nibble.
     842/     39B : F4 0A               		adi 	10
     843/     39D : D4 0F               		ani 	0xF
     844/     39F : 01                  		xae 													; save in E, temporarily
     845/     3A0 : C4 04               		ldi 	4 												; now shift the result 4 bits to the left.
     846/     3A2 : CA FD               		st 		-3(p2) 											; -3(p2) is the counter
     847/     3A4 :                     __GPAShift:
     848/     3A4 : 02                  		ccl
     849/     3A5 : C2 FF               		ld 		-1(p2) 											; shift 16 bit result 1 bit to the left.
     850/     3A7 : F2 FF               		add 	-1(p2)
     851/     3A9 : CA FF               		st 		-1(p2)
     852/     3AB : C2 FE               		ld 		-2(p2)
     853/     3AD : F2 FE               		add 	-2(p2)
     854/     3AF : CA FE               		st 		-2(p2)
     855/     3B1 : BA FD               		dld 	-3(p2) 											; do it four times
     856/     3B3 : 9C EF               		jnz 	__GPAShift 	
     857/     3B5 : C2 FF               		ld 		-1(p2) 											; Or E into the LSB
     858/     3B7 : 58                  		ore
     859/     3B8 : CA FF               		st 		-1(p2)
     860/     3BA :                     
     861/     3BA : C5 01               		ld 		@1(p1) 											; look at next character, post incrementing.
     862/     3BC : 03                  		scl
     863/     3BD : FC 22               		cai 	34 												; if it is after space and ! (label marker)
     864/     3BF : 94 C4               		jp 		__GPANextCharacter 								; go back and put it in place.
     865/     3C1 :                     
     866/     3C1 : C5 FF               		ld 		@-1(p1) 										; undo the increment, incase we've just read zero.
     867/     3C3 :                     
     868/     3C3 : C4 23               		ldi 	parPosn & 255 									; put the parPosn address in P1.L, new posn into A
     869/     3C5 : 31                  		xpal 	p1
     870/     3C6 : C9 00               		st 		(p1) 											; and write it back
     871/     3C8 : C2 FF               		ld 		-1(p2) 											; put the result into P1
     872/     3CA : 31                  		xpal 	p1
     873/     3CB : C2 FE               		ld 		-2(p2)
     874/     3CD : 35                  		xpah 	p1
     875/     3CE : 03                  		scl 													; set CY/L to indicate okay
     876/     3CF : 90 22               		jmp 	__GPAExit
     877/     3D1 :                     
     878/     3D1 :                     __GPAPointerModifier:
     879/     3D1 : C1 00               		ld 		(p1) 											; read P<something> ?
     880/     3D3 : D4 FC               		ani 	0xFC 											; is it '0' .. '3'?
     881/     3D5 : E4 30               		xri 	'0'
     882/     3D7 : 9C 19               		jnz 	__GPAExitFail 									; it didn't work, not 0..3
     883/     3D9 : C5 01               		ld 		@1(p1) 											; re-read it and advance
     884/     3DB : D4 03               		ani 	3												; lower 2 bits only
     885/     3DD : 90 02               		jmp 	__GPAAdjustModifier
     886/     3DF :                     __GPAAtModifier:
     887/     3DF : C4 04               		ldi 	4 												; set modifier adjustment to +4
     888/     3E1 :                     __GPAAdjustModifier:
     889/     3E1 : CA FD               		st 		-3(p2) 
     890/     3E3 : C4 24               		ldi 	modifier & 255 									; point P1 to modifier, save current address in E
     891/     3E5 : 31                  		xpal 	p1
     892/     3E6 : 01                  		xae 
     893/     3E7 : C1 00               		ld 		(p1) 											; read modifier
     894/     3E9 : 02                  		ccl
     895/     3EA : F2 FD               		add 	-3(p2) 											; add the modifying value to it.
     896/     3EC : C9 00               		st 		(p1) 											; write modifier.
     897/     3EE : 40                  		lde 													; restore current address to P1.L
     898/     3EF : 31                  		xpal 	p1
     899/     3F0 : 90 81               		jmp 	__GPASkip 										; go back to skip over.
     900/     3F2 :                     
 AS V1.42 Beta [Bld 102] - source file monitor.asm - page 16 - 11/29/2015 16:29:46


     901/     3F2 :                     __GPAExitFail:
     902/     3F2 : 02                  		ccl 													; carry clear, e.g. nothing read in / error.
     903/     3F3 :                     __GPAExit:
     904/     3F3 : 3F                  		xppc 	p3
     905/     3F4 :                     
     906/     3F4 :                     ; ****************************************************************************************************************
     907/     3F4 :                     ;
     908/     3F4 :                     ;		Store parameter value in P1 in the current address, if CS. Falls through.
     909/     3F4 :                     ;
     910/     3F4 :                     ; ****************************************************************************************************************
     911/     3F4 :                     
     912/     3F4 :                     UpdateCurrentAddress:
     913/     3F4 : 06                  		csa 													; get status reg
     914/     3F5 : 94 0C               		jp 		__UCAExit 										; if carry flag clear then exit.
     915/     3F7 :                     
     916/     3F7 : C4 21               		ldi 	current & 255 									; current address to P1.L, acquired address to E
     917/     3F9 : 31                  		xpal 	p1
     918/     3FA : 01                  		xae
     919/     3FB : C4 0C               		ldi 	current / 256 									; current address to P1.H, acquired to A
     920/     3FD : 35                  		xpah 	p1
     921/     3FE : C9 01               		st 		1(p1) 											; store address back
     922/     400 : 40                  		lde
     923/     401 : C9 00               		st 		0(p1)
     924/     403 :                     __UCAExit:
     925/     403 : 3F                  		xppc 	p3
     926/     404 :                     
     927/     404 :                     ; ****************************************************************************************************************
     928/     404 :                     ;
     929/     404 :                     ;		Get current address into P1.
     930/     404 :                     ;
     931/     404 :                     ; ****************************************************************************************************************
     932/     404 :                     
     933/     404 :                     GetCurrentAddress:
     934/     404 : C4 0C               		ldi 	current/256 									; current address ptr in P1
     935/     406 : 35                  		xpah 	p1
     936/     407 : C4 21               		ldi 	current&255
     937/     409 : 31                  		xpal 	p1
     938/     40A : C1 00               		ld 		0(p1) 											; low byte to E
     939/     40C : 01                  		xae
     940/     40D : C1 01               		ld 		1(p1) 											; high byte to A
     941/     40F : 35                  		xpah 	p1 												; then to P1.H
     942/     410 : 40                  		lde 													; low byte to P1.L
     943/     411 : 31                  		xpal 	p1 
     944/     412 : 3F                  		xppc 	p3
     945/     413 :                     
     946/     413 :                     ; ****************************************************************************************************************
     947/     413 :                     ;
     948/     413 :                     ;											List of commands and Jump Table
     949/     413 :                     ;
     950/     413 :                     ; ****************************************************************************************************************
     951/     413 :                     
     952/     413 :                     		include commands.inc 									; must be at the end, so the command table is in
(1)    1/     747 :                             org 0x0747
(1)    2/     747 :                     ;
(1)    3/     747 :                     ; 	This file is generated automatically by gencommands.py
(1)    4/     747 :                     ;
(1)    5/     747 :                     __CommandList:
(1)    6/     747 : 94 21                       dw    0x2194 ; HLT
(1)    7/     749 : 00                          db    0x00
(1)    8/     74A : 25 60                       dw    0x6025 ; XAE
 AS V1.42 Beta [Bld 102] - source file monitor.asm(commands.inc) - page 17 - 11/29/2015 16:29:46


(1)    9/     74C : 01                          db    0x01
(1)   10/     74D : 6C 0C                       dw    0x0c6c ; CCL
(1)   11/     74F : 02                          db    0x02
(1)   12/     750 : 6C 4C                       dw    0x4c6c ; SCL
(1)   13/     752 : 03                          db    0x03
(1)   14/     753 : 2E 11                       dw    0x112e ; DIN
(1)   15/     755 : 04                          db    0x04
(1)   16/     756 : AE 24                       dw    0x24ae ; IEN
(1)   17/     758 : 05                          db    0x05
(1)   18/     759 : 61 0E                       dw    0x0e61 ; CSA
(1)   19/     75B : 06                          db    0x06
(1)   20/     75C : 33 0C                       dw    0x0c33 ; CAS
(1)   21/     75E : 07                          db    0x07
(1)   22/     75F : F0 39                       dw    0x39f0 ; NOP
(1)   23/     761 : 08                          db    0x08
(1)   24/     762 : 2F 4D                       dw    0x4d2f ; SIO
(1)   25/     764 : 19                          db    0x19
(1)   26/     765 : 72 02                       dw    0x0272 ; SR
(1)   27/     767 : 1C                          db    0x1c
(1)   28/     768 : 4C 4E                       dw    0x4e4c ; SRL
(1)   29/     76A : 1D                          db    0x1d
(1)   30/     76B : 52 02                       dw    0x0252 ; RR
(1)   31/     76D : 1E                          db    0x1e
(1)   32/     76E : 4C 4A                       dw    0x4a4c ; RRL
(1)   33/     770 : 1F                          db    0x1f
(1)   34/     771 : 0D 00                       dw    0x000d ; M
(1)   35/     773 : 20                          db    0x20
(1)   36/     774 : 01 00                       dw    0x0001 ; A
(1)   37/     776 : 21                          db    0x21
(1)   38/     777 : 07 00                       dw    0x0007 ; G
(1)   39/     779 : 22                          db    0x22
(1)   40/     77A : B4 42                       dw    0x42b4 ; PUT
(1)   41/     77C : 23                          db    0x23
(1)   42/     77D : B4 1C                       dw    0x1cb4 ; GET
(1)   43/     77F : 24                          db    0x24
(1)   44/     780 : 03 00                       dw    0x0003 ; C
(1)   45/     782 : 25                          db    0x25
(1)   46/     783 : 02 00                       dw    0x0002 ; B
(1)   47/     785 : 26                          db    0x26
(1)   48/     786 : 0C 00                       dw    0x000c ; L
(1)   49/     788 : 27                          db    0x27
(1)   50/     789 : 04 00                       dw    0x0004 ; D
(1)   51/     78B : 28                          db    0x28
(1)   52/     78C : 0C 62                       dw    0x620c ; XPL
(1)   53/     78E : 30                          db    0x30
(1)   54/     78F : 08 62                       dw    0x6208 ; XPH
(1)   55/     791 : 34                          db    0x34
(1)   56/     792 : 03 62                       dw    0x6203 ; XPC
(1)   57/     794 : 3C                          db    0x3c
(1)   58/     795 : 85 30                       dw    0x3085 ; LDE
(1)   59/     797 : 40                          db    0x40
(1)   60/     798 : C5 05                       dw    0x05c5 ; ANE
(1)   61/     79A : 50                          db    0x50
(1)   62/     79B : 45 3E                       dw    0x3e45 ; ORE
(1)   63/     79D : 58                          db    0x58
(1)   64/     79E : 45 62                       dw    0x6245 ; XRE
(1)   65/     7A0 : 60                          db    0x60
(1)   66/     7A1 : 25 10                       dw    0x1025 ; DAE
(1)   67/     7A3 : 68                          db    0x68
(1)   68/     7A4 : 85 04                       dw    0x0485 ; ADE
 AS V1.42 Beta [Bld 102] - source file monitor.asm(commands.inc) - page 18 - 11/29/2015 16:29:46


(1)   69/     7A6 : 70                          db    0x70
(1)   70/     7A7 : 25 0C                       dw    0x0c25 ; CAE
(1)   71/     7A9 : 78                          db    0x78
(1)   72/     7AA : 99 11                       dw    0x1199 ; DLY
(1)   73/     7AC : 8F                          db    0x8f
(1)   74/     7AD : B0 29                       dw    0x29b0 ; JMP
(1)   75/     7AF : 90                          db    0x90
(1)   76/     7B0 : 50 01                       dw    0x0150 ; JP
(1)   77/     7B2 : 94                          db    0x94
(1)   78/     7B3 : 5A 01                       dw    0x015a ; JZ
(1)   79/     7B5 : 98                          db    0x98
(1)   80/     7B6 : DA 29                       dw    0x29da ; JNZ
(1)   81/     7B8 : 9C                          db    0x9c
(1)   82/     7B9 : 84 25                       dw    0x2584 ; ILD
(1)   83/     7BB : A8                          db    0xa8
(1)   84/     7BC : 84 11                       dw    0x1184 ; DLD
(1)   85/     7BE : B8                          db    0xb8
(1)   86/     7BF : 84 01                       dw    0x0184 ; LD
(1)   87/     7C1 : C0                          db    0xc0
(1)   88/     7C2 : 89 30                       dw    0x3089 ; LDI
(1)   89/     7C4 : C4                          db    0xc4
(1)   90/     7C5 : 74 02                       dw    0x0274 ; ST
(1)   91/     7C7 : C8                          db    0xc8
(1)   92/     7C8 : C4 05                       dw    0x05c4 ; AND
(1)   93/     7CA : D0                          db    0xd0
(1)   94/     7CB : C9 05                       dw    0x05c9 ; ANI
(1)   95/     7CD : D4                          db    0xd4
(1)   96/     7CE : F2 01                       dw    0x01f2 ; OR
(1)   97/     7D0 : D8                          db    0xd8
(1)   98/     7D1 : 49 3E                       dw    0x3e49 ; ORI
(1)   99/     7D3 : DC                          db    0xdc
(1)  100/     7D4 : F2 61                       dw    0x61f2 ; XOR
(1)  101/     7D6 : E0                          db    0xe0
(1)  102/     7D7 : 49 62                       dw    0x6249 ; XRI
(1)  103/     7D9 : E4                          db    0xe4
(1)  104/     7DA : 24 10                       dw    0x1024 ; DAD
(1)  105/     7DC : E8                          db    0xe8
(1)  106/     7DD : 29 10                       dw    0x1029 ; DAI
(1)  107/     7DF : EC                          db    0xec
(1)  108/     7E0 : 84 04                       dw    0x0484 ; ADD
(1)  109/     7E2 : F0                          db    0xf0
(1)  110/     7E3 : 89 04                       dw    0x0489 ; ADI
(1)  111/     7E5 : F4                          db    0xf4
(1)  112/     7E6 : 24 0C                       dw    0x0c24 ; CAD
(1)  113/     7E8 : F8                          db    0xf8
(1)  114/     7E9 : 29 0C                       dw    0x0c29 ; CAI
(1)  115/     7EB : FC                          db    0xfc
(1)  116/     7EC :                     __CommandListEnd:
(1)  117/     7EC : 00 00                       dw    0x0000 ; End Marker	
(1)  118/     7EE :                     
(1)  119/     7EE :                     __CommandTable:
(1)  120/     7EE : 40 02                       dw    MemoryDump_Command
(1)  121/     7F0 : 87 01                       dw    Address_Command
(1)  122/     7F2 : 9A 01                       dw    Go_Command
(1)  123/     7F4 : A7 01                       dw    PutTape_Command
(1)  124/     7F6 : F6 01                       dw    LoadTape_Command
(1)  125/     7F8 : 1F 00                       dw    ClearScreen_Command
(1)  126/     7FA : 6A 02                       dw    EnterBytes_Command
(1)  127/     7FC : 22 02                       dw    Label_Command
(1)  128/     7FE : 8C 02                       dw    Disassemble_Command
 AS V1.42 Beta [Bld 102] - source file monitor.asm(commands.inc) - page 19 - 11/29/2015 16:29:46


(1)  129/     800 :                     
     953/     800 :                     																; the same page.
     954/     800 :                     
     955/     800 :                     ; ****************************************************************************************************************
     956/     800 :                     ;
     957/     800 :                     ;													Tape Format. 
     958/     800 :                     ;
     959/     800 :                     ; ****************************************************************************************************************
     960/     800 :                     ;
     961/     800 :                     ;		1 x start bit 		'1' value is held for period of time.
     962/     800 :                     ;		8 x data bits  		'0 or 1' value is held for a period of time.
     963/     800 :                     ;		1 x continuation	'0' if another bit follows, '1' if end.
     964/     800 :                     ;		at least 2 bit times between bytes.
     965/     800 :                     ;
     966/     800 :                     ;		Use DLY 4 with A = 0 (DLY 6 to skip half-start)
     967/     800 :                     ; 		= 13 + 2 * 0 + 514 * 4 microcycles
     968/     800 :                     ;		= 2,069 microcycles
     969/     800 :                     ;	
     970/     800 :                     ;		which is about 240 bits per second.
     971/     800 :                     ;
     972/     800 :                     ; ****************************************************************************************************************
     973/     800 :                     ;
     974/     800 :                     ;												Monitor Commands
     975/     800 :                     ;
     976/     800 :                     ; ****************************************************************************************************************
     977/     800 :                     ;
     978/     800 :                     ;		A [aaaa] 			Set current address to aaaa
     979/     800 :                     ;		B [cc] [dd] [ee]..	Fill memory from current address
     980/     800 :                     ; 		C 					Clear screen
     981/     800 :                     ;		D [aaaa] 			Disassemble from aaaa (not complete yet)
     982/     800 :                     ;		G aaaa 				Run from address - address must be given - return with XPPC P3
     983/     800 :                     ; 		L n 				Set label n to the current address (up to 32 labels 00-1F)
     984/     800 :                     ; 		M [aaaa] 			Memory dump from current address/aaaa (6 lines, 4 bytes per line)
     985/     800 :                     ; 		GET [aaaa] 			Load tape to current address/aaa
     986/     800 :                     ;		PUT [nnnn]			Write nnnn bytes from current address onwards to tape.
     987/     800 :                     ;
     988/     800 :                     ;		Assembler
     989/     800 :                     ;
     990/     800 :                     ;		Standard SC/MP mnemonics, except for XPAH, XPAL, XPPC, HALT and DINT which are XPH XPL XPC HLT DIN
     991/     800 :                     ;		respectively (4 character mnemonics not supported)
     992/     800 :                     ;
     993/     800 :                     ;		Address modes are written as such:
     994/     800 :                     ;
     995/     800 :                     ;		Direct:			LD 	address 					(offset auto calculated, also for jump)
     996/     800 :                     ;		Indexed:		LD  P1 7 						(normally ld 7(p1))
     997/     800 :                     ;		Immediate:		DLY 42 					
     998/     800 :                     ;		AutoIndexed:	LD @P1 4 						(normally ld @4(p1))
     999/     800 :                     ;
    1000/     800 :                     ;		Labels are accessed via the pling, so to jump to label 4 rather than address 4 you write
    1001/     800 :                     ;
    1002/     800 :                     ;		JMP 4!
    1003/     800 :                     ;
    1004/     800 :                     ; ****************************************************************************************************************
    1005/     800 :                     
 AS V1.42 Beta [Bld 102] - source file monitor.asm - page 20 - 11/29/2015 16:29:46


  symbol table (* = unused):
  ------------------------

 ADDRESS_COMMAND :              187 C | *ARCHITECTURE :  i386-unknown-win32 - |
*BIGENDIAN :                      0 - | *BRANCHEXT :                      0 - |
*CASESENSITIVE :                  0 - |  CLEARSCREENLOOP :               24 C |
 CLEARSCREEN_COMMAND :           1F C |  CODESTART :                    C35 - |
 COMMANDMAINLOOP :               36 C | *CONSTPI :        3.141592653589793 - |
 CURRENT :                      C21 - |  CURSOR :                       C20 - |
*DATE :                  11/29/2015 - |  DISASSEMBLE_COMMAND :          28C C |
 ENTERBYTES_COMMAND :           26A C |  EXTRACT5BIT :                   A1 C |
*FALSE :                          0 - |  FINDTOPMEMORY :                  9 C |
*FULLPMMU :                       1 - | *GETCURRENTADDRESS :            404 C |
 GETPARAMETER :                 364 C |  GO_COMMAND :                   19A C |
*HAS64 :                          1 - | *HASDSP :                         0 - |
*HASFPU :                         0 - | *HASPMMU :                        0 - |
*INEXTMODE :                      0 - | *INLWORDMODE :                    0 - |
*INMAXMODE :                      0 - | *INSRCMODE :                      0 - |
*INSUPMODE :                      0 - |  KBDBUFFER :                    C25 - |
 KBDBUFFERLN :                   10 - |  KEYBOARDLOOP :                  4B C |
 LABELCOUNT :                    20 - |  LABELS :                       C00 - |
 LABEL_COMMAND :                222 C | *LISTON :                         1 - |
 LOADTAPE_COMMAND :             1F6 C | *MACEXP :                         1 - |
 MEMORYDUMP_COMMAND :           240 C |  MODIFIER :                     C24 - |
*MOMCPU :                         C - | *MOMCPUNAME :                 SC/MP - |
*NESTMAX :                      100 - | *PACKING :                        0 - |
*PADDING :                        1 - |  PARPOSN :                      C23 - |
 PRINTADDRESSDATA :             331 C |  PRINTCHARACTER :               2C4 C |
 PRINTHEXBYTE :                 291 C |  PUTTAPE_COMMAND :              1A7 C |
*RELAXED :                        0 - |  TAPEDELAY :                      4 - |
*TIME :                    16:29:46 - | *TRUE :                           1 - |
*UPDATECURRENTADDRESS :         3F4 C |  VARBASE :                      C20 - |
*VERSION :                     142F - |  WAIT :                         28F C |
 _KBDWAITKEY :                   54 C |  _KBDWAITRELEASE :               4E C |
 _PADLOOP :                     351 C |  _PADPRINT :                    35E C |
*_PUTTAPEBIT :                  1D7 C |  _PUTTAPEBYTE :                 1C2 C |
 _PUTTAPELEADER :               1BC C |  __ASMCONTINUE :                145 C |
 __ASMEXIT :                    17D C |  __ASMNOPARAMETER :             13D C |
 __ASSEMBLER :                  10E C |  __CMDMAINLOOP1 :                92 C |
 __CMDMAINLOOP2 :               193 C |  __CMDMAINLOOP3 :               1A5 C |
 __CMDMAINLOOP4 :               1F2 C |  __CMDMAINLOOP5 :               220 C |
 __CMDPARAMETERFAIL :           18B C |  __CMDPARAMETERFAIL1 :          1F4 C |
 __COMMANDERROR :               104 C |  __COMMANDLIST :                747 C |
*__COMMANDLISTEND :             7EC C |  __COMMANDTABLE :               7EE C |
 __DCLOOP :                     246 C |  __EX5SHIFT :                    AC C |
 __EXTRACTEND :                  C2 C |  __FINDCOMMANDLOOP :             CD C |
 __GETTAPEBITS :                20E C |  __GETTAPEWAIT :                1FC C |
 __GPAADJUSTMODIFIER :          3E1 C |  __GPAATMODIFIER :              3DF C |
 __GPAEXIT :                    3F3 C |  __GPAEXITFAIL :                3F2 C |
 __GPAFOUNDHEX :                39A C |  __GPANEXTCHARACTER :           385 C |
 __GPAPOINTERMODIFIER :         3D1 C |  __GPASHIFT :                   3A4 C |
 __GPASKIP :                    373 C |  __KBDBACKSPACE :                86 C |
 __KBDEXIT :                     94 C |  __KBDNOTLOWER :                 7A C |
 __PCBACKSPACE :                319 C |  __PCBLANKNEWLINE :             2F5 C |
 __PCBLANKNEWLINELOOP :         2F9 C |  __PCEXIT :                     301 C |
 __PCNEWLINE :                  325 C |  __PHBNOSPACE :                 2A3 C |
 __UCAEXIT :                    403 C |

    107 symbols
     32 unused symbols
 AS V1.42 Beta [Bld 102] - source file monitor.asm - page 21 - 11/29/2015 16:29:46



 AS V1.42 Beta [Bld 102] - source file monitor.asm - page 22 - 11/29/2015 16:29:46


  codepages:
  ----------

STANDARD (0 changed characters)


0.02 seconds assembly time

   1134 lines source file
      2 passes
      0 errors
      0 warnings
