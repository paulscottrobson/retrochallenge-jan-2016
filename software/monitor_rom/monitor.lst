 AS V1.42 Beta [Bld 102] - source file monitor.asm - page 1 - 12/2/2015 15:41:12


       1/       0 :                     ; ******************************************************************************************************************
       2/       0 :                     ; ******************************************************************************************************************
       3/       0 :                     ; ******************************************************************************************************************
       4/       0 :                     ;
       5/       0 :                     ;												Machine Language Monitor
       6/       0 :                     ;
       7/       0 :                     ; ******************************************************************************************************************
       8/       0 :                     ; ******************************************************************************************************************
       9/       0 :                     ; ******************************************************************************************************************
      10/       0 :                     
      11/       0 :                     		cpu	sc/mp
      12/       0 :                     
      13/       0 : =0xC00              labels 		= 0xC00												; labels, 1 byte each
      14/       0 : =0x18               labelCount 	= 24 												; number of labels.
      15/       0 :                     
      16/       0 : =0xC18              varBase 	= labels+labelCount 								; variables after labels start here.
      17/       0 :                     
      18/       0 : =0xC18              cursor 		= varBase 											; cursor position ($00-$7F)
      19/       0 : =0xC19              current 	= varBase+1 										; current address (lo,hi)
      20/       0 : =0xC1B              isInit      = varBase+3 										; if already initialised, this is $A7.
      21/       0 : =0xC1C              parPosn		= varBase+4 										; current param offset in buffer (low addr)
      22/       0 : =0xC1D              modifier  	= varBase+5 										; instruction modifier (@,Pn) when assembling.
      23/       0 : =0xC1E              random  	= varBase+6 										; random number LFSR
      24/       0 : =0xC20              kbdBuffer 	= varBase+8 										; 16 character keyboard buffer
      25/       0 : =0x10               kbdBufferLn = 16 										
      26/       0 :                     
      27/       0 : =0xC30              codeStart 	= kbdBuffer+kbdBufferLn								; code starts here after the keyboard buffer.
      28/       0 :                     
      29/       0 : =0x4                tapeDelay 	= 4 												; DLY parameter for 1 tape bit width.
      30/       0 :                     																; (smaller = faster tape I/O - see file end.)
      31/       0 :                     
      32/       0 :                     		org 	0x0000
      33/       0 : 08                  		nop 													; mandatory pre-increment NOP
      34/       1 :                     
      35/       1 :                     		include maths.asm 										; import the maths routines.
(1)    1/       1 :                     ; ******************************************************************************************************************
(1)    2/       1 :                     ; ******************************************************************************************************************
(1)    3/       1 :                     ;
(1)    4/       1 :                     ;										16 bit Arithmetic routines
(1)    5/       1 :                     ;
(1)    6/       1 :                     ; ******************************************************************************************************************
(1)    7/       1 :                     ; ******************************************************************************************************************
(1)    8/       1 :                     
(1)    9/       1 : 90 02               	jmp	 	GoBoot 												; this will be at location 1.
(1)   10/       3 : 90 3E               	jmp 	Maths 												; maths routine, at location 3.
(1)   11/       5 :                     
(1)   12/       5 :                     	; any other routines you care to call.
(1)   13/       5 :                     
(1)   14/       5 :                     GoBoot:
(1)   15/       5 : C4 00               	ldi 	(BootMonitor-1) & 255 								; jump to Boot Monitor
(1)   16/       7 : 33                  	xpal 	p3
(1)   17/       8 : C4 02               	ldi 	(BootMonitor-1) / 256
(1)   18/       A : 37                  	xpah 	p3
(1)   19/       B : 3F                  	xppc 	p3
(1)   20/       C :                     
(1)   21/       C :                     ; ******************************************************************************************************************
(1)   22/       C :                     ;											16 Bit shift left/right macros
(1)   23/       C :                     ; ******************************************************************************************************************
(1)   24/       C :                     
(1)   25/       C :                     shiftLeft macro val
 AS V1.42 Beta [Bld 102] - source file monitor.asm(maths.asm) - page 2 - 12/2/2015 15:41:12


(1)   26/       C :                     	ccl 													
(1)   27/       C :                     	ld 		val(p2)
(1)   28/       C :                     	add 	val(p2)
(1)   29/       C :                     	st 		val(p2)
(1)   30/       C :                     	ld 		val+1(p2)
(1)   31/       C :                     	add 	val+1(p2)
(1)   32/       C :                     	st 		val+1(p2)		
(1)   33/       C :                     	endm
(1)   34/       C :                     
(1)   35/       C :                     shiftRight macro val
(1)   36/       C :                     	ccl
(1)   37/       C :                     	ld 		val+1(p2)
(1)   38/       C :                     	rrl 
(1)   39/       C :                     	st 		val+1(p2)
(1)   40/       C :                     	ld 		val(p2)
(1)   41/       C :                     	rrl 
(1)   42/       C :                     	st 		val(p2)
(1)   43/       C :                     	endm
(1)   44/       C :                     
(1)   45/       C :                     ; ******************************************************************************************************************
(1)   46/       C :                     ;										' Random Number generator
(1)   47/       C :                     ; ******************************************************************************************************************
(1)   48/       C :                     
(1)   49/       C :                     MATH_Random:
(1)   50/       C : C4 1E               	ldi 	Random & 255 										; set P1 to point to RNG, push P1 on stack.
(1)   51/       E : 31                  	xpal 	p1
(1)   52/       F : CE FD               	st 		@-3(p2)												; we allow 2 bytes for the final result here.
(1)   53/      11 : C4 0C               	ldi 	Random / 256 	
(1)   54/      13 : 35                  	xpah 	p1
(1)   55/      14 : CE FF               	st 		@-1(p2)
(1)   56/      16 : 02                  	ccl 														; shift random seed right.
(1)   57/      17 : C1 01               	ld 		1(p1)
(1)   58/      19 : 1F                  	rrl
(1)   59/      1A : C9 01               	st 		1(p1)
(1)   60/      1C : C1 00               	ld 		0(p1)
(1)   61/      1E : 1F                  	rrl 
(1)   62/      1F : C9 00               	st 		0(p1)
(1)   63/      21 : 06                  	csa 														; look at carry out, lost bit.
(1)   64/      22 : D4 80               	ani 	0x80 												; is it clear ?
(1)   65/      24 : 9C 0C               	jnz 	__MARandomNoXor
(1)   66/      26 : C1 00               	ld 		0(p1) 												; xor lfsr with $A1A1
(1)   67/      28 : E4 A1               	xri 	0xA1
(1)   68/      2A : C9 00               	st 		0(p1)
(1)   69/      2C : C1 01               	ld 		1(p1)
(1)   70/      2E : E4 A1               	xri 	0xA1
(1)   71/      30 : C9 01               	st 		1(p1)
(1)   72/      32 :                     __MARandomNoXor:
(1)   73/      32 : C1 00               	ld 		0(p1) 												; put the LFSR in the result space on the stack
(1)   74/      34 : CA 02               	st 		2(p2)
(1)   75/      36 : C1 01               	ld 		1(p1)
(1)   76/      38 : CA 03               	st 		3(p2)
(1)   77/      3A : C6 01               	ld 		@1(p2) 												; restore P1
(1)   78/      3C : 35                  	xpah 	p1
(1)   79/      3D : C6 01               	ld 		@1(p2)
(1)   80/      3F : 31                  	xpal 	p1
(1)   81/      40 : 02                  	ccl 														; no problems
(1)   82/      41 : 90 1F               	jmp 	MATH_Exit
(1)   83/      43 :                     
(1)   84/      43 :                     ; ******************************************************************************************************************
(1)   85/      43 :                     ;
 AS V1.42 Beta [Bld 102] - source file monitor.asm(maths.asm) - page 3 - 12/2/2015 15:41:12


(1)   86/      43 :                     ;		Maths routines : the (P2) stack functions as a number stack.  So to push $1234 on the stack you do
(1)   87/      43 :                     ;
(1)   88/      43 :                     ;		ld 	#$12
(1)   89/      43 :                     ;		st 	@-1(p2) 					1(p2) is the MSB of TOS
(1)   90/      43 :                     ;		ld 	#$34
(1)   91/      43 :                     ;		st 	@-1(p2) 					0(p2) is the LSB of TOS
(1)   92/      43 :                     ;
(1)   93/      43 :                     ;		on entry, A is the function (+,-,*,/ etc.). P2 should be left in the 'correct' state afterwards,
(1)   94/      43 :                     ;		so if you add two numbers then p2 will be 2 higher than when the routine was entered.
(1)   95/      43 :                     ;
(1)   96/      43 :                     ;		Supported : + - * / ? (ASCII @ p1 -> integer, p1 updated) ' (random number) \ (unsigned divide)
(1)   97/      43 :                     ;
(1)   98/      43 :                     ;		Returns CS on error (division by zero, bad ASCII String) - in this case the parameters are not touched.
(1)   99/      43 :                     ;
(1)  100/      43 :                     ;		Note that division uses a fair chunk of the stack :)
(1)  101/      43 :                     ;
(1)  102/      43 :                     ; ******************************************************************************************************************
(1)  103/      43 :                     
(1)  104/      43 :                     Maths:															; maths support routine.
(1)  105/      43 :                     
(1)  106/      43 : E4 2B               	xri 	'+' 												; 16 bit addition
(1)  107/      45 : 98 1E               	jz 		MATH_Add 
(1)  108/      47 : E4 06               	xri 	'+'!'-' 											; 16 bit subtraction
(1)  109/      49 : 98 2A               	jz 		MATH_Subtract
(1)  110/      4B : E4 07               	xri 	'-'!'*'												; 16 bit signed/unsigned multiplication
(1)  111/      4D : 98 38               	jz 		MATH_Multiply 										
(1)  112/      4F : E4 05               	xri 	'*'!'/' 											; 16 bit signed division
(1)  113/      51 : 02                  	ccl 
(1)  114/      52 : 98 79               	jz 		MATH_Divide2
(1)  115/      54 : E4 73               	xri 	'/'!'\\' 											; 16 bit unsigned division
(1)  116/      56 : 03                  	scl
(1)  117/      57 : 98 74               	jz 		MATH_Divide2
(1)  118/      59 : E4 63               	xri 	'\\'!'?' 											; ASCII (P1) -> Integer (? operator)
(1)  119/      5B : 98 72               	jz 		MATH_ToInteger
(1)  120/      5D : E4 18               	xri 	'?'!0x27 											; Random number generator (' operator)
(1)  121/      5F : 98 AB               	jz 		MATH_Random 
(1)  122/      61 :                     MATH_Error:
(1)  123/      61 : 03                  	scl 														; error, unknown command.
(1)  124/      62 :                     MATH_Exit:
(1)  125/      62 : 3F                  	xppc 	p3 													; return
(1)  126/      63 : 90 DE               	jmp  	Maths 												; re-entrant
(1)  127/      65 :                     
(1)  128/      65 :                     ; ******************************************************************************************************************
(1)  129/      65 :                     ;													+ :	16 Bit Add
(1)  130/      65 :                     ; ******************************************************************************************************************
(1)  131/      65 :                     
(1)  132/      65 :                     MATH_Add:
(1)  133/      65 : 02                  	ccl 										
(1)  134/      66 : C6 01               	ld 		@1(p2) 												; read LSB of TOS and unstack
(1)  135/      68 : F2 01               	add 	1(p2)
(1)  136/      6A : CA 01               	st 		1(p2)
(1)  137/      6C : C6 01               	ld 		@1(p2) 												; read MSB of TOS and unstack
(1)  138/      6E : F2 01               	add 	1(p2)
(1)  139/      70 : CA 01               	st 		1(p2)
(1)  140/      72 : 02                  	ccl
(1)  141/      73 : 90 ED               	jmp 	MATH_Exit
(1)  142/      75 :                     
(1)  143/      75 :                     ; ******************************************************************************************************************
(1)  144/      75 :                     ;												 - : 16 Bit Subtract
(1)  145/      75 :                     ; ******************************************************************************************************************
 AS V1.42 Beta [Bld 102] - source file monitor.asm(maths.asm) - page 4 - 12/2/2015 15:41:12


(1)  146/      75 :                     
(1)  147/      75 :                     MATH_Subtract:
(1)  148/      75 : 03                  	scl 										
(1)  149/      76 : C2 02               	ld 		2(p2) 												; read LSB of TOS 
(1)  150/      78 : FA 00               	cad 	0(p2)
(1)  151/      7A : CA 02               	st 		2(p2)
(1)  152/      7C : C2 03               	ld 		3(p2) 												; read MSB of TOS
(1)  153/      7E : FA 01               	cad 	1(p2)
(1)  154/      80 : CA 03               	st 		3(p2)
(1)  155/      82 : C6 02               	ld 		@2(p2)
(1)  156/      84 : 02                  	ccl
(1)  157/      85 : 90 DB               	jmp 	MATH_Exit
(1)  158/      87 :                     
(1)  159/      87 :                     ; ******************************************************************************************************************
(1)  160/      87 :                     ;									'*' : 16 bit signed or unsigned multiply
(1)  161/      87 :                     ; ******************************************************************************************************************
(1)  162/      87 :                     
(1)  163/      87 :                     MATH_Multiply:
(1)  164/      87 :                     
(1)  165/      87 :                     	section SCMPMultiply
(1)  166/      87 :                     
(1)  167/      87 : =0x3                aHi = 3 														; allocated values for A,B and Result.
(1)  168/      87 : =0x2                aLo = 2 														; (see arithmetic.py)
(1)  169/      87 : =0x1                bHi = 1
(1)  170/      87 : =0x0                bLo = 0
(1)  171/      87 : =0xFFFFFFFFF..      resultHi = -1
(1)  172/      87 : =0xFFFFFFFFF..      resultLo = -2
(1)  173/      87 :                     
(1)  174/      87 : C4 00               	ldi 	0 													; clear result
(1)  175/      89 : CA FF               	st 		resultHi(p2)
(1)  176/      8B : CA FE               	st 		resultLo(p2)
(1)  177/      8D :                     __MultiplyLoop:
(1)  178/      8D : C2 01               	ld 		bHi(p2) 											; if b is zero then exit
(1)  179/      8F : DA 00               	or 		bLo(p2)
(1)  180/      91 : 98 2D               	jz 		__MultiplyExit
(1)  181/      93 : C2 00               	ld 		bLo(p2) 											; if b bit 0 is set.
(1)  182/      95 : D4 01               	ani 	1
(1)  183/      97 : 98 0D               	jz 		__MultiplyNoAdd
(1)  184/      99 : 02                  	ccl 														; add a to the result
(1)  185/      9A : C2 FE               	ld 		resultLo(p2)
(1)  186/      9C : F2 02               	add 	aLo(p2)
(1)  187/      9E : CA FE               	st 		resultLo(p2)
(1)  188/      A0 : C2 FF               	ld 		resultHi(p2)
(1)  189/      A2 : F2 03               	add 	aHi(p2)
(1)  190/      A4 : CA FF               	st 		resultHi(p2)
(1)  191/      A6 :                     __MultiplyNoAdd:
(1)  192/      A6 : (MACRO)             	shiftleft aLo 												; shift A left once.
(1)  192/      A6 : 02                          ccl                                                                                                     
(1)  192/      A7 : C2 02                       ld              ALO(p2)
(1)  192/      A9 : F2 02                       add     ALO(p2)
(1)  192/      AB : CA 02                       st              ALO(p2)
(1)  192/      AD : C2 03                       ld              ALO+1(p2)
(1)  192/      AF : F2 03                       add     ALO+1(p2)
(1)  192/      B1 : CA 03                       st              ALO+1(p2)               
(1)  193/      B3 : (MACRO)             	shiftright bLo 												; shift b right one.
(1)  193/      B3 : 02                          ccl
(1)  193/      B4 : C2 01                       ld              BLO+1(p2)
(1)  193/      B6 : 1F                          rrl 
(1)  193/      B7 : CA 01                       st              BLO+1(p2)
(1)  193/      B9 : C2 00                       ld              BLO(p2)
 AS V1.42 Beta [Bld 102] - source file monitor.asm(maths.asm) - page 5 - 12/2/2015 15:41:12


(1)  193/      BB : 1F                          rrl 
(1)  193/      BC : CA 00                       st              BLO(p2)
(1)  194/      BE : 90 CD               	jmp 	__MultiplyLoop
(1)  195/      C0 :                     
(1)  196/      C0 :                     __MultiplyExit:
(1)  197/      C0 : C2 FE               	ld 		resultLo(p2) 										; copy result lo to what will be new TOS
(1)  198/      C2 : CA 02               	st 		2(p2)
(1)  199/      C4 : C2 FF               	ld 		resultHi(p2)
(1)  200/      C6 : CA 03               	st 		3(p2)
(1)  201/      C8 : C6 02               	ld 		@2(p2) 												; fix up the number stack.
(1)  202/      CA :                     	endsection SCMPMultiply
(1)  203/      CA :                     
(1)  204/      CA : 02                  	ccl
(1)  205/      CB :                     MATH_Exit1:
(1)  206/      CB : 90 95               	jmp 	MATH_Exit
(1)  207/      CD :                     
(1)  208/      CD :                     ; ******************************************************************************************************************
(1)  209/      CD :                     ;								? Convert string at P1 to 16 bit integer base 10
(1)  210/      CD :                     ; ******************************************************************************************************************
(1)  211/      CD :                     
(1)  212/      CD :                     MATH_Divide2:
(1)  213/      CD : 90 66               	jmp 	MATH_Divide
(1)  214/      CF :                     
(1)  215/      CF :                     MATH_ToInteger:
(1)  216/      CF :                     
(1)  217/      CF :                     	section SCMPToInteger
(1)  218/      CF :                     
(1)  219/      CF : =0xFFFFFFFFF..      digitCount = -1													; digits converted.
(1)  220/      CF : =0xFFFFFFFFF..      resultHi = -2  													; result is pushed at the end
(1)  221/      CF : =0xFFFFFFFFF..      resultLo = -3 
(1)  222/      CF : =0xFFFFFFFFF..      shiftCount = -4 												; counter used when multiplying by 10.
(1)  223/      CF : =0xFFFFFFFFF..      tempHi = -5 													; temporary result for x 10.
(1)  224/      CF : =0xFFFFFFFFF..      tempLo = -6
(1)  225/      CF :                     
(1)  226/      CF : C4 00               	ldi 	0 													; clear digitcount and result to zero
(1)  227/      D1 : CA FF               	st 		digitCount(p2)
(1)  228/      D3 : CA FE               	st 		resultHi(p2)
(1)  229/      D5 : CA FD               	st 		resultLo(p2)
(1)  230/      D7 :                     ToInt_Loop:
(1)  231/      D7 : C1 00               	ld 		0(p1) 												; read next digit
(1)  232/      D9 : 03                  	scl 	
(1)  233/      DA : FC 3A               	cai 	'9'+1
(1)  234/      DC : 94 44               	jp 		ToInt_End 											; if > 9 then fail.
(1)  235/      DE : F4 8A               	adi 	128+10 												; if < 0 then fail
(1)  236/      E0 : 94 40               	jp 		ToInt_End
(1)  237/      E2 : AA FF               	ild 	digitCount(p2) 										; increment count of digits converted.
(1)  238/      E4 : C4 02               	ldi 	2 													; set shift counter to 2
(1)  239/      E6 : CA FC               	st 		shiftCount(p2)
(1)  240/      E8 : C2 FE               	ld 		resultHi(p2) 										; copy result current to temp
(1)  241/      EA : CA FB               	st 		tempHi(p2)
(1)  242/      EC : C2 FD               	ld 		resultLo(p2)
(1)  243/      EE : CA FA               	st 		tempLo(p2)
(1)  244/      F0 :                     ToInt_Shift:
(1)  245/      F0 : (MACRO)             	shiftleft resultLo 											; shift result left
(1)  245/      F0 : 02                          ccl                                                                                                     
(1)  245/      F1 : C2 FD                       ld              RESULTLO(p2)
(1)  245/      F3 : F2 FD                       add     RESULTLO(p2)
(1)  245/      F5 : CA FD                       st              RESULTLO(p2)
(1)  245/      F7 : C2 FE                       ld              RESULTLO+1(p2)
(1)  245/      F9 : F2 FE                       add     RESULTLO+1(p2)
 AS V1.42 Beta [Bld 102] - source file monitor.asm(maths.asm) - page 6 - 12/2/2015 15:41:12


(1)  245/      FB : CA FE                       st              RESULTLO+1(p2)               
(1)  246/      FD : BA FC               	dld 	shiftCount(p2) 										; after 2nd time round (x 4) will be zero
(1)  247/      FF : 9C 0D               	jnz 	ToInt_NoAdd
(1)  248/     101 : 02                  	ccl 														; add original value when x 4 - e.g. x 5
(1)  249/     102 : C2 FD               	ld 		resultLo(p2)
(1)  250/     104 : F2 FA               	add 	tempLo(p2)
(1)  251/     106 : CA FD               	st 		resultLo(p2)
(1)  252/     108 : C2 FE               	ld 		resultHi(p2)
(1)  253/     10A : F2 FB               	add 	tempHi(p2)
(1)  254/     10C : CA FE               	st 		resultHi(p2)
(1)  255/     10E :                     ToInt_NoAdd:
(1)  256/     10E : C2 FC               	ld 		shiftCount(p2) 										; go round until -ve, e.g. 3 in total.
(1)  257/     110 : 94 DE               	jp 		ToInt_Shift
(1)  258/     112 :                     
(1)  259/     112 : C5 01               	ld 		@1(p1) 												; read the digit already tested.
(1)  260/     114 : D4 0F               	ani 	0x0F 												; to a number
(1)  261/     116 : 02                  	ccl 
(1)  262/     117 : F2 FD               	add 	resultLo(p2) 										; add to result
(1)  263/     119 : CA FD               	st 		resultLo(p2)
(1)  264/     11B : 06                  	csa 														; if carry clear
(1)  265/     11C : 94 B9               	jp 		ToInt_Loop 											; go round again.
(1)  266/     11E : AA FE               	ild 	resultHi(p2) 										; adds the carry to high
(1)  267/     120 : 90 B5               	jmp 	ToInt_Loop
(1)  268/     122 :                     
(1)  269/     122 :                     ToInt_End:
(1)  270/     122 : C2 FF               	ld 		digitCount(p2) 										; if digit count = 0, e.g. nothing converted
(1)  271/     124 : 03                  	scl
(1)  272/     125 : 98 A4               	jz 		MATH_Exit1 											; exit with carry set
(1)  273/     127 :                     
(1)  274/     127 : C2 FE               	ld 		resultHi(p2) 										; save result on stack
(1)  275/     129 : CA FF               	st 		-1(p2)
(1)  276/     12B : C2 FD               	ld 		resultLo(p2)
(1)  277/     12D : CE FE               	st 		@-2(p2)
(1)  278/     12F : 02                  	ccl 														; clear carry as okay, and exit.
(1)  279/     130 :                     	endsection SCMPToInteger
(1)  280/     130 :                     
(1)  281/     130 :                     MATH_Exit3:
(1)  282/     130 : 90 99               	jmp 	MATH_Exit1
(1)  283/     132 :                     
(1)  284/     132 :                     
(1)  285/     132 :                     
(1)  286/     132 :                     ; ******************************************************************************************************************
(1)  287/     132 :                     ;							'/' : 16 bit signed/unsigned divide (CY/L = 0 = signed)
(1)  288/     132 :                     ; ******************************************************************************************************************
(1)  289/     132 :                     
(1)  290/     132 :                     MATH_DivideByZero:												; come here for divide by zero.
(1)  291/     132 : 03                  	scl
(1)  292/     133 : 90 FB               	jmp 	MATH_Exit3
(1)  293/     135 :                     
(1)  294/     135 :                     MATH_Divide:
(1)  295/     135 :                     
(1)  296/     135 :                     	section 	SCMPDivide
(1)  297/     135 :                     
(1)  298/     135 : =0x1                denominatorHi = 1 												; input values to division
(1)  299/     135 : =0x0                denominatorLo = 0 												; (see arithmetic.py)
(1)  300/     135 : =0x3                numeratorHi = 3
(1)  301/     135 : =0x2                numeratorLo = 2
(1)  302/     135 : =0xFFFFFFFFF..      bitHi = -1 														; bit shifted for division test.
(1)  303/     135 : =0xFFFFFFFFF..      bitLo = -2
(1)  304/     135 : =0xFFFFFFFFF..      quotientHi = -3 												; quotient
 AS V1.42 Beta [Bld 102] - source file monitor.asm(maths.asm) - page 7 - 12/2/2015 15:41:12


(1)  305/     135 : =0xFFFFFFFFF..      quotientLo = -4
(1)  306/     135 : =0xFFFFFFFFF..      remainderHi = -5 												; remainder
(1)  307/     135 : =0xFFFFFFFFF..      remainderLo = -6
(1)  308/     135 : =0xFFFFFFFFF..      signCount = -7 													; sign of result (bit 0)
(1)  309/     135 : =0xFFFFFFFFF..      eTemp = -8 														; temporary value of sign.
(1)  310/     135 : =0xFFFFFFFFF..      tempHi = -9 													; high byte temporary
(1)  311/     135 :                     
(1)  312/     135 : C2 00               	ld 		denominatorLo(p2) 									; check denominator 
(1)  313/     137 : DA 01               	or 		denominatorHi(p2) 
(1)  314/     139 : 98 F7               	jz 		MATH_DivideByZero 									; fail if dividing by zero.
(1)  315/     13B :                     
(1)  316/     13B : C4 00               	ldi 	0 													; clear quotient and remainder
(1)  317/     13D : CA FD               	st 		quotientHi(p2)
(1)  318/     13F : CA FC               	st 		quotientLo(p2)
(1)  319/     141 : CA FB               	st 		remainderHi(p2)
(1)  320/     143 : CA FA               	st 		remainderLo(p2)
(1)  321/     145 : CA F9               	st 		signCount(p2)
(1)  322/     147 : CA FE               	st 		bitLo(p2) 											; set bit to 0x8000
(1)  323/     149 : C4 80               	ldi 	0x80 
(1)  324/     14B : CA FF               	st 		bitHi(p2)
(1)  325/     14D :                     
(1)  326/     14D : 40                  	lde 														; save E
(1)  327/     14E : CA F8               	st 		eTemp(p2)
(1)  328/     150 :                     
(1)  329/     150 : 06                  	csa 														; look at carry bit
(1)  330/     151 : D4 80               	ani 	0x80 												; if set, unsigned division.
(1)  331/     153 : 9C 24               	jnz 	__DivideLoop 										; so skip over the sign removal code.
(1)  332/     155 :                     
(1)  333/     155 : C4 03               	ldi 	3
(1)  334/     157 :                     __DivideUnsignLoop:
(1)  335/     157 : 01                  	xae 														; store in E
(1)  336/     158 : C2 80               	ld 		-0x80(p2) 											; read high byte
(1)  337/     15A : 94 13               	jp 		__DivideNotSigned 									; if +ve then skip
(1)  338/     15C : AA F9               	ild 	signCount(p2) 										; bump sign count
(1)  339/     15E : C6 FF               	ld 		@-1(p2) 											; dec P2 to access the LSB
(1)  340/     160 : C4 00               	ldi 	0
(1)  341/     162 : 03                  	scl 
(1)  342/     163 : FA 80               	cad 	-0x80(p2)
(1)  343/     165 : CA 80               	st 		-0x80(p2)
(1)  344/     167 : C6 01               	ld 		@1(p2) 												; inc P2 to access the MSB
(1)  345/     169 : C4 00               	ldi 	0
(1)  346/     16B : FA 80               	cad 	-0x80(p2)
(1)  347/     16D : CA 80               	st 		-0x80(p2)
(1)  348/     16F :                     __DivideNotSigned:
(1)  349/     16F : 01                  	xae 														; retrieve E
(1)  350/     170 : 03                  	scl 														; subtract 2
(1)  351/     171 : FC 02               	cai 	2
(1)  352/     173 : 94 E2               	jp 		__DivideUnsignLoop 									; not finished yet.
(1)  353/     175 : 90 02               	jmp 	__DivideLoop
(1)  354/     177 :                     
(1)  355/     177 :                     __MATH_Exit2
(1)  356/     177 : 90 B7               	jmp 	MATH_Exit3
(1)  357/     179 :                     
(1)  358/     179 :                     __DivideLoop:
(1)  359/     179 : C2 FE               	ld 		bitLo(p2) 											; keep going until all bits done.
(1)  360/     17B : DA FF               	or 		bitHi(p2)
(1)  361/     17D : 98 42               	jz 		__DivideExit
(1)  362/     17F :                     
(1)  363/     17F : (MACRO)             	shiftleft remainderLo 										; shift remainder left.
(1)  363/     17F : 02                          ccl                                                                                                     
 AS V1.42 Beta [Bld 102] - source file monitor.asm(maths.asm) - page 8 - 12/2/2015 15:41:12


(1)  363/     180 : C2 FA                       ld              REMAINDERLO(p2)
(1)  363/     182 : F2 FA                       add     REMAINDERLO(p2)
(1)  363/     184 : CA FA                       st              REMAINDERLO(p2)
(1)  363/     186 : C2 FB                       ld              REMAINDERLO+1(p2)
(1)  363/     188 : F2 FB                       add     REMAINDERLO+1(p2)
(1)  363/     18A : CA FB                       st              REMAINDERLO+1(p2)               
(1)  364/     18C :                     
(1)  365/     18C : C2 03               	ld 		numeratorHi(p2)										; if numerator MSB is set
(1)  366/     18E : 94 06               	jp 		__DivideNoIncRemainder
(1)  367/     190 :                     
(1)  368/     190 : AA FA               	ild 	remainderLo(p2) 									; then increment remainder
(1)  369/     192 : 9C 02               	jnz 	__DivideNoIncRemainder
(1)  370/     194 : AA FB               	ild 	remainderHi(p2)
(1)  371/     196 :                     __DivideNoIncRemainder:
(1)  372/     196 :                     
(1)  373/     196 : 03                  	scl 														; calculate remainder-denominator (temp)
(1)  374/     197 : C2 FA               	ld 		remainderLo(p2)
(1)  375/     199 : FA 00               	cad 	denominatorLo(p2)
(1)  376/     19B : 01                  	xae 														; save in E.
(1)  377/     19C : C2 FB               	ld 		remainderHi(p2)
(1)  378/     19E : FA 01               	cad 	denominatorHi(p2) 									; temp.high is now in A
(1)  379/     1A0 : CA F7               	st 		tempHi(p2) 											; temp.high now saved
(1)  380/     1A2 : 06                  	csa 														; check carry flag
(1)  381/     1A3 : D4 80               	ani 	0x80 	
(1)  382/     1A5 : 9C 45               	jnz 	__DivideRemainderGreater 							; if set then remainder >= denominator
(1)  383/     1A7 :                     
(1)  384/     1A7 :                     __DivideContinue:
(1)  385/     1A7 : (MACRO)             	shiftright 	bitLo 											; shift bit right
(1)  385/     1A7 : 02                          ccl
(1)  385/     1A8 : C2 FF                       ld              BITLO+1(p2)
(1)  385/     1AA : 1F                          rrl 
(1)  385/     1AB : CA FF                       st              BITLO+1(p2)
(1)  385/     1AD : C2 FE                       ld              BITLO(p2)
(1)  385/     1AF : 1F                          rrl 
(1)  385/     1B0 : CA FE                       st              BITLO(p2)
(1)  386/     1B2 : (MACRO)             	shiftleft   numeratorLo 									; shift numerator left
(1)  386/     1B2 : 02                          ccl                                                                                                     
(1)  386/     1B3 : C2 02                       ld              NUMERATORLO(p2)
(1)  386/     1B5 : F2 02                       add     NUMERATORLO(p2)
(1)  386/     1B7 : CA 02                       st              NUMERATORLO(p2)
(1)  386/     1B9 : C2 03                       ld              NUMERATORLO+1(p2)
(1)  386/     1BB : F2 03                       add     NUMERATORLO+1(p2)
(1)  386/     1BD : CA 03                       st              NUMERATORLO+1(p2)               
(1)  387/     1BF : 90 B8               	jmp 		__DivideLoop
(1)  388/     1C1 :                     
(1)  389/     1C1 :                     __DivideExit:
(1)  390/     1C1 : C2 F9               	ld 		signCount(p2) 										; is the result signed
(1)  391/     1C3 : D4 01               	ani 	0x01
(1)  392/     1C5 : 98 0D               	jz 		__DivideComplete
(1)  393/     1C7 : 03                  	scl 														; if so, reapply the sign.
(1)  394/     1C8 : C4 00               	ldi 	0
(1)  395/     1CA : FA FC               	cad 	quotientLo(p2)
(1)  396/     1CC : CA FC               	st 		quotientLo(p2)
(1)  397/     1CE : C4 00               	ldi 	0
(1)  398/     1D0 : FA FD               	cad 	quotientHi(p2)
(1)  399/     1D2 : CA FD               	st 		quotientHi(p2)
(1)  400/     1D4 :                     
(1)  401/     1D4 :                     __DivideComplete:
(1)  402/     1D4 : C2 FD               	ld 		quotientHi(p2) 										; copy quotient to what will be TOS
(1)  403/     1D6 : CA 03               	st 		3(p2)
 AS V1.42 Beta [Bld 102] - source file monitor.asm(maths.asm) - page 9 - 12/2/2015 15:41:12


(1)  404/     1D8 : C2 FC               	ld 		quotientLo(p2)
(1)  405/     1DA : CA 02               	st 		2(p2)
(1)  406/     1DC : C2 FB               	ld 		remainderHi(p2) 									; put remainder immediately after it if we want it
(1)  407/     1DE : CA 01               	st 		1(p2)
(1)  408/     1E0 : C2 FA               	ld 		remainderLo(p2) 
(1)  409/     1E2 : CA 00               	st 		0(p2)
(1)  410/     1E4 :                     
(1)  411/     1E4 : C2 F8               	ld 		eTemp(p2) 											; restore E
(1)  412/     1E6 : 01                  	xae 
(1)  413/     1E7 : C6 02               	ld 		@2(p2) 												; fix stack back up leaving quotient and hidden remainder
(1)  414/     1E9 : 02                  	ccl 														; return no error.
(1)  415/     1EA : 90 8B               	jmp 	__MATH_Exit2
(1)  416/     1EC :                     
(1)  417/     1EC :                     __DivideRemainderGreater: 										; this is the "if temp >= 0 bit"
(1)  418/     1EC : C2 F7               	ld 		tempHi(p2) 											; get the difference back.
(1)  419/     1EE : CA FB               	st 		remainderHi(p2) 									; save temp.high value into remainder.high
(1)  420/     1F0 : 40                  	lde 														; copy temp.low to remainder.low
(1)  421/     1F1 : CA FA               	st 		remainderLo(p2) 
(1)  422/     1F3 :                     
(1)  423/     1F3 : C2 FC               	ld 		quotientLo(p2) 										; or bit into quotient
(1)  424/     1F5 : DA FE               	or 		bitLo(p2)
(1)  425/     1F7 : CA FC               	st 		quotientLo(p2)
(1)  426/     1F9 : C2 FD               	ld 		quotientHi(p2)
(1)  427/     1FB : DA FF               	or 		bitHi(p2)
(1)  428/     1FD : CA FD               	st 		quotientHi(p2)
(1)  429/     1FF : 90 A6               	jmp 	__DivideContinue
(1)  430/     201 :                     
(1)  431/     201 :                     
(1)  432/     201 :                     	endsection	SCMPDivide
(1)  433/     201 :                     
      36/     201 :                     
      37/     201 :                     ; ******************************************************************************************************************
      38/     201 :                     ;
      39/     201 :                     ;				Boot Up. First we check for a ROM @ $9000 and if it is 0x68 we boot there instead
      40/     201 :                     ;
      41/     201 :                     ; ******************************************************************************************************************
      42/     201 :                     
      43/     201 :                     BootMonitor:
      44/     201 : C4 90               		ldi 	0x90 											; point P1 to $9000 which is the first ROM.
      45/     203 : 35                  		xpah 	p1
      46/     204 : C1 00               		ld 		0(p1) 											; if that byte is $68, go straight there.
      47/     206 : E4 68               		xri 	0x68
      48/     208 : 9C 01               		jnz 	__BootMonitor
      49/     20A : 3D                  		xppc 	p1 												; e.g. JMP $9001
      50/     20B :                     __BootMonitor:
      51/     20B :                     
      52/     20B :                     ; ******************************************************************************************************************
      53/     20B :                     ;
      54/     20B :                     ;									Find Top of Memory to initialise the stack.
      55/     20B :                     ;
      56/     20B :                     ;			(slightly tweaked to work round 4+12 emulator limitations - will work on real chip)
      57/     20B :                     ; ******************************************************************************************************************
      58/     20B :                     
      59/     20B : C4 0F               		ldi 	0x0F 											; point P2 to theoretical top of RAM on basic m/c
      60/     20D : 36                  		xpah 	p2 												; e.g. 0xFFF
      61/     20E : C4 FF               		ldi 	0xFF 											; ideally you'd make this 0x003F and remove the ld
      62/     210 : 32                  		xpal 	p2 												; but the emulators don't do 4+12 math. Only matters here.
      63/     211 : C6 40               		ld 		@64(p2) 										; fix the predecrement (wrap around not emulated)
      64/     213 :                     FindTopMemory:
      65/     213 : C4 A5               		ldi 	0xA5 											; try to write this to memory
 AS V1.42 Beta [Bld 102] - source file monitor.asm - page 10 - 12/2/2015 15:41:12


      66/     215 : CE C0               		st 		@-64(p2) 										; predecrementing by 64.
      67/     217 : E2 00               		xor 	(p2) 											; did it write correctly.
      68/     219 : 9C F8               		jnz 	FindTopMemory 									; now P2 points to top of memory.
      69/     21B :                     
      70/     21B :                     ; ******************************************************************************************************************
      71/     21B :                     ;
      72/     21B :                     ;												Clear the screen
      73/     21B :                     ;
      74/     21B :                     ; ******************************************************************************************************************
      75/     21B :                     
      76/     21B :                     ClearScreen_Command:
      77/     21B : C4 00               		ldi 	0 												; set P1 to zero to access VRAM via write.
      78/     21D : 35                  		xpah 	p1
      79/     21E : C4 00               		ldi 	0
      80/     220 :                     ClearScreenLoop:
      81/     220 : 31                  		xpal 	p1												; clear screen
      82/     221 : C4 20               		ldi 	' '
      83/     223 : CD 01               		st 		@1(p1)
      84/     225 : 31                  		xpal 	p1
      85/     226 : 94 F8               		jp 		ClearScreenLoop
      86/     228 : C4 0C               		ldi 	Cursor/256 										; reset the cursor position to TOS
      87/     22A : 35                  		xpah 	p1
      88/     22B : C4 18               		ldi 	Cursor&255
      89/     22D : 31                  		xpal 	p1 
      90/     22E : C4 00               		ldi 	0 												; Note: could save 2 bytes here, P1.H is 0.
      91/     230 : C9 00               		st 		0(p1)											
      92/     232 :                     
      93/     232 :                     ; ****************************************************************************************************************
      94/     232 :                     ;
      95/     232 :                     ;												Check if initialised.
      96/     232 :                     ;
      97/     232 :                     ; ****************************************************************************************************************
      98/     232 :                     
      99/     232 : C1 03               		ld 		isInit-Cursor(p1) 								; have we initialised ?
     100/     234 : E4 A7               		xri 	0xA7 											; if so this byte should be $A7
     101/     236 : 98 46               		jz 		CommandMainLoop
     102/     238 : C4 A7               		ldi 	0xA7 											; set the initialised byte
     103/     23A : C9 03               		st 		isInit-Cursor(p1)
     104/     23C :                     
     105/     23C : C4 0C               		ldi 	codeStart/256 									; set the initial work address
     106/     23E : C9 02               		st 		Current-Cursor+1(p1)
     107/     240 : C4 30               		ldi 	codeStart&255
     108/     242 : C9 01               		st 		Current-Cursor(p1)
     109/     244 : C4 AC               		ldi 	0xAC
     110/     246 : C9 07               		st 		random-Cursor+1(p1)								; initialise the LFSR with $ACE1
     111/     248 : C4 E1               		ldi 	0xE1
     112/     24A : C9 06               		st 		random-Cursor(p1)
     113/     24C :                     
     114/     24C :                     																; print boot message - can lose this if required.
     115/     24C : C4 05               		ldi 	(PrintCharacter-1)/256 							; set P3 = print character.
     116/     24E : 37                  		xpah 	p3 
     117/     24F : C4 D1               		ldi 	(PrintCharacter-1)&255
     118/     251 : 33                  		xpal 	p3
     119/     252 : C4 02               		ldi 	Message / 256 									; set P1 = boot message
     120/     254 : 35                  		xpah 	p1
     121/     255 : C4 5F               		ldi 	Message & 255
     122/     257 : 31                  		xpal 	p1
     123/     258 :                     MessageLoop:
     124/     258 : C5 01               		ld 		@1(p1) 											; read character
     125/     25A : 98 22               		jz 		CommandMainLoop 								; end of message
 AS V1.42 Beta [Bld 102] - source file monitor.asm - page 11 - 12/2/2015 15:41:12


     126/     25C : 3F                  		xppc 	p3 												; print it
     127/     25D : 90 F9               		jmp 	MessageLoop
     128/     25F :                     
     129/     25F :                     Message:
     130/     25F : 2A 2A 20 53 43 2F   		db 		"** SC/MP OS **",13
                    4D 50 20 4F 53 20 
                    2A 2A 0D 
     131/     26E : 56 30 2E 39 31 20   		db 		"V0.91 PSR 2016",13
                    50 53 52 20 32 30 
                    31 36 0D 
     132/     27D : 00                  		db 		0
     133/     27E :                     
     134/     27E :                     ; ****************************************************************************************************************
     135/     27E :                     ;
     136/     27E :                     ;													Main Loop
     137/     27E :                     ;
     138/     27E :                     ; ****************************************************************************************************************
     139/     27E :                     
     140/     27E :                     CommandMainLoop:
     141/     27E : C4 06               		ldi 	(PrintAddressData-1)/256						; print Address only
     142/     280 : 37                  		xpah 	p3
     143/     281 : C4 3E               		ldi 	(PrintAddressData-1)&255
     144/     283 : 33                  		xpal 	p3
     145/     284 : C4 00               		ldi 	0 												; no data elements
     146/     286 : 3F                  		xppc 	p3
     147/     287 :                     
     148/     287 : C4 05               		ldi 	(PrintCharacter-1)/256 							; set P3 = print character.
     149/     289 : 37                  		xpah 	p3
     150/     28A : C4 D1               		ldi 	(PrintCharacter-1)&255
     151/     28C : 33                  		xpal 	p3
     152/     28D : C4 5D               		ldi 	']'												; print the prompt.
     153/     28F : 3F                  		xppc 	p3
     154/     290 :                     
     155/     290 :                     ; ****************************************************************************************************************
     156/     290 :                     ;
     157/     290 :                     ;											Keyboard Line Input
     158/     290 :                     ;
     159/     290 :                     ; ****************************************************************************************************************
     160/     290 :                     
     161/     290 : C4 00               		ldi 	0 												; set E = character position.
     162/     292 : 01                  		xae 
     163/     293 :                     KeyboardLoop:
     164/     293 : C4 08               		ldi 	0x8 											; set P1 to point to keyboard latch
     165/     295 : 35                  		xpah 	p1
     166/     296 :                     _KBDWaitRelease:
     167/     296 : C1 00               		ld 		0(p1) 											; wait for strobe to clear
     168/     298 : 94 02               		jp 		_KBDWaitKey
     169/     29A : 90 FA               		jmp 	_KBDWaitRelease
     170/     29C :                     _KBDWaitKey:
     171/     29C : C1 00               		ld 		0(p1) 											; wait for strobe, i.e. new key
     172/     29E : 94 FC               		jp 		_KBDWaitKey
     173/     2A0 : D4 7F               		ani 	0x7F 											; throw away bit 7
     174/     2A2 : CA FF               		st 		-1(p2) 											; save key.
     175/     2A4 :                     
     176/     2A4 : C4 0C               		ldi 	kbdBuffer/256 									; set P1 = keyboard buffer
     177/     2A6 : 35                  		xpah 	p1
     178/     2A7 : C4 20               		ldi 	kbdBuffer&255
     179/     2A9 : 31                  		xpal 	p1		
     180/     2AA :                     
     181/     2AA : C2 FF               		ld 		-1(p2) 											; read key
 AS V1.42 Beta [Bld 102] - source file monitor.asm - page 12 - 12/2/2015 15:41:12


     182/     2AC : E4 08               		xri 	8 												; is it backspace
     183/     2AE : 98 1E               		jz 		__KBDBackSpace
     184/     2B0 : E4 05               		xri 	8!13 											; is it CR, then exit
     185/     2B2 : 98 28               		jz 		__KBDExit
     186/     2B4 :                     
     187/     2B4 : 40                  		lde 													; have we a full buffer.
     188/     2B5 : E4 10               		xri 	kbdBufferLn 									; if so, ignore the key.
     189/     2B7 : 98 DA               		jz 		KeyboardLoop
     190/     2B9 :                     
     191/     2B9 : C2 FF               		ld 		-1(p2) 											; restore the key.
     192/     2BB : 02                  		ccl
     193/     2BC : F4 20               		adi 	0x20											; will make lower case -ve
     194/     2BE : 94 02               		jp 		__KBDNotLower
     195/     2C0 : FC 20               		cai 	0x20 											; capitalise
     196/     2C2 :                     __KBDNotLower:
     197/     2C2 : F4 E0               		adi 	0xE0 											; fix up.
     198/     2C4 : C9 80               		st 		-0x80(p1) 										; save in the buffer using E as index.
     199/     2C6 : 3F                  		xppc 	p3 												; print the character
     200/     2C7 : 01                  		xae 													; increment E
     201/     2C8 : 02                  		ccl
     202/     2C9 : F4 01               		adi 	1
     203/     2CB : 01                  		xae
     204/     2CC : 90 C5               		jmp 	KeyboardLoop 									; and get the next key.
     205/     2CE :                     
     206/     2CE :                     __KBDBackSpace:
     207/     2CE : 40                  		lde 													; get position
     208/     2CF : 98 C2               		jz 		KeyboardLoop 									; can't go back if at beginning
     209/     2D1 : 03                  		scl 													; go back 1 from E
     210/     2D2 : FC 01               		cai 	1
     211/     2D4 : 01                  		xae 
     212/     2D5 : C4 08               		ldi 	8 												; print a backspace
     213/     2D7 : 3F                  		xppc 	p3
     214/     2D8 : 90 B9               		jmp 	KeyboardLoop 									; and go round again.
     215/     2DA :                     
     216/     2DA :                     __CmdMainLoop1:
     217/     2DA : 90 A2               		jmp 	CommandMainLoop
     218/     2DC :                     
     219/     2DC :                     __KBDExit:
     220/     2DC : C9 80               		st 		-0x80(p1) 										; add the ASCIIZ terminator.
     221/     2DE : C4 0D               		ldi 	13												; print a new line.
     222/     2E0 : 3F                  		xppc 	p3
     223/     2E1 :                     
     224/     2E1 :                     ; ****************************************************************************************************************
     225/     2E1 :                     ;
     226/     2E1 :                     ;						Extract the 5 bit 3 letter (max command value). P1 points to buffer
     227/     2E1 :                     ;
     228/     2E1 :                     ; ****************************************************************************************************************
     229/     2E1 :                     
     230/     2E1 : C4 00               		ldi 	0
     231/     2E3 : 01                  		xae 													; E contains the LSB of the 5 bit shift
     232/     2E4 : 40                  		lde 	
     233/     2E5 : CA FF               		st 		-1(p2) 											; -1(P2) contains the MSB
     234/     2E7 : C9 FD               		st 		modifier-kbdBuffer(p1)							; clear the modifier.
     235/     2E9 :                     Extract5Bit:
     236/     2E9 : C1 00               		ld 		(p1) 											; look at character
     237/     2EB : 02                  		ccl 													; add 128-65, will be +ve if < 64
     238/     2EC : F4 3F               		adi 	128-65
     239/     2EE : 94 1A               		jp 		__ExtractEnd
     240/     2F0 : C4 05               		ldi 	5 												; shift current value left 5 times using -2(p2)
     241/     2F2 : CA FE               		st 		-2(p2)
 AS V1.42 Beta [Bld 102] - source file monitor.asm - page 13 - 12/2/2015 15:41:12


     242/     2F4 :                     __Ex5Shift:
     243/     2F4 : 40                  		lde 													; shift E left into CY/L
     244/     2F5 : 02                  		ccl
     245/     2F6 : 70                  		ade 
     246/     2F7 : 01                  		xae
     247/     2F8 : C2 FF               		ld 		-1(p2) 											; shift CY/L into -1(p2) and carry/link
     248/     2FA : F2 FF               		add 	-1(p2)
     249/     2FC : CA FF               		st 		-1(p2)
     250/     2FE : BA FE               		dld 	-2(p2) 											; done it 5 times ?
     251/     300 : 9C F2               		jnz 	__Ex5Shift
     252/     302 : C5 01               		ld 		@1(p1) 											; re-read character.
     253/     304 : D4 1F               		ani 	0x1F 											; lower 5 bits only.
     254/     306 : 58                  		ore 													; OR into E
     255/     307 : 01                  		xae
     256/     308 : 90 DF               		jmp 	Extract5Bit 									; go and get the next one.
     257/     30A :                     
     258/     30A :                     __ExtractEnd:
     259/     30A : C4 1C               		ldi 	parPosn & 255 									; P1.L = Parameter Position, A = first non cmd char
     260/     30C : 31                  		xpal	p1
     261/     30D : C9 00               		st 		(p1) 											; write to parameter position.
     262/     30F :                     
     263/     30F :                     ; ****************************************************************************************************************
     264/     30F :                     ;
     265/     30F :                     ;						Find command in -1 (P2) (High) E (Low) in Command table
     266/     30F :                     ;	
     267/     30F :                     ; ****************************************************************************************************************
     268/     30F :                     
     269/     30F : C4 47               		ldi 	__commandList & 255 							; point P1 to the command list
     270/     311 : 31                  		xpal 	p1
     271/     312 : C4 07               		ldi 	__commandList / 256 		
     272/     314 : 35                  		xpah 	p1	
     273/     315 :                     __FindCommandLoop:
     274/     315 : C1 00               		ld 		0(p1) 											; reached the end of the table ?
     275/     317 : D9 01               		or 		1(p1)											; which is marked by word 0000
     276/     319 : 98 31               		jz 		__CommandError
     277/     31B : C5 03               		ld 		@3(p1) 											; read low byte, and point to next
     278/     31D : 60                  		xre
     279/     31E : 9C F5               		jnz 	__FindCommandLoop 								; if different to LSB loop back.
     280/     320 : C1 FE               		ld 		-2(p1) 											; read the high byte
     281/     322 : E2 FF               		xor 	-1(p2) 											; if different to the MSB loop back.
     282/     324 : 9C EF               		jnz 	__FindCommandLoop
     283/     326 :                     
     284/     326 :                     ; ****************************************************************************************************************
     285/     326 :                     ;
     286/     326 :                     ;				Found command, figure out if ASM or Command, if Command go to that routine
     287/     326 :                     ;
     288/     326 :                     ; ****************************************************************************************************************
     289/     326 :                     
     290/     326 : C4 71               		ldi 	(GetParameter-1) & 255 							; point P3 to the get parameter code.
     291/     328 : 33                  		xpal 	p3
     292/     329 : C4 06               		ldi 	(GetParameter-1) / 256
     293/     32B : 37                  		xpah 	p3
     294/     32C :                     
     295/     32C : C1 FF               		ld 		-1(p1) 											; read the operation code.
     296/     32E : D4 F0               		ani 	0xF0 											; look at the m-s-nibble - commands are 0x20.
     297/     330 : E4 20               		xri 	0x20
     298/     332 : 9C 22               		jnz 	__Assembler
     299/     334 :                     
     300/     334 : C1 FF               		ld 		-1(p1) 											; re-read it
     301/     336 : 02                  		ccl
 AS V1.42 Beta [Bld 102] - source file monitor.asm - page 14 - 12/2/2015 15:41:12


     302/     337 : F1 FF               		add 	-1(p1) 											; double it
     303/     339 : D4 1F               		ani 	0x1F 											; lower 5 bits only.
     304/     33B : F4 EE               		adi 	__CommandTable & 255 							; make P1 point to the command table entry
     305/     33D : 31                  		xpal 	p1
     306/     33E : C4 07               		ldi 	__CommandTable / 256 					
     307/     340 : 35                  		xpah 	p1
     308/     341 : C1 00               		ld 		0(p1) 											; read low address
     309/     343 : 01                  		xae
     310/     344 : C1 01               		ld 		1(p1) 											; read high address
     311/     346 : 35                  		xpah 	p1 												; put in P1.H
     312/     347 : 40                  		lde 													; get low address
     313/     348 : 31                  		xpal 	p1 												; put in P1.L
     314/     349 : C5 FF               		ld 		@-1(p1) 										; fix up for the pre-increment
     315/     34B : 3D                  		xppc 	p1 												; and go there.
     316/     34C :                     
     317/     34C :                     __CommandError: 												; unknown command.
     318/     34C : C4 03               		ldi 	3 												; set the beeper on
     319/     34E : 07                  		cas
     320/     34F : 8F FF               		dly 	0xFF 											; short delay
     321/     351 : C4 00               		ldi 	0 												; set the beeper off
     322/     353 : 07                  		cas
     323/     354 : 90 84               		jmp 	__CmdMainLoop1
     324/     356 :                     
     325/     356 :                     ; ****************************************************************************************************************
     326/     356 :                     ;												In line Assembler
     327/     356 :                     ; ****************************************************************************************************************
     328/     356 :                     
     329/     356 :                     __Assembler:
     330/     356 : C1 FF               		ld 		-1(p1) 											; this is the operation code to use.
     331/     358 : CE FF               		st 		@-1(p2) 										; push on the stack.
     332/     35A :                     
     333/     35A : 3F                  		xppc 	p3 												; evaluate (any) parameter if present
     334/     35B : 06                  		csa 													; check carry flag set
     335/     35C : 94 27               		jp 		__ASMNoParameter  								; if clear, no parameter was provided.
     336/     35E :                     
     337/     35E : C4 1C               		ldi 	parPosn & 255
     338/     360 : 31                  		xpal 	p1 												; get the parameter LSB
     339/     361 : CE FF               		st 		@-1(p2) 										; push that on the stack, set P1 to parPosn
     340/     363 : C4 0C               		ldi 	parPosn / 256
     341/     365 : 35                  		xpah 	p1
     342/     366 : C1 00               		ld 		(p1) 											; read current position
     343/     368 : 31                  		xpal 	p1 												; P1 now points to character.
     344/     369 : C1 00               		ld 		(p1) 											; read character
     345/     36B : E4 21               		xri 	'!'												; is it the label pling ?
     346/     36D : 9C 1E               		jnz 	__ASMContinue 									; we don't need to change this pointer , we should technically.
     347/     36F : C2 00               		ld 		(p2) 											; read the value, which is the label number
     348/     371 : 03                  		scl
     349/     372 : FC 18               		cai 	labelCount 										; is it a valid label number
     350/     374 : 94 D6               		jp 		__CommandError 									; no, beep.
     351/     376 : C2 00               		ld 		(p2) 											; re-read the label number
     352/     378 : 01                  		xae 													; put in E
     353/     379 : C4 0C               		ldi 	Labels/256 										; point p1 to labels
     354/     37B : 35                  		xpah 	p1
     355/     37C : C4 00               		ldi 	Labels&255 
     356/     37E : 31                  		xpal 	p1
     357/     37F : C1 80               		ld 		-0x80(p1) 										; read label indexed using E.
     358/     381 : CA 00               		st 		(p2) 											; save as the operand
     359/     383 : 90 08               		jmp 	__ASMContinue 									; and continue
     360/     385 :                     
     361/     385 :                     __ASMNoParameter:
 AS V1.42 Beta [Bld 102] - source file monitor.asm - page 15 - 12/2/2015 15:41:12


     362/     385 : C2 00               		ld 		(p2) 											; read the pushed operation code
     363/     387 : D4 80               		ani 	0x80 											; is bit 7 set ?
     364/     389 : 9C C1               		jnz 	__CommandError 									; if it is, we need a parameter
     365/     38B : CE FF               		st 		@-1(p2) 										; push zero on the stack as a dummy parameter.
     366/     38D :                     
     367/     38D :                     __ASMContinue:
     368/     38D : C4 0C               		ldi 	Current/256 									; p3 = &Current Address
     369/     38F : 37                  		xpah 	p3
     370/     390 : C4 19               		ldi 	Current&255
     371/     392 : 33                  		xpal 	p3
     372/     393 :                     
     373/     393 : C3 04               		ld 		modifier-Current(p3) 							; get the modifier (e.g. @,Pn etc.)
     374/     395 : 02                  		ccl
     375/     396 : F2 01               		add 	1(p2) 											; add to the opcode and write it back
     376/     398 : CA 01               		st 		1(p2)
     377/     39A :                     
     378/     39A : C3 00               		ld 		(p3) 											; read current address into P1
     379/     39C : 31                  		xpal 	p1
     380/     39D : C3 01               		ld 		1(p3)
     381/     39F : 35                  		xpah 	p1
     382/     3A0 :                     
     383/     3A0 : C2 01               		ld 		1(p2) 											; read opcode.
     384/     3A2 : CD 01               		st 		@1(p1) 											; write out to current address and bump it.
     385/     3A4 : 94 1F               		jp 		__ASMExit 										; if +ve then no operand byte, exit.
     386/     3A6 :                     
     387/     3A6 : C2 00               		ld 		(p2) 											; read the operand byte
     388/     3A8 : CD 01               		st 		@1(p1) 											; write that out as well.
     389/     3AA :                     
     390/     3AA : C3 04               		ld 		modifier-Current(p3) 							; look at the modifier 
     391/     3AC : 9C 17               		jnz 	__ASMExit 										; if non zero we don't need to do anything P0 = 00
     392/     3AE : C2 01               		ld 		1(p2) 											; DLY is a special case
     393/     3B0 : E4 8F               		xri 	0x8F 											; where the modifier is zero but not PC relative.
     394/     3B2 : 98 11               		jz 		__ASMExit 												
     395/     3B4 :                     
     396/     3B4 : C1 FF               		ld 		-1(p1) 											; read operand
     397/     3B6 : 02                  		ccl 													; one fewer because we want the current addr+1 low
     398/     3B7 : FB 00               		cad 	(p3) 											; subtract the current address low.
     399/     3B9 : C9 FF               		st 		-1(p1) 											; write it back
     400/     3BB :                     
     401/     3BB : C2 01               		ld 		1(p2) 											; read opcode again
     402/     3BD : D4 F0               		ani 	0xF0 											; is it 9x (a JMP command)
     403/     3BF : E4 90               		xri 	0x90
     404/     3C1 : 9C 02               		jnz 	__ASMExit 										; if not, we are done
     405/     3C3 : B9 FF               		dld 	-1(p1) 											; one fewer because of the pre-increment
     406/     3C5 :                     __ASMExit:
     407/     3C5 : 31                  		xpal 	p1 												; write current address back out
     408/     3C6 : CB 00               		st 		(p3)
     409/     3C8 : 35                  		xpah 	p1
     410/     3C9 : CB 01               		st 		1(p3)
     411/     3CB : C6 02               		ld 		@2(p2) 											; drop stack values.
     412/     3CD :                     
     413/     3CD : 90 0C               		jmp 	__CmdMainLoop2 									; back to command loop
     414/     3CF :                     
     415/     3CF :                     ; ****************************************************************************************************************
     416/     3CF :                     ; ****************************************************************************************************************
     417/     3CF :                     ;
     418/     3CF :                     ;												Commands Section
     419/     3CF :                     ;
     420/     3CF :                     ; ****************************************************************************************************************
     421/     3CF :                     ; ****************************************************************************************************************
 AS V1.42 Beta [Bld 102] - source file monitor.asm - page 16 - 12/2/2015 15:41:12


     422/     3CF :                     
     423/     3CF :                     ; ****************************************************************************************************************
     424/     3CF :                     ;											A : Set Current address
     425/     3CF :                     ; ****************************************************************************************************************
     426/     3CF :                     
     427/     3CF :                     Address_Command:
     428/     3CF : 3F                  		xppc 	p3 												; get parameter if exists
     429/     3D0 : 3F                  		xppc 	p3 												; update current if exists.
     430/     3D1 : 90 08               		jmp 	__CmdMainLoop2
     431/     3D3 :                     
     432/     3D3 :                     __CmdParameterFail:
     433/     3D3 : C4 02               		ldi 	2 												; set the beeper on
     434/     3D5 : 07                  		cas
     435/     3D6 : 8F FF               		dly 	0xFF 											; short delay
     436/     3D8 : C4 00               		ldi 	0 												; set the beeper off
     437/     3DA : 07                  		cas
     438/     3DB :                     __CmdMainLoop2:													; and go back to the start.
     439/     3DB : C4 7D               		ldi 	(CommandMainLoop-1) & 255
     440/     3DD : 33                  		xpal 	p3
     441/     3DE : C4 02               		ldi 	(CommandMainLoop-1) / 256
     442/     3E0 : 37                  		xpah 	p3
     443/     3E1 : 3F                  		xppc 	p3
     444/     3E2 :                     
     445/     3E2 :                     ; ****************************************************************************************************************
     446/     3E2 :                     ;										G : Go (Address must be specified.)
     447/     3E2 :                     ; ****************************************************************************************************************
     448/     3E2 :                     
     449/     3E2 :                     Go_Command:
     450/     3E2 : 3F                  		xppc 	p3 												; get parameter, which should exist.
     451/     3E3 : 06                  		csa 													; look at CY/L which is set if it was.
     452/     3E4 : 94 ED               		jp 		__CmdParameterFail 								; if it is clear, beep an error.
     453/     3E6 : 31                  		xpal 	p1 												; copy P1 to P3
     454/     3E7 : 33                  		xpal 	p3
     455/     3E8 : 35                  		xpah 	p1
     456/     3E9 : 37                  		xpah 	p3
     457/     3EA : C7 FF               		ld 		@-1(p3) 										; fix up for pre increment
     458/     3EC : 3F                  		xppc 	p3 												; call the routine.		
     459/     3ED :                     __CmdMainLoop3:
     460/     3ED : 90 EC               		jmp 	__CmdMainLoop2 									; re-enter monitor.
     461/     3EF :                     
     462/     3EF :                     ; ****************************************************************************************************************
     463/     3EF :                     ;			PUT Write to tape : data mandatory, it is the byte count from the current address.
     464/     3EF :                     ; ****************************************************************************************************************
     465/     3EF :                     
     466/     3EF :                     PutTape_Command:
     467/     3EF : 3F                  		xppc 	p3 												; get the bytes to write.
     468/     3F0 : 06                  		csa 													; if CC, no value was provided
     469/     3F1 : 94 E0               		jp 		__CmdParameterFail 								; which is an error.
     470/     3F3 : 31                  		xpal 	p1 												; store low byte count in -1(P2)
     471/     3F4 : CA FF               		st 		-1(p2)
     472/     3F6 : 35                  		xpah 	p1 												; store high byte count in -2(P2)
     473/     3F7 : CA FE               		st 		-2(p2)
     474/     3F9 : 02                  		ccl 													; skip over the update current address
     475/     3FA : 3F                  		xppc 	p3 												; this won't update current address as CY/L = 0
     476/     3FB : 3F                  		xppc 	p3 												; and load the current address into P1.
     477/     3FC : C4 00               		ldi 	0 												; set the output tape bit low
     478/     3FE : 01                  		xae
     479/     3FF : 19                  		sio
     480/     400 : C4 20               		ldi 	32 												; tape leader
     481/     402 : CA FD               		st 		-3(p2)
 AS V1.42 Beta [Bld 102] - source file monitor.asm - page 17 - 12/2/2015 15:41:12


     482/     404 :                     _PutTapeLeader:
     483/     404 : 8F FF               		dly 	0xFF
     484/     406 : BA FD               		dld 	-3(p2)
     485/     408 : 9C FA               		jnz 	_PutTapeLeader
     486/     40A :                     _PutTapeByte:													; output byte at P1
     487/     40A : C4 00               		ldi 	0 												; set output bit to 0
     488/     40C : 01                  		xae 	
     489/     40D : 19                  		sio
     490/     40E : 8F 10               		dly 	tapeDelay * 4 									; 0 continuation bit + gap between tapes with no signal 
     491/     410 : C4 01               		ldi 	0x1 											; set bit high
     492/     412 : 01                  		xae
     493/     413 : 19                  		sio 
     494/     414 : C4 00               		ldi 	0
     495/     416 : 8F 04               		dly 	tapeDelay 										; output the start bit.
     496/     418 : C5 01               		ld 		@1(p1) 											; read the byte and put it in E.
     497/     41A : 01                  		xae
     498/     41B : C4 08               		ldi 	8 												; output 8 bits
     499/     41D : CA FD               		st 		-3(p2)
     500/     41F :                     _PutTapeBit:
     501/     41F : 19                  		sio 													; output MSB and shift
     502/     420 : C4 00               		ldi 	0
     503/     422 : 8F 04               		dly 	tapeDelay 								
     504/     424 : BA FD               		dld 	-3(p2) 											; do all 8 bits.
     505/     426 : 9C F7               		jnz 	_PutTapeBit
     506/     428 : BA FF               		dld 	-1(p2) 											; decrement counter
     507/     42A : 9C DE               		jnz 	_PutTapeByte
     508/     42C : BA FE               		dld 	-2(p2) 											; note MSB goes 0 to -1 when finished.
     509/     42E : 94 DA               		jp 		_PutTapeByte
     510/     430 : C4 01               		ldi 	0x01 											; add the termination bit.
     511/     432 : 01                  		xae
     512/     433 : 19                  		sio
     513/     434 : C4 00               		ldi 	0 												; put that out.
     514/     436 : 8F 04               		dly 	TapeDelay
     515/     438 : C4 00               		ldi 	0 												; and set the leve back to 0
     516/     43A : 01                  		xae 
     517/     43B : 19                  		sio
     518/     43C :                     __CmdMainLoop4:
     519/     43C : 90 AF               		jmp 	__CmdMainLoop3
     520/     43E :                     
     521/     43E :                     __CmdParameterFail1:
     522/     43E : 90 93               		jmp 	__CmdParameterFail
     523/     440 :                     
     524/     440 :                     ; ****************************************************************************************************************
     525/     440 :                     ;						GET [addr] load tape to current position or given address.
     526/     440 :                     ; ****************************************************************************************************************
     527/     440 :                     
     528/     440 :                     LoadTape_Command:
     529/     440 : 3F                  		xppc	p3 												; get parameter
     530/     441 : 3F                  		xppc 	p3												; update current address
     531/     442 : 3F                  		xppc 	p3 												; current address to P1.
     532/     443 : C4 08               		ldi 	0x8 											; point P3 to the keyboard.
     533/     445 : 37                  		xpah 	p3
     534/     446 :                     __GetTapeWait:
     535/     446 : C3 00               		ld 		0(p3) 											; check keyboard break
     536/     448 : D4 80               		ani 	0x80
     537/     44A : 9C F2               		jnz 	__CmdParameterFail1
     538/     44C : 19                  		sio 													; wait for the start bit, examine tape in.
     539/     44D : 40                  		lde 
     540/     44E : 94 F6               		jp 		__GetTapeWait
     541/     450 : 8F 06               		dly 	tapeDelay * 3 / 2 								; half way into the first bit.
 AS V1.42 Beta [Bld 102] - source file monitor.asm - page 18 - 12/2/2015 15:41:12


     542/     452 : C4 08               		ldi 	8 												; read in 8 bits.
     543/     454 : CA FF               		st 		-1(p2)
     544/     456 :                     __GetTapeBits:
     545/     456 : 19                  		sio 													; read in one bit
     546/     457 : C4 00               		ldi 	0
     547/     459 : 8F 04               		dly 	tapeDelay 										; delay to next bit
     548/     45B : BA FF               		dld 	-1(p2) 											; read 8 bits.
     549/     45D : 9C F7               		jnz 	__GetTapeBits 
     550/     45F : 40                  		lde 													; store byte at current address
     551/     460 : CD 01               		st 		@1(p1)
     552/     462 : 19                  		sio 													; read in the byte, which is zero if continuing.
     553/     463 : 40                  		lde  													; examine bit 7 shifted in.
     554/     464 : 94 E0               		jp 		__GetTapeWait 									; if zero, wait for the next start bit.
     555/     466 :                     __CmdMainLoop5:
     556/     466 : 90 D4               		jmp 	__CmdMainLoop4
     557/     468 :                     
     558/     468 :                     ; ****************************************************************************************************************
     559/     468 :                     ;										L : nn Set Label to current address
     560/     468 :                     ; ****************************************************************************************************************
     561/     468 :                     
     562/     468 :                     Label_Command:
     563/     468 : 3F                  		xppc 	p3 												; get parameter
     564/     469 : 06                  		csa 													; check it exists, CY/L must be set
     565/     46A : 94 D2               		jp 		__CmdParameterFail1
     566/     46C : 31                  		xpal 	p1 												; get into A
     567/     46D : 01                  		xae 													; put into E
     568/     46E : 40                  		lde 													; get back
     569/     46F : 03                  		scl
     570/     470 : FC 18               		cai 	labelCount 										; check is < number of labels
     571/     472 : 94 CA               		jp 		__CmdParameterFail1
     572/     474 :                     
     573/     474 : C4 0C               		ldi 	Current/256 									; point P1 to current address
     574/     476 : 35                  		xpah 	p1
     575/     477 : C4 19               		ldi 	Current&255
     576/     479 : 31                  		xpal 	p1
     577/     47A : C1 00               		ld 		(p1) 											; read current address
     578/     47C : 31                  		xpal 	p1 												; save in P1.Low
     579/     47D : C4 00               		ldi 	Labels&255 										; get labels low byte in same page as current address
     580/     47F : 02                  		ccl
     581/     480 : 70                  		ade 													; add label # to it
     582/     481 : 31                  		xpal 	p1 												; put in P1.L and restore current address low
     583/     482 : C9 00               		st 		(p1) 											; store current address low in label space.
     584/     484 : 90 E0               		jmp 	__CmdMainLoop5 									; and exit.
     585/     486 :                     
     586/     486 :                     ; ****************************************************************************************************************
     587/     486 :                     ;											M :	Dump Memory
     588/     486 :                     ; ****************************************************************************************************************
     589/     486 :                     
     590/     486 :                     MemoryDump_Command:
     591/     486 : 3F                  		xppc 	p3 												; get parameter if exists
     592/     487 : 3F                  		xppc 	p3 												; update current if exists.
     593/     488 : C4 07               		ldi 	7 												; print seven rows
     594/     48A : CE FF               		st 		@-1(p2)
     595/     48C :                     __DCLoop:
     596/     48C : C4 06               		ldi 	(PrintAddressData-1)/256						; print one row of address and data.
     597/     48E : 37                  		xpah 	p3
     598/     48F : C4 3E               		ldi 	(PrintAddressData-1)&255
     599/     491 : 33                  		xpal 	p3
     600/     492 : C4 04               		ldi 	4
     601/     494 : 3F                  		xppc 	p3
 AS V1.42 Beta [Bld 102] - source file monitor.asm - page 19 - 12/2/2015 15:41:12


     602/     495 : C4 0C               		ldi 	Current/256 									; point P1 to current
     603/     497 : 35                  		xpah 	p1
     604/     498 : C4 19               		ldi 	Current&255 
     605/     49A : 31                  		xpal 	p1
     606/     49B : C1 00               		ld 		0(p1) 											; add 4 to current address
     607/     49D : 02                  		ccl
     608/     49E : F4 04               		adi 	4
     609/     4A0 : C9 00               		st 		0(p1)
     610/     4A2 : C1 01               		ld 		1(p1)
     611/     4A4 : F4 00               		adi 	0
     612/     4A6 : C9 01               		st 		1(p1)
     613/     4A8 : BA 00               		dld 	(p2) 											; do it 7 times
     614/     4AA : 9C E0               		jnz 	__DCLoop
     615/     4AC : C6 01               		ld 		@1(p2) 											; fix up stack.
     616/     4AE :                     __CmdMainLoop6:
     617/     4AE : 90 B6               		jmp 	__CmdMainLoop5
     618/     4B0 :                     
     619/     4B0 :                     
     620/     4B0 :                     ; ****************************************************************************************************************
     621/     4B0 :                     ;								B: Enter Bytes (no address, sequence of byte data)
     622/     4B0 :                     ; ****************************************************************************************************************
     623/     4B0 :                     
     624/     4B0 :                     EnterBytes_Command:
     625/     4B0 : C4 71               		ldi 	(GetParameter-1) & 255 							; P3 = Get Parameter routine
     626/     4B2 : 33                  		xpal 	p3
     627/     4B3 : C4 06               		ldi 	(GetParameter-1) / 256 	
     628/     4B5 : 37                  		xpah 	p3
     629/     4B6 : 3F                  		xppc 	p3 												; get the parameter.
     630/     4B7 : 06                  		csa 													; look at carry
     631/     4B8 : 94 AC               		jp 		__CmdMainLoop5 									; carry clear, no value.
     632/     4BA : C4 0C               		ldi 	Current/256 									; make P1 point to current
     633/     4BC : 35                  		xpah 	p1
     634/     4BD : C4 19               		ldi 	Current&255 										
     635/     4BF : 31                  		xpal 	p1 												; this pulls the byte value into A
     636/     4C0 : 01                  		xae 													; save it in E
     637/     4C1 : C1 00               		ld 		0(p1) 											; copy address to save to into P3
     638/     4C3 : 33                  		xpal 	p3
     639/     4C4 : C1 01               		ld 		1(p1) 
     640/     4C6 : 37                  		xpah 	p3 
     641/     4C7 : 40                  		lde 													; get byte back
     642/     4C8 : CB 00               		st 		(p3) 											; save it in that location
     643/     4CA : A9 00               		ild 	0(p1) 											; bump current address and go back and try again.
     644/     4CC : 9C E2               		jnz 	EnterBytes_Command
     645/     4CE : A9 01               		ild 	1(p1)
     646/     4D0 : 90 DE               		jmp 	EnterBytes_Command
     647/     4D2 :                     
     648/     4D2 :                     ; ****************************************************************************************************************
     649/     4D2 :                     ;											D [aaaa] Disassembler
     650/     4D2 :                     ; ****************************************************************************************************************
     651/     4D2 :                     
     652/     4D2 :                     Disassemble_Command:	
     653/     4D2 : 3F                  		xppc 	p3 												; evaluate
     654/     4D3 : 3F                  		xppc 	p3 												; update current if new value
     655/     4D4 : C4 07               		ldi 	7												; instructions to disassemble counter
     656/     4D6 : CE FC               		st 		@-4(p2)											; p2 + 0 = counter p2 + 1 = opcode p2 + 2 = operand
     657/     4D8 :                     __DAssLoop:														; p2 + 3 = opcode - base opcode.
     658/     4D8 : C4 06               		ldi 	(PrintAddressData-1)/256						; print Address only
     659/     4DA : 37                  		xpah 	p3
     660/     4DB : C4 3E               		ldi 	(PrintAddressData-1)&255
     661/     4DD : 33                  		xpal 	p3
 AS V1.42 Beta [Bld 102] - source file monitor.asm - page 20 - 12/2/2015 15:41:12


     662/     4DE : C4 00               		ldi 	0
     663/     4E0 : 3F                  		xppc 	p3
     664/     4E1 : C4 0C               		ldi 	Current / 256 									; point P1 to current address
     665/     4E3 : 35                  		xpah 	p1
     666/     4E4 : C4 19               		ldi 	Current & 255
     667/     4E6 : 31                  		xpal 	p1
     668/     4E7 : C1 00               		ld 		0(p1) 											; load current address into P3
     669/     4E9 : 33                  		xpal 	p3
     670/     4EA : C1 01               		ld 		1(p1)
     671/     4EC : 37                  		xpah 	p3
     672/     4ED : C7 01               		ld 		@1(p3) 											; read opcode
     673/     4EF : CA 01               		st 		1(p2) 											; save it
     674/     4F1 : 94 04               		jp 		__DAssNoOperand 								; if +ve no operand
     675/     4F3 : C7 01               		ld 		@1(p3) 											; read operand
     676/     4F5 : CA 02               		st 		2(p2) 											; save it
     677/     4F7 :                     __DAssNoOperand:
     678/     4F7 : C4 E9               		ldi 	(__CommandListEnd-3) & 255
     679/     4F9 : 33                  		xpal 	p3 												; update current position, setting P3 to last entry
     680/     4FA : C9 00               		st 		0(p1)											; in command table.
     681/     4FC : C4 07               		ldi 	(__CommandListEnd-3) / 256
     682/     4FE : 37                  		xpah 	p3
     683/     4FF : C9 01               		st 		1(p1)
     684/     501 :                     
     685/     501 :                     __DAssFindOpcode: 												; the table is : text (word) opcode (byte)
     686/     501 : C2 01               		ld 		1(p2) 											; get opcode
     687/     503 : E3 02               		xor 	2(p3) 											; check in the same 8 byte page.
     688/     505 : D4 F0               		ani 	0xF0
     689/     507 : 9C 0B               		jnz 	__DAssNextOpcode
     690/     509 : C2 01               		ld 		1(p2) 											; get opcode
     691/     50B : 03                  		scl
     692/     50C : FB 02               		cad 	2(p3) 											; subtract the base opcode.
     693/     50E : CA 03               		st 		3(p2) 											; save a the offset (possible)
     694/     510 : D4 E0               		ani 	0xE0 											; it needs to be 0x20 or less
     695/     512 : 98 08               		jz 		__DAssFoundOpcode 								; if >= 0 then found the correct opcode.
     696/     514 :                     __DAssNextOpcode:
     697/     514 : C7 FD               		ld 		@-3(p3) 										; go to previous entry in table
     698/     516 : 90 E9               		jmp 	__DAssFindOpcode
     699/     518 :                     
     700/     518 :                     __DAssLoop2:
     701/     518 : 90 BE               		jmp 	__DAssLoop
     702/     51A :                     __CmdMainLoop7:
     703/     51A : 90 92               		jmp 	__CmdMainLoop6
     704/     51C :                     
     705/     51C :                     __DAssFoundOpcode:
     706/     51C : C3 02               		ld 		2(p3) 											; look at opcode that matched.
     707/     51E : D4 87               		ani 	0x87 											; match with 1xxx x100
     708/     520 : E4 84               		xri 	0x84 											; which is all the immediate instructions.		
     709/     522 : 9C 04               		jnz 	__DAssNotImmediate
     710/     524 : C2 03               		ld 		3(p2) 											; only do immediate if base offset is zero
     711/     526 : 9C EC               		jnz 	__DAssNextOpcode 								; fixes C0-C7 being LD, but C4 being LDI.
     712/     528 :                     __DAssNotImmediate:
     713/     528 : C3 00               		ld 		0(p3) 											; save LSB of text on stack
     714/     52A : CE FF               		st 		@-1(p2)
     715/     52C : C3 01               		ld 		1(p3) 											; and the MSB of text on stack
     716/     52E : CE FF               		st 		@-1(p2)
     717/     530 :                     
     718/     530 : C4 05               		ldi 	(PrintCharacter-1) / 256 						; set P3 up to print characters
     719/     532 : 37                  		xpah 	p3
     720/     533 : C4 D1               		ldi 	(PrintCharacter-1) & 255 
     721/     535 : 33                  		xpal 	p3
 AS V1.42 Beta [Bld 102] - source file monitor.asm - page 21 - 12/2/2015 15:41:12


     722/     536 : C4 20               		ldi 	' '												; print a space.
     723/     538 : 3F                  		xppc 	p3
     724/     539 :                     
     725/     539 : C4 03               		ldi 	3 												; print 3 characters
     726/     53B : CE FF               		st 		@-1(p2) 										; so +0 is count, +1 = text MSB, +2 = text LSB
     727/     53D :                     __DAssPrintMnemonic:
     728/     53D : C2 01               		ld 		1(p2) 											; get text MSB which is in bits .xxxxx..
     729/     53F : 1C                  		sr 														; shift right twice.
     730/     540 : 1C                  		sr
     731/     541 : D4 1F               		ani 	0x1F 											; lower 5 bits only
     732/     543 : 98 04               		jz 		__DAssSkipSpace 								; don't print spaces (00000)
     733/     545 : 02                  		ccl 													; make it 7 bit ASCII code.
     734/     546 : F4 40               		adi 	64 							
     735/     548 : 3F                  		xppc 	p3 												; display the character
     736/     549 :                     __DAssSkipSpace:
     737/     549 : C4 05               		ldi 	5 												; now shift the encoded data left 5 times
     738/     54B : CA FF               		st 		-1(p2)
     739/     54D :                     __DAssShiftEncode:
     740/     54D : 02                  		ccl
     741/     54E : C2 02               		ld 		2(p2)
     742/     550 : F2 02               		add 	2(p2)
     743/     552 : CA 02               		st 		2(p2)
     744/     554 : C2 01               		ld 		1(p2)
     745/     556 : F2 01               		add 	1(p2)
     746/     558 : CA 01               		st 		1(p2)
     747/     55A : BA FF               		dld 	-1(p2)
     748/     55C : 9C EF               		jnz 	__DAssShiftEncode
     749/     55E : BA 00               		dld 	0(p2) 											; done all three characters
     750/     560 : 9C DB               		jnz 	__DAssPrintMnemonic 							; if not keep going.
     751/     562 :                     
     752/     562 : C6 03               		ld 		@3(p2) 											; remove mnemonic stuff off the stack.
     753/     564 :                     
     754/     564 : C2 03               		ld 		3(p2) 											; print instruction modifier if required.
     755/     566 : 9C 1F               		jnz 	__DAssPrintModifier
     756/     568 :                     
     757/     568 :                     __DAssPrintOperand:
     758/     568 : C2 01               		ld 		1(p2) 											; get original opcode
     759/     56A : 94 0A               		jp 		__DAssNext 										; if no operand go to next line of disassembly.
     760/     56C : C4 05               		ldi 	(PrintHexByte-1) / 256 							; set P3 to point to the hex printer
     761/     56E : 37                  		xpah 	p3
     762/     56F : C4 9E               		ldi 	(PrintHexByte-1) & 255
     763/     571 : 33                  		xpal 	p3
     764/     572 : C2 02               		ld 		2(p2) 											; get operand
     765/     574 : 03                  		scl 
     766/     575 : 3F                  		xppc 	p3 												; print it out with a leading space.
     767/     576 :                     
     768/     576 :                     __DAssNext:
     769/     576 : C4 05               		ldi 	(PrintCharacter-1) / 256 						; set P3 up to print characters
     770/     578 : 37                  		xpah 	p3
     771/     579 : C4 D1               		ldi 	(PrintCharacter-1) & 255 
     772/     57B : 33                  		xpal 	p3
     773/     57C : C4 0D               		ldi 	13												; print a newline.
     774/     57E : 3F                  		xppc 	p3
     775/     57F :                     
     776/     57F : BA 00               		dld 	0(p2) 											; done all 6 lines
     777/     581 : 9C 95               		jnz 	__DAssLoop2 									; no, go round again.
     778/     583 : C6 04               		ld 		@4(p2) 											; fix up the stack.
     779/     585 : 90 93               		jmp 	__CmdMainLoop7 									; and time to exit.
     780/     587 :                     
     781/     587 :                     
 AS V1.42 Beta [Bld 102] - source file monitor.asm - page 22 - 12/2/2015 15:41:12


     782/     587 :                     __DAssPrintModifier:
     783/     587 : C4 20               		ldi 	' '												; print leading space
     784/     589 : 3F                  		xppc 	p3
     785/     58A : C2 03               		ld 		3(p2) 											; read modifier
     786/     58C : D4 04               		ani 	0x04 											; is @ bit set
     787/     58E : 98 03               		jz 		__DAssNotAutoIndexed
     788/     590 : C4 40               		ldi 	'@'												; print '@'
     789/     592 : 3F                  		xppc 	p3
     790/     593 :                     __DAssNotAutoIndexed:
     791/     593 : C4 50               		ldi 	'P'												; print 'P'
     792/     595 : 3F                  		xppc 	p3
     793/     596 : C2 03               		ld 		3(p2) 											; print pointer register
     794/     598 : D4 03               		ani 	3
     795/     59A : DC 30               		ori 	'0'
     796/     59C : 3F                  		xppc 	p3
     797/     59D : 90 C9               		jmp 	__DAssPrintOperand 								; and print operand.
     798/     59F :                     
     799/     59F :                     
     800/     59F :                     ; ****************************************************************************************************************
     801/     59F :                     ; ****************************************************************************************************************
     802/     59F :                     ;
     803/     59F :                     ;						Print A as a hexadecimal 2 digit value. If CY/L set precede with space
     804/     59F :                     ;
     805/     59F :                     ; ****************************************************************************************************************
     806/     59F :                     ; ****************************************************************************************************************
     807/     59F :                     
     808/     59F :                     PrintHexByte:
     809/     59F : CE FF               		st 		@-1(p2) 										; push A and P3, set P3 up to print character
     810/     5A1 : C4 05               		ldi 	(PrintCharacter-1)/256
     811/     5A3 : 37                  		xpah 	p3
     812/     5A4 : CE FF               		st 		@-1(p2)
     813/     5A6 : C4 D1               		ldi 	(PrintCharacter-1)&255
     814/     5A8 : 33                  		xpal 	p3
     815/     5A9 : CE FF               		st 		@-1(p2)
     816/     5AB : 06                  		csa 													; check carry
     817/     5AC : 94 03               		jp 		__PHBNoSpace									; if clear, no space.
     818/     5AE : C4 20               		ldi 	' '												; print leading space
     819/     5B0 : 3F                  		xppc 	p3 
     820/     5B1 :                     __PHBNoSpace:
     821/     5B1 : C2 02               		ld 		2(p2) 											; read digit
     822/     5B3 : 1C                  		sr 														; convert MSB
     823/     5B4 : 1C                  		sr
     824/     5B5 : 1C                  		sr
     825/     5B6 : 1C                  		sr
     826/     5B7 : 02                  		ccl
     827/     5B8 : EC 90               		dai 	0x90
     828/     5BA : EC 40               		dai 	0x40
     829/     5BC : 3F                  		xppc 	p3 												; print
     830/     5BD : C2 02               		ld 		2(p2) 											; read digit
     831/     5BF : D4 0F               		ani 	0x0F 											; convert LSB
     832/     5C1 : 02                  		ccl
     833/     5C2 : EC 90               		dai 	0x90
     834/     5C4 : EC 40               		dai 	0x40
     835/     5C6 : 3F                  		xppc 	p3 												; print
     836/     5C7 :                     
     837/     5C7 : C6 01               		ld 		@1(p2) 											; restore P3 & A and Return
     838/     5C9 : 33                  		xpal 	p3
     839/     5CA : C6 01               		ld 		@1(p2)
     840/     5CC : 37                  		xpah 	p3
     841/     5CD : C6 01               		ld 		@1(p2)
 AS V1.42 Beta [Bld 102] - source file monitor.asm - page 23 - 12/2/2015 15:41:12


     842/     5CF : 3F                  		xppc 	p3
     843/     5D0 : 90 CD               		jmp 	PrintHexByte
     844/     5D2 :                     
     845/     5D2 :                     ; ****************************************************************************************************************
     846/     5D2 :                     ; ****************************************************************************************************************
     847/     5D2 :                     ;
     848/     5D2 :                     ;		Print Character in A, preserves all registers, re-entrant. Handles 13 (New Line), 8 (Backspace)
     849/     5D2 :                     ;		Characters 32 - 95 only.
     850/     5D2 :                     ;	
     851/     5D2 :                     ;		Rolls to screen top rather than scrolling.
     852/     5D2 :                     ;
     853/     5D2 :                     ; ****************************************************************************************************************
     854/     5D2 :                     ; ****************************************************************************************************************
     855/     5D2 :                     
     856/     5D2 :                     PrintCharacter:
     857/     5D2 : CE FF               		st 		@-1(p2) 										; save A
     858/     5D4 : C4 0C               		ldi 	Cursor/256 										; save P1, setting up P1 -> Cursor at same time.
     859/     5D6 : 35                  		xpah 	p1
     860/     5D7 : CE FF               		st 		@-1(p2)
     861/     5D9 : C4 18               		ldi 	Cursor&255
     862/     5DB : 31                  		xpal 	p1
     863/     5DC : CE FF               		st 		@-1(p2)
     864/     5DE : C4 00               		ldi 	0 												; save P3, setting up P3 -> Page 0 (Video RAM Write)
     865/     5E0 : 37                  		xpah 	p3
     866/     5E1 : CE FF               		st 		@-1(p2)
     867/     5E3 : 33                  		xpal 	p3
     868/     5E4 : CE FF               		st 		@-1(p2)
     869/     5E6 :                     
     870/     5E6 : C1 00               		ld 		(p1) 											; read cursor position
     871/     5E8 : 33                  		xpal 	p3 												; put in P3.Low
     872/     5E9 :                     
     873/     5E9 : C4 20               		ldi 	' ' 											; erase the cursor.
     874/     5EB : CB 00               		st 		0(p3)
     875/     5ED :                     
     876/     5ED : C2 04               		ld 		4(p2) 											; read character to print.
     877/     5EF : E4 0D               		xri 	13 												; is it CR ?
     878/     5F1 : 98 40               		jz 		__PCNewLine 									; if so, go to new line.
     879/     5F3 : E4 05               		xri 	13!8 											; is it Backspace ?
     880/     5F5 : 98 30               		jz 		__PCBackSpace
     881/     5F7 :                     
     882/     5F7 : C2 04               		ld 		4(p2) 											; get character to print
     883/     5F9 : D4 3F               		ani 	0x3F 											; make 6 bit ASCII
     884/     5FB : CF 01               		st 		@1(p3) 											; write into P3, e.g. the screen and bump it.
     885/     5FD : A9 00               		ild 	(p1) 											; increment cursor position and load
     886/     5FF : D4 0F               		ani 	15 												; are we at line start ?
     887/     601 : 9C 0C               		jnz 	__PCExit 										; if so, erase the current line.
     888/     603 :                     
     889/     603 :                     __PCBlankNewLine:
     890/     603 : C4 10               		ldi 	16 												; count to 16, the number of spaces to write out.
     891/     605 : CA FF               		st 		-1(p2) 
     892/     607 :                     __PCBlankNewLineLoop:
     893/     607 : C4 20               		ldi 	' '
     894/     609 : CF 01               		st 		@1(p3)
     895/     60B : BA FF               		dld 	-1(p2)
     896/     60D : 9C F8               		jnz 	__PCBlankNewLineLoop
     897/     60F :                     
     898/     60F :                     __PCExit:
     899/     60F : C1 00               		ld 		(p1) 											; read cursor
     900/     611 : 33                  		xpal 	p3 												; put in P3.L
     901/     612 : C4 9B               		ldi 	0x9B 											; shaded block cursor on screen
 AS V1.42 Beta [Bld 102] - source file monitor.asm - page 24 - 12/2/2015 15:41:12


     902/     614 : CB 00               		st 		(p3)
     903/     616 : C6 01               		ld 		@1(p2)											; restore P3
     904/     618 : 33                  		xpal 	p3
     905/     619 : C6 01               		ld 		@1(p2)
     906/     61B : 37                  		xpah 	p3
     907/     61C : C6 01               		ld 		@1(p2)											; restore P1
     908/     61E : 31                  		xpal 	p1
     909/     61F : C6 01               		ld 		@1(p2)
     910/     621 : 35                  		xpah 	p1
     911/     622 : C6 01               		ld 		@1(p2) 											; restore A and Return.	
     912/     624 : 3F                  		xppc 	p3
     913/     625 : 90 AB               		jmp 	PrintCharacter 									; and it is re-entrant.
     914/     627 :                     
     915/     627 :                     __PCBackSpace:
     916/     627 : 33                  		xpal 	p3 												; get current cursor position
     917/     628 : 98 E5               		jz 		__PCExit 										; if top of screen then exit.
     918/     62A : B9 00               		dld 	(p1) 											; backspace and load cursor
     919/     62C : 33                  		xpal 	p3 												; put in P3
     920/     62D : C4 20               		ldi 	' '												; erase character there
     921/     62F : CB 00               		st 		(p3)
     922/     631 : 90 DC               		jmp 	__PCExit 										; and exit.
     923/     633 :                     
     924/     633 :                     __PCNewLine:
     925/     633 : C1 00               		ld 		(p1) 											; read cursor position
     926/     635 : D4 70               		ani 	0x70 											; line
     927/     637 : 02                  		ccl 													; next line
     928/     638 : F4 10               		adi 	0x10
     929/     63A : C9 00               		st 		(p1) 											; write back
     930/     63C : 33                  		xpal 	p3 												; put in P3.L
     931/     63D : 90 C4               		jmp 	__PCBlankNewLine
     932/     63F :                     
     933/     63F :                     ; ****************************************************************************************************************
     934/     63F :                     ; ****************************************************************************************************************
     935/     63F :                     ;
     936/     63F :                     ;					Print current address followed by A data bytes. Doesn't update current address
     937/     63F :                     ;
     938/     63F :                     ; ****************************************************************************************************************
     939/     63F :                     ; ****************************************************************************************************************
     940/     63F :                     
     941/     63F :                     PrintAddressData:
     942/     63F : CE FF               		st 		@-1(p2) 										; save count, we don't restore this.
     943/     641 : C4 05               		ldi 	(PrintHexByte-1)/256 							; save and set up P3
     944/     643 : 37                  		xpah 	p3
     945/     644 : CE FF               		st 		@-1(p2)
     946/     646 : C4 9E               		ldi 	(PrintHexByte-1)&255
     947/     648 : 33                  		xpal 	p3
     948/     649 : CE FF               		st 		@-1(p2)
     949/     64B : C4 0C               		ldi 	current / 256 									; point P1 to current address
     950/     64D : 35                  		xpah 	p1
     951/     64E : C4 19               		ldi 	current & 255
     952/     650 : 31                  		xpal 	p1
     953/     651 : C1 01               		ld 		1(p1) 											; read high byte of address
     954/     653 : 02                  		ccl
     955/     654 : 3F                  		xppc 	p3												; print w/o leading space
     956/     655 : C1 00               		ld 		0(p1)											; read low byte of address
     957/     657 : 02                  		ccl 	
     958/     658 : 3F                  		xppc 	p3 												; print w/o leading space.
     959/     659 : 01                  		xae 													; put in E
     960/     65A : C1 01               		ld 		1(p1) 											; high byte to P1.H
     961/     65C : 35                  		xpah 	p1
 AS V1.42 Beta [Bld 102] - source file monitor.asm - page 25 - 12/2/2015 15:41:12


     962/     65D : 40                  		lde 													; low byte to P1.H
     963/     65E : 31                  		xpal 	p1
     964/     65F :                     _PADLoop:
     965/     65F : BA 02               		dld 	2(p2) 											; decrement counter
     966/     661 : 94 09               		jp 		_PADPrint 										; if +ve print another byte
     967/     663 :                     
     968/     663 : C6 01               		ld 		@1(p2) 											; restore P3, skipping A hence @2
     969/     665 : 33                  		xpal 	p3
     970/     666 : C6 02               		ld 		@2(p2)
     971/     668 : 37                  		xpah 	p3
     972/     669 : 3F                  		xppc 	p3
     973/     66A : 90 D3               		jmp 	PrintAddressData
     974/     66C :                     
     975/     66C :                     _PADPrint:
     976/     66C : C5 01               		ld 		@1(p1) 											; read byte advance pointer
     977/     66E : 03                  		scl
     978/     66F : 3F                  		xppc 	p3 												; print with space.
     979/     670 : 90 ED               		jmp 	_PADLoop
     980/     672 :                     
     981/     672 :                     ; ****************************************************************************************************************
     982/     672 :                     ;
     983/     672 :                     ;		Look at the parameter string for a parameter, processing @ and Pn as you go, CS if parameter found
     984/     672 :                     ; 		CC otherwise. Return parameter value in P1. Falls through
     985/     672 :                     ;
     986/     672 :                     ; ****************************************************************************************************************
     987/     672 :                     
     988/     672 :                     GetParameter:
     989/     672 : C4 0C               		ldi 	parPosn/256 									; current position into P1
     990/     674 : 35                  		xpah 	p1
     991/     675 : C4 1C               		ldi 	parPosn&255 					
     992/     677 : 31                  		xpal 	p1
     993/     678 : C4 00               		ldi 	0 												; -1(p2) is the low byte result
     994/     67A : CA FF               		st 		-1(p2) 											; -2(p2) is the high byte result
     995/     67C : CA FE               		st 		-2(p2)
     996/     67E :                     
     997/     67E : C1 00               		ld 		(p1) 											; read the current position,P1 points to character
     998/     680 : 31                  		xpal 	p1 												; when we put it in P1.L
     999/     681 :                     
    1000/     681 :                     __GPASkip:														; skip over spaces to first alphanumeric.
    1001/     681 : C1 00               		ld 		(p1) 											; read character
    1002/     683 : 98 7B               		jz 		__GPAExitFail 									; if zero, then end of the input string.
    1003/     685 : C5 01               		ld 		@1(p1) 											; read it, advancing.
    1004/     687 : E4 20               		xri 	32 												; is it space ?
    1005/     689 : 98 F6               		jz 		__GPASkip 
    1006/     68B : E4 60               		xri 	32!'@'											; is it @ ?
    1007/     68D : 98 5E               		jz 		__GPAAtModifier 
    1008/     68F : E4 10               		xri 	'@'!'P' 										; is it P ?
    1009/     691 : 98 4C               		jz 		__GPAPointerModifier
    1010/     693 :                     
    1011/     693 :                     __GPANextCharacter:
    1012/     693 : C1 FF               		ld 		-1(p1) 											; get value back after post increment.
    1013/     695 : 02                  		ccl
    1014/     696 : F4 50               		adi 	128-48 											; this will be +ve if A < '0'
    1015/     698 : 94 66               		jp 		__GPAExitFail
    1016/     69A : FC 09               		cai 	9 												; will be +ve if A < '9', CY/L was clear.	
    1017/     69C : 94 0A               		jp 		__GPAFoundHex
    1018/     69E : FC 07               		cai 	7 												; will be +ve if A < 'A', CY/L was set
    1019/     6A0 : 94 5E               		jp 		__GPAExitFail
    1020/     6A2 : F4 79               		adi 	0xFF-0x85-1 									; will be +ve if A > 'F', CY/L was set.
    1021/     6A4 : 94 5A               		jp 		__GPAExitFail 					
 AS V1.42 Beta [Bld 102] - source file monitor.asm - page 26 - 12/2/2015 15:41:12


    1022/     6A6 : F4 76               		adi 	(0x70-0xFA) & 0xFF 								; make the range as below, CY/L was clear
    1023/     6A8 :                     __GPAFoundHex: 													; enter here 0-9 = $76..$7F, A-F = $70..$75
    1024/     6A8 : 02                  		ccl  													; convert that to a hex nibble.
    1025/     6A9 : F4 0A               		adi 	10
    1026/     6AB : D4 0F               		ani 	0xF
    1027/     6AD : 01                  		xae 													; save in E, temporarily
    1028/     6AE : C4 04               		ldi 	4 												; now shift the result 4 bits to the left.
    1029/     6B0 : CA FD               		st 		-3(p2) 											; -3(p2) is the counter
    1030/     6B2 :                     __GPAShift:
    1031/     6B2 : 02                  		ccl
    1032/     6B3 : C2 FF               		ld 		-1(p2) 											; shift 16 bit result 1 bit to the left.
    1033/     6B5 : F2 FF               		add 	-1(p2)
    1034/     6B7 : CA FF               		st 		-1(p2)
    1035/     6B9 : C2 FE               		ld 		-2(p2)
    1036/     6BB : F2 FE               		add 	-2(p2)
    1037/     6BD : CA FE               		st 		-2(p2)
    1038/     6BF : BA FD               		dld 	-3(p2) 											; do it four times
    1039/     6C1 : 9C EF               		jnz 	__GPAShift 	
    1040/     6C3 : C2 FF               		ld 		-1(p2) 											; Or E into the LSB
    1041/     6C5 : 58                  		ore
    1042/     6C6 : CA FF               		st 		-1(p2)
    1043/     6C8 :                     
    1044/     6C8 : C5 01               		ld 		@1(p1) 											; look at next character, post incrementing.
    1045/     6CA : 03                  		scl
    1046/     6CB : FC 22               		cai 	34 												; if it is after space and ! (label marker)
    1047/     6CD : 94 C4               		jp 		__GPANextCharacter 								; go back and put it in place.
    1048/     6CF :                     
    1049/     6CF : C5 FF               		ld 		@-1(p1) 										; undo the increment, incase we've just read zero.
    1050/     6D1 :                     
    1051/     6D1 : C4 1C               		ldi 	parPosn & 255 									; put the parPosn address in P1.L, new posn into A
    1052/     6D3 : 31                  		xpal 	p1
    1053/     6D4 : C9 00               		st 		(p1) 											; and write it back
    1054/     6D6 : C2 FF               		ld 		-1(p2) 											; put the result into P1
    1055/     6D8 : 31                  		xpal 	p1
    1056/     6D9 : C2 FE               		ld 		-2(p2)
    1057/     6DB : 35                  		xpah 	p1
    1058/     6DC : 03                  		scl 													; set CY/L to indicate okay
    1059/     6DD : 90 22               		jmp 	__GPAExit
    1060/     6DF :                     
    1061/     6DF :                     __GPAPointerModifier:
    1062/     6DF : C1 00               		ld 		(p1) 											; read P<something> ?
    1063/     6E1 : D4 FC               		ani 	0xFC 											; is it '0' .. '3'?
    1064/     6E3 : E4 30               		xri 	'0'
    1065/     6E5 : 9C 19               		jnz 	__GPAExitFail 									; it didn't work, not 0..3
    1066/     6E7 : C5 01               		ld 		@1(p1) 											; re-read it and advance
    1067/     6E9 : D4 03               		ani 	3												; lower 2 bits only
    1068/     6EB : 90 02               		jmp 	__GPAAdjustModifier
    1069/     6ED :                     __GPAAtModifier:
    1070/     6ED : C4 04               		ldi 	4 												; set modifier adjustment to +4
    1071/     6EF :                     __GPAAdjustModifier:
    1072/     6EF : CA FD               		st 		-3(p2) 
    1073/     6F1 : C4 1D               		ldi 	modifier & 255 									; point P1 to modifier, save current address in E
    1074/     6F3 : 31                  		xpal 	p1
    1075/     6F4 : 01                  		xae 
    1076/     6F5 : C1 00               		ld 		(p1) 											; read modifier
    1077/     6F7 : 02                  		ccl
    1078/     6F8 : F2 FD               		add 	-3(p2) 											; add the modifying value to it.
    1079/     6FA : C9 00               		st 		(p1) 											; write modifier.
    1080/     6FC : 40                  		lde 													; restore current address to P1.L
    1081/     6FD : 31                  		xpal 	p1
 AS V1.42 Beta [Bld 102] - source file monitor.asm - page 27 - 12/2/2015 15:41:12


    1082/     6FE : 90 81               		jmp 	__GPASkip 										; go back to skip over.
    1083/     700 :                     
    1084/     700 :                     __GPAExitFail:
    1085/     700 : 02                  		ccl 													; carry clear, e.g. nothing read in / error.
    1086/     701 :                     __GPAExit:
    1087/     701 : 3F                  		xppc 	p3
    1088/     702 :                     
    1089/     702 :                     ; ****************************************************************************************************************
    1090/     702 :                     ;
    1091/     702 :                     ;		Store parameter value in P1 in the current address, if CS. Falls through.
    1092/     702 :                     ;
    1093/     702 :                     ; ****************************************************************************************************************
    1094/     702 :                     
    1095/     702 :                     UpdateCurrentAddress:
    1096/     702 : 06                  		csa 													; get status reg
    1097/     703 : 94 0C               		jp 		__UCAExit 										; if carry flag clear then exit.
    1098/     705 :                     
    1099/     705 : C4 19               		ldi 	current & 255 									; current address to P1.L, acquired address to E
    1100/     707 : 31                  		xpal 	p1
    1101/     708 : 01                  		xae
    1102/     709 : C4 0C               		ldi 	current / 256 									; current address to P1.H, acquired to A
    1103/     70B : 35                  		xpah 	p1
    1104/     70C : C9 01               		st 		1(p1) 											; store address back
    1105/     70E : 40                  		lde
    1106/     70F : C9 00               		st 		0(p1)
    1107/     711 :                     __UCAExit:
    1108/     711 : 3F                  		xppc 	p3
    1109/     712 :                     
    1110/     712 :                     ; ****************************************************************************************************************
    1111/     712 :                     ;
    1112/     712 :                     ;		Get current address into P1.
    1113/     712 :                     ;
    1114/     712 :                     ; ****************************************************************************************************************
    1115/     712 :                     
    1116/     712 :                     GetCurrentAddress:
    1117/     712 : C4 0C               		ldi 	current/256 									; current address ptr in P1
    1118/     714 : 35                  		xpah 	p1
    1119/     715 : C4 19               		ldi 	current&255
    1120/     717 : 31                  		xpal 	p1
    1121/     718 : C1 00               		ld 		0(p1) 											; low byte to E
    1122/     71A : 01                  		xae
    1123/     71B : C1 01               		ld 		1(p1) 											; high byte to A
    1124/     71D : 35                  		xpah 	p1 												; then to P1.H
    1125/     71E : 40                  		lde 													; low byte to P1.L
    1126/     71F : 31                  		xpal 	p1 
    1127/     720 : 3F                  		xppc 	p3
    1128/     721 :                     
    1129/     721 :                     ; ****************************************************************************************************************
    1130/     721 :                     ;
    1131/     721 :                     ;											List of commands and Jump Table
    1132/     721 :                     ;
    1133/     721 :                     ; ****************************************************************************************************************
    1134/     721 :                     
    1135/     721 :                     		include commands.inc 									; must be at the end, so the command table is in
(1)    1/     747 :                             org 0x0747
(1)    2/     747 :                     ;
(1)    3/     747 :                     ; 	This file is generated automatically by gencommands.py
(1)    4/     747 :                     ;
(1)    5/     747 :                     __CommandList:
(1)    6/     747 : 94 21                       dw    0x2194 ; HLT
 AS V1.42 Beta [Bld 102] - source file monitor.asm(commands.inc) - page 28 - 12/2/2015 15:41:12


(1)    7/     749 : 00                          db    0x00
(1)    8/     74A : 25 60                       dw    0x6025 ; XAE
(1)    9/     74C : 01                          db    0x01
(1)   10/     74D : 6C 0C                       dw    0x0c6c ; CCL
(1)   11/     74F : 02                          db    0x02
(1)   12/     750 : 6C 4C                       dw    0x4c6c ; SCL
(1)   13/     752 : 03                          db    0x03
(1)   14/     753 : 2E 11                       dw    0x112e ; DIN
(1)   15/     755 : 04                          db    0x04
(1)   16/     756 : AE 24                       dw    0x24ae ; IEN
(1)   17/     758 : 05                          db    0x05
(1)   18/     759 : 61 0E                       dw    0x0e61 ; CSA
(1)   19/     75B : 06                          db    0x06
(1)   20/     75C : 33 0C                       dw    0x0c33 ; CAS
(1)   21/     75E : 07                          db    0x07
(1)   22/     75F : F0 39                       dw    0x39f0 ; NOP
(1)   23/     761 : 08                          db    0x08
(1)   24/     762 : 2F 4D                       dw    0x4d2f ; SIO
(1)   25/     764 : 19                          db    0x19
(1)   26/     765 : 72 02                       dw    0x0272 ; SR
(1)   27/     767 : 1C                          db    0x1c
(1)   28/     768 : 4C 4E                       dw    0x4e4c ; SRL
(1)   29/     76A : 1D                          db    0x1d
(1)   30/     76B : 52 02                       dw    0x0252 ; RR
(1)   31/     76D : 1E                          db    0x1e
(1)   32/     76E : 4C 4A                       dw    0x4a4c ; RRL
(1)   33/     770 : 1F                          db    0x1f
(1)   34/     771 : 0D 00                       dw    0x000d ; M
(1)   35/     773 : 20                          db    0x20
(1)   36/     774 : 01 00                       dw    0x0001 ; A
(1)   37/     776 : 21                          db    0x21
(1)   38/     777 : 07 00                       dw    0x0007 ; G
(1)   39/     779 : 22                          db    0x22
(1)   40/     77A : B4 42                       dw    0x42b4 ; PUT
(1)   41/     77C : 23                          db    0x23
(1)   42/     77D : B4 1C                       dw    0x1cb4 ; GET
(1)   43/     77F : 24                          db    0x24
(1)   44/     780 : 03 00                       dw    0x0003 ; C
(1)   45/     782 : 25                          db    0x25
(1)   46/     783 : 02 00                       dw    0x0002 ; B
(1)   47/     785 : 26                          db    0x26
(1)   48/     786 : 0C 00                       dw    0x000c ; L
(1)   49/     788 : 27                          db    0x27
(1)   50/     789 : 04 00                       dw    0x0004 ; D
(1)   51/     78B : 28                          db    0x28
(1)   52/     78C : 0C 62                       dw    0x620c ; XPL
(1)   53/     78E : 30                          db    0x30
(1)   54/     78F : 08 62                       dw    0x6208 ; XPH
(1)   55/     791 : 34                          db    0x34
(1)   56/     792 : 03 62                       dw    0x6203 ; XPC
(1)   57/     794 : 3C                          db    0x3c
(1)   58/     795 : 85 30                       dw    0x3085 ; LDE
(1)   59/     797 : 40                          db    0x40
(1)   60/     798 : C5 05                       dw    0x05c5 ; ANE
(1)   61/     79A : 50                          db    0x50
(1)   62/     79B : 45 3E                       dw    0x3e45 ; ORE
(1)   63/     79D : 58                          db    0x58
(1)   64/     79E : 45 62                       dw    0x6245 ; XRE
(1)   65/     7A0 : 60                          db    0x60
(1)   66/     7A1 : 25 10                       dw    0x1025 ; DAE
 AS V1.42 Beta [Bld 102] - source file monitor.asm(commands.inc) - page 29 - 12/2/2015 15:41:12


(1)   67/     7A3 : 68                          db    0x68
(1)   68/     7A4 : 85 04                       dw    0x0485 ; ADE
(1)   69/     7A6 : 70                          db    0x70
(1)   70/     7A7 : 25 0C                       dw    0x0c25 ; CAE
(1)   71/     7A9 : 78                          db    0x78
(1)   72/     7AA : 99 11                       dw    0x1199 ; DLY
(1)   73/     7AC : 8F                          db    0x8f
(1)   74/     7AD : B0 29                       dw    0x29b0 ; JMP
(1)   75/     7AF : 90                          db    0x90
(1)   76/     7B0 : 50 01                       dw    0x0150 ; JP
(1)   77/     7B2 : 94                          db    0x94
(1)   78/     7B3 : 5A 01                       dw    0x015a ; JZ
(1)   79/     7B5 : 98                          db    0x98
(1)   80/     7B6 : DA 29                       dw    0x29da ; JNZ
(1)   81/     7B8 : 9C                          db    0x9c
(1)   82/     7B9 : 84 25                       dw    0x2584 ; ILD
(1)   83/     7BB : A8                          db    0xa8
(1)   84/     7BC : 84 11                       dw    0x1184 ; DLD
(1)   85/     7BE : B8                          db    0xb8
(1)   86/     7BF : 84 01                       dw    0x0184 ; LD
(1)   87/     7C1 : C0                          db    0xc0
(1)   88/     7C2 : 89 30                       dw    0x3089 ; LDI
(1)   89/     7C4 : C4                          db    0xc4
(1)   90/     7C5 : 74 02                       dw    0x0274 ; ST
(1)   91/     7C7 : C8                          db    0xc8
(1)   92/     7C8 : C4 05                       dw    0x05c4 ; AND
(1)   93/     7CA : D0                          db    0xd0
(1)   94/     7CB : C9 05                       dw    0x05c9 ; ANI
(1)   95/     7CD : D4                          db    0xd4
(1)   96/     7CE : F2 01                       dw    0x01f2 ; OR
(1)   97/     7D0 : D8                          db    0xd8
(1)   98/     7D1 : 49 3E                       dw    0x3e49 ; ORI
(1)   99/     7D3 : DC                          db    0xdc
(1)  100/     7D4 : F2 61                       dw    0x61f2 ; XOR
(1)  101/     7D6 : E0                          db    0xe0
(1)  102/     7D7 : 49 62                       dw    0x6249 ; XRI
(1)  103/     7D9 : E4                          db    0xe4
(1)  104/     7DA : 24 10                       dw    0x1024 ; DAD
(1)  105/     7DC : E8                          db    0xe8
(1)  106/     7DD : 29 10                       dw    0x1029 ; DAI
(1)  107/     7DF : EC                          db    0xec
(1)  108/     7E0 : 84 04                       dw    0x0484 ; ADD
(1)  109/     7E2 : F0                          db    0xf0
(1)  110/     7E3 : 89 04                       dw    0x0489 ; ADI
(1)  111/     7E5 : F4                          db    0xf4
(1)  112/     7E6 : 24 0C                       dw    0x0c24 ; CAD
(1)  113/     7E8 : F8                          db    0xf8
(1)  114/     7E9 : 29 0C                       dw    0x0c29 ; CAI
(1)  115/     7EB : FC                          db    0xfc
(1)  116/     7EC :                     __CommandListEnd:
(1)  117/     7EC : 00 00                       dw    0x0000 ; End Marker	
(1)  118/     7EE :                     
(1)  119/     7EE :                     __CommandTable:
(1)  120/     7EE : 86 04                       dw    MemoryDump_Command
(1)  121/     7F0 : CF 03                       dw    Address_Command
(1)  122/     7F2 : E2 03                       dw    Go_Command
(1)  123/     7F4 : EF 03                       dw    PutTape_Command
(1)  124/     7F6 : 40 04                       dw    LoadTape_Command
(1)  125/     7F8 : 1B 02                       dw    ClearScreen_Command
(1)  126/     7FA : B0 04                       dw    EnterBytes_Command
 AS V1.42 Beta [Bld 102] - source file monitor.asm(commands.inc) - page 30 - 12/2/2015 15:41:12


(1)  127/     7FC : 68 04                       dw    Label_Command
(1)  128/     7FE : D2 04                       dw    Disassemble_Command
(1)  129/     800 :                     
    1136/     800 :                     																; the same page.
    1137/     800 :                     
    1138/     800 :                     ; ****************************************************************************************************************
    1139/     800 :                     ;
    1140/     800 :                     ;													Tape Format. 
    1141/     800 :                     ;
    1142/     800 :                     ; ****************************************************************************************************************
    1143/     800 :                     ;
    1144/     800 :                     ;		1 x start bit 		'1' value is held for period of time.
    1145/     800 :                     ;		8 x data bits  		'0 or 1' value is held for a period of time.
    1146/     800 :                     ;		1 x continuation	'0' if another bit follows, '1' if end.
    1147/     800 :                     ;		at least 2 bit times between bytes.
    1148/     800 :                     ;
    1149/     800 :                     ;		Use DLY 4 with A = 0 (DLY 6 to skip half-start)
    1150/     800 :                     ; 		= 13 + 2 * 0 + 514 * 4 microcycles
    1151/     800 :                     ;		= 2,069 microcycles
    1152/     800 :                     ;	
    1153/     800 :                     ;		which is about 240 bits per second.
    1154/     800 :                     ;
    1155/     800 :                     ; ****************************************************************************************************************
    1156/     800 :                     ;
    1157/     800 :                     ;												Monitor Commands
    1158/     800 :                     ;
    1159/     800 :                     ; ****************************************************************************************************************
    1160/     800 :                     ;
    1161/     800 :                     ;		A [aaaa] 			Set current address to aaaa
    1162/     800 :                     ;		B [cc] [dd] [ee]..	Fill memory from current address
    1163/     800 :                     ; 		C 					Clear screen
    1164/     800 :                     ;		D [aaaa] 			Disassemble from aaaa
    1165/     800 :                     ;		G aaaa 				Run from address - address must be given - return with XPPC P3
    1166/     800 :                     ; 		L n 				Set label n to the current address (up to 32 labels 00-1F)
    1167/     800 :                     ; 		M [aaaa] 			Memory dump from current address/aaaa (6 lines, 4 bytes per line)
    1168/     800 :                     ; 		GET [aaaa] 			Load tape to current address/aaa
    1169/     800 :                     ;		PUT [nnnn]			Write nnnn bytes from current address onwards to tape.
    1170/     800 :                     ;
    1171/     800 :                     ;		Command Line Assembler
    1172/     800 :                     ;
    1173/     800 :                     ;		Standard SC/MP mnemonics, except for XPAH, XPAL, XPPC, HALT and DINT which are XPH XPL XPC HLT DIN
    1174/     800 :                     ;		respectively (4 character mnemonics not supported)
    1175/     800 :                     ;
    1176/     800 :                     ;		Address modes are written as such:
    1177/     800 :                     ;
    1178/     800 :                     ;		Direct:			LD 	address 					(offset auto calculated, also for jump)
    1179/     800 :                     ;		Indexed:		LD  P1 7 						(normally ld 7(p1))
    1180/     800 :                     ;		Immediate:		DLY 42 					
    1181/     800 :                     ;		AutoIndexed:	LD @P1 4 						(normally ld @4(p1))
    1182/     800 :                     ;
    1183/     800 :                     ;		Labels are accessed via the pling, so to jump to label 4 rather than address 4 you write
    1184/     800 :                     ;
    1185/     800 :                     ;		JMP 4!
    1186/     800 :                     ;
    1187/     800 :                     ;		Documentation of the Mathematics functions are in the included file maths.asm
    1188/     800 :                     ;
    1189/     800 :                     ; ****************************************************************************************************************
    1190/     800 :                     
 AS V1.42 Beta [Bld 102] - source file monitor.asm - page 31 - 12/2/2015 15:41:12


  symbol table (* = unused):
  ------------------------

 ADDRESS_COMMAND :              3CF C |  AHI [SCMPMULTIPLY] :             3 - |
 ALO [SCMPMULTIPLY] :             2 - | *ARCHITECTURE :  i386-unknown-win32 - |
 BHI [SCMPMULTIPLY] :             1 - | *BIGENDIAN :                      0 - |
 BITHI [SCMPDIVIDE] :                                      FFFFFFFFFFFFFFFF - |
 BITLO [SCMPDIVIDE] :                                      FFFFFFFFFFFFFFFE - |
 BLO [SCMPMULTIPLY] :             0 - |  BOOTMONITOR :                  201 C |
*BRANCHEXT :                      0 - | *CASESENSITIVE :                  0 - |
 CLEARSCREENLOOP :              220 C |  CLEARSCREEN_COMMAND :          21B C |
 CODESTART :                    C30 - |  COMMANDMAINLOOP :              27E C |
*CONSTPI :        3.141592653589793 - |  CURRENT :                      C19 - |
 CURSOR :                       C18 - | *DATE :                   12/2/2015 - |
 DENOMINATORHI [SCMPDIVIDE] :     1 - |  DENOMINATORLO [SCMPDIVIDE] :     0 - |
 DIGITCOUNT [SCMPTOINTEGER] :                              FFFFFFFFFFFFFFFF - |
 DISASSEMBLE_COMMAND :          4D2 C |  ENTERBYTES_COMMAND :           4B0 C |
 ETEMP [SCMPDIVIDE] :                                      FFFFFFFFFFFFFFF8 - |
 EXTRACT5BIT :                  2E9 C | *FALSE :                          0 - |
 FINDTOPMEMORY :                213 C | *FULLPMMU :                       1 - |
*GETCURRENTADDRESS :            712 C |  GETPARAMETER :                 672 C |
 GOBOOT :                         5 C |  GO_COMMAND :                   3E2 C |
*HAS64 :                          1 - | *HASDSP :                         0 - |
*HASFPU :                         0 - | *HASPMMU :                        0 - |
*INEXTMODE :                      0 - | *INLWORDMODE :                    0 - |
*INMAXMODE :                      0 - | *INSRCMODE :                      0 - |
*INSUPMODE :                      0 - |  ISINIT :                       C1B - |
 KBDBUFFER :                    C20 - |  KBDBUFFERLN :                   10 - |
 KEYBOARDLOOP :                 293 C |  LABELCOUNT :                    18 - |
 LABELS :                       C00 - |  LABEL_COMMAND :                468 C |
*LISTON :                         1 - |  LOADTAPE_COMMAND :             440 C |
*MACEXP :                         1 - |  MATHS :                         43 C |
 MATH_ADD :                      65 C |  MATH_DIVIDE :                  135 C |
 MATH_DIVIDE2 :                  CD C |  MATH_DIVIDEBYZERO :            132 C |
*MATH_ERROR :                    61 C |  MATH_EXIT :                     62 C |
 MATH_EXIT1 :                    CB C |  MATH_EXIT3 :                   130 C |
 MATH_MULTIPLY :                 87 C |  MATH_RANDOM :                    C C |
 MATH_SUBTRACT :                 75 C |  MATH_TOINTEGER :                CF C |
 MEMORYDUMP_COMMAND :           486 C |  MESSAGE :                      25F C |
 MESSAGELOOP :                  258 C |  MODIFIER :                     C1D - |
*MOMCPU :                         C - | *MOMCPUNAME :                 SC/MP - |
*NESTMAX :                      100 - |  NUMERATORHI [SCMPDIVIDE] :       3 - |
 NUMERATORLO [SCMPDIVIDE] :       2 - | *PACKING :                        0 - |
*PADDING :                        1 - |  PARPOSN :                      C1C - |
 PRINTADDRESSDATA :             63F C |  PRINTCHARACTER :               5D2 C |
 PRINTHEXBYTE :                 59F C |  PUTTAPE_COMMAND :              3EF C |
 QUOTIENTHI [SCMPDIVIDE] :                                 FFFFFFFFFFFFFFFD - |
 QUOTIENTLO [SCMPDIVIDE] :                                 FFFFFFFFFFFFFFFC - |
 RANDOM :                       C1E - | *RELAXED :                        0 - |
 REMAINDERHI [SCMPDIVIDE] :                                FFFFFFFFFFFFFFFB - |
 REMAINDERLO [SCMPDIVIDE] :                                FFFFFFFFFFFFFFFA - |
 RESULTHI [SCMPMULTIPLY] :                                 FFFFFFFFFFFFFFFF - |
 RESULTHI [SCMPTOINTEGER] :                                FFFFFFFFFFFFFFFE - |
 RESULTLO [SCMPMULTIPLY] :                                 FFFFFFFFFFFFFFFE - |
 RESULTLO [SCMPTOINTEGER] :                                FFFFFFFFFFFFFFFD - |
 SHIFTCOUNT [SCMPTOINTEGER] :                              FFFFFFFFFFFFFFFC - |
 SIGNCOUNT [SCMPDIVIDE] :                                  FFFFFFFFFFFFFFF9 - |
 TAPEDELAY :                      4 - |
 TEMPHI [SCMPTOINTEGER] :                                  FFFFFFFFFFFFFFFB - |
 TEMPHI [SCMPDIVIDE] :                                     FFFFFFFFFFFFFFF7 - |
 AS V1.42 Beta [Bld 102] - source file monitor.asm - page 32 - 12/2/2015 15:41:12


 TEMPLO [SCMPTOINTEGER] :                                  FFFFFFFFFFFFFFFA - |
*TIME :                    15:41:12 - |  TOINT_END [SCMPTOINTEGER] :    122 C |
 TOINT_LOOP [SCMPTOINTEGER] :    D7 C |  TOINT_NOADD [SCMPTOINTEGER] :  10E C |
 TOINT_SHIFT [SCMPTOINTEGER] :   F0 C | *TRUE :                           1 - |
*UPDATECURRENTADDRESS :         702 C |  VARBASE :                      C18 - |
*VERSION :                     142F - |  _KBDWAITKEY :                  29C C |
 _KBDWAITRELEASE :              296 C |  _PADLOOP :                     65F C |
 _PADPRINT :                    66C C |  _PUTTAPEBIT :                  41F C |
 _PUTTAPEBYTE :                 40A C |  _PUTTAPELEADER :               404 C |
 __ASMCONTINUE :                38D C |  __ASMEXIT :                    3C5 C |
 __ASMNOPARAMETER :             385 C |  __ASSEMBLER :                  356 C |
 __BOOTMONITOR :                20B C |  __CMDMAINLOOP1 :               2DA C |
 __CMDMAINLOOP2 :               3DB C |  __CMDMAINLOOP3 :               3ED C |
 __CMDMAINLOOP4 :               43C C |  __CMDMAINLOOP5 :               466 C |
 __CMDMAINLOOP6 :               4AE C |  __CMDMAINLOOP7 :               51A C |
 __CMDPARAMETERFAIL :           3D3 C |  __CMDPARAMETERFAIL1 :          43E C |
 __COMMANDERROR :               34C C |  __COMMANDLIST :                747 C |
 __COMMANDLISTEND :             7EC C |  __COMMANDTABLE :               7EE C |
 __DASSFINDOPCODE :             501 C |  __DASSFOUNDOPCODE :            51C C |
 __DASSLOOP :                   4D8 C |  __DASSLOOP2 :                  518 C |
 __DASSNEXT :                   576 C |  __DASSNEXTOPCODE :             514 C |
 __DASSNOOPERAND :              4F7 C |  __DASSNOTAUTOINDEXED :         593 C |
 __DASSNOTIMMEDIATE :           528 C |  __DASSPRINTMNEMONIC :          53D C |
 __DASSPRINTMODIFIER :          587 C |  __DASSPRINTOPERAND :           568 C |
 __DASSSHIFTENCODE :            54D C |  __DASSSKIPSPACE :              549 C |
 __DCLOOP :                     48C C |
 __DIVIDECOMPLETE [SCMPDIVIDE] : 1D4 C |
 __DIVIDECONTINUE [SCMPDIVIDE] : 1A7 C |
 __DIVIDEEXIT [SCMPDIVIDE] :    1C1 C |  __DIVIDELOOP [SCMPDIVIDE] :    179 C |
 __DIVIDENOINCREMAINDER [SCMPDIVIDE] :                                  196 C |
 __DIVIDENOTSIGNED [SCMPDIVIDE] :                                       16F C |
 __DIVIDEREMAINDERGREATER [SCMPDIVIDE] :                                1EC C |
 __DIVIDEUNSIGNLOOP [SCMPDIVIDE] :                                      157 C |
 __EX5SHIFT :                   2F4 C |  __EXTRACTEND :                 30A C |
 __FINDCOMMANDLOOP :            315 C |  __GETTAPEBITS :                456 C |
 __GETTAPEWAIT :                446 C |  __GPAADJUSTMODIFIER :          6EF C |
 __GPAATMODIFIER :              6ED C |  __GPAEXIT :                    701 C |
 __GPAEXITFAIL :                700 C |  __GPAFOUNDHEX :                6A8 C |
 __GPANEXTCHARACTER :           693 C |  __GPAPOINTERMODIFIER :         6DF C |
 __GPASHIFT :                   6B2 C |  __GPASKIP :                    681 C |
 __KBDBACKSPACE :               2CE C |  __KBDEXIT :                    2DC C |
 __KBDNOTLOWER :                2C2 C |  __MARANDOMNOXOR :               32 C |
 __MATH_EXIT2 [SCMPDIVIDE] :    177 C |  __MULTIPLYEXIT [SCMPMULTIPLY] : C0 C |
 __MULTIPLYLOOP [SCMPMULTIPLY] : 8D C |
 __MULTIPLYNOADD [SCMPMULTIPLY] : A6 C |
 __PCBACKSPACE :                627 C |  __PCBLANKNEWLINE :             603 C |
 __PCBLANKNEWLINELOOP :         607 C |  __PCEXIT :                     60F C |
 __PCNEWLINE :                  633 C |  __PHBNOSPACE :                 5B1 C |
 __UCAEXIT :                    711 C |

    184 symbols
     31 unused symbols

 AS V1.42 Beta [Bld 102] - source file monitor.asm - page 33 - 12/2/2015 15:41:12


  defined macros:
  ---------------

SHIFTLEFT                             | SHIFTRIGHT                           

      2 macros

 AS V1.42 Beta [Bld 102] - source file monitor.asm - page 34 - 12/2/2015 15:41:12


  codepages:
  ----------

STANDARD (0 changed characters)


0.01 seconds assembly time

   1752 lines source file
   1794 lines incl. macro expansions
      2 passes
      0 errors
      0 warnings
